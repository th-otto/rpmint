#!/bin/sh

#
# Script to generate cygwin *.hint files from rpm packages.
# This only creates the hints and archives,
# after all packages have been added,
# run mksetupini.sh to generate the */setup.ini
#

me="$0"
scriptdir=${0%/*}

. ${scriptdir}/cygfuncs.sh
here=`pwd`

pkgname="$1"
test "${pkgname}" == "" && {
	echo "missing package name" >&2
	exit 1
}

result=0

if test "${pkgname}" = "--all"; then
	pkgnames=`php ../rpm/SPECS/listpkgs.php --names`
else
	pkgnames="$pkgname";
fi
for pkgname in $pkgnames; do
	cd "$here"

	specname=`echo $pkgname | tr '[[:upper:]]' '[[:lower:]]'`
	#
	# Do not auto-generate hint file for gcc & binutils,
	# these have been manually created
	#
	case $pkgname in
		gcc* | binutils* | mintbin*) continue; ;;
	esac

	specfile="${topdir}/SPECS/${specname}.spec"
	if ! test -f "$specfile"; then
		$ECHO_E "package ${red}${pkgname}${coff} not found" >&2
		continue
	fi
	
	fullname=`sed -n 's/Name[ \t]*:[ \t]*\(.*\)/\1/p' "$specfile" | head -1 | sed -e "s/%{pkgname}/${pkgname}/" | sed -e "s/%{crossmint}/cross-mint-/"`
	echo "pkgname: ${fullname}"
	version=`sed -n 's/^Version[ \t]*:[ \t]*\(.*\)/\1/p' "$specfile" | head -1`
	release=`sed -n 's/^[Rr]elease[ \t]*:[ \t]*\(.*\)/\1/p' "$specfile" | head -1`
	arch=
	case $pkgname in
		bash) version=4.4.23
		;;
	esac
	if test "$arch" = ""; then
		rpmfile="$RPMS/noarch/${fullname}-${version}-${release}.noarch.rpm"
		if test -f "$rpmfile"; then
			arch="noarch"
		fi
	fi
	if test "$arch" = ""; then
		rpmfile="$RPMS/x86_64/${fullname}-${version}-${release}.x86_64.rpm"
		if test -f "$rpmfile"; then
			arch="x86_64"
		fi
	fi
	if test "$arch" = ""; then
		echo "$pkgname: no rpmfile found" >&2
		result=1
		continue
	fi
	#rpm -q --info "$rpmfile"
	
	pkgdir="$arch/release/${fullname}"
	mkdir -p "${pkgdir}"
	
	maintainer=`rpm -q --queryformat '%{packager}' "$rpmfile"`
	url=`rpm -q --queryformat '%{url}' "$rpmfile"`
	summary=`rpm -q --queryformat '%{summary}' "$rpmfile"`
	description=`rpm -q --queryformat '%{description}' "$rpmfile" | sed -e 's/"/'"'"'/g'`
	requires=`rpm -q --queryformat '[%{requires}\n]' "$rpmfile" | grep -v 'rpmlib(' | grep -v 'cmake(' | grep -v 'config(' | grep -v 'mono(' | grep -v "lib.*\.so" | grep -v /bin/ | grep -v /sbin/`
	group=`rpm -q --queryformat '%{group}' "$rpmfile"`
	provides=`rpm -q --queryformat '%{provides}' "$rpmfile" | grep -v 'cmake(' | grep -v 'config(' | grep -v 'mono(' | grep -v /bin/ | grep -v /sbin/`
	
	if test "${requires}" != ""; then
		requires="requires: "`echo ${requires} | sed -e 's/ /,/g'`"
	"
	fi
	
	case $group in
	   System/Libraries) group=libs ;;
	   System*) group=system ;;
	   Development*) group=devel ;;
	   System/Shell) group=shells ;;
	   *Archiving*) group=archive ;;
	   *) group=Libs ;;
	esac
	
	if test "${group}" != ""; then
		group="category: ${group}
"
	fi
	
	if test "${provides}" != ""; then
		provides="provides: ${provides}
"
	fi
	
	
	cd "${pkgdir}"
	
	if test -f "${fullname}-${version}-${release}.hint" -a "${fullname}-${version}-${release}.hint" -nt "$rpmfile"; then
		$ECHO_E "package ${green}${pkgname}${coff} is up-to-date" >&2
		continue
	fi

	cat << EOF > "${fullname}-${version}-${release}.hint"
sdesc: "${summary}"
ldesc: "${description}"
${requires}${group}${provides}
EOF

	cat << EOF > "${fullname}-${version}-${release}-src.hint"
sdesc: "${summary}"
ldesc: "${description}"
homepage: ${url}
${group}
EOF
	
	rm -rf usr etc
	
	rpm2cpio "$rpmfile" | cpio --quiet -id
	files="usr"
	if test -d etc; then files+=" etc"; fi
	
	tar cfJ ${fullname}-${version}-${release}.tar.xz $files
	# FIXME: generate proper source package
	case $pkgname in
		gemma) srcname=gemma-git ;;
		freetype2) srcname=freetype-$version ;;
		lua53) srcname=lua-$version ;;
		jpeg) srcname=jpegsrc.v$version ;;
		mksh) srcname=$pkgname-R$version ;;
		libbeecrypt) srcname=beecrypt-$version ;;
		zip) srcname=zip30 ;;
		unzip) srcname=unzip60 ;;
		bash) srcname=$pkgname-${version%.*} ;;
		*) srcname=$pkgname-$version ;;
	esac
	found=false
	for ext in zst xz lz lzma bz2 gz; do
		if test -f $HOME/packages/$srcname.tar.${ext}; then
			ln -sf $HOME/packages/$srcname.tar.${ext} ${fullname}-${version}-${release}-src.tar.${ext}
			found=true
			break
		fi
	done
	if ! $found; then
		for ext in tgz; do
			if test -f $HOME/packages/$srcname.${ext}; then
				ln -sf $HOME/packages/$srcname.${ext} ${fullname}-${version}-${release}-src.tar.gz
				found=true
				break
			fi
		done
	fi
	if ! $found; then
		echo "src archive for $pkgname-$version not found" >&2
		rm -f ${fullname}-${version}-${release}.hint
		result=1
	fi
	rm -rf usr etc

	cd "$here"
done

exit $result
