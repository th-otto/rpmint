diff --git a/CONFIGVARS b/CONFIGVARS
new file mode 100644
index 0000000..64816d6
--- /dev/null
+++ b/CONFIGVARS
@@ -0,0 +1,50 @@
+#
+# target and host compiler
+# 
+# Define this to "m68k-atari-mint" if you cross compile.
+ifneq ($(CROSS_TOOL),)
+ CROSSPREFIX=$(CROSS_TOOL)-
+ CROSS := yes
+else
+ifeq ($(CROSS),)
+EVAL_CROSS := case `uname -s` in *MiNT*) echo no;; *) echo yes; esac
+CROSS := $(shell $(EVAL_CROSS))
+endif
+ifeq ($(CROSS),yes)
+ CROSS_TOOL=m68k-atari-mint
+ CROSSPREFIX=$(CROSS_TOOL)-
+else
+ CROSSPREFIX=
+endif
+endif
+
+WITH_SHORT_LIBS = yes
+
+#
+# build alternate libraries for processor variants
+#
+WITH_020_LIB = yes
+WITH_V4E_LIB = yes
+
+ifeq ($(CROSS),yes)
+PREFIX=$(shell $(CROSSPREFIX)gcc -print-sysroot)/usr
+ifeq ($(PREFIX),)
+  PREFIX=/usr/$(CROSS_TOOL)
+endif
+else
+PREFIX=/usr
+endif
+
+
+CC = $(CROSSPREFIX)gcc
+AS = $(CC)
+AR = $(CROSSPREFIX)ar
+RANLIB = $(CROSSPREFIX)ranlib
+STRIP = $(CROSSPREFIX)strip
+FLAGS = $(CROSSPREFIX)flags
+
+CFLAGS = -O2 -fomit-frame-pointer -DIEEE -DNO_DBUG -I.
+
+CP    = cp
+RM    = rm -f
+MKDIR = mkdir
diff --git a/Makefile b/Makefile
new file mode 100644
index 0000000..8f0c57a
--- /dev/null
+++ b/Makefile
@@ -0,0 +1,7 @@
+SUBDIRS = pmlsrc
+
+#disabled for now because of missing complex functions
+#SUBDIRS += pmltests
+
+all clean distclean install uninstall:
+	for i in $(SUBDIRS); do $(MAKE) -C $$i $@ || exit 1; done
diff --git a/RULES b/RULES
new file mode 100644
index 0000000..9b3c27c
--- /dev/null
+++ b/RULES
@@ -0,0 +1,82 @@
+AM_DEFAULT_VERBOSITY = 0
+
+ifeq ($(TERM),xterm)
+am__v_color_cc=\033[27;32m
+am__v_color_ld=\033[27;34m
+am__v_color_rc=\033[27;36m
+am__v_color_off=\033[m
+endif
+
+ifeq ($(ECHO_E),)
+ECHO_E=echo -e
+endif
+
+am__v_CC_0     = @$(ECHO_E) "  $(am__v_color_cc)CC$(am__v_color_off)      " $@;
+am__v_CC_1     = 
+am__v_CC_      = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
+AM_V_CC        = $(am__v_CC_$(V))
+
+am__v_CXX_0    = @$(ECHO_E) "  $(am__v_color_cc)CXX$(am__v_color_off)     " $@;
+am__v_CXX_1    = 
+am__v_CXX_     = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))
+AM_V_CXX       = $(am__v_CXX_$(V))
+
+am__v_AS_0     = @$(ECHO_E) "  $(am__v_color_cc)AS$(am__v_color_off)      " $@;
+am__v_AS_1     = 
+am__v_AS_      = $(am__v_AS_$(AM_DEFAULT_VERBOSITY))
+AM_V_AS        = $(am__v_AS_$(V))
+
+am__v_CPPAS_0  = @$(ECHO_E) "  $(am__v_color_cc)CPPAS$(am__v_color_off)   " $@;
+am__v_CPPAS_1  = 
+am__v_CPPAS_   = $(am__v_CPPAS_$(AM_DEFAULT_VERBOSITY))
+AM_V_CPPAS     = $(am__v_CPPAS_$(V))
+
+am__v_CCLD_0   = @$(ECHO_E) "  $(am__v_color_ld)CCLD$(am__v_color_off)    " $@;
+am__v_CCLD_1   = 
+am__v_CCLD_    = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
+AM_V_CCLD      = $(am__v_CCLD_$(V))
+
+am__v_CXXLD_0  = @$(ECHO_E) "  $(am__v_color_ld)CXXLD$(am__v_color_off)   " $@;
+am__v_CXXLD_1  = 
+am__v_CXXLD_   = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))
+AM_V_CXXLD     = $(am__v_CXXLD_$(V))
+
+am__v_AR_0     = @$(ECHO_E) "  $(am__v_color_ld)AR$(am__v_color_off)      " $@;
+am__v_AR_1     = 
+am__v_AR_      = $(am__v_AR_$(AM_DEFAULT_VERBOSITY))
+AM_V_AR        = $(am__v_AR_$(V))
+
+am__v_RANLIB_0 = @$(ECHO_E) "  $(am__v_color_ld)RANLIB$(am__v_color_off)  " $@;
+am__v_RANLIB_1 = 
+am__v_RANLIB_  = $(am__v_RANLIB_$(AM_DEFAULT_VERBOSITY))
+AM_V_RANLIB    = $(am__v_RANLIB_$(V))
+
+am__v_STRIP_0  = @$(ECHO_E) "  $(am__v_color_ld)STRIP$(am__v_color_off)   " $@;
+am__v_STRIP_1  = 
+am__v_STRIP_   = $(am__v_STRIP_$(AM_DEFAULT_VERBOSITY))
+AM_V_STRIP     = $(am__v_STRIP_$(V))
+
+am__v_GEN_0    = @echo "  GEN     " $@;
+am__v_GEN_1    = @echo generating $@;
+AM_V_GEN       = $(am__v_GEN_$(V))
+am__v_GEN_     = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
+
+am__v_MSGFMT_0 = @echo "  MSGFMT  "
+am__v_MSGFMT_1 = @echo generating
+AM_V_MSGFMT    = $(am__v_MSGFMT_$(V))
+am__v_MSGFMT_  = $(am__v_MSGFMT_$(AM_DEFAULT_VERBOSITY))
+
+am__v_MAN_0    = @echo "  MAN   "
+am__v_MAN_1    = @echo formatting
+AM_V_MAN       = $(am__v_MAN_$(V))
+am__v_MAN_     = $(am__v_MAN_$(AM_DEFAULT_VERBOSITY))
+
+AM_V_at        = $(am__v_at_$(V))
+am__v_at_0     = @
+am__v_at_1     =
+am__v_at_      = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
+
+.c.o:
+	$(AM_V_CC)$(CC) $(CFLAGS) -c -o $@ $<
+.S.o:
+	$(AM_V_CPPAS)$(CC) $(CFLAGS) -c -o $@ $<
diff --git a/pmlsrc/Makefile b/pmlsrc/Makefile
new file mode 100644
index 0000000..166bef6
--- /dev/null
+++ b/pmlsrc/Makefile
@@ -0,0 +1,99 @@
+srcdir = .
+top_srcdir = ..
+subdir = pmlsrc
+
+include $(top_srcdir)/CONFIGVARS
+include $(top_srcdir)/RULES
+
+ALL_LIBS = normal
+ifeq ($(WITH_SHORT_LIBS),yes)
+ALL_LIBS += mshort
+endif
+
+ifeq ($(WITH_020_LIB),yes)
+ALL_LIBS += m68020
+ifeq ($(WITH_SHORT_LIBS),yes)
+ALL_LIBS += m68020mshort
+endif
+endif
+
+ifeq ($(WITH_V4E_LIB),yes)
+ALL_LIBS += m5475
+ifeq ($(WITH_SHORT_LIBS),yes)
+ALL_LIBS += m5475mshort
+endif
+endif
+
+all : $(ALL_LIBS)
+
+normal:
+	$(MAKE) libpml.a TARGET=""
+
+mshort:
+	$(MAKE) libpml16.a TARGET="16"
+
+m68020:
+	$(MAKE) libpml020.a TARGET="020"
+
+m68020mshort:
+	$(MAKE) libpml02016.a TARGET="02016"
+
+m5475:
+	$(MAKE) libpmlv4e.a TARGET="v4e"
+
+m5475mshort:
+	$(MAKE) libpmlv4e16.a TARGET="v4e16"
+
+clean::
+	rm -rf .lib* objs *.a
+
+distclean:: clean
+
+libpml$(TARGET).a: objs
+	$(AM_V_at)$(RM) $@
+	$(AM_V_AR)$(AR) rc $@ \
+		$(shell for file in `cat .lib$(TARGET)/objs` ; \
+			do echo .lib$(TARGET)/$$file ; done)
+	$(AM_V_RANLIB)$(RANLIB) $@
+
+objs: .lib$(TARGET)
+	cd .lib$(TARGET); $(MAKE)
+.PHONY: objs
+
+.lib$(TARGET): Makefile.objs
+	$(AM_V_at)$(MKDIR) -p $@
+	$(AM_V_at)$(CP) Makefile.objs $@/Makefile
+
+install:
+	install -m 755 -d $(DESTDIR)$(PREFIX)/lib
+	install -m 644 libpml.a $(DESTDIR)$(PREFIX)/lib/libm.a
+ifeq ($(WITH_SHORT_LIBS),yes)
+	install -m 755 -d $(DESTDIR)$(PREFIX)/lib/mshort
+	install -m 644 libpml16.a $(DESTDIR)$(PREFIX)/lib/mshort/libm.a
+endif
+ifeq ($(WITH_020_LIB),yes)
+	install -m 755 -d $(DESTDIR)$(PREFIX)/lib/m68020-60
+	install -m 644 libpml020.a $(DESTDIR)$(PREFIX)/lib/m68020-60/libm.a
+ifeq ($(WITH_SHORT_LIBS),yes)
+	install -m 755 -d $(DESTDIR)$(PREFIX)/lib/m68020-60/mshort
+	install -m 644 libpml02016.a $(DESTDIR)$(PREFIX)/lib/m68020-60/mshort/libm.a
+endif
+endif
+ifeq ($(WITH_V4E_LIB),yes)
+	install -m 755 -d $(DESTDIR)$(PREFIX)/lib/m5475
+	install -m 644 libpmlv4e.a $(DESTDIR)$(PREFIX)/lib/m5475/libm.a
+ifeq ($(WITH_SHORT_LIBS),yes)
+	install -m 755 -d $(DESTDIR)$(PREFIX)/lib/m5475/mshort
+	install -m 644 libpmlv4e16.a $(DESTDIR)$(PREFIX)/lib/m5475/mshort/libm.a
+endif
+endif
+	install -m 755 -d $(DESTDIR)$(PREFIX)/include
+	install -m 644 math.h $(DESTDIR)$(PREFIX)/include
+
+uinstall:
+	for file in libm.a mshort/libm.a m68020-60/libm.a m68020-60/mshort/libm.a m5475/libm.a m5475/mshort/libm.a; do \
+		$(RM) $(DESTDIR)$(PREFIX)/lib/$$file; \
+	done
+	for file in math.h; do \
+		$(RM) $(DESTDIR)$(PREFIX)/include/$$file; \
+	done
diff --git a/pmlsrc/Makefile.32 b/pmlsrc/Makefile.32
deleted file mode 100644
index 981dcff..0000000
--- a/pmlsrc/Makefile.32
+++ /dev/null
@@ -1,78 +0,0 @@
-#
-#  FILE
-#
-#	Makefile    build and install the pml library (32 bit ints)
-#
-#  SYNOPSIS
-#
-#	make funcs	make version of library in local directory
-#	make install	install the library (must be root)
-#
-#  WARNING
-#
-#	The order of the modules listed in the "LEVEL<n>" macros
-#	is significant since these are the orders in which
-#	they will be loaded into the library archive.  Although
-#	some machines support randomly ordered libraries, ordering
-#	them correctly doesn't hurt...
-CROSSDIR = /dsrg/bammi/cross-minix
-CROSSLIB = $(CROSSDIR)/lib
-CROSSBIN = $(CROSSDIR)/bin
-CROSSINC = $(CROSSDIR)/include
-
-AR = /dsrg/bammi/cross-gcc/bin/car
-CC = $(CROSSBIN)/mgcc
-CFLAGS = -O2 -DIEEE -DNO_DBUG -D__GCC_HACK__ -I.
-
-LIB = $(CROSSLIB)
-
-INC = $(CROSSINC)
-
-
-LEVEL0 =	matherr.o ident.o
-
-LEVEL1 =	sign.o mod.o poly.o dabs.o sqrt.o rint.o
-
-LEVEL2 =	acos.o acosh.o asin.o asinh.o atan2.o atan.o \
-		log10.o tan.o \
-		tanh.o sinh.o cosh.o atanh.o \
-		log.o sin.o cos.o exp.o max.o min.o floor.o pow.o
-
-LEVEL3 =	casin.o cacos.o cmult.o catan.o ccosh.o clog.o \
-		crcp.o csinh.o csqrt.o ctan.o ctanh.o cexp.o \
-		ccos.o csin.o cdiv.o csubt.o cabs.o
-
-LEVEL4 =	cadd.o
-
-OBJ =		$(LEVEL4) $(LEVEL3) $(LEVEL2) $(LEVEL1) $(LEVEL0)
-
-#
-#	The default thing to make.
-#
-
-default:	libpml32.a
-
-libpml32.a:	$(OBJ)
-		rm -f libpml32.a
-		$(AR) srv libpml32.a $(OBJ)
-
-$(OBJ) :	pml.h
-
-#
-#	Stuff to do installation
-#
-
-install :	$(LIB)/libpml32.a $(INC)/pmluser.h
-
-$(LIB)/libpml32.a:	libpml32.a
-			cp libpml32.a $(LIB)/libpml32.a
-
-$(INC)/pmluser.h :	pmluser.h
-			cp pmluser.h $(INC)/pmluser.h
-
-#
-#	Clean up the directory.
-#
-
-clean:
-	rm -f *.o *.BAK libpml32.a *.tmp *.bak nohup.out
diff --git a/pmlsrc/Makefile.16 b/pmlsrc/Makefile.objs
similarity index 53%
rename from pmlsrc/Makefile.16
rename to pmlsrc/Makefile.objs
index 9092fdb..102bc33 100644
--- a/pmlsrc/Makefile.16
+++ b/pmlsrc/Makefile.objs
@@ -15,19 +15,41 @@
 #	they will be loaded into the library archive.  Although
 #	some machines support randomly ordered libraries, ordering
 #	them correctly doesn't hurt...
-CROSSDIR = /dsrg/bammi/cross-minix
-CROSSLIB = $(CROSSDIR)/lib
-CROSSBIN = $(CROSSDIR)/bin
-CROSSINC = $(CROSSDIR)/include
 
-AR = /dsrg/bammi/cross-gcc/bin/car
-CC = $(CROSSBIN)/mgcc
-CFLAGS = -mshort -O2 -DIEEE -DNO_DBUG -D__GCC_HACK__ -I.
+srcdir = ..
+top_srcdir = ../..
+subdir = .lib$(TARGET)
 
-LIB = $(CROSSLIB)
+include $(top_srcdir)/CONFIGVARS
+include $(top_srcdir)/RULES
 
-INC = $(CROSSINC)
+VPATH = ..
 
+ifeq ($(TARGET),)
+CFLAGS += -m68000
+endif
+
+ifeq ($(TARGET),16)
+CFLAGS += -m68000 -mshort
+endif
+
+ifeq ($(TARGET),020)
+CFLAGS += -m68020-60
+endif
+
+ifeq ($(TARGET),02016)
+CFLAGS += -m68020-60 -mshort
+endif
+
+ifeq ($(TARGET),v4e)
+CFLAGS += -mcpu=5475
+endif
+
+ifeq ($(TARGET),v4e16)
+CFLAGS += -mcpu=5475 -mshort
+endif
+
+CFLAGS += -I$(srcdir)
 
 LEVEL0 =	matherr.o ident.o
 
@@ -40,39 +62,17 @@ LEVEL2 =	acos.o acosh.o asin.o asinh.o atan2.o atan.o \
 
 LEVEL3 =	casin.o cacos.o cmult.o catan.o ccosh.o clog.o \
 		crcp.o csinh.o csqrt.o ctan.o ctanh.o cexp.o \
-		ccos.o csin.o cdiv.o csubt.o cabs.o
+		ccos.o csin.o cdiv.o csubt.o
 
-LEVEL4 =	cadd.o
+LEVEL4 =	cadd.o cabs.o
 
-OBJ =		$(LEVEL4) $(LEVEL3) $(LEVEL2) $(LEVEL1) $(LEVEL0)
+OBJS =		$(LEVEL4) $(LEVEL2) $(LEVEL1) $(LEVEL0) # $(LEVEL3)
 
 #
 #	The default thing to make.
 #
 
-default:	libpml.a
-
-libpml.a:	$(OBJ)
-		rm -f libpml.a
-		$(AR) srv libpml.a $(OBJ)
-
-$(OBJ) :	pml.h
-
-#
-#	Stuff to do installation
-#
-
-install :	$(LIB)/libpml.a $(INC)/pmluser.h
-
-$(LIB)/libpml.a:	libpml.a
-			cp libpml.a $(LIB)/libpml.a
-
-$(INC)/pmluser.h :	pmluser.h
-			cp pmluser.h $(INC)/pmluser.h
-
-#
-#	Clean up the directory.
-#
+objs: $(OBJS)
+	$(AM_V_GEN)echo $(OBJS) > $@
 
-clean:
-	rm -f *.o *.BAK libpml.a *.tmp *.bak nohup.out
+$(OBJS) :	pml.h
diff --git a/pmlsrc/PatchLev.h b/pmlsrc/PatchLev.h
index 461dac7..3e8da5d 100644
--- a/pmlsrc/PatchLev.h
+++ b/pmlsrc/PatchLev.h
@@ -1,4 +1,4 @@
-#define	PatchLevel "23"
+#define	PatchLevel "24"
 
 /*
  *
diff --git a/pmlsrc/acos.c b/pmlsrc/acos.c
index 07b09ed..8b480d8 100644
--- a/pmlsrc/acos.c
+++ b/pmlsrc/acos.c
@@ -84,6 +84,7 @@
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
 
 
 #if !defined (__M68881__) && !defined (sfp004)		/* mjr++	*/
@@ -101,7 +102,6 @@ double x;
 	xcpt.name = funcname;
 	xcpt.arg1 = x;
 	if (!matherr (&xcpt)) {
-	    fprintf (stderr, "%s: DOMAIN error\n", funcname);
 	    errno = EDOM;
 	    xcpt.retval = HUGE_VAL;	/* for now, should ne NaN	*/
 	}
@@ -125,156 +125,132 @@ double x;
 #endif	/* !__M68881 && !sfp004	*/
 #ifdef	sfp004
 
-__asm("
-comm =	 -6
-resp =	-16
-zahl =	  0
-");	/* end asm	*/
+__asm(
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
+);	/* end asm	*/
 
-#endif	sfp004
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 
     __asm(".text; .even");
 
 #ifdef ERROR_CHECK
+    __asm(
+"| m.ritzert 14.12.1991\t\n"
+"| ritzert@dfg.dbp.de\t\n"
+"|\t\n"
+"|    /* NAN  = {7fffffff,ffffffff}		*/\t\n"
+"|    /* +Inf = {7ff00000,00000000}		*/\t\n"
+"|    /* -Inf = {fff00000,00000000}		*/\t\n"
+"|    /* MAX_D= {7fee42d1,30773b76}		*/\t\n"
+"|    /* MIN_D= {ffee42d1,30773b76}		*/\t\n"
+"\t\n"
+".even\t\n"
+"double_max:\t\n"
+"	.long	0x7fee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"double_min:\t\n"
+"	.long	0xffee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"NaN:\t\n"
+"	.long	0x7fffffff\t\n"
+"	.long	0xffffffff\t\n"
+"p_Inf:\t\n"
+"	.long	0x7ff00000\t\n"
+"	.long	0x00000000\t\n"
+"m_Inf:\t\n"
+"	.long	0xfff00000\t\n"
+"	.long	0x00000000\t\n"
+);
+#endif /* ERROR_CHECK */
 
-__asm("
-_Overflow:
-	.ascii \"OVERFLOW\\0\"
-_Domain:
-	.ascii \"DOMAIN\\0\"
-_Error_String:
-	.ascii \"acos: %s error\\n\\0\"
-.even
-");
-
-#endif ERROR_CHECK
-
-#ifdef ERROR_CHECK
-    __asm("
-| m.ritzert 14.12.1991
-| ritzert@dfg.dbp.de
-|
-|    /* NAN  = {7fffffff,ffffffff}		*/
-|    /* +Inf = {7ff00000,00000000}		*/
-|    /* -Inf = {fff00000,00000000}		*/
-|    /* MAX_D= {7fee42d1,30773b76}		*/
-|    /* MIN_D= {ffee42d1,30773b76}		*/
-
-.even
-double_max:
-	.long	0x7fee42d1
-	.long	0x30273b76
-double_min:
-	.long	0xffee42d1
-	.long	0x30273b76
-NaN:
-	.long	0x7fffffff
-	.long	0xffffffff
-p_Inf:
-	.long	0x7ff00000
-	.long	0x00000000
-m_Inf:
-	.long	0xfff00000
-	.long	0x00000000
-");
-#endif ERROR_CHECK
-
-__asm("
-.even
-.globl _acos
-_acos:
-    ");	/* end asm	*/
+__asm(
+".even\t\n"
+".globl " C_SYMBOL_NAME(acos) "\t\n"
+C_SYMBOL_NAME(acos) ":\t\n"
+    );	/* end asm	*/
 
 #endif	/* __M68881__ || sfp004	*/
 #ifdef	__M68881__
 
-    __asm("
-	facosd	a7@(4), fp0	| acos
-	fmoved	fp0,a7@-	| push result
-	moveml	a7@+,d0-d1	| return_value
-    ");	/* end asm	*/
+    __asm(
+"	facosd	%a7@(4), %fp0	| acos\t\n"
+"	fmoved	%fp0,%a7@-	| push result\t\n"
+"	moveml	%a7@+,%d0-%d1	| return_value\t\n"
+    );	/* end asm	*/
 
-#endif	__M68881__
+#endif /* __M68881__ */
 #ifdef	sfp004
-    __asm("
-	lea	0xfffa50,a0
-	movew	#0x541c,a0@(comm)	| specify function
-	cmpiw	#0x8900,a0@(resp)	| check
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-	movew	#0x7400,a0@(comm)	| result to d0
-	.long	0x0c688900, 0xfff067f8	| wait
-	movel	a0@,d0
-	movel	a0@,d1
-    ");	/* end asm	*/
+    __asm(
+"	lea	0xfffa50,%a0\t\n"
+"	movew	#0x541c,%a0@(comm)	| specify function\t\n"
+"	cmpiw	#0x8900,%a0@(resp)	| check\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"	movew	#0x7400,%a0@(comm)	| result to d0\t\n"
+"	.long	0x0c688900, 0xfff067f8	| wait\t\n"
+"	movel	%a0@,%d0\t\n"
+"	movel	%a0@,%d1\t\n"
+    );	/* end asm	*/
 
-#endif	sfp004
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 
 # ifdef ERROR_CHECK
-    __asm("
-	lea	double_max,a0	|
-	swap	d0		| exponent into lower word
-	cmpw	a0@(16),d0	| == NaN ?
-	beq	error_nan	|
-	cmpw	a0@(24),d0	| == + Infinity ?
-	beq	error_plus	|
-	cmpw	a0@(32),d0	| == - Infinity ?
-	beq	error_minus	|
-	swap	d0		| result ok,
-	rts			| restore d0
-");
+    __asm(
+"	lea	double_max,%a0	|\t\n"
+"	swap	%d0		| exponent into lower word\t\n"
+"	cmpw	%a0@(16),%d0	| == NaN ?\t\n"
+"	beq	error_nan	|\t\n"
+"	cmpw	%a0@(24),%d0	| == + Infinity ?\t\n"
+"	beq	error_plus	|\t\n"
+"	cmpw	%a0@(32),%d0	| == - Infinity ?\t\n"
+"	beq	error_minus	|\t\n"
+"	swap	%d0		| result ok,\t\n"
+"	rts			| restore %d0\t\n"
+);
 #ifndef	__MSHORT__
-__asm("
-error_minus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movel	#63,_errno	| errno = ERANGE
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movel	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movel	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
+__asm(
+"error_minus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#63," C_SYMBOL_NAME(errno) "	| errno = ERANGE\t\n"
+"	bra	error_exit	|\t\n"
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
 #else	__MSHORT__
-__asm("
-error_minus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movew	#63,_errno	| errno = ERANGE
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movew	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movew	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
+__asm(
+"error_minus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#63," C_SYMBOL_NAME(errno) "	| errno = ERANGE\t\n"
+"	bra	error_exit	|\t\n"
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
 #endif	__MSHORT__
-__asm("
-error_exit:
-	pea	_Error_String	|
-	pea	__iob+52	|
-	jbsr	_fprintf	|
-	addl	#12,a7		|
-	moveml	a7@+,d0-d1
-");
-# endif ERROR_CHECK
+__asm(
+"error_exit:\t\n"
+"	moveml	%a7@+,%d0-%d1\t\n"
+);
+# endif /* ERROR_CHECK */
 __asm("rts");
 
 #endif /* __M68881__ || sfp004	*/
diff --git a/pmlsrc/acosh.c b/pmlsrc/acosh.c
index 7819a78..91cff00 100644
--- a/pmlsrc/acosh.c
+++ b/pmlsrc/acosh.c
@@ -85,7 +85,6 @@ double x;
 	xcpt.name = funcname;
 	xcpt.arg1 = x;
 	if (!matherr (&xcpt)) {
-	    fprintf (stderr, "%s: DOMAIN error\n", funcname);
 	    errno = ERANGE;
 	    xcpt.retval = HUGE_VAL;
 	}
@@ -94,7 +93,6 @@ double x;
 	xcpt.name = funcname;
 	xcpt.arg1 = x;
 	if (!matherr (&xcpt)) {
-	    fprintf (stderr, "%s: OVERFLOW error\n", funcname);
 	    errno = ERANGE;
 	    x = SQRT_MAXDOUBLE;
 	    xcpt.retval = log (2* SQRT_MAXDOUBLE);
diff --git a/pmlsrc/asin.c b/pmlsrc/asin.c
index 95df48e..8966bb7 100644
--- a/pmlsrc/asin.c
+++ b/pmlsrc/asin.c
@@ -79,6 +79,7 @@
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
 
 #if !defined (__M68881__) && !defined (sfp004)	/* mjr++	*/
 
@@ -95,7 +96,6 @@ double x;
 	xcpt.name = funcname;
 	xcpt.arg1 = x;
 	if (!matherr (&xcpt)) {
-	    fprintf (stderr, "%s: DOMAIN error\n", funcname);
 	    errno = EDOM;
 	    xcpt.retval = HUGE_VAL;
 	}
@@ -110,159 +110,143 @@ double x;
     }
     return (xcpt.retval);
 }
-#endif !defined (__M68881__) && !defined (sfp004)	/* mjr++	*/
+#endif /* !defined (__M68881__) && !defined (sfp004) */
 #ifdef	sfp004
 
-__asm("
+__asm(
+"\t\n"
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
 
-comm =	 -6
-resp =	-16
-zahl =	  0
+);	/* end asm	*/
 
-");	/* end asm	*/
-
-#endif	sfp004
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 
     __asm(".text; .even");
 
 # ifdef ERROR_CHECK
 
-    __asm("
-
-_Overflow:
-	.ascii \"OVERFLOW\\0\"
-_Domain:
-	.ascii \"DOMAIN\\0\"
-_Error_String:
-	.ascii \"asin: %s error\\n\\0\"
-.even
-
-| pml compatible asingent
-| m.ritzert 7.12.1991
-| ritzert@dfg.dbp.de
-|
-|    /* NAN  = {7fffffff,ffffffff}		*/
-|    /* +Inf = {7ff00000,00000000}		*/
-|    /* -Inf = {fff00000,00000000}		*/
-|    /* MAX_D= {7fee42d1,30773b76}		*/
-|    /* MIN_D= {ffee42d1,30773b76}		*/
-
-.even
-double_max:
-	.long	0x7fee42d1
-	.long	0x30273b76
-double_min:
-	.long	0xffee42d1
-	.long	0x30273b76
-NaN:
-	.long	0x7fffffff
-	.long	0xffffffff
-p_Inf:
-	.long	0x7ff00000
-	.long	0x00000000
-m_Inf:
-	.long	0xfff00000
-	.long	0x00000000
-
-");	/* END ASM	*/
-# endif	ERROR_CHECK
-__asm("
-.even
-	.globl _asin
-_asin:
-
-");	/* end asm	*/
+    __asm(
+"\t\n"
+".even\t\n"
+"\t\n"
+"| pml compatible asingent\t\n"
+"| m.ritzert 7.12.1991\t\n"
+"| ritzert@dfg.dbp.de\t\n"
+"|\t\n"
+"|    /* NAN  = {7fffffff,ffffffff}		*/\t\n"
+"|    /* +Inf = {7ff00000,00000000}		*/\t\n"
+"|    /* -Inf = {fff00000,00000000}		*/\t\n"
+"|    /* MAX_D= {7fee42d1,30773b76}		*/\t\n"
+"|    /* MIN_D= {ffee42d1,30773b76}		*/\t\n"
+"\t\n"
+".even\t\n"
+"double_max:\t\n"
+"	.long	0x7fee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"double_min:\t\n"
+"	.long	0xffee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"NaN:\t\n"
+"	.long	0x7fffffff\t\n"
+"	.long	0xffffffff\t\n"
+"p_Inf:\t\n"
+"	.long	0x7ff00000\t\n"
+"	.long	0x00000000\t\n"
+"m_Inf:\t\n"
+"	.long	0xfff00000\t\n"
+"	.long	0x00000000\t\n"
+"\t\n"
+);	/* END ASM	*/
+# endif	/* ERROR_CHECK */
+__asm(
+".even\t\n"
+"	.globl " C_SYMBOL_NAME(asin) "\t\n"
+C_SYMBOL_NAME(asin) ":\t\n"
+"\t\n"
+);	/* end asm	*/
 #endif	/* __M68881__ || sfp004	*/
 #ifdef	__M68881__
 
-    __asm("
-	fasind	a7@(4), fp0	| asin
-	fmoved	fp0,a7@-	| push result
-	moveml	a7@+,d0-d1	| return_value
-    ");	/* end asm	*/
+    __asm(
+"	fasind	%a7@(4), %fp0	| asin\t\n"
+"	fmoved	%fp0,%a7@-	| push result\t\n"
+"	moveml	%a7@+,%d0-%d1	| return_value\t\n"
+    );	/* end asm	*/
 
-#endif	__M68881__
+#endif /* __M68881__ */
 #ifdef	sfp004
-    __asm("
-	lea	0xfffa50,a0
-	movew	#0x540c,a0@(comm)	| specify function
-	cmpiw	#0x8900,a0@(resp)	| check
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-	movew	#0x7400,a0@(comm)	| result to d0
-	.long	0x0c688900, 0xfff067f8	| wait
-	movel	a0@,d0
-	movel	a0@,d1
-    ");	/* end asm	*/
-
-#endif	sfp004
+    __asm(
+"	lea	0xfffa50,%a0\t\n"
+"	movew	#0x540c,%a0@(comm)	| specify function\t\n"
+"	cmpiw	#0x8900,%a0@(resp)	| check\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"	movew	#0x7400,%a0@(comm)	| result to d0\t\n"
+"	.long	0x0c688900, 0xfff067f8	| wait\t\n"
+"	movel	%a0@,%d0\t\n"
+"	movel	%a0@,%d1\t\n"
+);	/* end asm	*/
+
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 # ifdef	ERROR_CHECK
-    __asm("
-	lea	double_max,a0	|
-	swap	d0		| exponent into lower word
-	cmpw	a0@(16),d0	| == NaN ?
-	beq	error_nan	|
-	cmpw	a0@(24),d0	| == + Infinity ?
-	beq	error_plus	|
-	cmpw	a0@(32),d0	| == - Infinity ?
-	beq	error_minus	|
-	swap	d0		| result ok,
-	rts			| restore d0
-");
+    __asm(
+"	lea	double_max,%a0	|\t\n"
+"	swap	%d0		| exponent into lower word\t\n"
+"	cmpw	%a0@(16),%d0	| == NaN ?\t\n"
+"	beq	error_nan	|\t\n"
+"	cmpw	%a0@(24),%d0	| == + Infinity ?\t\n"
+"	beq	error_plus	|\t\n"
+"	cmpw	%a0@(32),%d0	| == - Infinity ?\t\n"
+"	beq	error_minus	|\t\n"
+"	swap	%d0		| result ok,\t\n"
+"	rts			| restore d0\t\n"
+);
 #ifndef	__MSHORT__
-__asm("
-error_minus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movel	#63,_errno	| errno = ERANGE
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movel	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movel	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
-#else	__MSHORT__
-__asm("
-error_minus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movew	#63,_errno	| errno = ERANGE
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movew	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movew	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
-#endif	__MSHORT__
-__asm("
-error_exit:
-	pea	_Error_String	|
-	pea	__iob+52	|
-	jbsr	_fprintf	|
-	addl	#12,a7		|
-	moveml	a7@+,d0-d1
-	rts
-    ");
-# else	ERROR_CHECK
+__asm(
+"error_minus:"
+"	swap	%d0"
+"	moveml	%d0-%d1,%a7@-"
+"	movel	#63," C_SYMBOL_NAME(errno) "	| errno = ERANGE"
+"	bra	error_exit	|"
+"error_plus:"
+"	swap	%d0"
+"	moveml	%d0-%d1,%a7@-"
+"	movel	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM"
+"	bra	error_exit	|"
+"error_nan:"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf"
+"	moveml	%d0-%d1,%a7@-"
+"	movel	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM"
+);
+#else	/* __MSHORT__ */
+__asm(
+"error_minus:"
+"	swap	%d0"
+"	moveml	%d0-%d1,%a7@-"
+"	movew	#63," C_SYMBOL_NAME(errno) "	| errno = ERANGE"
+"	bra	error_exit	|"
+"error_plus:"
+"	swap	%d0"
+"	moveml	%d0-%d1,%a7@-"
+"	movew	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM"
+"	bra	error_exit	|"
+"error_nan:"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf"
+"	moveml	%d0-%d1,%a7@-"
+"	movew	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM"
+);
+#endif	/* __MSHORT__ */
+__asm(
+"error_exit:\t\n"
+"	moveml	%a7@+,%d0-%d1\t\n"
+"	rts\t\n"
+    );
+# else	/* ERROR_CHECK */
 __asm("rts");
-# endif	ERROR_CHECK
+# endif	/* ERROR_CHECK */
 
 #endif /* __M68881__ || sfp004	*/
diff --git a/pmlsrc/asinh.c b/pmlsrc/asinh.c
index fe19072..33f52dd 100644
--- a/pmlsrc/asinh.c
+++ b/pmlsrc/asinh.c
@@ -85,7 +85,6 @@ double x;
 	xcpt.name = funcname;
 	xcpt.arg1 = x;
 	if (!matherr (&xcpt)) {
-	    fprintf (stderr, "%s: OVERFLOW error\n", funcname);
 	    errno = ERANGE;
 	    xcpt.retval = log (2 * SQRT_MAXDOUBLE);
 	}
diff --git a/pmlsrc/atan.c b/pmlsrc/atan.c
index 00fdbe6..e6cae51 100644
--- a/pmlsrc/atan.c
+++ b/pmlsrc/atan.c
@@ -150,6 +150,7 @@
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
 
 #if !defined (__M68881__) && !defined (sfp004)	/* mjr++		*/
 
@@ -198,7 +199,6 @@ double x;
 		    xcpt.type = UNDERFLOW;
 		    xcpt.name = funcname;
 		    xcpt.arg1 = x;
-		    fprintf (stderr, "%s: UNDERFLOW error\n", funcname);
 		    errno = EDOM;
 		}
 		x = 0.0;
@@ -232,124 +232,112 @@ double x;
 #endif	/* !__M68881__ || !sfp004	*/
 #ifdef	sfp004
 
-__asm("
-comm =	 -6
-resp =	-16
-zahl =	  0
-");	/* end asm	*/
+__asm(
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
+);	/* end asm	*/
 
-#endif	sfp004
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
     __asm(".text; .even");
 
 # ifdef	ERROR_CHECK
 
-    __asm("
+    __asm(
+"\t\n"
+".even\t\n"
+"\t\n"
+"\t\n"
+"| pml compatible atangent\t\n"
+"| m.ritzert 7.12.1991\t\n"
+"| ritzert@dfg.dbp.de\t\n"
+"|\t\n"
+"|    /* NAN  = {7fffffff,ffffffff}		*/\t\n"
+"|    /* +Inf = {7ff00000,00000000}		*/\t\n"
+"|    /* -Inf = {fff00000,00000000}		*/\t\n"
+"|    /* MAX_D= {7fee42d1,30773b76}		*/\t\n"
+"|    /* MIN_D= {ffee42d1,30773b76}		*/\t\n"
+"\t\n"
+".even\t\n"
+"double_max:\t\n"
+"	.long	0x7fee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"double_min:\t\n"
+"	.long	0xffee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"NaN:\t\n"
+"	.long	0x7fffffff\t\n"
+"	.long	0xffffffff\t\n"
+"p_Inf:\t\n"
+"	.long	0x7ff00000\t\n"
+"	.long	0x00000000\t\n"
+"m_Inf:\t\n"
+"	.long	0xfff00000\t\n"
+"	.long	0x00000000\t\n"
+);
+# endif	/* ERROR_CHECK */
 
-_Overflow:
-	.ascii \"OVERFLOW\\0\"
-_Domain:
-	.ascii \"DOMAIN\\0\"
-_Error_String:
-	.ascii \"atan: %s error\\n\\0\"
-.even
-
-
-| pml compatible atangent
-| m.ritzert 7.12.1991
-| ritzert@dfg.dbp.de
-|
-|    /* NAN  = {7fffffff,ffffffff}		*/
-|    /* +Inf = {7ff00000,00000000}		*/
-|    /* -Inf = {fff00000,00000000}		*/
-|    /* MAX_D= {7fee42d1,30773b76}		*/
-|    /* MIN_D= {ffee42d1,30773b76}		*/
-
-.even
-double_max:
-	.long	0x7fee42d1
-	.long	0x30273b76
-double_min:
-	.long	0xffee42d1
-	.long	0x30273b76
-NaN:
-	.long	0x7fffffff
-	.long	0xffffffff
-p_Inf:
-	.long	0x7ff00000
-	.long	0x00000000
-m_Inf:
-	.long	0xfff00000
-	.long	0x00000000
-");
-# endif	ERROR_CHECK
-
-__asm("
-.even
-	.globl _atan
-_atan:
-    ");	/* end asm	*/
+__asm(
+".even\t\n"
+"	.globl " C_SYMBOL_NAME(atan) "\t\n"
+C_SYMBOL_NAME(atan) ":\t\n"
+    );	/* end asm	*/
 
 #endif	/* __M68881__ || sfp004	*/
 #ifdef	__M68881__
 
-    __asm("
-	fatand	a7@(4), fp0	| atan
-	fmoved	fp0,a7@-	| push result
-	moveml	a7@+,d0-d1	| return_value
-    ");	/* end asm	*/
+    __asm(
+"	fatand	%a7@(4), %fp0	| atan\t\n"
+"	fmoved	%fp0,%a7@-	| push result\t\n"
+"	moveml	%a7@+,%d0-%d1	| return_value\t\n"
+    );	/* end asm	*/
 
-#endif	__M68881__
+#endif /* __M68881__ */
 #ifdef	sfp004
-    __asm("
-	lea	0xfffa50,a0
-	movew	#0x540a,a0@(comm)	| specify function
-	cmpiw	#0x8900,a0@(resp)	| check
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-	movew	#0x7400,a0@(comm)	| result to d0
-	.long	0x0c688900, 0xfff067f8	| wait
-	movel	a0@,d0
-	movel	a0@,d1
-    ");	/* end asm	*/
+    __asm(
+"	lea	0xfffa50,%a0\t\n"
+"	movew	#0x540a,%a0@(comm)	| specify function\t\n"
+"	cmpiw	#0x8900,%a0@(resp)	| check\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"	movew	#0x7400,%a0@(comm)	| result to d0\t\n"
+"	.long	0x0c688900, 0xfff067f8	| wait\t\n"
+"	movel	%a0@,%d0\t\n"
+"	movel	%a0@,%d1\t\n"
+);	/* end asm	*/
 
-#endif	sfp004
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 # ifdef	ERROR_CHECK
-    __asm("
-	lea	double_max,a0	|
-	swap	d0		| exponent into lower word
-	cmpw	a0@(16),d0	| == NaN ?
-	beq	error_nan	|
-	swap	d0		| result ok,
-	rts			| restore d0
-");
+    __asm(
+"	lea	double_max,%a0	|\t\n"
+"	swap	%d0		| exponent into lower word\t\n"
+"	cmpw	%a0@(16),%d0	| == NaN ?\t\n"
+"	beq	error_nan	|\t\n"
+"	swap	%d0		| result ok,\t\n"
+"	rts			| restore d0\t\n"
+);
 #ifndef	__MSHORT__
-__asm("
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movel	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
-#else	__MSHORT__
-__asm("
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movew	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
-#endif	__MSHORT__
-__asm("
-error_exit:
-	pea	_Error_String	|
-	pea	__iob+52	|
-	jbsr	_fprintf	|
-	addl	#12,a7		|
-	moveml	a7@+,d0-d1
-    ");
-# endif	ERROR_CHECK
+__asm(
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
+#else	/* __MSHORT__ */
+__asm(
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
+#endif	/* __MSHORT__ */
+__asm(
+"error_exit:\t\n"
+"	moveml	%a7@+,%d0-%d1\t\n"
+    );
+# endif	/* ERROR_CHECK */
 
 __asm("rts");
 
diff --git a/pmlsrc/atan2.c b/pmlsrc/atan2.c
index 47100cb..90db222 100644
--- a/pmlsrc/atan2.c
+++ b/pmlsrc/atan2.c
@@ -87,11 +87,12 @@
  *
  */
 
-#if !defined (__M68881__) && !defined (sfp004)
-
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
+
+#if !defined (__M68881__) && !defined (sfp004)
 
 static char funcname[] = "atan2";
 
@@ -111,7 +112,6 @@ double x;
 	    xcpt.arg1 = x;
 	    xcpt.retval = result;
 	    if (!matherr(&xcpt)) {
-		fprintf (stderr, "%s: DOMAIN error\n", funcname);
 		errno = EDOM;
 	    }
 	} else {
@@ -126,155 +126,155 @@ double x;
     return (result);
 }
 
-#endif !defined (__M68881__) && !defined (sfp004)
+#endif /* !defined (__M68881__) && !defined (sfp004) */
 #ifdef	__M68881__
-__asm("
-.text
-.even
-_funcname:
-	.ascii	\"atan2\\0\"
-	.even
-
-.globl	_atan2
-_atan2:
-| denormalized numbers are treated as 0
-	tstl	sp@(12)
-	beq	5f		| x == 0!
-	blt	1f		| x < 0!
-				| x > 0: return atan(y/x)
-
-	fmoved	sp@(4),fp0	| get y
-	fdivd	sp@(12),fp0	| y/x	
-	fatanx	fp0,fp0		| atan(y/x)
-	bra 3f			| return
-1:				| x < 0
-
-	fmovecr	#0,fp1		| get pi
-	fmoved	sp@(4),fp0	| get y
-	fdivd	sp@(12),fp0	| y/x
-	fatanx	fp0,fp0		| atan(y/x)
-	btst	#31,sp@(4)	| sign(y)
-	beq	2f		| positive!
-
-	fnegx	fp1,fp1		| transfer sign
-2:	faddx	fp1,fp0		| sign(y)*pi + atan(y/x)
-|	bra 3f			| return
-3:
-	fmoved	fp0,sp@-	| return result
-	moveml	sp@+,d0/d1
-4:	
-	rts			| sigh.
-5:				| x == 0
-	movel	#1073291771,d0	| pi/2
-	movel	#1413754136,d1	|
-
-	tstl	sp@(4)		| 
-	beq	6f		| NaN
-	bge	4b		| exit
-	bset	#31,d0		| x < 0 : return -pi/2
-	bra	4b
-6:	movel	#-1,d0		| NaN
-	movel	#-1,d1		|
-	bra	4b
-");	/* end asm	*/
-#endif	__M68881__
+__asm(
+".text\t\n"
+".even\t\n"
+"_funcname:\t\n"
+"	.ascii	\"atan2\\0\"\t\n"
+"	.even\t\n"
+"\t\n"
+".globl	" C_SYMBOL_NAME(atan2) "\t\n"
+C_SYMBOL_NAME(atan2) ":\t\n"
+"| denormalized numbers are treated as 0\t\n"
+"	tstl	%sp@(12)\t\n"
+"	beq	5f		| x == 0!\t\n"
+"	blt	1f		| x < 0!\t\n"
+"				| x > 0: return atan(y/x)\t\n"
+"\t\n"
+"	fmoved	%sp@(4),%fp0	| get y\t\n"
+"	fdivd	%sp@(12),%fp0	| y/x\t\n"
+"	fatanx	%fp0,%fp0		| atan(y/x)\t\n"
+"	bra 3f			| return\t\n"
+"1:				| x < 0\t\n"
+"\t\n"
+"	fmovecr	#0,%fp1		| get pi\t\n"
+"	fmoved	%sp@(4),%fp0	| get y\t\n"
+"	fdivd	%sp@(12),%fp0	| y/x\t\n"
+"	fatanx	%fp0,%fp0		| atan(y/x)\t\n"
+"	btst	#31,%sp@(4)	| sign(y)\t\n"
+"	beq	2f		| positive!\t\n"
+"\t\n"
+"	fnegx	%fp1,%fp1		| transfer sign\t\n"
+"2:	faddx	%fp1,%fp0		| sign(y)*pi + atan(y/x)\t\n"
+"|	bra 3f			| return\t\n"
+"3:\t\n"
+"	fmoved	%fp0,%sp@-	| return result\t\n"
+"	moveml	%sp@+,%d0/%d1\t\n"
+"4:	\t\n"
+"	rts			| sigh.\t\n"
+"5:				| x == 0\t\n"
+"	movel	#1073291771,%d0	| pi/2\t\n"
+"	movel	#1413754136,%d1	|\t\n"
+"\t\n"
+"	tstl	%sp@(4)		| \t\n"
+"	beq	6f		| NaN\t\n"
+"	bge	4b		| exit\t\n"
+"	bset	#31,%d0		| x < 0 : return -pi/2\t\n"
+"	bra	4b\t\n"
+"6:	movel	#-1,%d0		| NaN\t\n"
+"	movel	#-1,%d1		|\t\n"
+"	bra	4b\t\n"
+);	/* end asm	*/
+#endif /* __M68881__ */
 
 #ifdef	sfp004
-__asm("
-
-comm =	 -6
-resp =	-16
-zahl =	  0
-
-.even
-.text
-.even
+__asm(
+"\t\n"
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
+"\t\n"
+".even\t\n"
+".text\t\n"
+".even\t\n"
 _funcname:
-	.ascii	\"atan2\\0\"
-	.even
-.text
-.even
-.globl	_atan2
-_atan2:
-| denormalized numbers are treated as 0
-	lea	0xfffa50,a0
-	moveml	a7@(12),d0-d1	|  x
-	tstl	d0
-	beq	5f		| x == 0!
-	blt	1f		| x < 0!
-				| x > 0: return atan(y/x)
-
-|	fmoved	sp@(4),fp0	| get y
-	movew	#0x5400,a0@(comm)
-	.long	0x0c688900, 0xfff067f8
-	movel	sp@(4),a0@
-	movel	sp@(8),a0@
-
-|	fdivd	sp@(12),fp0	| y/x
-	movew	#0x5420,a0@(comm)
-	.long	0x0c688900, 0xfff067f8
-	movel	d0,a0@
-	movel	d1,a0@
-
-|	fatanx	fp0,fp0		| atan(y/x)
-	movew	#0x000a,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa
-
-	bra 3f			| return
-1:				| x < 0
-
-|	fmovecr	#0,fp1		| get pi
-	movew	#0x5c80,a0@(comm)
-	.long	0x0c688900, 0xfff067f8
-
-|	fmoved	sp@(4),fp0	| get y
-	movew	#0x5400,a0@(comm)
-	.long	0x0c688900, 0xfff067f8
-	movel	sp@(4),a0@
-	movel	sp@(8),a0@
-
-|	fdivd	sp@(12),fp0	| y/x
-	movew	#0x5420,a0@(comm)
-	.long	0x0c688900, 0xfff067f8
-	movel	d0,a0@
-	movel	d1,a0@
-
-|	fatanx	fp0,fp0		| atan(y/x)
-	movew	#0x000a,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa
-
-	btst	#31,sp@(4)	| sign(y)
-	beq	2f		| positive!
-
-|	fnegx	fp1,fp1		| transfer sign
-	movew	#0x049a,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa
-
-2:|	faddx	fp1,fp0		| sign(y)*pi + atan(y/x)
-	movew	#0x0422,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa
-
-|	bra 3f			| return
-3:
-|	fmoved	fp0,d0-d1	| return result
-	movew	#0x7400,a0@(comm)
-	.long	0x0c688900, 0xfff067f8
-	movel	a0@,d0
-	movel	a0@,d1
-
-4:	
-	rts			| sigh.
-5:				| x == 0
-	movel	#1073291771,d0	| pi/2
-	movel	#1413754136,d1	|
-
-	tstl	sp@(4)		| 
-	beq	6f		| NaN
-	bge	4b		| exit
-	bset	#31,d0		| x < 0 : return -pi/2
-	bra	4b
-6:	movel	#-1,d0		| NaN
-	movel	#-1,d1		|
-	bra	4b
-");	/* end asm	*/
-#endif	sfp004
+"	.ascii	\"atan2\\0\"\t\n"
+"	.even\t\n"
+".text\t\n"
+".even\t\n"
+".globl	_atan2\t\n"
+"_atan2:\t\n"
+"| denormalized numbers are treated as 0\t\n"
+"	lea	0xfffa50,%a0\t\n"
+"	moveml	%a7@(12),%d0-%d1	|  x\t\n"
+"	tstl	%d0\t\n"
+"	beq	5f		| x == 0!\t\n"
+"	blt	1f		| x < 0!\t\n"
+"				| x > 0: return atan(y/x)\t\n"
+"\t\n"
+"|	fmoved	%sp@(4),%fp0	| get y\t\n"
+"	movew	#0x5400,%a0@(comm)\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%sp@(4),%a0@\t\n"
+"	movel	%sp@(8),%a0@\t\n"
+"\t\n"
+"|	fdivd	%sp@(12),%fp0	| y/x\t\n"
+"	movew	#0x5420,%a0@(comm)\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%d0,%a0@\t\n"
+"	movel	%d1,%a0@\t\n"
+"\t\n"
+"|	fatanx	%fp0,%fp0		| atan(y/x)\t\n"
+"	movew	#0x000a,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa\t\n"
+"\t\n"
+"	bra 3f			| return\t\n"
+"1:				| x < 0\t\n"
+"\t\n"
+"|	fmovecr	#0,%fp1		| get pi\t\n"
+"	movew	#0x5c80,%a0@(comm)\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"\t\n"
+"|	fmoved	%sp@(4),%fp0	| get y\t\n"
+"	movew	#0x5400,%a0@(comm)\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%sp@(4),%a0@\t\n"
+"	movel	%sp@(8),%a0@\t\n"
+"\t\n"
+"|	fdivd	%sp@(12),%fp0	| y/x\t\n"
+"	movew	#0x5420,%a0@(comm)\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%d0,%a0@\t\n"
+"	movel	%d1,%a0@\t\n"
+"\t\n"
+"|	fatanx	%fp0,%fp0		| atan(y/x)\t\n"
+"	movew	#0x000a,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa\t\n"
+"\t\n"
+"	btst	#31,%sp@(4)	| sign(y)\t\n"
+"	beq	2f		| positive!\t\n"
+"\t\n"
+"|	fnegx	%fp1,%fp1		| transfer sign\t\n"
+"	movew	#0x049a,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa\t\n"
+"\t\n"
+"2:|	faddx	%fp1,%fp0		| sign(y)*pi + atan(y/x)\t\n"
+"	movew	#0x0422,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa\t\n"
+"\t\n"
+"|	bra 3f			| return\t\n"
+"3:\t\n"
+"|	fmoved	%fp0,%d0-%d1	| return result\t\n"
+"	movew	#0x7400,%a0@(comm)\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a0@,%d0\t\n"
+"	movel	%a0@,%d1\t\n"
+"\t\n"
+"4:	\t\n"
+"	rts			| sigh.\t\n"
+"5:				| x == 0\t\n"
+"	movel	#1073291771,%d0	| pi/2\t\n"
+"	movel	#1413754136,%d1	|\t\n"
+"\t\n"
+"	tstl	%sp@(4)		| \t\n"
+"	beq	6f		| NaN\t\n"
+"	bge	4b		| exit\t\n"
+"	bset	#31,%d0		| x < 0 : return -pi/2\t\n"
+"	bra	4b\t\n"
+"6:	movel	#-1,%d0		| NaN\t\n"
+"	movel	#-1,%d1		|\t\n"
+"	bra	4b\t\n"
+);	/* end asm	*/
+#endif /* sfp004 */
diff --git a/pmlsrc/atanh.c b/pmlsrc/atanh.c
index b663203..d95e584 100644
--- a/pmlsrc/atanh.c
+++ b/pmlsrc/atanh.c
@@ -69,6 +69,7 @@
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
 
 #if !defined (__M68881__) && !defined (sfp004) /* mjr++		*/
 
@@ -84,7 +85,6 @@ double x;
 	xcpt.name = funcname;
 	xcpt.arg1 = x;
 	if (!matherr (&xcpt)) {
-	    fprintf (stderr, "%s: DOMAIN error\n", funcname);
 	    errno = ERANGE;
 	    xcpt.retval = HUGE_VAL;
 	}
@@ -96,150 +96,134 @@ double x;
 #endif
 #ifdef	sfp004
 
-__asm("
-comm =	 -6
-resp =	-16
-zahl =	  0
-");	/* end asm	*/
+__asm(
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
+);	/* end asm	*/
 
-#endif	sfp004
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
     __asm(".text; .even");
 
 # ifdef	ERROR_CHECK
 
-    __asm("
-
-_Overflow:
-	.ascii \"OVERFLOW\\0\"
-_Domain:
-	.ascii \"DOMAIN\\0\"
-_Error_String:
-	.ascii \"atanh: %s error\\n\\0\"
-.even
-| pml compatible atanhgent
-| m.ritzert 7.12.1991
-| ritzert@dfg.dbp.de
-|
-|    /* NAN  = {7fffffff,ffffffff}		*/
-|    /* +Inf = {7ff00000,00000000}		*/
-|    /* -Inf = {fff00000,00000000}		*/
-|    /* MAX_D= {7fee42d1,30773b76}		*/
-|    /* MIN_D= {ffee42d1,30773b76}		*/
-
-.even
-double_max:
-	.long	0x7fee42d1
-	.long	0x30273b76
-double_min:
-	.long	0xffee42d1
-	.long	0x30273b76
-NaN:
-	.long	0x7fffffff
-	.long	0xffffffff
-p_Inf:
-	.long	0x7ff00000
-	.long	0x00000000
-m_Inf:
-	.long	0xfff00000
-	.long	0x00000000
-");
-# endif	ERROR_CHECK
-
-__asm("
-.even
-	.globl _atanh
-_atanh:
-    ");	/* end asm	*/
+    __asm(
+"\t\n"
+".even\t\n"
+"| pml compatible atanhgent\t\n"
+"| m.ritzert 7.12.1991\t\n"
+"| ritzert@dfg.dbp.de\t\n"
+"|\t\n"
+"|    /* NAN  = {7fffffff,ffffffff}		*/\t\n"
+"|    /* +Inf = {7ff00000,00000000}		*/\t\n"
+"|    /* -Inf = {fff00000,00000000}		*/\t\n"
+"|    /* MAX_D= {7fee42d1,30773b76}		*/\t\n"
+"|    /* MIN_D= {ffee42d1,30773b76}		*/\t\n"
+"\t\n"
+".even\t\n"
+"double_max:\t\n"
+"	.long	0x7fee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"double_min:\t\n"
+"	.long	0xffee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"NaN:\t\n"
+"	.long	0x7fffffff\t\n"
+"	.long	0xffffffff\t\n"
+"p_Inf:\t\n"
+"	.long	0x7ff00000\t\n"
+"	.long	0x00000000\t\n"
+"m_Inf:\t\n"
+"	.long	0xfff00000\t\n"
+"	.long	0x00000000\t\n"
+);
+# endif	/* ERROR_CHECK */
+
+__asm(
+".even\t\n"
+"	.globl " C_SYMBOL_NAME(atanh) "\t\n"
+C_SYMBOL_NAME(atanh) ":\t\n"
+    );	/* end asm	*/
 
 #endif	/* __M68881__ || sfp004	*/
 #ifdef	__M68881__
 
-    __asm("
-	fatanhd	a7@(4), fp0	| atanh
-	fmoved	fp0,a7@-	| push result
-	moveml	a7@+,d0-d1	| return_value
-    ");	/* end asm	*/
+    __asm(
+"	fatanhd	%a7@(4), %fp0	| atanh\t\n"
+"	fmoved	%fp0,%a7@-	| push result\t\n"
+"	moveml	%a7@+,%d0-%d1	| return_value\t\n"
+    );	/* end asm	*/
 
-#endif	__M68881__
+#endif /* __M68881__ */
 #ifdef	sfp004
-    __asm("
-	lea	0xfffa50,a0
-	movew	#0x540d,a0@(comm)	| specify function
-	cmpiw	#0x8900,a0@(resp)	| check
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-	movew	#0x7400,a0@(comm)	| result to d0
-	.long	0x0c688900, 0xfff067f8	| wait
-	movel	a0@,d0
-	movel	a0@,d1
-    ");	/* end asm	*/
-
-#endif	sfp004
+    __asm(
+"	lea	0xfffa50,%a0\t\n"
+"	movew	#0x540d,%a0@(comm)	| specify function\t\n"
+"	cmpiw	#0x8900,%a0@(resp)	| check\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"	movew	#0x7400,%a0@(comm)	| result to d0\t\n"
+"	.long	0x0c688900, 0xfff067f8	| wait\t\n"
+"	movel	%a0@,%d0\t\n"
+"	movel	%a0@,%d1\t\n"
+);	/* end asm	*/
+
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 # ifdef	ERROR_CHECK
-    __asm("
-	lea	double_max,a0	|
-	swap	d0		| exponent into lower word
-	cmpw	a0@(16),d0	| == NaN ?
-	beq	error_nan	|
-	cmpw	a0@(24),d0	| == + Infinity ?
-	beq	error_plus	|
-	cmpw	a0@(32),d0	| == - Infinity ?
-	beq	error_minus	|
-	swap	d0		| result ok,
-	rts			| restore d0
-");
+    __asm(
+"	lea	double_max,%a0	|\t\n"
+"	swap	%d0		| exponent into lower word\t\n"
+"	cmpw	%a0@(16),%d0	| == NaN ?\t\n"
+"	beq	error_nan	|\t\n"
+"	cmpw	%a0@(24),%d0	| == + Infinity ?\t\n"
+"	beq	error_plus	|\t\n"
+"	cmpw	%a0@(32),%d0	| == - Infinity ?\t\n"
+"	beq	error_minus	|\t\n"
+"	swap	%d0		| result ok,\t\n"
+"	rts			| restore d0\t\n"
+);
 #ifndef	__MSHORT__
-__asm("
-error_minus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movel	#63,_errno	| errno = ERANGE
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movel	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movel	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
-#else	__MSHORT__
-__asm("
-error_minus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movew	#63,_errno	| errno = ERANGE
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movew	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movew	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
-#endif	__MSHORT__
-__asm("
-error_exit:
-	pea	_Error_String	|
-	pea	__iob+52	|
-	jbsr	_fprintf	|
-	addl	#12,a7		|
-	moveml	a7@+,d0-d1
-    ");
-# endif	ERROR_CHECK
+__asm(
+"error_minus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#63," C_SYMBOL_NAME(errno) "	| errno = ERANGE\t\n"
+"	bra	error_exit	|\t\n"
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
+#else	/* __MSHORT__ */
+__asm(
+"error_minus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#63," C_SYMBOL_NAME(errno) "	| errno = ERANGE\t\n"
+"	bra	error_exit	|\t\n"
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
+#endif	/* __MSHORT__ */
+__asm(
+"error_exit:\t\n"
+"	moveml	%a7@+,%d0-%d1\t\n"
+    );
+# endif	/* ERROR_CHECK */
 
 __asm("	rts");
 
diff --git a/pmlsrc/cabs.c b/pmlsrc/cabs.c
index f2dbe85..95989e1 100644
--- a/pmlsrc/cabs.c
+++ b/pmlsrc/cabs.c
@@ -55,11 +55,12 @@
  *
  */
 
-#if !defined (__M68881__) && !defined (sfp004)
-
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
+
+#if !defined (__M68881__) && !defined (sfp004)
 
 
 double cabs (z)
@@ -73,175 +74,161 @@ COMPLEX z;
 
 # ifdef	ERROR_CHECK
 
-    __asm("
-
-_Overflow:
-	.ascii \"OVERFLOW\\0\"
-_Domain:
-	.ascii \"DOMAIN\\0\"
-_Error_String:
-	.ascii \"cos: %s error\\n\\0\"
-.even
-| m.ritzert 7.12.1991
-| ritzert@dfg.dbp.de
-|
-|    /* NAN  = {7fffffff,ffffffff}		*/
-|    /* +Inf = {7ff00000,00000000}		*/
-|    /* -Inf = {fff00000,00000000}		*/
-|    /* MAX_D= {7fee42d1,30773b76}		*/
-|    /* MIN_D= {ffee42d1,30773b76}		*/
-
-.even
-double_max:
-	.long	0x7fee42d1
-	.long	0x30273b76
-double_min:
-	.long	0xffee42d1
-	.long	0x30273b76
-NaN:
-	.long	0x7fffffff
-	.long	0xffffffff
-p_Inf:
-	.long	0x7ff00000
-	.long	0x00000000
-m_Inf:
-	.long	0xfff00000
-	.long	0x00000000
-");
-# endif	ERROR_CHECK
+    __asm(
+"\t\n"
+".even\t\n"
+"| m.ritzert 7.12.1991\t\n"
+"| ritzert@dfg.dbp.de\t\n"
+"|\t\n"
+"|    /* NAN  = {7fffffff,ffffffff}		*/\t\n"
+"|    /* +Inf = {7ff00000,00000000}		*/\t\n"
+"|    /* -Inf = {fff00000,00000000}		*/\t\n"
+"|    /* MAX_D= {7fee42d1,30773b76}		*/\t\n"
+"|    /* MIN_D= {ffee42d1,30773b76}		*/\t\n"
+"\t\n"
+".even\t\n"
+"double_max:\t\n"
+"	.long	0x7fee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"double_min:\t\n"
+"	.long	0xffee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"NaN:\t\n"
+"	.long	0x7fffffff\t\n"
+"	.long	0xffffffff\t\n"
+"p_Inf:\t\n"
+"	.long	0x7ff00000\t\n"
+"	.long	0x00000000\t\n"
+"m_Inf:\t\n"
+"	.long	0xfff00000\t\n"
+"	.long	0x00000000\t\n"
+);
+# endif	/* ERROR_CHECK */
 #endif	/* __M68881, sfp004	*/
 
 #ifdef	__M68881__
-__asm("
-.even
-.globl _cabs
-_cabs:
-	fmoved	a7@(4),fp0	|
-	fmulx	fp0,fp0		| x**2
-	fmoved	a7@(12),fp1	|
-	fmulx	fp1,fp1		| y**2
-	faddx	fp1,fp0		|
-	fsqrtx	fp0,fp0		| sqrt( x**2 + y**2 )
-	fmoved	fp0,a7@-	|
-	moveml	a7@+,d0-d1	| return arg
-");
-#endif	__M68881__
+__asm(
+".even\t\n"
+".globl " C_SYMBOL_NAME(cabs) "\t\n"
+C_SYMBOL_NAME(cabs) ":\t\n"
+"	fmoved	%a7@(4),%fp0	|\t\n"
+"	fmulx	%fp0,%fp0		| x**2\t\n"
+"	fmoved	%a7@(12),%fp1	|\t\n"
+"	fmulx	%fp1,%fp1		| y**2\t\n"
+"	faddx	%fp1,%fp0		|\t\n"
+"	fsqrtx	%fp0,%fp0		| sqrt( x**2 + y**2 )\t\n"
+"	fmoved	%fp0,%a7@-	|\t\n"
+"	moveml	%a7@+,%d0-%d1	| return arg\t\n"
+);
+#endif /* __M68881__ */
 
 #ifdef	sfp004
-__asm("
-| pml compatible lib for the atari sfp004
-|
-| Michael Ritzert, Oktober 1990
-| ritzert@dfg.dbp.de
-|
-| FUNCTION:	CABS(COMPLEX X)
-|
-| base =	0xfffa50
-|      the fpu addresses are taken relativ to 'base':
-|
-| waiting loop ...
-|
-| wait:
-| ww:	cmpiw	#0x8900,a1@(resp)
-| 	beq	ww
-| is coded directly by
-|	.long	0x0c688900, 0xfff067f8
-| and
-| www:	tst.b	a1@(resp)
-|	bmi.b	www
-| is coded by
-|	word	0x4a68,0xfff0,0x6bfa		| test
-
-comm =	 -6
-resp =	-16
-zahl =	  0
-
-.globl _cabs
-.text
-.even
-_cabs:
-	lea	0xfffa50,a0
-
-	movew	#0x5400,a0@(comm)	| load fp0
-	.long	0x0c688900, 0xfff067f8
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-
-	movew	#0x5480,a0@(comm)	| load fp1
-	.long	0x0c688900, 0xfff067f8
-	movel	a7@(12),a0@		| load arg_hi
-	movel	a7@(16),a0@		| load arg_low
-
-	movew	#0x0023,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-
-	movew	#0x04a3,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-
-	movew	#0x0422,a0@(comm)	| fp0 = fp0 + fp1	
-	.word	0x4a68,0xfff0,0x6bfa	| test
-
-	movew	#0x0004,a0@(comm)	| sqrt(fp0)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-
-	movew	#0x7400,a0@(comm)	| result to d0/d1
-	.long	0x0c688900, 0xfff067f8
-	movel	a0@(zahl),d0
-	movel	a0@(zahl),d1
-");	/* end asm	*/
-#endif	sfp004	
+__asm(
+"| pml compatible lib for the atari sfp004\t\n"
+"|\t\n"
+"| Michael Ritzert, Oktober 1990\t\n"
+"| ritzert@dfg.dbp.de\t\n"
+"|\t\n"
+"| FUNCTION:	CABS(COMPLEX X)\t\n"
+"|\t\n"
+"| base =	0xfffa50\t\n"
+"|      the fpu addresses are taken relativ to 'base':\t\n"
+"|\t\n"
+"| waiting loop ...\t\n"
+"|\t\n"
+"| wait:\t\n"
+"| ww:	cmpiw	#0x8900,%a1@(resp)\t\n"
+"| 	beq	ww\t\n"
+"| is coded directly by\t\n"
+"|	.long	0x0c688900, 0xfff067f8\t\n"
+"| and\t\n"
+"| www:	tst.b	%a1@(resp)\t\n"
+"|	bmi.b	www\t\n"
+"| is coded by\t\n"
+"|	word	0x4a68,0xfff0,0x6bfa		| test\t\n"
+"\t\n"
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
+"\t\n"
+".globl " C_SYMBOL_NAME(cabs) "\t\n"
+".text\t\n"
+".even\t\n"
+C_SYMBOL_NAME(cabs) ":\t\n"
+"	lea	0xfffa50,%a0\t\n"
+"\t\n"
+"	movew	#0x5400,%a0@(comm)	| load %fp0\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"\t\n"
+"	movew	#0x5480,%a0@(comm)	| load %fp1\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a7@(12),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(16),%a0@		| load arg_low\t\n"
+"\t\n"
+"	movew	#0x0023,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"\t\n"
+"	movew	#0x04a3,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"\t\n"
+"	movew	#0x0422,%a0@(comm)	| fp0 = fp0 + fp1	\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"\t\n"
+"	movew	#0x0004,%a0@(comm)	| sqrt(fp0)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"\t\n"
+"	movew	#0x7400,%a0@(comm)	| result to d0/d1\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a0@(zahl),%d0\t\n"
+"	movel	%a0@(zahl),%d1\t\n"
+);	/* end asm	*/
+#endif /* sfp004 */	
 
 #if defined (__M68881__) || defined (sfp004)
 # ifdef ERROR_CHECK
-__asm("
-	lea double_max,a0	|
-	swap	d0		| exponent into lower word
-	cmpw	a0@(16),d0	| == NaN ?
-	beq	error_nan	|
-	cmpw	a0@(24),d0	| == + Infinity ?
-	beq	error_plus	|
-	swap	d0		| result ok,
-	rts			| restore d0
-");
+__asm(
+"	lea double_max,%a0	|\t\n"
+"	swap	%d0		| exponent into lower word\t\n"
+"	cmpw	%a0@(16),%d0	| == NaN ?\t\n"
+"	beq	error_nan	|\t\n"
+"	cmpw	%a0@(24),%d0	| == + Infinity ?\t\n"
+"	beq	error_plus	|\t\n"
+"	swap	%d0		| result ok,\t\n"
+"	rts			| restore d0\t\n"
+);
 #ifndef	__MSHORT__
-__asm("
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movel	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movel	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
-#else	__MSHORT__
-__asm("
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movew	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movew	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
-#endif	__MSHORT__
-__asm("
-error_exit:
-	pea	_Error_String	|
-	pea	__iob+52	|
-	jbsr	_fprintf	|
-	addl	#12,a7		|
-	moveml	a7@+,d0-d1
-	rts
-");	/* end asm	*/
-# else	ERROR_CHECK
+__asm(
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
+#else	/* __MSHORT__ */
+__asm(
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
+#endif	/* __MSHORT__ */
+__asm(
+"error_exit:\t\n"
+"	moveml	%a7@+,%d0-%d1\t\n"
+"	rts\t\n"
+);	/* end asm	*/
+# else	/* ERROR_CHECK */
 __asm("rts");
-# endif	ERROR_CHECK
-#endif defined (__M68881__) || defined (sfp004)
+# endif	/* ERROR_CHECK */
+#endif /* defined (__M68881__) || defined (sfp004) */
diff --git a/pmlsrc/cadd.c b/pmlsrc/cadd.c
index a7c4096..e49c5e4 100644
--- a/pmlsrc/cadd.c
+++ b/pmlsrc/cadd.c
@@ -64,11 +64,12 @@
  *
  */
 
-#if !defined (__M68881__) && !defined (sfp004)
-
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
+
+#if !defined (__M68881__) && !defined (sfp004)
 
 COMPLEX cadd (z1, z2)
 COMPLEX z1;
@@ -78,85 +79,85 @@ COMPLEX z2;
     z1.imag += z2.imag;
     return (z1);
 }
-#endif !defined (__M68881__) && !defined (sfp004)
+#endif /* !defined (__M68881__) && !defined (sfp004) */
 
 #ifdef	__M68881__
-__asm("
-.text
-_funcname:
-	.ascii	\"cadd\\0\"
-.even
-.globl	_cadd
-_cadd:
-	fmoved	sp@(4),fp0
-	faddd	sp@(20),fp0
-	fmoved	sp@(12),fp1
-	faddd	sp@(28),fp1
-	movel	a1,d0		| pointer to result
-	fmoved	fp0,a1@		| return z.real
-	fmoved	fp1,a1@(8)	| return z.imag
-");	/* end asm	*/
-#endif	__M68881__
+__asm(
+".text\t\n"
+"_funcname:\t\n"
+"	.ascii	\"cadd\\0\"\t\n"
+".even\t\n"
+".globl	" C_SYMBOL_NAME(cadd) "\t\n"
+C_SYMBOL_NAME(cadd) ":\t\n"
+"	fmoved	%sp@(4),%fp0\t\n"
+"	faddd	%sp@(20),%fp0\t\n"
+"	fmoved	%sp@(12),%fp1\t\n"
+"	faddd	%sp@(28),%fp1\t\n"
+"	movel	%a1,%d0		| pointer to result\t\n"
+"	fmoved	%fp0,%a1@		| return z.real\t\n"
+"	fmoved	%fp1,%a1@(8)	| return z.imag\t\n"
+);	/* end asm	*/
+#endif /* __M68881__ */
 
 #ifdef	sfp004
-__asm("
-
-comm =	 -6
-resp =	-16
-zahl =	  0
-
-.text
-_funcname:
-	.ascii	\"cadd\\0\"
-.text
-.even
-.globl	_cadd
-_cadd:
-	lea	0xfffa50,a0
-	movew	#0x5400,a0@(comm)	| z1.real -> fp0
-	.long	0x0c688900, 0xfff067f8
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-
-	movew	#0x5422,a0@(comm)	| fp0 += z2.real
-	.long	0x0c688900, 0xfff067f8
-	movel	a7@(20),a0@		| load arg_hi
-	movel	a7@(24),a0@		| load arg_low
-
-	movew	#0x5480,a0@(comm)	| z1.imag -> fp1
-	.long	0x0c688900, 0xfff067f8
-	movel	a7@(12),a0@		| load arg_hi
-	movel	a7@(16),a0@		| load arg_low
-
-	movew	#0x54a2,a0@(comm)	| fp1 += z2.imag
-	movel	a1,d0			| pointer to result
-	.long	0x0c688900, 0xfff067f8
-	movel	a7@(28),a0@		| load arg_hi
-	movel	a7@(32),a0@		| load arg_low
-
-|	movew	#%0111 0101 0000 0000,a0@(comm)	| fetch fp0
-	movew	#0x7400,a0@(comm)		| 
-	.long	0x0c688900, 0xfff067f8
-	movel	a0@(zahl),a1@
-	movel	a0@(zahl),a1@(4)
-
-|	movew	#%0111 0100 1000 0000,a0@(comm)	| fetch fp1
-	movew	#0x7480,a0@(comm)		|
-	.long	0x0c688900, 0xfff067f8
-	movel	a0@(zahl),a1@(8)
-	movel	a0@(zahl),a1@(12)
-");	/* end asm	*/
-#endif	sfp004
+__asm(
+"\t\n"
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
+"\t\n"
+".text\t\n"
+"_funcname:\t\n"
+"	.ascii	\"cadd\\0\"\t\n"
+".text\t\n"
+".even\t\n"
+".globl	" C_SYMBOL_NAME(cadd) "\t\n"
+C_SYMBOL_NAME(cadd) ":\t\n"
+"	lea	0xfffa50,%a0\t\n"
+"	movew	#0x5400,%a0@(comm)	| z1.real -> fp0\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"\t\n"
+"	movew	#0x5422,%a0@(comm)	| fp0 += z2.real\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a7@(20),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(24),%a0@		| load arg_low\t\n"
+"\t\n"
+"	movew	#0x5480,%a0@(comm)	| z1.imag -> fp1\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a7@(12),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(16),%a0@		| load arg_low\t\n"
+"\t\n"
+"	movew	#0x54a2,%a0@(comm)	| fp1 += z2.imag\t\n"
+"	movel	%a1,%d0			| pointer to result\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a7@(28),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(32),%a0@		| load arg_low\t\n"
+"\t\n"
+"|	movew	#%0111 0101 0000 0000,%a0@(comm)	| fetch fp0\t\n"
+"	movew	#0x7400,%a0@(comm)		| \t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a0@(zahl),%a1@\t\n"
+"	movel	%a0@(zahl),%a1@(4)\t\n"
+"\t\n"
+"|	movew	#%0111 0100 1000 0000,%a0@(comm)	| fetch fp1\t\n"
+"	movew	#0x7480,%a0@(comm)		|\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a0@(zahl),%a1@(8)\t\n"
+"	movel	%a0@(zahl),%a1@(12)\t\n"
+);	/* end asm	*/
+#endif /* sfp004 */
 
 #if defined (__M68881__) || defined (sfp004)
 # ifdef ERROR_CHECK	/* no error checking for now	*/
-__asm("
-	pea	_funcname
-	jmp	c_err_check	
-");	/* end asm	*/
-# else  ERROR_CHECK
+__asm(
+"	pea	_funcname\t\n"
+"	jmp	c_err_check\t\n"
+);	/* end asm	*/
+# else /* ERROR_CHECK */
 
 __asm("rts");
 
-# endif ERROR_CHECK
-#endif defined (__M68881__) || defined (sfp004)
+# endif /* ERROR_CHECK */
+#endif /* defined (__M68881__) || defined (sfp004) */
diff --git a/pmlsrc/ccos.c b/pmlsrc/ccos.c
index d11473e..0204a5c 100644
--- a/pmlsrc/ccos.c
+++ b/pmlsrc/ccos.c
@@ -61,11 +61,12 @@
  *
  */
 
-#if !defined (__M68881__) && !defined (sfp004)
-
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
+
+#if !defined (__M68881__) && !defined (sfp004)
 
 
 COMPLEX ccos (z)
@@ -77,127 +78,127 @@ COMPLEX z;
     result.imag = -sin(z.real) * sinh(z.imag);
     return (result);
 }
-#endif !defined (__M68881__) && !defined (sfp004)
+#endif /* !defined (__M68881__) && !defined (sfp004) */
 
 #if defined (__M68881__) || defined (sfp004)
 # ifdef ERROR_CHECK	/* no error checking for now	*/
-__asm("
-.text
-_funcname:
-	.ascii	\"ccos\\0\"
-	.even
-");	/* end asm	*/
-# endif ERROR_CHECK
+__asm(
+".text\t\n"
+"_funcname:\t\n"
+"	.ascii	\"ccos\\0\"\t\n"
+"	.even\t\n"
+);	/* end asm	*/
+# endif /* ERROR_CHECK */
 #endif defined (__M68881__) || defined (sfp004)
 
 #ifdef	__M68881__
-__asm("
-.text
-	.globl _ccos
-_ccos:
-	movel	a1,d0		| save a1 as return value
-	fmoved	sp@(4),fp0	| z.real
-	fsinx	fp0,fp1		| cos(z.real)
-	fcosx	fp0,fp0		| sin(z.real)
-	fnegx	fp1,fp1		|-sin(z.real)
-
-	fmoved	sp@(12),fp3	| z.imag
-	fcoshx	fp3,fp2		| cosh(z.imag)
-	fsinhx	fp3,fp3		| sinh(z.imag)
-	
-	fmulx	fp2,fp0		| result.real
-	fmoved	fp0,a1@		|
-	fmulx	fp3,fp1		| result.imag
-	fmoved	fp1,a1@(8)	|
-");	/* end asm	*/
-#endif	__M68881__
+__asm(
+".text\t\n"
+"	.globl " C_SYMBOL_NAME(ccos) "\t\n"
+C_SYMBOL_NAME(ccos) ":\t\n"
+"	movel	%a1,%d0		| save a1 as return value\t\n"
+"	fmoved	%sp@(4),%fp0	| z.real\t\n"
+"	fsinx	%fp0,%fp1		| cos(z.real)\t\n"
+"	fcosx	%fp0,%fp0		| sin(z.real)\t\n"
+"	fnegx	%fp1,%fp1		|-sin(z.real)\t\n"
+"\t\n"
+"	fmoved	%sp@(12),%fp3	| z.imag\t\n"
+"	fcoshx	%fp3,%fp2		| cosh(z.imag)\t\n"
+"	fsinhx	%fp3,%fp3		| sinh(z.imag)\t\n"
+"	\t\n"
+"	fmulx	%fp2,%fp0		| result.real\t\n"
+"	fmoved	%fp0,%a1@		|\t\n"
+"	fmulx	%fp3,%fp1		| result.imag\t\n"
+"	fmoved	%fp1,%a1@(8)	|\t\n"
+);	/* end asm	*/
+#endif /* __M68881__ */
 
 #ifdef	sfp004
-__asm("
-| double precision floating point stuff for Atari-gcc using the SFP004
-| developed with gas
-|
-| double precision complex sin
-|
-| M. Ritzert (mjr at dmzrzu71)
-|
-| 12.10.1990
-|
-| addresses of the 68881 data port. This choice is fastest when much data is
-| transferred between the two processors.
-
-comm =	 -6
-resp =	-16
-zahl =	  0
-
-| waiting loop ...
-|
-| wait:
-| ww:	cmpiw	#0x8900,a1@(resp)
-| 	beq	ww
-| is coded directly by
-|	.long	0x0c688900, 0xfff067f8
-| and
-| www:	tst.b	a1@(resp)
-|	bmi.b	www
-| is coded by
-|	.word	0x4a68,0xfff0,0x6bfa		| test
-
-	.text; .even
-	.globl _ccos
-_ccos:
-	movel	a1,d0				| save a1 as return value
-	lea	0xfffa50,a0			| fpu address
-
-	movew	#0x54b0,a0@(comm)		| sincos: sin -> fp1
-	.long	0x0c688900, 0xfff067f8		|	  cos -> fp0
-	movel	sp@(4), a0@			| load z.real
-	movel	sp@(8), a0@			| load z.real
-
-|	fmoved	sp@(12),fp3			| z.imag to fp3
-	movew	#0x5580,a0@(comm)
-	.long	0x0c688900, 0xfff067f8
-	movel	sp@(12),a0@
-	movel	sp@(16),a0@
-
-|	fcoshx	fp3,fp2				| cosh(z.imag)
-	movew	#0x0d19,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa		| test
-|	fsinhx	fp3,fp3				| sinh(z.imag)
-	movew	#0x0d82,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa		| test
-|	fmulx	fp2,fp0				| result.real
-	movew	#0x0823,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa		| test
-|	fmoved	fp0,a1@				|
-	movew	#0x7400,a0@(comm)		| 
-	.long	0x0c688900, 0xfff067f8
-	movel	a0@,a1@
-	movel	a0@,a1@(4)
-|	fmulx	fp3,fp1				| result.imag
-	movew	#0x0ca3,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa		| test
-|	fnegx	fp1,fp1
-	movew	#0x049a,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa		| test
-|	fmoves	fp1,d1				|
-	movew	#0x7480,a0@(comm)		|
-	.long	0x0c688900, 0xfff067f8
-	movel	a0@,a1@(8)
-	movel	a0@,a1@(12)
-");	/* end asm	*/
-#endif	sfp004
+__asm(
+"| double precision floating point stuff for Atari-gcc using the SFP004\t\n"
+"| developed with gas\t\n"
+"|\t\n"
+"| double precision complex sin\t\n"
+"|\t\n"
+"| M. Ritzert (mjr at dmzrzu71)\t\n"
+"|\t\n"
+"| 12.10.1990\t\n"
+"|\t\n"
+"| addresses of the 68881 data port. This choice is fastest when much data is\t\n"
+"| transferred between the two processors.\t\n"
+"\t\n"
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
+"\t\n"
+"| waiting loop ...\t\n"
+"|\t\n"
+"| wait:\t\n"
+"| ww:	cmpiw	#0x8900,%a1@(resp)\t\n"
+"| 	beq	ww\t\n"
+"| is coded directly by\t\n"
+"|	.long	0x0c688900, 0xfff067f8\t\n"
+"| and\t\n"
+"| www:	tst.b	%a1@(resp)\t\n"
+"|	bmi.b	www\t\n"
+"| is coded by\t\n"
+"|	.word	0x4a68,0xfff0,0x6bfa		| test\t\n"
+"\t\n"
+"	.text; .even\t\n"
+"	.globl " C_SYMBOL_NAME(ccos) "\t\n"
+C_SYMBOL_NAME(ccos) ":\t\n"
+"	movel	%a1,%d0				| save a1 as return value\t\n"
+"	lea	0xfffa50,%a0			| fpu address\t\n"
+"\t\n"
+"	movew	#0x54b0,%a0@(comm)		| sincos: sin -> fp1\t\n"
+"	.long	0x0c688900, 0xfff067f8		|	  cos -> fp0\t\n"
+"	movel	%sp@(4), %a0@			| load z.real\t\n"
+"	movel	%sp@(8), %a0@			| load z.real\t\n"
+"\t\n"
+"|	fmoved	%sp@(12),%fp3			| z.imag to fp3\t\n"
+"	movew	#0x5580,%a0@(comm)\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%sp@(12),%a0@\t\n"
+"	movel	%sp@(16),%a0@\t\n"
+"\t\n"
+"|	fcoshx	%fp3,%fp2				| cosh(z.imag)\t\n"
+"	movew	#0x0d19,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa		| test\t\n"
+"|	fsinhx	%fp3,%fp3				| sinh(z.imag)\t\n"
+"	movew	#0x0d82,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa		| test\t\n"
+"|	fmulx	%fp2,%fp0				| result.real\t\n"
+"	movew	#0x0823,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa		| test\t\n"
+"|	fmoved	%fp0,%a1@				|\t\n"
+"	movew	#0x7400,%a0@(comm)		| \t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a0@,%a1@\t\n"
+"	movel	%a0@,%a1@(4)\t\n"
+"|	fmulx	%fp3,%fp1				| result.imag\t\n"
+"	movew	#0x0ca3,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa		| test\t\n"
+"|	fnegx	%fp1,%fp1\t\n"
+"	movew	#0x049a,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa		| test\t\n"
+"|	fmoves	%fp1,%d1				|\t\n"
+"	movew	#0x7480,%a0@(comm)		|\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a0@,%a1@(8)\t\n"
+"	movel	%a0@,%a1@(12)\t\n"
+);	/* end asm	*/
+#endif /* sfp004 */
 
 
 #if defined (__M68881__) || defined (sfp004)
 # ifdef ERROR_CHECK	/* no error checking for now	*/
-__asm("
-	pea	_funcname
-	jmp	c_err_check
-");	/* end asm	*/
-# else  ERROR_CHECK
+__asm(
+"	pea	_funcname\t\n"
+"	jmp	c_err_check\t\n"
+);	/* end asm	*/
+# else /* ERROR_CHECK */
 
 __asm("rts");
 
-# endif ERROR_CHECK
+# endif /* ERROR_CHECK */
 #endif defined (__M68881__) || defined (sfp004)
diff --git a/pmlsrc/cdiv.c b/pmlsrc/cdiv.c
index 34883b9..a233465 100644
--- a/pmlsrc/cdiv.c
+++ b/pmlsrc/cdiv.c
@@ -68,11 +68,12 @@
  *
  */
 
-#if !defined (__M68881__) && !defined (sfp004)
-
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
+
+#if !defined (__M68881__) && !defined (sfp004)
 
 COMPLEX cdiv (znum, zden)
 COMPLEX znum;
@@ -92,7 +93,6 @@ COMPLEX zden;
 	xcpt.name = "cdiv";
 	xcpt.arg1 = denom;
 	if (!matherr (&xcpt)) {
-	    fprintf (stderr, "%s:  ZERO_CMPLX_DENOMINATOR \n", xcpt.name);
 	    xcpt.retval = 0.0;	/* useless in this context */
 	    errno = ERANGE;	/* should be EDOM if real or imag == 0	*/
 	}
@@ -102,167 +102,167 @@ COMPLEX zden;
 	if( result.imag >= 0.0) result.imag = HUGE_VAL;
 					/* still wrong, == 0 should yield NAN */
 	else			result.imag = -HUGE_VAL;	
-#else	ERROR_CHECK
+#else /* ERROR_CHECK */
 	result.real /= denom;
 	result.imag /= denom;
-#endif	ERROR_CHECK
+#endif /* ERROR_CHECK */
     } else {
 	result.real /= denom;
 	result.imag /= denom;
     }
     return (result);
 }
-#endif !defined (__M68881__) && !defined (sfp004)
+#endif /* !defined (__M68881__) && !defined (sfp004) */
 #ifdef	__M68881__
-__asm("
-.text
-.even
-_funcname:
-	.ascii	\"cdiv\\0\"
-	.even
-
-.globl	_cdiv
-_cdiv:
-	fmoved	sp@(4),fp0
-	fmoved	sp@(12),fp1
-	fmoved	sp@(20),fp2
-	fmoved	sp@(28),fp3
-	fmovex	fp0,fp4
-	movel	a1,d0		| pointer to result
-
-	fmovex	fp2,fp5
-	fmulx	fp2,fp5
-	fmovex	fp3,fp6
-	fmulx	fp3,fp6
-	faddx	fp6,fp5
-
-	fmulx	fp2,fp4
-	fmulx	fp3,fp0
-	fmulx	fp1,fp2	
-	fmulx	fp1,fp3
-	faddx	fp3,fp4
-	fdivx	fp5,fp4
-	fsubx	fp0,fp2
-	fdivx	fp5,fp2
-
-	fmoved	fp4,a1@
-	fmoved	fp2,a1@(8)
-");	/* end asm	*/
-#endif	__M68881__
+__asm(
+".text\t\n"
+".even\t\n"
+"_funcname:\t\n"
+"	.ascii	\"cdiv\\0\"\t\n"
+"	.even\t\n"
+"\t\n"
+".globl	" C_SYMBOL_NAME(cdiv) "\t\n"
+C_SYMBOL_NAME(cdiv) ":\t\n"
+"	fmoved	%sp@(4),%fp0\t\n"
+"	fmoved	%sp@(12),%fp1\t\n"
+"	fmoved	%sp@(20),%fp2\t\n"
+"	fmoved	%sp@(28),%fp3\t\n"
+"	fmovex	%fp0,%fp4\t\n"
+"	movel	%a1,%d0		| pointer to result\t\n"
+"\t\n"
+"	fmovex	%fp2,%fp5\t\n"
+"	fmulx	%fp2,%fp5\t\n"
+"	fmovex	%fp3,%fp6\t\n"
+"	fmulx	%fp3,%fp6\t\n"
+"	faddx	%fp6,%fp5\t\n"
+"\t\n"
+"	fmulx	%fp2,%fp4\t\n"
+"	fmulx	%fp3,%fp0\t\n"
+"	fmulx	%fp1,%fp2	\t\n"
+"	fmulx	%fp1,%fp3\t\n"
+"	faddx	%fp3,%fp4\t\n"
+"	fdivx	%fp5,%fp4\t\n"
+"	fsubx	%fp0,%fp2\t\n"
+"	fdivx	%fp5,%fp2\t\n"
+"\t\n"
+"	fmoved	%fp4,%a1@\t\n"
+"	fmoved	%fp2,%a1@(8)\t\n"
+);	/* end asm	*/
+#endif /* __M68881__ */
 
 #ifdef	sfp004
-__asm("
-
-comm =	 -6
-resp =	-16
-zahl =	  0
-
-.even
-.text
-.even
-_funcname:
-	.ascii	\"cdiv\\0\"
-	.even
-.text
-.even
-.globl	_cdiv
-_cdiv:
-
-	lea	0xfffa50,a0
-
-	movew	#0x5400,a0@(comm)	| z1.real -> fp0
-	movel	a1,d0			| pointer to result
-	.long	0x0c688900, 0xfff067f8
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-
-	movew	#0x5480,a0@(comm)	| z1.imag -> fp1
-	.long	0x0c688900, 0xfff067f8
-	movel	a7@(12),a0@		| load arg_hi
-	movel	a7@(16),a0@		| load arg_low
-
-	movew	#0x5500,a0@(comm)	| z2.real -> fp2
-	.long	0x0c688900, 0xfff067f8
-	movel	a7@(20),a0@		| load arg_hi
-	movel	a7@(24),a0@		| load arg_low
-
-	movew	#0x5580,a0@(comm)	| z2.imag -> fp3
-	.long	0x0c688900, 0xfff067f8
-	movel	a7@(28),a0@		| load arg_hi
-	movel	a7@(32),a0@		| load arg_low
-
-	movew	#0x0200,a0@(comm)	| copy fp0 to fp4
-	.word	0x4a68,0xfff0,0x6bfa	| test
-
-
-|	fmovex	fp2,fp5
-	movew	#0x0a80,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-|	fmulx	fp2,fp5
-	movew	#0x0aa3,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-|	fmovex	fp3,fp6
-	movew	#0x0f00,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-|	fmulx	fp3,fp6
-	movew	#0x0f23,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-|	faddx	fp6,fp5
-	movew	#0x1aa2,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-
-|	fmulx	fp2,fp4
-	movew	#0x0a23,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-|	fmulx	fp3,fp0
-	movew	#0x0c23,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-|	fmulx	fp1,fp2
-	movew	#0x0523,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-|	fmulx	fp1,fp3
-	movew	#0x05a3,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-
-|	faddx	fp3,fp4
-	movew	#0x0e22,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-|	fdivx	fp5,fp4
-	movew	#0x1620,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-|	fsubx	fp0,fp2
-	movew	#0x0128,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-|	fdivx	fp5,fp2
-	movew	#0x1520,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-
-
-|	fmoved	fp4,a1@
-	movew	#0x7600,a0@(comm)		| 
-	.long	0x0c688900, 0xfff067f8
-	movel	a0@,a1@
-	movel	a0@,a1@(4)
-
-|	fmoved	fp2,a1@(8)
-	movew	#0x7500,a0@(comm)		| 
-	.long	0x0c688900, 0xfff067f8
-	movel	a0@,a1@(8)
-	movel	a0@,a1@(12)
-");	/* end asm	*/
-#endif	sfp004
+__asm(
+"\t\n"
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
+"\t\n"
+".even\t\n"
+".text\t\n"
+".even\t\n"
+"_funcname:\t\n"
+"	.ascii	\"cdiv\\0\"\t\n"
+"	.even\t\n"
+".text\t\n"
+".even\t\n"
+".globl	" C_SYMBOL_NAME(cdiv) "\t\n"
+C_SYMBOL_NAME(cdiv) ":\t\n"
+"\t\n"
+"	lea	0xfffa50,%a0\t\n"
+"\t\n"
+"	movew	#0x5400,%a0@(comm)	| z1.real -> fp0\t\n"
+"	movel	%a1,%d0			| pointer to result\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"\t\n"
+"	movew	#0x5480,%a0@(comm)	| z1.imag -> fp1\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a7@(12),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(16),%a0@		| load arg_low\t\n"
+"\t\n"
+"	movew	#0x5500,%a0@(comm)	| z2.real -> fp2\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a7@(20),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(24),%a0@		| load arg_low\t\n"
+"\t\n"
+"	movew	#0x5580,%a0@(comm)	| z2.imag -> fp3\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a7@(28),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(32),%a0@		| load arg_low\t\n"
+"\t\n"
+"	movew	#0x0200,%a0@(comm)	| copy fp0 to fp4\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"\t\n"
+"\t\n"
+"|	fmovex	%fp2,%fp5\t\n"
+"	movew	#0x0a80,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"|	fmulx	%fp2,%fp5\t\n"
+"	movew	#0x0aa3,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"|	fmovex	%fp3,%fp6\t\n"
+"	movew	#0x0f00,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"|	fmulx	%fp3,%fp6\t\n"
+"	movew	#0x0f23,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"|	faddx	%fp6,%fp5\t\n"
+"	movew	#0x1aa2,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"\t\n"
+"|	fmulx	%fp2,%fp4\t\n"
+"	movew	#0x0a23,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"|	fmulx	%fp3,%fp0\t\n"
+"	movew	#0x0c23,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"|	fmulx	%fp1,%fp2\t\n"
+"	movew	#0x0523,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"|	fmulx	%fp1,%fp3\t\n"
+"	movew	#0x05a3,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"\t\n"
+"|	faddx	%fp3,%fp4\t\n"
+"	movew	#0x0e22,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"|	fdivx	%fp5,%fp4\t\n"
+"	movew	#0x1620,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"|	fsubx	%fp0,%fp2\t\n"
+"	movew	#0x0128,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"|	fdivx	%fp5,%fp2\t\n"
+"	movew	#0x1520,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"\t\n"
+"\t\n"
+"|	fmoved	%fp4,%a1@\t\n"
+"	movew	#0x7600,%a0@(comm)		| \t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a0@,%a1@\t\n"
+"	movel	%a0@,%a1@(4)\t\n"
+"\t\n"
+"|	fmoved	%fp2,%a1@(8)\t\n"
+"	movew	#0x7500,%a0@(comm)		| \t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a0@,%a1@(8)\t\n"
+"	movel	%a0@,%a1@(12)\t\n"
+);	/* end asm	*/
+#endif /* sfp004 */
 
 #if defined (__M68881__) || defined (sfp004)
 # ifdef ERROR_CHECK	/* no error checking for now	*/
 
-__asm("	
-	pea	_funcname
-	jmp	c_err_check
-");	/* end asm	*/
+__asm(
+"	pea	_funcname\t\n"
+"	jmp	c_err_check\t\n"
+);	/* end asm	*/
 
-# else  ERROR_CHECK
+# else /* ERROR_CHECK */
 
 __asm("rts");
 
-# endif ERROR_CHECK
+# endif /* ERROR_CHECK */
 #endif defined (__M68881__) || defined (sfp004)
diff --git a/pmlsrc/cerr.S b/pmlsrc/cerr.S
new file mode 100644
index 0000000..c425c17
--- /dev/null
+++ b/pmlsrc/cerr.S
@@ -0,0 +1,106 @@
+#APP
+
+| mjr: complex error checking code
+|    inputs:
+|	a1:	pointer to double
+|	%a7@(4):	pointer to funcname
+
+#include "symbols.h"
+
+.text
+.even
+
+.globl c_err_check
+.even
+
+c_err_check:
+	movew	%a1@,%d1		| get z.real
+	cmpiw	#0x7fff,%d1	| == NaN ?
+	beq	error_nan	|
+	cmpiw	#0x7ff0,%d1	| == + Infinity ?
+	beq	error_plus	|
+	cmpiw	#0xfff0,%d1	| == - Infinity ?
+	beq	error_minus	|
+continue:
+	movew	%a1@(8),%d1	| get z.imag
+	cmpiw	#0x7fff,%d1	| == NaN ?
+	beq	error_nan_i	|
+	cmpiw	#0x7ff0,%d1	| == + Infinity ?
+	beq	error_plus_i	|
+	cmpiw	#0xfff0,%d1	| == - Infinity ?
+	beq	error_minus_i	|
+
+	addqw	#4,%a7		| drop _funcname
+	rts
+
+#ifndef	__MSHORT__
+error_minus:
+	moveml	%d0/%a1,%a7@-
+	movel	#63,C_SYMBOL_NAME(errno)	| errno = ERANGE
+	bra	error_exit	|
+error_plus:
+	moveml	%d0/%a1,%a7@-
+	movel	#63,C_SYMBOL_NAME(errno)	| NAN => errno = EDOM
+	bra	error_exit	|
+error_nan:
+	moveml	%d0/%a1,%a7@-
+	lea	C_SYMBOL_NAME(_infinitydf),%a0
+	movel	%a0@,%a1@		| result = + Infinity (for now)
+	movel	%a0@(4),%a1@(4)	| result = + Infinity (for now)
+	movel	#62,C_SYMBOL_NAME(errno)	| NAN => errno = EDOM
+#else	__MSHORT__
+error_minus:
+	moveml	%d0/%a1,%a7@-
+	movew	#63,C_SYMBOL_NAME(errno)	| errno = ERANGE
+	bra	error_exit	|
+error_plus:
+	moveml	%d0/%a1,%a7@-
+	movew	#63,C_SYMBOL_NAME(errno)	| NAN => errno = EDOM
+	bra	error_exit	|
+error_nan:
+	moveml	%d0/%a1,%a7@-
+	lea	C_SYMBOL_NAME(_infinitydf),%a0
+	movel	%a0@,%a1@		| result = + Infinity (for now)
+	movel	%a0@(4),%a1@(4)	| result = + Infinity (for now)
+	movew	#62,C_SYMBOL_NAME(errno)	| NAN => errno = EDOM
+#endif	__MSHORT__
+error_exit:
+	moveml	%a7@+,%d0/%a1
+	bra	continue
+
+#ifndef __MSHORT__
+error_minus_i:
+	moveml	%d0/%a1,%a7@-
+	movel	#63,C_SYMBOL_NAME(errno)	| errno = ERANGE
+	bra	error_exit_i	|
+error_plus_i:
+	moveml	%d0/%a1,%a7@-
+	movel	#63,C_SYMBOL_NAME(errno)	| NAN => errno = EDOM
+	bra	error_exit_i	|
+error_nan_i:
+	moveml	%d0/%a1,%a7@-
+	lea	C_SYMBOL_NAME(_infinitydf),%a0
+	movel	%a0@,%a1@(8)	| result = + Infinity (for now)
+	movel	%a0@(4),%a1@(12)	| result = + Infinity (for now)
+	movel	#62,C_SYMBOL_NAME(errno)	| NAN => errno = EDOM
+#else __MSHORT__
+error_minus_i:
+	moveml	%d0/%a1,%a7@-
+	movew	#63,C_SYMBOL_NAME(errno)	| errno = ERANGE
+	bra	error_exit_i	|
+error_plus_i:
+	moveml	%d0/%a1,%a7@-
+	movew	#63,C_SYMBOL_NAME(errno)	| NAN => errno = EDOM
+	bra	error_exit_i	|
+error_nan_i:
+	moveml	%d0/%a1,%a7@-
+	lea	C_SYMBOL_NAME(_infinitydf),%a0
+	movel	%a0@,%a1@(8)	| result = + Infinity (for now)
+	movel	%a0@(4),%a1@(12)	| result = + Infinity (for now)
+	movew	#62,C_SYMBOL_NAME(errno)	| NAN => errno = EDOM
+#endif __MSHORT__
+
+error_exit_i:
+	moveml	%a7@+,%d0/%a1
+
+	rts
diff --git a/pmlsrc/cerr.cpp b/pmlsrc/cerr.cpp
deleted file mode 100644
index 7ecfc15..0000000
--- a/pmlsrc/cerr.cpp
+++ /dev/null
@@ -1,130 +0,0 @@
-#APP
-
-| mjr: complex error checking code
-|    inputs:
-|	a1:	pointer to double
-|	a7@(4):	pointer to funcname
-
-.text
-.even
-
-.globl c_err_check
-.even
-
-c_err_check:
-	movew	a1@,d1		| get z.real
-	cmpiw	#0x7fff,d1	| == NaN ?
-	beq	error_nan	|
-	cmpiw	#0x7ff0,d1	| == + Infinity ?
-	beq	error_plus	|
-	cmpiw	#0xfff0,d1	| == - Infinity ?
-	beq	error_minus	|
-continue:
-	movew	a1@(8),d1	| get z.imag
-	cmpiw	#0x7fff,d1	| == NaN ?
-	beq	error_nan_i	|
-	cmpiw	#0x7ff0,d1	| == + Infinity ?
-	beq	error_plus_i	|
-	cmpiw	#0xfff0,d1	| == - Infinity ?
-	beq	error_minus_i	|
-
-	addqw	#4,a7		| drop _funcname
-	rts
-
-#ifndef	__MSHORT__
-error_minus:
-	moveml	d0/a1,a7@-
-	movel	#63,_errno	| errno = ERANGE
-	pea	Overflow	| for printf
-	bra	error_exit	|
-error_plus:
-	moveml	d0/a1,a7@-
-	movel	#63,_errno	| NAN => errno = EDOM
-	pea	Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	d0/a1,a7@-
-	lea	__infinitydf,a0
-	movel	a0@,a1@		| result = + Infinity (for now)
-	movel	a0@(4),a1@(4)	| result = + Infinity (for now)
-	movel	#62,_errno	| NAN => errno = EDOM
-	pea	Domain		| for printf
-#else	__MSHORT__
-error_minus:
-	moveml	d0/a1,a7@-
-	movew	#63,_errno	| errno = ERANGE
-	pea	Overflow	| for printf
-	bra	error_exit	|
-error_plus:
-	moveml	d0/a1,a7@-
-	movew	#63,_errno	| NAN => errno = EDOM
-	pea	Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	d0/a1,a7@-
-	lea	__infinitydf,a0
-	movel	a0@,a1@		| result = + Infinity (for now)
-	movel	a0@(4),a1@(4)	| result = + Infinity (for now)
-	movew	#62,_errno	| NAN => errno = EDOM
-	pea	Domain		| for printf
-#endif	__MSHORT__
-error_exit:
-	pea	__iob+52	|
-	jbsr	_fprintf	|
-	addqw	#8,a7		| leave _funcname on stack
-	moveml	a7@+,d0/a1
-	bra	continue
-
-#ifndef __MSHORT__
-error_minus_i:
-	moveml	d0/a1,a7@-
-	movel	#63,_errno	| errno = ERANGE
-	pea	Overflow	| for printf
-	bra	error_exit_i	|
-error_plus_i:
-	moveml	d0/a1,a7@-
-	movel	#63,_errno	| NAN => errno = EDOM
-	pea	Overflow	| for printf
-	bra	error_exit_i	|
-error_nan_i:
-	moveml	d0/a1,a7@-
-	lea	__infinitydf,a0
-	movel	a0@,a1@(8)	| result = + Infinity (for now)
-	movel	a0@(4),a1@(12)	| result = + Infinity (for now)
-	movel	#62,_errno	| NAN => errno = EDOM
-	pea	Domain		| for printf
-#else __MSHORT__
-error_minus_i:
-	moveml	d0/a1,a7@-
-	movew	#63,_errno	| errno = ERANGE
-	pea	Overflow	| for printf
-	bra	error_exit_i	|
-error_plus_i:
-	moveml	d0/a1,a7@-
-	movew	#63,_errno	| NAN => errno = EDOM
-	pea	Overflow	| for printf
-	bra	error_exit_i	|
-error_nan_i:
-	moveml	d0/a1,a7@-
-	lea	__infinitydf,a0
-	movel	a0@,a1@(8)	| result = + Infinity (for now)
-	movel	a0@(4),a1@(12)	| result = + Infinity (for now)
-	movew	#62,_errno	| NAN => errno = EDOM
-	pea	Domain		| for printf
-#endif __MSHORT__
-
-error_exit_i:
-	pea	__iob+52	|
-	jbsr	_fprintf	|
-	addqw	#8,a7		|
-	moveml	a7@+,d0/a1
-
-	rts
-.data
-.even
-Overflow:
-	.ascii	": Overflow\n\0"
-	.even
-Domain:
-	.ascii	": Domain error\n\0"
-	.even
diff --git a/pmlsrc/cerr.s b/pmlsrc/cerr.s
deleted file mode 100644
index 55ef4f6..0000000
--- a/pmlsrc/cerr.s
+++ /dev/null
@@ -1,104 +0,0 @@
-#APP
-
-| mjr: complex error checking code
-|    inputs:
-|	a1:	pointer to double
-|	a7@(4):	pointer to funcname
-
-.text
-.even
-
-.globl c_err_check
-.even
-
-c_err_check:
-	movew	a1@,d1		| get z.real
-	cmpiw	#0x7fff,d1	| == NaN ?
-	beq	error_nan	|
-	cmpiw	#0x7ff0,d1	| == + Infinity ?
-	beq	error_plus	|
-	cmpiw	#0xfff0,d1	| == - Infinity ?
-	beq	error_minus	|
-continue:
-	movew	a1@(8),d1	| get z.imag
-	cmpiw	#0x7fff,d1	| == NaN ?
-	beq	error_nan_i	|
-	cmpiw	#0x7ff0,d1	| == + Infinity ?
-	beq	error_plus_i	|
-	cmpiw	#0xfff0,d1	| == - Infinity ?
-	beq	error_minus_i	|
-
-	addqw	#4,a7		| drop _funcname
-	rts
-
-error_minus:
-	moveml	d0/a1,a7@-
-	movel	#63,_errno	| errno = ERANGE
-	pea	Overflow	| for printf
-	bra	error_exit	|
-error_plus:
-	moveml	d0/a1,a7@-
-	movel	#63,_errno	| NAN => errno = EDOM
-	pea	Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	d0/a1,a7@-
-	lea	__infinitydf,a0
-	movel	a0@,a1@		| result = + Infinity (for now)
-	movel	a0@(4),a1@(4)	| result = + Infinity (for now)
-	movel	#62,_errno	| NAN => errno = EDOM
-	pea	Domain		| for printf
-error_exit:
-	pea	__iob+52	|
-	jbsr	_fprintf	|
-	addqw	#8,a7		| leave _funcname on stack
-	moveml	a7@+,d0/a1
-	bra	continue
-
-error_minus_i:
-	moveml	d0/a1,a7@-
-	movel	#63,_errno	| errno = ERANGE
-	pea	Overflow	| for printf
-	bra	error_exit_i	|
-error_plus_i:
-	moveml	d0/a1,a7@-
-	movel	#63,_errno	| NAN => errno = EDOM
-	pea	Overflow	| for printf
-	bra	error_exit_i	|
-error_nan_i:
-	moveml	d0/a1,a7@-
-	lea	__infinitydf,a0
-	movel	a0@,a1@(8)	| result = + Infinity (for now)
-	movel	a0@(4),a1@(12)	| result = + Infinity (for now)
-	movel	#62,_errno	| NAN => errno = EDOM
-	pea	Domain		| for printf
-error_exit_i:
-	pea	__iob+52	|
-	jbsr	_fprintf	|
-	addw	#12,a7		|
-	moveml	a7@+,d0/a1
-
-	rts
-.data
-.even
-|double_max:
-|	.long	0x7fee42d1
-|	.long	0x30273b76
-|double_min:
-|	.long	0xffee42d1
-|	.long	0x30273b76
-|NaN:
-|	.long	0x7fffffff
-|	.long	0xffffffff
-|p_Inf:
-|	.long	0x7ff00000
-|	.long	0x00000000
-|m_Inf:
-|	.long	0xfff00000
-|	.long	0x00000000
-Overflow:
-	.ascii	": Overflow\n\0"
-	.even
-Domain:
-	.ascii	": Domain error\n\0"
-	.even
diff --git a/pmlsrc/cexp.c b/pmlsrc/cexp.c
index ff363b0..ca234c0 100644
--- a/pmlsrc/cexp.c
+++ b/pmlsrc/cexp.c
@@ -62,11 +62,12 @@
  *
  */
 
-#if !defined (__M68881__) && !defined (sfp004)
-
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
+
+#if !defined (__M68881__) && !defined (sfp004)
 
 
 COMPLEX cexp (z)
@@ -83,116 +84,116 @@ COMPLEX z;
 
 #else	!defined (__M68881__) && !defined (sfp004)
 #ifdef	ERROR_CHECK
-__asm("
-.text
-.even
-_funcname:
-	.ascii \"cexp\\0\"
-	.even
-");
-#endif	ERROR_CHECK
+__asm(
+".text\t\n"
+".even\t\n"
+"_funcname:\t\n"
+"	.ascii \"cexp\\0\"\t\n"
+"	.even\t\n"
+);
+#endif /* ERROR_CHECK */
 #endif	!defined (__M68881__) && !defined (sfp004)
 
 #ifdef	__M68881__
 
-__asm("
-	.text 
-	.even
-	.globl _cexp
-_cexp:
-	fmovex	fp2,sp@-	| 12 Bytes
-	movel	a1,d0		| save a1 as return value
-	fetoxd	a7@(16),fp0	| exp( z.real )
-	fmoved	a7@(24),fp2
-	fcosx	fp2,fp1
-	fsinx	fp2,fp2
-	fmulx	fp0,fp1		|
-	fmulx	fp0,fp2		|
-	fmoved	fp1,a1@		| fetch result.real
-	fmoved	fp2,a1@(8)	| fetch result.imag
-	fmovex	sp@+,fp2
-");	/* end asm	*/
-#endif	__M68881__
+__asm(
+"	.text\t\n"
+"	.even\t\n"
+"	.globl " C_SYMBOL_NAME(cexp) "\t\n"
+C_SYMBOL_NAME(cexp) ":\t\n"
+"	fmovex	%fp2,%sp@-	| 12 Bytes\t\n"
+"	movel	%a1,%d0		| save a1 as return value\t\n"
+"	fetoxd	%a7@(16),%fp0	| exp( z.real )\t\n"
+"	fmoved	%a7@(24),%fp2\t\n"
+"	fcosx	%fp2,%fp1\t\n"
+"	fsinx	%fp2,%fp2\t\n"
+"	fmulx	%fp0,%fp1		|\t\n"
+"	fmulx	%fp0,%fp2		|\t\n"
+"	fmoved	%fp1,%a1@		| fetch result.real\t\n"
+"	fmoved	%fp2,%a1@(8)	| fetch result.imag\t\n"
+"	fmovex	%sp@+,%fp2\t\n"
+);	/* end asm	*/
+#endif /* __M68881__ */
 
 #ifdef	sfp004
-__asm("
-| double precision floating point stuff for Atari-gcc using the SFP004
-| developed with gas
-|
-| double precision complex exponential function
-|
-| M. Ritzert (mjr at dmzrzu71)
-|
-| 12.10.1990
-|
-| addresses of the 68881 data port. This choice is fastest when much data is
-| transferred between the two processors.
-
-comm =	 -6
-resp =	-16
-zahl =	  0
-
-| waiting loop ...
-|
-| wait:
-| ww:	cmpiw	#0x8900,a1@(resp)
-| 	beq	ww
-| is coded directly by
-|	.long	0x0c688900, 0xfff067f8
-| and
-| www:	tst.b	a1@(resp)
-|	bmi.b	www
-| is coded by
-|	.word	0x4a68,0xfff0,0x6bfa		| test
-
-	.text; .even
-	.globl _cexp
-_cexp:
-	movel	a1,d0				| save a1 as return value
-	lea	0xfffa50,a0			| fpu address
-	movew	#0x5410,a0@(comm)		| exp()
-	cmpiw	#0x8900,a0@(resp)		| check
-	movel	a7@(4),a0@			| load arg_hi
-	movel	a7@(8),a0@			| load arg_low
-
-|	movew	#%0101 0101 0011 0001,a0@(comm)	| sincos: sin -> fp2
-	movew	#0x5531,a0@(comm)		| sincos: sin -> fp2
-	.long	0x0c688900, 0xfff067f8
-	movel	a7@(12),a0@			| load arg_hi
-	movel	a7@(16),a0@			| load arg_low
-
-|	movew	#%0000 0000 1010 0011,a0@(comm)	| mul fp0 -> fp1
-	movew	#0x00a3,a0@(comm)		| mul fp0 -> fp1
-	.word	0x4a68,0xfff0,0x6bfa		| test
-
-|	movew	#%0000 0001 0010 0011,a0@(comm)	| mul fp0 -> fp2
-	movew	#0x0123,a0@(comm)		| mul fp0 -> fp2
-	.word	0x4a68,0xfff0,0x6bfa		| test
-
-|	movew	#%0111 0100 1000 0000,a0@(comm)	| fetch fp1
-	movew	#0x7480,a0@(comm)		|
-	.long	0x0c688900, 0xfff067f8
-	movel	a0@(zahl),a1@
-	movel	a0@(zahl),a1@(4)
-
-|	movew	#%0111 0101 0000 0000,a0@(comm)	| fetch fp2
-	movew	#0x7500,a0@(comm)		| 
-	.long	0x0c688900, 0xfff067f8
-	movel	a0@(zahl),a1@(8)
-	movel	a0@(zahl),a1@(12)
-");	/* end asm	*/
-#endif	sfp004
+__asm(
+"| double precision floating point stuff for Atari-gcc using the SFP004\t\n"
+"| developed with gas\t\n"
+"|\t\n"
+"| double precision complex exponential function\t\n"
+"|\t\n"
+"| M. Ritzert (mjr at dmzrzu71)\t\n"
+"|\t\n"
+"| 12.10.1990\t\n"
+"|\t\n"
+"| addresses of the 68881 data port. This choice is fastest when much data is\t\n"
+"| transferred between the two processors.\t\n"
+"\t\n"
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
+"\t\n"
+"| waiting loop ...\t\n"
+"|\t\n"
+"| wait:\t\n"
+"| ww:	cmpiw	#0x8900,%a1@(resp)\t\n"
+"| 	beq	ww\t\n"
+"| is coded directly by\t\n"
+"|	.long	0x0c688900, 0xfff067f8\t\n"
+"| and\t\n"
+"| www:	tst.b	%a1@(resp)\t\n"
+"|	bmi.b	www\t\n"
+"| is coded by\t\n"
+"|	.word	0x4a68,0xfff0,0x6bfa		| test\t\n"
+"\t\n"
+"	.text; .even\t\n"
+"	.globl " C_SYMBOL_NAME(cexp) "\t\n"
+C_SYMBOL_NAME(cexp) ":\t\n"
+"	movel	%a1,%d0				| save a1 as return value\t\n"
+"	lea	0xfffa50,%a0			| fpu address\t\n"
+"	movew	#0x5410,%a0@(comm)		| exp()\t\n"
+"	cmpiw	#0x8900,%a0@(resp)		| check\t\n"
+"	movel	%a7@(4),%a0@			| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@			| load arg_low\t\n"
+"\t\n"
+"|	movew	#%0101 0101 0011 0001,%a0@(comm)	| sincos: sin -> fp2\t\n"
+"	movew	#0x5531,%a0@(comm)		| sincos: sin -> fp2\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a7@(12),%a0@			| load arg_hi\t\n"
+"	movel	%a7@(16),%a0@			| load arg_low\t\n"
+"\t\n"
+"|	movew	#%0000 0000 1010 0011,%a0@(comm)	| mul fp0 -> fp1\t\n"
+"	movew	#0x00a3,%a0@(comm)		| mul fp0 -> fp1\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa		| test\t\n"
+"\t\n"
+"|	movew	#%0000 0001 0010 0011,%a0@(comm)	| mul fp0 -> fp2\t\n"
+"	movew	#0x0123,%a0@(comm)		| mul fp0 -> fp2\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa		| test\t\n"
+"\t\n"
+"|	movew	#%0111 0100 1000 0000,%a0@(comm)	| fetch fp1\t\n"
+"	movew	#0x7480,%a0@(comm)		|\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a0@(zahl),%a1@\t\n"
+"	movel	%a0@(zahl),%a1@(4)\t\n"
+"\t\n"
+"|	movew	#%0111 0101 0000 0000,%a0@(comm)	| fetch fp2\t\n"
+"	movew	#0x7500,%a0@(comm)		| \t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a0@(zahl),%a1@(8)\t\n"
+"	movel	%a0@(zahl),%a1@(12)\t\n"
+);	/* end asm	*/
+#endif /* sfp004 */
 
 
 #if defined (__M68881__) || defined (sfp004)
 # ifdef ERROR_CHECK	/* no error checking for now	*/
-__asm("
-	pea	_funcname
-	jmp	c_err_check
-");	/* end asm	*/
-# else  ERROR_CHECK
+__asm(
+"	pea	_funcname\t\n"
+"	jmp	c_err_check\t\n"
+);	/* end asm	*/
+# else /* ERROR_CHECK */
 
 __asm("rts");
 
-# endif ERROR_CHECK
+# endif /* ERROR_CHECK */
 #endif defined (__M68881__) || defined (sfp004)
diff --git a/pmlsrc/cmult.c b/pmlsrc/cmult.c
index 9fa66b9..fbd7495 100644
--- a/pmlsrc/cmult.c
+++ b/pmlsrc/cmult.c
@@ -62,11 +62,12 @@
  *
  */
 
-#if !defined (__M68881__) && !defined (sfp004)
-
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
+
+#if !defined (__M68881__) && !defined (sfp004)
 
 COMPLEX cmult (z1, z2)
 COMPLEX z1;
@@ -79,125 +80,125 @@ COMPLEX z2;
 
     return (result);
 }
-#endif !defined (__M68881__) && !defined (sfp004)
+#endif /* !defined (__M68881__) && !defined (sfp004) */
 #ifdef	__M68881__
-__asm("
-.text
-.even
-_funcname:
-	.ascii	\"cmult\\0\"
-	.even
-
-.globl	_cmult
-_cmult:
-	fmoved	sp@(4),fp0
-	fmoved	sp@(12),fp1
-	fmoved	sp@(20),fp2
-	fmoved	sp@(28),fp3
-	fmovex	fp0,fp4
-	movel	a1,d0		| pointer to result
-
-	fmulx	fp2,fp4
-	fmulx	fp3,fp0
-	fmulx	fp1,fp2
-	fmulx	fp1,fp3
-
-	fsubx	fp3,fp4
-	faddx	fp0,fp2
-
-	fmoved	fp4,a1@
-	fmoved	fp2,a1@(8)
-");	/* end asm	*/
-#endif	__M68881__
+__asm(
+".text\t\n"
+".even\t\n"
+"_funcname:\t\n"
+"	.ascii	\"cmult\\0\"\t\n"
+"	.even\t\n"
+"\t\n"
+".globl	" C_SYMBOL_NAME(cmult) "\t\n"
+C_SYMBOL_NAME(cmult) ":\t\n"
+"	fmoved	%sp@(4),%fp0\t\n"
+"	fmoved	%sp@(12),%fp1\t\n"
+"	fmoved	%sp@(20),%fp2\t\n"
+"	fmoved	%sp@(28),%fp3\t\n"
+"	fmovex	%fp0,%fp4\t\n"
+"	movel	%a1,%d0		| pointer to result\t\n"
+"\t\n"
+"	fmulx	%fp2,%fp4\t\n"
+"	fmulx	%fp3,%fp0\t\n"
+"	fmulx	%fp1,%fp2\t\n"
+"	fmulx	%fp1,%fp3\t\n"
+"\t\n"
+"	fsubx	%fp3,%fp4\t\n"
+"	faddx	%fp0,%fp2\t\n"
+"\t\n"
+"	fmoved	%fp4,%a1@\t\n"
+"	fmoved	%fp2,%a1@(8)\t\n"
+);	/* end asm	*/
+#endif /* __M68881__ */
 
 #ifdef	sfp004
-__asm("
-
-comm =	 -6
-resp =	-16
-zahl =	  0
-
-.even
-.text
-.even
-_funcname:
-	.ascii	\"cmult\\0\"
-	.even
-.text
-.even
-.globl	_cmult
-_cmult:
-
-	lea	0xfffa50,a0
-
-	movew	#0x5400,a0@(comm)	| z1.real -> fp0
-	movel	a1,d0		| pointer to result
-	.long	0x0c688900, 0xfff067f8
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-
-	movew	#0x5480,a0@(comm)	| z1.imag -> fp1
-	.long	0x0c688900, 0xfff067f8
-	movel	a7@(12),a0@		| load arg_hi
-	movel	a7@(16),a0@		| load arg_low
-
-	movew	#0x5500,a0@(comm)	| z2.real -> fp2
-	.long	0x0c688900, 0xfff067f8
-	movel	a7@(20),a0@		| load arg_hi
-	movel	a7@(24),a0@		| load arg_low
-
-	movew	#0x5580,a0@(comm)	| z2.imag -> fp3
-	.long	0x0c688900, 0xfff067f8
-	movel	a7@(28),a0@		| load arg_hi
-	movel	a7@(32),a0@		| load arg_low
-
-	movew	#0x0200,a0@(comm)	| copy fp0 to fp4
-	.word	0x4a68,0xfff0,0x6bfa	| test
-
-|	fmulx	fp2,fp4
-	movew	#0x0a23,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-|	fmulx	fp3,fp0
-	movew	#0x0c23,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-|	fmulx	fp1,fp2
-	movew	#0x0523,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-|	fmulx	fp1,fp3
-	movew	#0x05a3,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-|	fsubx	fp3,fp4
-	movew	#0x0e28,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-|	faddx	fp0,fp2
-	movew	#0x0122,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-
-|	fmoved	fp4,a1@
-	movew	#0x7600,a0@(comm)		| 
-	.long	0x0c688900, 0xfff067f8
-	movel	a0@,a1@
-	movel	a0@,a1@(4)
-
-|	fmoved	fp2,d1
-	movew	#0x7500,a0@(comm)		| 
-	.long	0x0c688900, 0xfff067f8
-	movel	a0@,a1@(8)
-	movel	a0@,a1@(12)
-");	/* end asm	*/
-#endif	sfp004
+__asm(
+"\t\n"
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
+"\t\n"
+".even\t\n"
+".text\t\n"
+".even\t\n"
+"_funcname:\t\n"
+"	.ascii	\"cmult\\0\"\t\n"
+"	.even\t\n"
+".text\t\n"
+".even\t\n"
+".globl	" C_SYMBOL_NAME(cmult) "\t\n"
+C_SYMBOL_NAME(cmult) ":\t\n"
+"\t\n"
+"	lea	0xfffa50,%a0\t\n"
+"\t\n"
+"	movew	#0x5400,%a0@(comm)	| z1.real -> fp0\t\n"
+"	movel	%a1,%d0		| pointer to result\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"\t\n"
+"	movew	#0x5480,%a0@(comm)	| z1.imag -> fp1\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a7@(12),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(16),%a0@		| load arg_low\t\n"
+"\t\n"
+"	movew	#0x5500,%a0@(comm)	| z2.real -> fp2\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a7@(20),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(24),%a0@		| load arg_low\t\n"
+"\t\n"
+"	movew	#0x5580,%a0@(comm)	| z2.imag -> fp3\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a7@(28),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(32),%a0@		| load arg_low\t\n"
+"\t\n"
+"	movew	#0x0200,%a0@(comm)	| copy fp0 to fp4\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"\t\n"
+"|	fmulx	%fp2,%fp4\t\n"
+"	movew	#0x0a23,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"|	fmulx	%fp3,%fp0\t\n"
+"	movew	#0x0c23,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"|	fmulx	%fp1,%fp2\t\n"
+"	movew	#0x0523,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"|	fmulx	%fp1,%fp3\t\n"
+"	movew	#0x05a3,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"|	fsubx	%fp3,%fp4\t\n"
+"	movew	#0x0e28,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"|	faddx	%fp0,%fp2\t\n"
+"	movew	#0x0122,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"\t\n"
+"|	fmoved	%fp4,%a1@\t\n"
+"	movew	#0x7600,%a0@(comm)		| \t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a0@,%a1@\t\n"
+"	movel	%a0@,%a1@(4)\t\n"
+"\t\n"
+"|	fmoved	%fp2,%d1\t\n"
+"	movew	#0x7500,%a0@(comm)		| \t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a0@,%a1@(8)\t\n"
+"	movel	%a0@,%a1@(12)\t\n"
+);	/* end asm	*/
+#endif /* sfp004 */
 
 #if defined (__M68881__) || defined (sfp004)
 # ifdef ERROR_CHECK	/* no error checking for now	*/
 
-__asm("	
-	pea	_funcname
-	jmp	c_err_check
-");	/* end asm	*/
+__asm(
+"	pea	_funcname\t\n"
+"	jmp	c_err_check\t\n"
+);	/* end asm	*/
 
-# else  ERROR_CHECK
+# else /* ERROR_CHECK */
 
 __asm("rts");
 
-# endif ERROR_CHECK
+# endif /* ERROR_CHECK */
 #endif defined (__M68881__) || defined (sfp004)
diff --git a/pmlsrc/cos.c b/pmlsrc/cos.c
index 0667f24..767720a 100644
--- a/pmlsrc/cos.c
+++ b/pmlsrc/cos.c
@@ -129,6 +129,7 @@
 # include <stdio.h>
 # include <math.h>
 # include "pml.h"
+#include "symbols.h"
 
 #if !defined (__M68881__) && !defined (sfp004)	/* mjr++		*/
 
@@ -186,125 +187,112 @@ double x;
 #endif	/* !__M68881 && !sfp004	*/
 #ifdef	sfp004
 
-__asm("
+__asm(
+"\t\n"
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
+"\t\n"
+);	/* end asm	*/
 
-comm =	 -6
-resp =	-16
-zahl =	  0
-
-");	/* end asm	*/
-
-#endif	sfp004
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
     __asm(".text; .even");
 
 # ifdef	ERROR_CHECK
 
-    __asm("
-
-_Overflow:
-	.ascii \"OVERFLOW\\0\"
-_Domain:
-	.ascii \"DOMAIN\\0\"
-_Error_String:
-	.ascii \"cos: %s error\\n\\0\"
-.even
-| pml compatible cosgent
-| m.ritzert 7.12.1991
-| ritzert@dfg.dbp.de
-|
-|    /* NAN  = {7fffffff,ffffffff}		*/
-|    /* +Inf = {7ff00000,00000000}		*/
-|    /* -Inf = {fff00000,00000000}		*/
-|    /* MAX_D= {7fee42d1,30773b76}		*/
-|    /* MIN_D= {ffee42d1,30773b76}		*/
-
-.even
-double_max:
-	.long	0x7fee42d1
-	.long	0x30273b76
-double_min:
-	.long	0xffee42d1
-	.long	0x30273b76
-NaN:
-	.long	0x7fffffff
-	.long	0xffffffff
-p_Inf:
-	.long	0x7ff00000
-	.long	0x00000000
-m_Inf:
-	.long	0xfff00000
-	.long	0x00000000
-");
-#endif	ERROR_CHECK
+    __asm(
+".even\t\n"
+"| pml compatible cosgent\t\n"
+"| m.ritzert 7.12.1991\t\n"
+"| ritzert@dfg.dbp.de\t\n"
+"|\t\n"
+"|    /* NAN  = {7fffffff,ffffffff}		*/\t\n"
+"|    /* +Inf = {7ff00000,00000000}		*/\t\n"
+"|    /* -Inf = {fff00000,00000000}		*/\t\n"
+"|    /* MAX_D= {7fee42d1,30773b76}		*/\t\n"
+"|    /* MIN_D= {ffee42d1,30773b76}		*/\t\n"
+"\t\n"
+".even\t\n"
+"double_max:\t\n"
+"	.long	0x7fee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"double_min:\t\n"
+"	.long	0xffee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"NaN:\t\n"
+"	.long	0x7fffffff\t\n"
+"	.long	0xffffffff\t\n"
+"p_Inf:\t\n"
+"	.long	0x7ff00000\t\n"
+"	.long	0x00000000\t\n"
+"m_Inf:\t\n"
+"	.long	0xfff00000\t\n"
+"	.long	0x00000000\t\n"
+);
+#endif /* ERROR_CHECK */
 
-__asm("
-.even
-	.globl _cos
-_cos:
-");	/* end asm	*/
+__asm(
+".even\t\n"
+"	.globl " C_SYMBOL_NAME(cos) "\t\n"
+C_SYMBOL_NAME(cos) ":\t\n"
+);	/* end asm	*/
 
 #endif	/* __M68881__ || sfp004	*/
 #ifdef	__M68881__
 
-    __asm("
-	fcosd	a7@(4), fp0	| cos
-	fmoved	fp0,a7@-	| push result
-	moveml	a7@+,d0-d1	| return_value
-    ");	/* end asm	*/
+    __asm(
+"	fcosd	%a7@(4), %fp0	| cos\t\n"
+"	fmoved	%fp0,%a7@-	| push result\t\n"
+"	moveml	%a7@+,%d0-%d1	| return_value\t\n"
+    );	/* end asm	*/
 
-#endif	__M68881__
+#endif /* __M68881__ */
 #ifdef	sfp004
-    __asm("
-	lea	0xfffa50,a0
-	movew	#0x541d,a0@(comm)	| specify function
-	cmpiw	#0x8900,a0@(resp)	| check
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-	movew	#0x7400,a0@(comm)	| result to d0
-	.long	0x0c688900, 0xfff067f8	| wait
-	movel	a0@,d0
-	movel	a0@,d1
-    ");	/* end asm	*/
+    __asm(
+"	lea	0xfffa50,%a0\t\n"
+"	movew	#0x541d,%a0@(comm)	| specify function\t\n"
+"	cmpiw	#0x8900,%a0@(resp)	| check\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"	movew	#0x7400,%a0@(comm)	| result to d0\t\n"
+"	.long	0x0c688900, 0xfff067f8	| wait\t\n"
+"	movel	%a0@,%d0\t\n"
+"	movel	%a0@,%d1\t\n"
+    );	/* end asm	*/
 
-#endif	sfp004
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 # ifdef	ERROR_CHECK
-    __asm("
-	lea	double_max,a0	|
-	swap	d0		| exponent into lower word
-	cmpw	a0@(16),d0	| == NaN ?
-	beq	error_nan	|
-	swap	d0		| result ok,
-	rts			| restore d0
-");
+    __asm(
+"	lea	double_max,%a0	|\t\n"
+"	swap	%d0		| exponent into lower word\t\n"
+"	cmpw	%a0@(16),%d0	| == NaN ?\t\n"
+"	beq	error_nan	|\t\n"
+"	swap	%d0		| result ok,\t\n"
+"	rts			| restore d0\t\n"
+);
 #ifndef	__MSHORT__
-__asm("
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movel	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
+__asm(
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
 #else	__MSHORT__
-__asm("
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movew	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
+__asm(
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
 #endif	__MSHORT__
-__asm("
-error_exit:
-	pea	_Error_String	|
-	pea	__iob+52	|
-	jbsr	_fprintf	|
-	addl	#12,a7		|
-	moveml	a7@+,d0-d1
-	rts
-    ");
-# else	ERROR_CHECK
+__asm(
+"error_exit:\t\n"
+"	moveml	%a7@+,%d0-%d1\t\n"
+"	rts\t\n"
+    );
+# else	/* ERROR_CHECK */
 __asm("rts");
-# endif	ERROR_CHECK
+# endif	/* ERROR_CHECK */
 #endif /* __M68881__ || sfp004	*/
diff --git a/pmlsrc/cosh.c b/pmlsrc/cosh.c
index d505eaa..6f5cc98 100644
--- a/pmlsrc/cosh.c
+++ b/pmlsrc/cosh.c
@@ -68,6 +68,7 @@
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
 
 #if !defined (__M68881__) && !defined (sfp004)	/* mjr++		*/
 
@@ -83,7 +84,6 @@ double x;
 	xcpt.name = funcname;
 	xcpt.arg1 = x;
 	if (!matherr (&xcpt)) {
-	    fprintf (stderr, "%s: OVERFLOW error\n", funcname);
 	    errno = ERANGE;
 	    xcpt.retval = MAXDOUBLE;
 	}
@@ -92,7 +92,6 @@ double x;
 	xcpt.name = funcname;
 	xcpt.arg1 = x;
 	if (!matherr (&xcpt)) {
-	    fprintf (stderr, "%s: UNDERFLOW error\n", funcname);
 	    errno = ERANGE;
 	    xcpt.retval = MINDOUBLE;
 	}
@@ -104,155 +103,138 @@ double x;
 }
 #endif	/* !__M68881__ && !sfp004	*/
 #ifdef	sfp004
-__asm("
+__asm(
+"\t\n"
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
 
-comm =	 -6
-resp =	-16
-zahl =	  0
+);	/* end asm	*/
 
-");	/* end asm	*/
-
-#endif	sfp004
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
     __asm(".text; .even");
 
 # ifdef	ERROR_CHECK
 
-    __asm("
-
-_Overflow:
-	.ascii \"OVERFLOW\\0\"
-_Domain:
-	.ascii \"DOMAIN\\0\"
-_Error_String:
-	.ascii \"cosh: %s error\\n\\0\"
-.even
-| pml compatible coshgent
-| m.ritzert 7.12.1991
-| ritzert@dfg.dbp.de
-|
-|    /* NAN  = {7fffffff,ffffffff}		*/
-|    /* +Inf = {7ff00000,00000000}		*/
-|    /* -Inf = {fff00000,00000000}		*/
-|    /* MAX_D= {7fee42d1,30773b76}		*/
-|    /* MIN_D= {ffee42d1,30773b76}		*/
-
-.even
-double_max:
-	.long	0x7fee42d1
-	.long	0x30273b76
-double_min:
-	.long	0xffee42d1
-	.long	0x30273b76
-NaN:
-	.long	0x7fffffff
-	.long	0xffffffff
-p_Inf:
-	.long	0x7ff00000
-	.long	0x00000000
-m_Inf:
-	.long	0xfff00000
-	.long	0x00000000
-    ");	/* end asm	*/
-# endif	ERROR_CHECK
-
-__asm("
-.even
-	.globl _cosh
-_cosh:
-    ");	/* end asm	*/
+    __asm(
+"\t\n"
+"| pml compatible coshgent\t\n"
+"| m.ritzert 7.12.1991\t\n"
+"| ritzert@dfg.dbp.de\t\n"
+"|\t\n"
+"|    /* NAN  = {7fffffff,ffffffff}		*/\t\n"
+"|    /* +Inf = {7ff00000,00000000}		*/\t\n"
+"|    /* -Inf = {fff00000,00000000}		*/\t\n"
+"|    /* MAX_D= {7fee42d1,30773b76}		*/\t\n"
+"|    /* MIN_D= {ffee42d1,30773b76}		*/\t\n"
+"\t\n"
+".even\t\n"
+"double_max:\t\n"
+"	.long	0x7fee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"double_min:\t\n"
+"	.long	0xffee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"NaN:\t\n"
+"	.long	0x7fffffff\t\n"
+"	.long	0xffffffff\t\n"
+"p_Inf:\t\n"
+"	.long	0x7ff00000\t\n"
+"	.long	0x00000000\t\n"
+"m_Inf:\t\n"
+"	.long	0xfff00000\t\n"
+"	.long	0x00000000\t\n"
+    );	/* end asm	*/
+# endif	/* ERROR_CHECK */
+
+__asm(
+".even\t\n"
+"	.globl " C_SYMBOL_NAME(cosh) "\t\n"
+C_SYMBOL_NAME(cosh) ":\t\n"
+    );	/* end asm	*/
 
 #endif	/* __M68881__ || sfp004	*/
 #ifdef	__M68881__
 
-    __asm("
-	fcoshd	a7@(4), fp0	| cosh
-	fmoved	fp0,a7@-	| push result
-	moveml	a7@+,d0-d1	| return_value
-    ");	/* end asm	*/
+    __asm(
+"	fcoshd	%a7@(4), %fp0	| cosh\t\n"
+"	fmoved	%fp0,%a7@-	| push result\t\n"
+"	moveml	%a7@+,%d0-%d1	| return_value\t\n"
+    );	/* end asm	*/
 
-#endif	__M68881__
+#endif /* __M68881__ */
 #ifdef	sfp004
-    __asm("
-	lea	0xfffa50,a0
-	movew	#0x5419,a0@(comm)	| specify function
-	cmpiw	#0x8900,a0@(resp)	| check
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-	movew	#0x7400,a0@(comm)	| result to d0
-	.long	0x0c688900, 0xfff067f8	| wait
-	movel	a0@,d0
-	movel	a0@,d1
-    ");	/* end asm	*/
-
-#endif	sfp004
+    __asm(
+"	lea	0xfffa50,%a0\t\n"
+"	movew	#0x5419,%a0@(comm)	| specify function\t\n"
+"	cmpiw	#0x8900,%a0@(resp)	| check\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"	movew	#0x7400,%a0@(comm)	| result to d0\t\n"
+"	.long	0x0c688900, 0xfff067f8	| wait\t\n"
+"	movel	%a0@,%d0\t\n"
+"	movel	%a0@,%d1\t\n"
+);	/* end asm	*/
+
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 # ifdef	ERROR_CHECK
-    __asm("
-	lea	double_max,a0	|
-	swap	d0		| exponent into lower word
-	cmpw	a0@(16),d0	| == NaN ?
-	beq	error_nan	|
-	cmpw	a0@(24),d0	| == + Infinity ?
-	beq	error_plus	|
-	cmpw	a0@(32),d0	| == - Infinity ?
-	beq	error_minus	|
-	swap	d0		| result ok,
-	rts			| restore d0
-");
+    __asm(
+"	lea	double_max,%a0	|\t\n"
+"	swap	%d0		| exponent into lower word\t\n"
+"	cmpw	%a0@(16),%d0	| == NaN ?\t\n"
+"	beq	error_nan	|\t\n"
+"	cmpw	%a0@(24),%d0	| == + Infinity ?\t\n"
+"	beq	error_plus	|\t\n"
+"	cmpw	%a0@(32),%d0	| == - Infinity ?\t\n"
+"	beq	error_minus	|\t\n"
+"	swap	%d0		| result ok,\t\n"
+"	rts			| restore d0\t\n"
+);
 #ifndef	__MSHORT__
-__asm("
-error_minus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movel	#63,_errno	| errno = ERANGE
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movel	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movel	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
+__asm(
+"error_minus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#63," C_SYMBOL_NAME(errno) "	| errno = ERANGE\t\n"
+"	bra	error_exit	|\t\n"
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
 #else	__MSHORT__
-__asm("
-error_minus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movew	#63,_errno	| errno = ERANGE
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movew	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movew	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
+__asm(
+"error_minus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#63," C_SYMBOL_NAME(errno) "	| errno = ERANGE\t\n"
+"	bra	error_exit	|\t\n"
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
 #endif	__MSHORT__
-__asm("
-error_exit:
-	pea	_Error_String	|
-	pea	__iob+52	|
-	jbsr	_fprintf	|
-	addl	#12,a7		|
-	moveml	a7@+,d0-d1
-	rts
-    ");
-# else	ERROR_CHECK
+__asm(
+"error_exit:\t\n"
+"	moveml	%a7@+,%d0-%d1\t\n"
+"	rts\t\n"
+    );
+# else	/* ERROR_CHECK */
 
 __asm("rts");
 
-# endif	ERROR_CHECK
+# endif	/* ERROR_CHECK */
 #endif /* __M68881__ || sfp004	*/
diff --git a/pmlsrc/crcp.c b/pmlsrc/crcp.c
index 2d44627..40918bf 100644
--- a/pmlsrc/crcp.c
+++ b/pmlsrc/crcp.c
@@ -79,7 +79,6 @@ COMPLEX z;
 	xcpt.name = "crcp";
 	xcpt.arg1 = denom;
 	if (!matherr (&xcpt)) {
-	    fprintf (stderr, "%s: ZERO_CMPLX_DENOMINATOR \n", xcpt.name);
 	    errno = ERANGE;
 	    xcpt.retval = 0.0;	/* useless in this context */
 	}
diff --git a/pmlsrc/csin.c b/pmlsrc/csin.c
index 1d44cb9..2afbef8 100644
--- a/pmlsrc/csin.c
+++ b/pmlsrc/csin.c
@@ -61,11 +61,12 @@
  *
  */
 
-#if !defined (__M68881__) && !defined (sfp004)
-
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
+
+#if !defined (__M68881__) && !defined (sfp004)
 
 COMPLEX csin (z)
 COMPLEX z;
@@ -76,123 +77,123 @@ COMPLEX z;
     result.imag = cos (z.real) * sinh (z.imag);
     return (result);
 }
-#endif !defined (__M68881__) && !defined (sfp004)
+#endif /* !defined (__M68881__) && !defined (sfp004) */
 
 #if defined (__M68881__) || defined (sfp004)
 # ifdef ERROR_CHECK	/* no error checking for now	*/
-__asm("
-.text
-_funcname:
-	.ascii	\"csin\\0\"
-	.even
-");	/* end asm	*/
-# endif ERROR_CHECK
-#endif defined (__M68881__) || defined (sfp004)
+__asm(
+".text\t\n"
+"_funcname:\t\n"
+"	.ascii	\"csin\\0\"\t\n"
+"	.even\t\n"
+);	/* end asm	*/
+# endif /* ERROR_CHECK */
+#endif /* defined (__M68881__) || defined (sfp004) */
 
 #ifdef	__M68881__
-__asm("
-.text
-	.globl _csin
-_csin:
-	movel	a1,d0		| save a1 as return value
-	fmoved	sp@(4),fp0	| z.real
-	fcosx	fp0,fp1		| cos(z.real)
-	fsinx	fp0,fp0		| sin(z.real)
-
-	fmoved	sp@(12),fp3	| z.imag
-	fcoshx	fp3,fp2		| cosh(z.imag)
-	fsinhx	fp3,fp3		| sinh(z.imag)
-	
-	fmulx	fp2,fp0		| result.real
-	fmoved	fp0,a1@		|
-	fmulx	fp3,fp1		| result.imag
-	fmoved	fp1,a1@(8)	|
-");	/* end asm	*/
-#endif	__M68881__
+__asm(
+".text\t\n"
+"	.globl " C_SYMBOL_NAME(csin) "\t\n"
+C_SYMBOL_NAME(csin) ":\t\n"
+"	movel	%a1,%d0		| save a1 as return value\t\n"
+"	fmoved	%sp@(4),%fp0	| z.real\t\n"
+"	fcosx	%fp0,%fp1		| cos(z.real)\t\n"
+"	fsinx	%fp0,%fp0		| sin(z.real)\t\n"
+"\t\n"
+"	fmoved	%sp@(12),%fp3	| z.imag\t\n"
+"	fcoshx	%fp3,%fp2		| cosh(z.imag)\t\n"
+"	fsinhx	%fp3,%fp3		| sinh(z.imag)\t\n"
+"	\t\n"
+"	fmulx	%fp2,%fp0		| result.real\t\n"
+"	fmoved	%fp0,%a1@		|\t\n"
+"	fmulx	%fp3,%fp1		| result.imag\t\n"
+"	fmoved	%fp1,%a1@(8)	|\t\n"
+);	/* end asm	*/
+#endif /* __M68881__ */
 
 #ifdef	sfp004
-__asm("
-| double precision floating point stuff for Atari-gcc using the SFP004
-| developed with gas
-|
-| double precision complex sin
-|
-| M. Ritzert (mjr at dmzrzu71)
-|
-| 12.10.1990
-|
-| addresses of the 68881 data port. This choice is fastest when much data is
-| transferred between the two processors.
-
-comm =	 -6
-resp =	-16
-zahl =	  0
-
-| waiting loop ...
-|
-| wait:
-| ww:	cmpiw	#0x8900,a1@(resp)
-| 	beq	ww
-| is coded directly by
-|	.long	0x0c688900, 0xfff067f8
-| and
-| www:	tst.b	a1@(resp)
-|	bmi.b	www
-| is coded by
-|	.word	0x4a68,0xfff0,0x6bfa		| test
-
-	.text; .even
-	.globl _csin
-_csin:
-	movel	a1,d0				| save a1 as return value
-	lea	0xfffa50,a0			| fpu address
-
-	movew	#0x5431,a0@(comm)		| sincos: sin -> fp0 
-	.long	0x0c688900, 0xfff067f8		|	  cos -> fp1
-	movel	sp@(4), a0@			| load z.real
-	movel	sp@(8), a0@			| load z.real
-
-|	fmoved	sp@(12),fp3			| z.imag to fp3
-	movew	#0x5580,a0@(comm)
-	.long	0x0c688900, 0xfff067f8
-	movel	sp@(12),a0@
-	movel	sp@(16),a0@
-
-|	fcoshx	fp3,fp2				| cosh(z.imag)
-	movew	#0x0d19,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa		| test
-|	fsinhx	fp3,fp3				| sinh(z.imag)
-	movew	#0x0d82,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa		| test
-|	fmulx	fp2,fp0				| result.real
-	movew	#0x0823,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa		| test
-|	fmoved	fp0,a1@				|
-	movew	#0x7400,a0@(comm)		| 
-	.long	0x0c688900, 0xfff067f8
-	movel	a0@,a1@
-	movel	a0@,a1@(4)
-|	fmulx	fp3,fp1				| result.imag
-	movew	#0x0ca3,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa		| test
-|	fmoves	fp1,d1				|
-	movew	#0x7480,a0@(comm)		|
-	.long	0x0c688900, 0xfff067f8
-	movel	a0@,a1@(8)
-	movel	a0@,a1@(12)
-");	/* end asm	*/
-#endif	sfp004
+__asm(
+"| double precision floating point stuff for Atari-gcc using the SFP004\t\n"
+"| developed with gas\t\n"
+"|\t\n"
+"| double precision complex sin\t\n"
+"|\t\n"
+"| M. Ritzert (mjr at dmzrzu71)\t\n"
+"|\t\n"
+"| 12.10.1990\t\n"
+"|\t\n"
+"| addresses of the 68881 data port. This choice is fastest when much data is\t\n"
+"| transferred between the two processors.\t\n"
+"\t\n"
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
+"\t\n"
+"| waiting loop ...\t\n"
+"|\t\n"
+"| wait:\t\n"
+"| ww:	cmpiw	#0x8900,%a1@(resp)\t\n"
+"| 	beq	ww\t\n"
+"| is coded directly by\t\n"
+"|	.long	0x0c688900, 0xfff067f8\t\n"
+"| and\t\n"
+"| www:	tst.b	%a1@(resp)\t\n"
+"|	bmi.b	www\t\n"
+"| is coded by\t\n"
+"|	.word	0x4a68,0xfff0,0x6bfa		| test\t\n"
+"\t\n"
+"	.text; .even\t\n"
+"	.globl " C_SYMBOL_NAME(csin) "\t\n"
+C_SYMBOL_NAME(csin) ":\t\n"
+"	movel	%a1,%d0				| save a1 as return value\t\n"
+"	lea	0xfffa50,%a0			| fpu address\t\n"
+"\t\n"
+"	movew	#0x5431,%a0@(comm)		| sincos: sin -> fp0 \t\n"
+"	.long	0x0c688900, 0xfff067f8		|	  cos -> fp1\t\n"
+"	movel	%sp@(4), %a0@			| load z.real\t\n"
+"	movel	%sp@(8), %a0@			| load z.real\t\n"
+"\t\n"
+"|	fmoved	%sp@(12),%fp3			| z.imag to fp3\t\n"
+"	movew	#0x5580,%a0@(comm)\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%sp@(12),%a0@\t\n"
+"	movel	%sp@(16),%a0@\t\n"
+"\t\n"
+"|	fcoshx	%fp3,%fp2				| cosh(z.imag)\t\n"
+"	movew	#0x0d19,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa		| test\t\n"
+"|	fsinhx	%fp3,%fp3				| sinh(z.imag)\t\n"
+"	movew	#0x0d82,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa		| test\t\n"
+"|	fmulx	%fp2,%fp0				| result.real\t\n"
+"	movew	#0x0823,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa		| test\t\n"
+"|	fmoved	%fp0,%a1@				|\t\n"
+"	movew	#0x7400,%a0@(comm)		| \t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a0@,%a1@\t\n"
+"	movel	%a0@,%a1@(4)\t\n"
+"|	fmulx	%fp3,%fp1				| result.imag\t\n"
+"	movew	#0x0ca3,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa		| test\t\n"
+"|	fmoves	%fp1,%d1				|\t\n"
+"	movew	#0x7480,%a0@(comm)		|\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a0@,%a1@(8)\t\n"
+"	movel	%a0@,%a1@(12)\t\n"
+);	/* end asm	*/
+#endif /* sfp004 */
 
 
 #if defined (__M68881__) || defined (sfp004)
 # ifdef ERROR_CHECK	/* no error checking for now	*/
-__asm("
-	pea	_funcname
-	jmp	c_err_check
-");	/* end asm	*/
-# else  ERROR_CHECK
+__asm(
+"	pea	_funcname\t\n"
+"	jmp	c_err_check\t\n"
+);	/* end asm	*/
+# else /* ERROR_CHECK */
 
 __asm("rts");
 
-# endif ERROR_CHECK
+# endif /* ERROR_CHECK */
 #endif defined (__M68881__) || defined (sfp004)
diff --git a/pmlsrc/csubt.c b/pmlsrc/csubt.c
index 769c455..ac68ab2 100644
--- a/pmlsrc/csubt.c
+++ b/pmlsrc/csubt.c
@@ -63,11 +63,12 @@
  *
  */
 
-#if !defined (__M68881__) && !defined (sfp004)
-
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
+
+#if !defined (__M68881__) && !defined (sfp004)
 
 COMPLEX csubt (z1, z2)
 COMPLEX z1;
@@ -77,92 +78,92 @@ COMPLEX z2;
     z1.imag -= z2.imag;
     return (z1);
 }
-#endif !defined (__M68881__) && !defined (sfp004)
+#endif /* !defined (__M68881__) && !defined (sfp004) */
 
 #ifdef	__M68881__
-__asm("
-.text
-.even
-_funcname:
-	.ascii	\"csubt\\0\"
-	.even
-
-.globl	_csubt
-_csubt:
-	fmoved	sp@(4),fp0
-	fsubd	sp@(20),fp0
-	fmoved	sp@(12),fp1
-	fsubd	sp@(28),fp1
-	movel	a1,d0		| pointer to result
-	fmoved	fp0,a1@		| return z.real
-	fmoved	fp1,a1@(8)	| return z.imag
-");	/* end asm	*/
-#endif	__M68881__
+__asm(
+".text\t\n"
+".even\t\n"
+"_funcname:\t\n"
+"	.ascii	\"csubt\\0\"\t\n"
+"	.even\t\n"
+"\t\n"
+".globl	" C_SYMBOL_NAME(csubt) \t\n"
+C_SYMBOL_NAME(csubt) ":\t\n"
+"	fmoved	%sp@(4),%fp0\t\n"
+"	fsubd	%sp@(20),%fp0\t\n"
+"	fmoved	%sp@(12),%fp1\t\n"
+"	fsubd	%sp@(28),%fp1\t\n"
+"	movel	%a1,%d0		| pointer to result\t\n"
+"	fmoved	%fp0,%a1@		| return z.real\t\n"
+"	fmoved	%fp1,%a1@(8)	| return z.imag\t\n"
+);	/* end asm	*/
+#endif /* __M68881__ */
 
 #ifdef	sfp004
-__asm("
-
-comm =	 -6
-resp =	-16
-zahl =	  0
-
-.even
-.text
-.even
-_funcname:
-	.ascii	\"csubt\\0\"
-	.even
-.text
-.even
-.globl	_csubt
-_csubt:
-	lea	0xfffa50,a0
-	movew	#0x5400,a0@(comm)	| z1.real -> fp0
-	.long	0x0c688900, 0xfff067f8
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-
-	movew	#0x5428,a0@(comm)	| fp0 -= z2.real
-	.long	0x0c688900, 0xfff067f8
-	movel	a7@(20),a0@		| load arg_hi
-	movel	a7@(24),a0@		| load arg_low
-
-	movew	#0x5480,a0@(comm)	| z1.imag -> fp1
-	.long	0x0c688900, 0xfff067f8
-	movel	a7@(12),a0@		| load arg_hi
-	movel	a7@(16),a0@		| load arg_low
-
-	movew	#0x54a8,a0@(comm)	| fp1 -= z2.imag
-	movel	a1,d0			| pointer to result
-	.long	0x0c688900, 0xfff067f8
-	movel	a7@(28),a0@		| load arg_hi
-	movel	a7@(32),a0@		| load arg_low
-
-|	movew	#%0111 0101 0000 0000,a0@(comm)	| fetch fp0
-	movew	#0x7400,a0@(comm)		| 
-	.long	0x0c688900, 0xfff067f8
-	movel	a0@(zahl),a1@
-	movel	a0@(zahl),a1@(4)
-
-|	movew	#%0111 0100 1000 0000,a0@(comm)	| fetch fp1
-	movew	#0x7480,a0@(comm)		|
-	.long	0x0c688900, 0xfff067f8
-	movel	a0@(zahl),a1@(8)
-	movel	a0@(zahl),a1@(12)
-");	/* end asm	*/
-#endif	sfp004
+__asm(
+"\t\n"
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
+"\t\n"
+".even\t\n"
+".text\t\n"
+".even\t\n"
+"_funcname:\t\n"
+"	.ascii	\"csubt\\0\"\t\n"
+"	.even\t\n"
+".text\t\n"
+".even\t\n"
+".globl	" C_SYMBOL_NAME(csubt)\t\n"
+C_SYMBOL_NAME(csubt):\t\n"
+"	lea	0xfffa50,%a0\t\n"
+"	movew	#0x5400,%a0@(comm)	| z1.real -> fp0\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"\t\n"
+"	movew	#0x5428,%a0@(comm)	| fp0 -= z2.real\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a7@(20),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(24),%a0@		| load arg_low\t\n"
+"\t\n"
+"	movew	#0x5480,%a0@(comm)	| z1.imag -> fp1\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a7@(12),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(16),%a0@		| load arg_low\t\n"
+"\t\n"
+"	movew	#0x54a8,%a0@(comm)	| fp1 -= z2.imag\t\n"
+"	movel	%a1,%d0			| pointer to result\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a7@(28),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(32),%a0@		| load arg_low\t\n"
+"\t\n"
+"|	movew	#%0111 0101 0000 0000,%a0@(comm)	| fetch fp0\t\n"
+"	movew	#0x7400,%a0@(comm)		| \t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a0@(zahl),%a1@\t\n"
+"	movel	%a0@(zahl),%a1@(4)\t\n"
+"\t\n"
+"|	movew	#%0111 0100 1000 0000,%a0@(comm)	| fetch fp1\t\n"
+"	movew	#0x7480,%a0@(comm)		|\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a0@(zahl),%a1@(8)\t\n"
+"	movel	%a0@(zahl),%a1@(12)\t\n"
+);	/* end asm	*/
+#endif /* sfp004 */
 
 #if defined (__M68881__) || defined (sfp004)
 # ifdef ERROR_CHECK	/* no error checking for now	*/
 
-__asm("	
-	pea	_funcname
-	jmp	c_err_check
-");	/* end asm	*/
+__asm(
+"	pea	_funcname\t\n"
+"	jmp	c_err_check\t\n"
+);	/* end asm	*/
 
-# else  ERROR_CHECK
+# else /* ERROR_CHECK */
 
 __asm("rts");
 
-# endif ERROR_CHECK
+# endif /* ERROR_CHECK */
 #endif defined (__M68881__) || defined (sfp004)
diff --git a/pmlsrc/ctan.c b/pmlsrc/ctan.c
index f448801..c37118b 100644
--- a/pmlsrc/ctan.c
+++ b/pmlsrc/ctan.c
@@ -78,7 +78,6 @@ COMPLEX z;
 
     if (ccosz.real == 0.0 && ccosz.imag == 0.0) {
 #ifdef	ERROR_CHECK
-	fputs (stderr, " ctan: SINGULARITY\n");
 	errno = ERANGE;		/* should be EDOM if csinz.real or csinz.imag == 0	*/
 
 	if( csinz.real >= 0.0)	z.real = HUGE_VAL;	
@@ -87,9 +86,9 @@ COMPLEX z;
 	if( csinz.imag >= 0.0) 	z.imag = HUGE_VAL;
 					/* still wrong, == 0 should yield NAN */
 	else			z.imag = -HUGE_VAL;	
-#else	ERROR_CHECK
+#else /* ERROR_CHECK */
 	z = cdiv(csinz,ccosz);
-#endif	ERROR_CHECK
+#endif /* ERROR_CHECK */
     } else {
 	z = cdiv(csinz,ccosz);
     }
diff --git a/pmlsrc/dabs.c b/pmlsrc/dabs.c
index 6368732..e37ac08 100644
--- a/pmlsrc/dabs.c
+++ b/pmlsrc/dabs.c
@@ -51,26 +51,29 @@
  *	Fred Fish
  *
  */
-#if !defined (OLD)	/* mjr++	*/
-
-__asm("
-.text
-.even
-.globl _dabs
-.globl _fabs
-
-_dabs:
-_fabs:
-	moveml	a7@(4),d0-d1
-	bclr	#31,d0
-	rts
-");
-
-#else OLD
 
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
+
+#if !defined (OLD)	/* mjr++	*/
+
+__asm(
+".text\t\n"
+".even\t\n"
+".globl " C_SYMBOL_NAME(dabs) "\t\n"
+".globl " C_SYMBOL_NAME(fabs) "\t\n"
+"\t\n"
+C_SYMBOL_NAME(dabs) ":\t\n"
+C_SYMBOL_NAME(fabs) ":\t\n"
+"	moveml	%a7@(4),%d0-%d1\t\n"
+"	bclr	#31,%d0\t\n"
+"	rts\t\n"
+);
+
+#else /* OLD */
+
 
 #ifdef IEEE
 struct bitdouble {
@@ -83,7 +86,7 @@ struct bitdouble {
 
 
 #if defined(m68k) && defined(__GNUC__)
-asm(".stabs \"_fabs\",5,0,0,_dabs"); /* dept of clean tricks */
+asm(".stabs \"" C_SYMBOL_NAME(fabs) "\",5,0,0," C_SYMBOL_NAME(dabs)); /* dept of clean tricks */
 #endif
 
 double dabs (x)
@@ -117,4 +120,4 @@ double x;
 }
 #endif
 
-#endif OLD
+#endif /* OLD */
diff --git a/pmlsrc/exp.c b/pmlsrc/exp.c
index af0e021..e2dc012 100644
--- a/pmlsrc/exp.c
+++ b/pmlsrc/exp.c
@@ -130,11 +130,12 @@
  *
  */
 
-#if !defined (__M68881__) && !defined (sfp004)	/* mjr++		*/
-
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
+
+#if !defined (__M68881__) && !defined (sfp004)	/* mjr++		*/
 
 static char funcname[] = "exp";
 
@@ -201,7 +202,6 @@ eset:
 	xcpt.arg1 = x;
 	if (!matherr (&xcpt)) {
             errno = ERANGE;
-	    fprintf (stderr, "%s: %sFLOW error\n", funcname, xcptstr);
 	}
     } else {
 	x *= LOG2E;
@@ -221,143 +221,129 @@ eset:
 #endif	/* !__M68881__ && !sfp004	*/
 #ifdef	sfp004
 
-__asm("
-
-comm =	 -6
-resp =	-16
-zahl =	  0
+__asm(
+"\t\n"
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
+"\t\n"
+);	/* end asm	*/
 
-");	/* end asm	*/
-
-#endif	sfp004
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
     __asm(".text; .even");
 
 # ifdef	ERROR_CHECK
 
-    __asm("
-
-
-_Overflow:
-	.ascii \"OVERFLOW\\0\"
-_Domain:
-	.ascii \"DOMAIN\\0\"
-_Error_String:
-	.ascii \"exp: %s error\\n\\0\"
-.even
-
-| pml compatible expgent
-| m.ritzert 7.12.1991
-| ritzert@dfg.dbp.de
-|
-|    /* NAN  = {7fffffff,ffffffff}		*/
-|    /* +Inf = {7ff00000,00000000}		*/
-|    /* -Inf = {fff00000,00000000}		*/
-|    /* MAX_D= {7fee42d1,30773b76}		*/
-|    /* MIN_D= {ffee42d1,30773b76}		*/
-
-.even
-double_max:
-	.long	0x7fee42d1
-	.long	0x30273b76
-double_min:
-	.long	0xffee42d1
-	.long	0x30273b76
-NaN:
-	.long	0x7fffffff
-	.long	0xffffffff
-p_Inf:
-	.long	0x7ff00000
-	.long	0x00000000
-m_Inf:
-	.long	0xfff00000
-	.long	0x00000000
-");
-#endif	ERROR_CHECK
+    __asm(
+"\t\n"
+"\t\n"
+".even\t\n"
+"\t\n"
+"| pml compatible expgent\t\n"
+"| m.ritzert 7.12.1991\t\n"
+"| ritzert@dfg.dbp.de\t\n"
+"|\t\n"
+"|    /* NAN  = {7fffffff,ffffffff}		*/\t\n"
+"|    /* +Inf = {7ff00000,00000000}		*/\t\n"
+"|    /* -Inf = {fff00000,00000000}		*/\t\n"
+"|    /* MAX_D= {7fee42d1,30773b76}		*/\t\n"
+"|    /* MIN_D= {ffee42d1,30773b76}		*/\t\n"
+"\t\n"
+".even\t\n"
+"double_max:\t\n"
+"	.long	0x7fee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"double_min:\t\n"
+"	.long	0xffee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"NaN:\t\n"
+"	.long	0x7fffffff\t\n"
+"	.long	0xffffffff\t\n"
+"p_Inf:\t\n"
+"	.long	0x7ff00000\t\n"
+"	.long	0x00000000\t\n"
+"m_Inf:\t\n"
+"	.long	0xfff00000\t\n"
+"	.long	0x00000000\t\n"
+);
+#endif /* ERROR_CHECK */
 
-__asm("
-.even
-	.globl _exp
-_exp:
-");	/* end asm	*/
+__asm(
+".even\t\n"
+"	.globl " C_SYMBOL_NAME(exp) "\t\n"
+C_SYMBOL_NAME(exp) ":\t\n"
+);	/* end asm	*/
 
 #endif	/* __M68881__ || sfp004	*/
 #ifdef	__M68881__
 
-    __asm("
-	fetoxd	a7@(4), fp0	| exp
-	fmoved	fp0,a7@-	| push result
-	moveml	a7@+,d0-d1	| return_value
-    ");	/* end asm	*/
+    __asm(
+"	fetoxd	%a7@(4), %fp0	| exp\t\n"
+"	fmoved	%fp0,%a7@-	| push result\t\n"
+"	moveml	%a7@+,%d0-%d1	| return_value\t\n"
+    );	/* end asm	*/
 
-#endif	__M68881__
+#endif /* __M68881__ */
 #ifdef	sfp004
-    __asm("
-	lea	0xfffa50,a0
-	movew	#0x5410,a0@(comm)	| specify function
-	cmpiw	#0x8900,a0@(resp)	| check
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-	movew	#0x7400,a0@(comm)	| result to d0
-	.long	0x0c688900, 0xfff067f8	| wait
-	movel	a0@,d0
-	movel	a0@,d1
-    ");	/* end asm	*/
+    __asm(
+"	lea	0xfffa50,%a0\t\n"
+"	movew	#0x5410,%a0@(comm)	| specify function\t\n"
+"	cmpiw	#0x8900,%a0@(resp)	| check\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"	movew	#0x7400,%a0@(comm)	| result to d0\t\n"
+"	.long	0x0c688900, 0xfff067f8	| wait\t\n"
+"	movel	%a0@,%d0\t\n"
+"	movel	%a0@,%d1\t\n"
+    );	/* end asm	*/
 
-#endif	sfp004
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 # ifdef	ERROR_CHECK
-    __asm("
-	lea	double_max,a0	|
-	swap	d0		| exponent into lower word
-	cmpw	a0@(16),d0	| == NaN ?
-	beq	error_nan	|
-	cmpw	a0@(24),d0	| == + Infinity ?
-	beq	error_plus	|
-	swap	d0		| result ok,
-	rts			| restore d0
-");
+    __asm(
+"	lea	double_max,%a0	|\t\n"
+"	swap	%d0		| exponent into lower word\t\n"
+"	cmpw	%a0@(16),%d0	| == NaN ?\t\n"
+"	beq	error_nan	|\t\n"
+"	cmpw	%a0@(24),%d0	| == + Infinity ?\t\n"
+"	beq	error_plus	|\t\n"
+"	swap	%d0		| result ok,\t\n"
+"	rts			| restore d0\t\n"
+);
 #ifndef	__MSHORT__
-__asm("
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movel	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movel	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
+__asm(
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
 #else	__MSHORT__
-__asm("
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movew	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movew	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
+__asm(
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
 #endif	__MSHORT__
-__asm("
-error_exit:
-	pea	_Error_String	|
-	pea	__iob+52	|
-	jbsr	_fprintf	|
-	addl	#12,a7		|
-	moveml	a7@+,d0-d1
-	rts
-    ");
-# else	ERROR_CHECK
+__asm(
+"error_exit:\t\n"
+"	moveml	%a7@+,%d0-%d1\t\n"
+"	rts\t\n"
+    );
+# else	/* ERROR_CHECK */
 
 __asm("rts");
 
-# endif	ERROR_CHECK
+# endif	/* ERROR_CHECK */
 #endif /* __M68881__ || sfp004	*/
diff --git a/pmlsrc/exp10.c b/pmlsrc/exp10.c
index 0d768ec..ab372cb 100644
--- a/pmlsrc/exp10.c
+++ b/pmlsrc/exp10.c
@@ -12,6 +12,12 @@
  *									*
  ************************************************************************/
 
+#include <stdio.h>
+#include <math.h>
+#include "pml.h"
+#include "symbols.h"
+
+
 #ifdef	sfp004
 
 __asm("
@@ -24,130 +30,116 @@ zahl =	  0
 
 ");	/* end asm	*/
 
-#endif	sfp004
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
     __asm(".text; .even");
 
 #ifdef	ERROR_CHECK
 
-    __asm("
-
-_Overflow:
-	.ascii \"OVERFLOW\\0\"
-_Domain:
-	.ascii \"DOMAIN\\0\"
-_Error_String:
-	.ascii \"exp10: %s error\\n\\0\"
-.even
-
-| pml compatible exp10gent
-| m.ritzert 7.12.1991
-| ritzert@dfg.dbp.de
-|
-|    /* NAN  = {7fffffff,ffffffff}		*/
-|    /* +Inf = {7ff00000,00000000}		*/
-|    /* -Inf = {fff00000,00000000}		*/
-|    /* MAX_D= {7fee42d1,30773b76}		*/
-|    /* MIN_D= {ffee42d1,30773b76}		*/
-
-.even
-double_max:
-	.long	0x7fee42d1
-	.long	0x30273b76
-double_min:
-	.long	0xffee42d1
-	.long	0x30273b76
-NaN:
-	.long	0x7fffffff
-	.long	0xffffffff
-p_Inf:
-	.long	0x7ff00000
-	.long	0x00000000
-m_Inf:
-	.long	0xfff00000
-	.long	0x00000000
-");
+    __asm(
+"\t\n"
+".even\t\n"
+"\t\n"
+"| pml compatible exp10gent\t\n"
+"| m.ritzert 7.12.1991\t\n"
+"| ritzert@dfg.dbp.de\t\n"
+"|\t\n"
+"|    /* NAN  = {7fffffff,ffffffff}		*/\t\n"
+"|    /* +Inf = {7ff00000,00000000}		*/\t\n"
+"|    /* -Inf = {fff00000,00000000}		*/\t\n"
+"|    /* MAX_D= {7fee42d1,30773b76}		*/\t\n"
+"|    /* MIN_D= {ffee42d1,30773b76}		*/\t\n"
+"\t\n"
+".even\t\n"
+"double_max:\t\n"
+"	.long	0x7fee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"double_min:\t\n"
+"	.long	0xffee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"NaN:\t\n"
+"	.long	0x7fffffff\t\n"
+"	.long	0xffffffff\t\n"
+"p_Inf:\t\n"
+"	.long	0x7ff00000\t\n"
+"	.long	0x00000000\t\n"
+"m_Inf:\t\n"
+"	.long	0xfff00000\t\n"
+"	.long	0x00000000\t\n"
+);
 # endif	ERROR_CHECK
 
-    __asm(".even
-	.globl _exp10
-_exp10:
-    ");	/* end asm	*/
+    __asm(".even\t\n"
+"	.globl " C_SYMBOL_NAME(exp10) "\t\n"
+C_SYMBOL_NAME(exp10) ":\t\n"
+    );	/* end asm	*/
 
 #endif	/* __M68881__ || sfp004	*/
 #ifdef	__M68881__
 
-    __asm("
-	ftentoxd a7@(4), fp0	| ten_to_x
-	fmoved	fp0,a7@-	| push result
-	moveml	a7@+,d0-d1	| return_value
-    ");	/* end asm	*/
+    __asm(
+"	ftentoxd %a7@(4), %fp0	| ten_to_x\t\n"
+"	fmoved	%fp0,%a7@-	| push result\t\n"
+"	moveml	%a7@+,%d0-%d1	| return_value\t\n"
+    );	/* end asm	*/
 
-#endif	__M68881__
+#endif /* __M68881__ */
 #ifdef	sfp004
-    __asm("
-	lea	0xfffa50,a0
-	movew	#0x5412,a0@(comm)	| specify function
-	cmpiw	#0x8900,a0@(resp)	| check
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-	movew	#0x7400,a0@(comm)	| result to d0
-	.long	0x0c688900, 0xfff067f8	| wait
-	movel	a0@,d0
-	movel	a0@,d1
-    ");	/* end asm	*/
+    __asm(
+"	lea	0xfffa50,%a0\t\n"
+"	movew	#0x5412,%a0@(comm)	| specify function\t\n"
+"	cmpiw	#0x8900,%a0@(resp)	| check\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"	movew	#0x7400,%a0@(comm)	| result to d0\t\n"
+"	.long	0x0c688900, 0xfff067f8	| wait\t\n"
+"	movel	%a0@,%d0\t\n"
+"	movel	%a0@,%d1\t\n"
+);	/* end asm	*/
 
-#endif	sfp004
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 # ifdef	ERROR_CHECK
-    __asm("
-	lea	double_max,a0	|
-	swap	d0		| exponent into lower word
-	cmpw	a0@(16),d0	| == NaN ?
-	beq	error_nan	|
-	cmpw	a0@(24),d0	| == + Infinity ?
-	beq	error_plus	|
-	swap	d0		| result ok,
-	rts			| restore d0
-");
+    __asm(
+"	lea	double_max,%a0	|\t\n"
+"	swap	%d0		| exponent into lower word\t\n"
+"	cmpw	%a0@(16),%d0	| == NaN ?\t\n"
+"	beq	error_nan	|\t\n"
+"	cmpw	%a0@(24),%d0	| == + Infinity ?\t\n"
+"	beq	error_plus	|\t\n"
+"	swap	%d0		| result ok,\t\n"
+"	rts			| restore d0\t\n"
+);
 #ifndef	__MSHORT__
-__asm("
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movel	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movel	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
+__asm(
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
 #else	__MSHORT__
-__asm("
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movew	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movew	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
+__asm(
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
 #endif	__MSHORT__
-__asm("
-error_exit:
-	pea	_Error_String	|
-	pea	__iob+52	|
-	jbsr	_fprintf	|
-	addl	#12,a7		|
-	moveml	a7@+,d0-d1
-	rts
-    ");
+__asm(
+"error_exit:\t\n"
+"	moveml	%a7@+,%d0-%d1\t\n"
+"	rts\t\n"
+    );
 # else	ERROR_CHECK
 # endif	ERROR_CHECK
 #endif /* __M68881__ || sfp004	*/
diff --git a/pmlsrc/floor.c b/pmlsrc/floor.c
index ae6a82d..dbdb795 100644
--- a/pmlsrc/floor.c
+++ b/pmlsrc/floor.c
@@ -3,12 +3,12 @@
  * 	from pete housels posting
  */
 
-#if !defined (__M68881__) || !defined (sfp004)
-#if __STDC__
-double	modf(double, double *);
-#else
-double	modf();
-#endif
+#include <stdio.h>
+#include <math.h>
+#include "pml.h"
+#include "symbols.h"
+
+#if !defined (__M68881__) && !defined (sfp004)
 
 double
 floor(x)
@@ -32,24 +32,24 @@ double x;
 }
 #endif
 
-#ifdef __M68881_
+#ifdef __M68881__
 
 double ceil (double x)
 {
   int rounding_mode, round_up;
   double value;
 
-  __asm volatile ("fmove%.l fpcr,%0"
+  __asm volatile ("fmove%.l %%fpcr,%0"
 		  : "=dm" (rounding_mode)
 		  : /* no inputs */ );
   round_up = rounding_mode | 0x30;
-  __asm volatile ("fmove%.l %0,fpcr"
+  __asm volatile ("fmove%.l %0,%%fpcr"
 		  : /* no outputs */
 		  : "dmi" (round_up));
   __asm volatile ("fint%.x %1,%0"
 		  : "=f" (value)
 		  : "f" (x));
-  __asm volatile ("fmove%.l %0,fpcr"
+  __asm volatile ("fmove%.l %0,%%fpcr"
 		  : /* no outputs */
 		  : "dmi" (rounding_mode));
   return value;
@@ -60,23 +60,23 @@ double floor (double x)
   int rounding_mode, round_down;
   double value;
 
-  __asm volatile ("fmove%.l fpcr,%0"
+  __asm volatile ("fmove%.l %%fpcr,%0"
 		  : "=dm" (rounding_mode)
 		  : /* no inputs */ );
   round_down = (rounding_mode & ~0x10)
 		| 0x20;
-  __asm volatile ("fmove%.l %0,fpcr"
+  __asm volatile ("fmove%.l %0,%%fpcr"
 		  : /* no outputs */
 		  : "dmi" (round_down));
   __asm volatile ("fint%.x %1,%0"
 		  : "=f" (value)
 		  : "f" (x));
-  __asm volatile ("fmove%.l %0,fpcr"
+  __asm volatile ("fmove%.l %0,%%fpcr"
 		  : /* no outputs */
 		  : "dmi" (rounding_mode));
   return value;
 }
-#endif __M68881__
+#endif /* __M68881__ */
 
 #ifdef	sfp004
-#endif	sfp004
+#endif /* sfp004 */
diff --git a/pmlsrc/ident.c b/pmlsrc/ident.c
index 15d127d..779a789 100644
--- a/pmlsrc/ident.c
+++ b/pmlsrc/ident.c
@@ -1,2 +1,13 @@
 #include "PatchLev.h"
-char __Ident_pml[] = "$PatchLevel: atariST/TT PML: " PatchLevel " $";
+char __Ident_pml[] = "$PatchLevel: atariST/TT ("
+#if defined __mcoldfire__
+"cfv4e"
+#elif !defined (__M68881__) && !defined (sfp004)
+"68000"
+#else
+"68020-60"
+#endif
+#ifdef __MSHORT__
+"/mshort"
+#endif
+") PML: " PatchLevel " $";
diff --git a/pmlsrc/log.c b/pmlsrc/log.c
index cd8822a..858e4fc 100644
--- a/pmlsrc/log.c
+++ b/pmlsrc/log.c
@@ -146,11 +146,14 @@
  *
  */
 
-#if !defined (__M68881__) && !defined (sfp004)
-
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
+
+
+#if !defined (__M68881__) && !defined (sfp004)
+
 
 			/* mjr++				*/
 			/* use a different routine instead	*/
@@ -182,25 +185,25 @@ static char funcname[] = "log";
  * of gcc compiler.  Ensure that first four assembler instructions in
  * log and log10 are the same!
  */
-__asm__("
-	.text
-	.even
-	.globl _log10
-_log10:");
+__asm__(
+"	.text\t\n"
+"	.even\t\n"
+"	.globl " C_SYMBOL_NAME(log10) "\t\n"
+C_SYMBOL_NAME(log10) ":");
 #ifdef __MSHORT__
-__asm__("
-	link a6,#-32
-	moveml #0x3e30,sp@-");
+__asm__(
+"	link %a6,#-32\t\n"
+"	moveml #0x3e30,%sp@-");
 #else
-__asm__("
-	link a6,#-36
-	moveml #0x3f30,sp@-");
+__asm__(
+"	link %a6,#-36\t\n"
+"	moveml #0x3f30,%sp@-");
 #endif  /* __MSHORT__ */
-__asm__("
-	movel a6@(8),d4
-	movel a6@(12),d5
-	moveq #1,d6
-	jra   lgentry");
+__asm__(
+"	movel %a6@(8),%d4\t\n"
+"	movel %a6@(12),%d5\t\n"
+"	moveq #1,%d6\t\n"
+"	jra   lgentry");
 #endif  /* __GCC_HACK__ */
 
 double log (x)
@@ -214,8 +217,8 @@ double x;
     int index;
 
     index = 0;
-__asm__("
-lgentry:");
+__asm__(
+"lgentry:");
 #endif
 
     if (x <= 0.0) {
@@ -232,7 +235,6 @@ lgentry:");
 	    xcptstr = "DOMAIN";
 	}
 	if (!matherr (&xcpt)) {
-	    fprintf (stderr, "%s: %s error\n", xcptstr, funcname);
 	    errno = EDOM;
 	}
     }
@@ -267,156 +269,140 @@ lgentry:");
 
 #ifdef	sfp004
 
-__asm("
-
-comm =	 -6
-resp =	-16
-zahl =	  0
+__asm(
+"\t\n"
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
+"\t\n"
+);	/* end asm	*/
 
-");	/* end asm	*/
-
-#endif	sfp004
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
     __asm(".text; .even");
 
 # ifdef	ERROR_CHECK
 
-    __asm("
-
-_Overflow:
-	.ascii \"OVERFLOW\\0\"
-_Domain:
-	.ascii \"DOMAIN\\0\"
-_Error_String:
-	.ascii \"log: %s error\\n\\0\"
-.even
-
-| pml compatible log
-| m.ritzert 7.12.1991
-| ritzert@dfg.dbp.de
-|
-|    /* NAN  = {7fffffff,ffffffff}		*/
-|    /* +Inf = {7ff00000,00000000}		*/
-|    /* -Inf = {fff00000,00000000}		*/
-|    /* MAX_D= {7fee42d1,30773b76}		*/
-|    /* MIN_D= {ffee42d1,30773b76}		*/
-
-.even
-double_max:
-	.long	0x7fee42d1
-	.long	0x30273b76
-double_min:
-	.long	0xffee42d1
-	.long	0x30273b76
-NaN:
-	.long	0x7fffffff
-	.long	0xffffffff
-p_Inf:
-	.long	0x7ff00000
-	.long	0x00000000
-m_Inf:
-	.long	0xfff00000
-	.long	0x00000000
-");
-# endif	ERROR_CHECK
-
-    __asm("
-.even
-	.globl _log
-_log:
-    ");	/* end asm	*/
+    __asm(
+"\t\n"
+".even\t\n"
+"\t\n"
+"| pml compatible log\t\n"
+"| m.ritzert 7.12.1991\t\n"
+"| ritzert@dfg.dbp.de\t\n"
+"|\t\n"
+"|    /* NAN  = {7fffffff,ffffffff}		*/\t\n"
+"|    /* +Inf = {7ff00000,00000000}		*/\t\n"
+"|    /* -Inf = {fff00000,00000000}		*/\t\n"
+"|    /* MAX_D= {7fee42d1,30773b76}		*/\t\n"
+"|    /* MIN_D= {ffee42d1,30773b76}		*/\t\n"
+"\t\n"
+".even\t\n"
+"double_max:\t\n"
+"	.long	0x7fee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"double_min:\t\n"
+"	.long	0xffee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"NaN:\t\n"
+"	.long	0x7fffffff\t\n"
+"	.long	0xffffffff\t\n"
+"p_Inf:\t\n"
+"	.long	0x7ff00000\t\n"
+"	.long	0x00000000\t\n"
+"m_Inf:\t\n"
+"	.long	0xfff00000\t\n"
+"	.long	0x00000000\t\n"
+);
+# endif	/* ERROR_CHECK */
+
+    __asm(
+".even\t\n"
+"	.globl " C_SYMBOL_NAME(log) "\t\n"
+C_SYMBOL_NAME(log) ":\t\n"
+    );	/* end asm	*/
 
 #endif	/* __M68881__ || sfp004	*/
 #ifdef	__M68881__
 
-    __asm("
-	flognd	a7@(4), fp0	| log
-	fmoved	fp0,a7@-	| push result
-	moveml	a7@+,d0-d1	| return_value
-    ");	/* end asm	*/
+    __asm(
+"	flognd	%a7@(4), %fp0	| log\t\n"
+"	fmoved	%fp0,%a7@-	| push result\t\n"
+"	moveml	%a7@+,%d0-%d1	| return_value\t\n"
+    );	/* end asm	*/
 
-#endif	__M68881__
+#endif /* __M68881__ */
 #ifdef	sfp004
-    __asm("
-	lea	0xfffa50,a0
-	movew	#0x5414,a0@(comm)	| specify function
-	cmpiw	#0x8900,a0@(resp)	| check
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-	movew	#0x7400,a0@(comm)	| result to d0
-	.long	0x0c688900, 0xfff067f8	| wait
-	movel	a0@,d0
-	movel	a0@,d1
-    ");	/* end asm	*/
-
-#endif	sfp004
+    __asm(
+"	lea	0xfffa50,%a0\t\n"
+"	movew	#0x5414,%a0@(comm)	| specify function\t\n"
+"	cmpiw	#0x8900,%a0@(resp)	| check\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"	movew	#0x7400,%a0@(comm)	| result to %d0\t\n"
+"	.long	0x0c688900, 0xfff067f8	| wait\t\n"
+"	movel	%a0@,%d0\t\n"
+"	movel	%a0@,%d1\t\n"
+);	/* end asm	*/
+
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 # ifdef	ERROR_CHECK
-    __asm("
-	lea	double_max,a0	|
-	swap	d0		| exponent into lower word
-	cmpw	a0@(16),d0	| == NaN ?
-	beq	error_nan	|
-	cmpw	a0@(24),d0	| == + Infinity ?
-	beq	error_plus	|
-	cmpw	a0@(32),d0	| == - Infinity ?
-	beq	error_minus	|
-	swap	d0		| result ok,
-	rts			| restore d0
-");
+    __asm(
+"	lea	double_max,%a0	|\t\n"
+"	swap	%d0		| exponent into lower word\t\n"
+"	cmpw	%a0@(16),%d0	| == NaN ?\t\n"
+"	beq	error_nan	|\t\n"
+"	cmpw	%a0@(24),%d0	| == + Infinity ?\t\n"
+"	beq	error_plus	|\t\n"
+"	cmpw	%a0@(32),%d0	| == - Infinity ?\t\n"
+"	beq	error_minus	|\t\n"
+"	swap	%d0		| result ok,\t\n"
+"	rts			| restore d0\t\n"
+);
 #ifndef	__MSHORT__
-__asm("
-error_minus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movel	#63,_errno	| errno = ERANGE
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movel	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movel	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
+__asm(
+"error_minus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#63," C_SYMBOL_NAME(errno) "	| errno = ERANGE\t\n"
+"	bra	error_exit	|\t\n"
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
 #else	__MSHORT__
-__asm("
-error_minus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movew	#63,_errno	| errno = ERANGE
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movew	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movew	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
+__asm(
+"error_minus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#63," C_SYMBOL_NAME(errno) "	| errno = ERANGE\t\n"
+"	bra	error_exit	|\t\n"
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
 #endif	__MSHORT__
-__asm("
-error_exit:
-	pea	_Error_String	|
-	pea	__iob+52	|
-	jbsr	_fprintf	|
-	addl	#12,a7		|
-	moveml	a7@+,d0-d1
-	rts
-    ");
-# else	ERROR_CHECK
+__asm(
+"error_exit:\t\n"
+"	moveml	%a7@+,%d0-%d1\t\n"
+"	rts\t\n"
+    );
+# else	/* ERROR_CHECK */
 
 __asm("rts");
 
-# endif	ERROR_CHECK
+# endif	/* ERROR_CHECK */
 #endif /* __M68881__ || sfp004	*/
diff --git a/pmlsrc/log10.c b/pmlsrc/log10.c
index 227b29e..db6fa74 100644
--- a/pmlsrc/log10.c
+++ b/pmlsrc/log10.c
@@ -60,15 +60,15 @@
  *		log10(x) = log10(e) * log(x)
  *
  */
-#if !defined (__M68881__) && !defined (sfp004)
 
-#ifndef __GCC_HACK__	/* see log.c for __GCC_HACK__ */
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
 
-static char funcname[] = "log10";
+#if !defined (__M68881__) && !defined (sfp004)
 
+#ifndef __GCC_HACK__	/* see log.c for __GCC_HACK__ */
 
 double log10 (x)
 double x;
@@ -80,156 +80,140 @@ double x;
 
 #ifdef	sfp004
 
-__asm("
-
-comm =	 -6
-resp =	-16
-zahl =	  0
+__asm(
+"\t\n"
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
 
-");	/* end asm	*/
+);	/* end asm	*/
 
-#endif	sfp004
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 
     __asm(".text; .even");
 
 # ifdef	ERROR_CHECK
 
-    __asm("
-
-_Overflow:
-	.ascii \"OVERFLOW\\0\"
-_Domain:
-	.ascii \"DOMAIN\\0\"
-_Error_String:
-	.ascii \"log10: %s error\\n\\0\"
-.even
-| pml compatible log
-| m.ritzert 7.12.1991
-| ritzert@dfg.dbp.de
-|
-|    /* NAN  = {7fffffff,ffffffff}		*/
-|    /* +Inf = {7ff00000,00000000}		*/
-|    /* -Inf = {fff00000,00000000}		*/
-|    /* MAX_D= {7fee42d1,30773b76}		*/
-|    /* MIN_D= {ffee42d1,30773b76}		*/
-
-.even
-double_max:
-	.long	0x7fee42d1
-	.long	0x30273b76
-double_min:
-	.long	0xffee42d1
-	.long	0x30273b76
-NaN:
-	.long	0x7fffffff
-	.long	0xffffffff
-p_Inf:
-	.long	0x7ff00000
-	.long	0x00000000
-m_Inf:
-	.long	0xfff00000
-	.long	0x00000000
-    ");	/* end asm	*/
-# endif	ERROR_CHECK
-
-    __asm("
-.even
-	.globl _log10
-_log10:
-    ");	/* end asm	*/
+    __asm(
+"\t\n"
+".even\t\n"
+"| pml compatible log\t\n"
+"| m.ritzert 7.12.1991\t\n"
+"| ritzert@dfg.dbp.de\t\n"
+"|\t\n"
+"|    /* NAN  = {7fffffff,ffffffff}		*/\t\n"
+"|    /* +Inf = {7ff00000,00000000}		*/\t\n"
+"|    /* -Inf = {fff00000,00000000}		*/\t\n"
+"|    /* MAX_D= {7fee42d1,30773b76}		*/\t\n"
+"|    /* MIN_D= {ffee42d1,30773b76}		*/\t\n"
+"\t\n"
+".even\t\n"
+"double_max:\t\n"
+"	.long	0x7fee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"double_min:\t\n"
+"	.long	0xffee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"NaN:\t\n"
+"	.long	0x7fffffff\t\n"
+"	.long	0xffffffff\t\n"
+"p_Inf:\t\n"
+"	.long	0x7ff00000\t\n"
+"	.long	0x00000000\t\n"
+"m_Inf:\t\n"
+"	.long	0xfff00000\t\n"
+"	.long	0x00000000\t\n"
+    );	/* end asm	*/
+# endif	/* ERROR_CHECK */
+
+    __asm(
+".even\t\n"
+"	.globl " C_SYMBOL_NAME(log10) "\t\n"
+C_SYMBOL_NAME(log10) ":\t\n"
+    );	/* end asm	*/
 
 #endif	/* __M68881__ || sfp004	*/
 #ifdef	__M68881__
 
-    __asm("
-	flog10d	a7@(4), fp0	| log
-	fmoved	fp0,a7@-	| push result
-	moveml	a7@+,d0-d1	| return_value
-    ");	/* end asm	*/
+    __asm(
+"	flog10d	%a7@(4), %fp0	| log\t\n"
+"	fmoved	%fp0,%a7@-	| push result\t\n"
+"	moveml	%a7@+,%d0-%d1	| return_value\t\n"
+    );	/* end asm	*/
 
-#endif	__M68881__
+#endif /* __M68881__ */
 #ifdef	sfp004
-    __asm("
-	lea	0xfffa50,a0
-	movew	#0x5415,a0@(comm)	| specify function
-	cmpiw	#0x8900,a0@(resp)	| check
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-	movew	#0x7400,a0@(comm)	| result to d0
-	.long	0x0c688900, 0xfff067f8	| wait
-	movel	a0@,d0
-	movel	a0@,d1
-    ");	/* end asm	*/
-
-#endif	sfp004
+    __asm(
+"	lea	0xfffa50,%a0\t\n"
+"	movew	#0x5415,%a0@(comm)	| specify function\t\n"
+"	cmpiw	#0x8900,%a0@(resp)	| check\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"	movew	#0x7400,%a0@(comm)	| result to d0\t\n"
+"	.long	0x0c688900, 0xfff067f8	| wait\t\n"
+"	movel	%a0@,%d0\t\n"
+"	movel	%a0@,%d1\t\n"
+);	/* end asm	*/
+
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 # ifdef	ERROR_CHECK
-    __asm("
-	lea	double_max,a0	|
-	swap	d0		| exponent into lower word
-	cmpw	a0@(16),d0	| == NaN ?
-	beq	error_nan	|
-	cmpw	a0@(24),d0	| == + Infinity ?
-	beq	error_plus	|
-	cmpw	a0@(32),d0	| == - Infinity ?
-	beq	error_minus	|
-	swap	d0		| result ok,
-	rts			| restore d0
-");
+    __asm(
+"	lea	double_max,%a0	|\t\n"
+"	swap	%d0		| exponent into lower word\t\n"
+"	cmpw	%a0@(16),%d0	| == NaN ?\t\n"
+"	beq	error_nan	|\t\n"
+"	cmpw	%a0@(24),%d0	| == + Infinity ?\t\n"
+"	beq	error_plus	|\t\n"
+"	cmpw	%a0@(32),%d0	| == - Infinity ?\t\n"
+"	beq	error_minus	|\t\n"
+"	swap	%d0		| result ok,\t\n"
+"	rts			| restore d0\t\n"
+);
 #ifndef	__MSHORT__
-__asm("
-error_minus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movel	#63,_errno	| errno = ERANGE
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movel	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movel	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
-#else	__MSHORT__
-__asm("
-error_minus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movew	#63,_errno	| errno = ERANGE
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movew	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movew	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
+__asm(
+"error_minus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#63," C_SYMBOL_NAME(errno) "	| errno = ERANGE\t\n"
+"	bra	error_exit	|\t\n"
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
+#else	/* __MSHORT__ */
+__asm(
+"error_minus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#63," C_SYMBOL_NAME(errno) "	| errno = ERANGE\t\n"
+"	bra	error_exit	|\t\n"
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
 #endif	__MSHORT__
-__asm("
-error_exit:
-	pea	_Error_String	|
-	pea	__iob+52	|
-	jbsr	_fprintf	|
-	addl	#12,a7		|
-	moveml	a7@+,d0-d1
-	rts
-    ");
-# else	ERROR_CHECK
+__asm(
+"error_exit:\t\n"
+"	moveml	%a7@+,%d0-%d1\t\n"
+"	rts\t\n"
+    );
+# else	/* ERROR_CHECK */
 
 __asm("rts");
 
-# endif	ERROR_CHECK
+# endif	/* ERROR_CHECK */
 #endif /* __M68881__ || sfp004	*/
diff --git a/pmlsrc/math.h b/pmlsrc/math.h
index 0e7aa75..c1fc9f6 100644
--- a/pmlsrc/math.h
+++ b/pmlsrc/math.h
@@ -1,5 +1,5 @@
 #ifndef _MATH_H
-#define _MATH_H
+#define _MATH_H 1
 
 /************************************************************************
  *									*
@@ -20,7 +20,6 @@
  ************************************************************************
  */
 
-
 /*
  *  FILE
  *
@@ -37,20 +36,23 @@
  *
  */
 
-
-#ifndef _COMPILER_H
-#include <compiler.h>
+#ifndef	_FEATURES_H
+# include <features.h>
 #endif
 
-#ifdef __cplusplus
-extern "C" {
-#endif
+__BEGIN_DECLS
 
-#ifdef __TURBOC__
+/* Get machine-dependent HUGE_VAL value (returned on overflow).
+   On all IEEE754 machines, this is +Infinity.  */
+#include <bits/huge_val.h>
 
-#include <tcmath.h>
+/* Get machine-dependent NAN value (returned for some domain errors).  */
+#ifdef	 __USE_ISOC99
+# include <bits/nan.h>
+#endif
+/* Get general and ISO C9X specific information.  */
+#include <bits/mathdef.h>
 
-#else
 
 #ifndef __STRICT_ANSI__
 /*
@@ -64,7 +66,6 @@ typedef struct cmplx {			/* Complex structure */
     double imag;			/* Imaginary part */
 } COMPLEX;
 
-/* exceptions ++jrb */
 typedef enum  {
     DOMAIN      = 1,
     SING        = 2,
@@ -74,29 +75,63 @@ typedef enum  {
     PLOSS       = 6
 } exception_type;
 
-struct exception {
+/* In SVID error handling, `matherr' is called with this description
+   of the exceptional condition.
+
+   We have a problem when using C++ since `exception' is a reserved
+   name in C++.  */
+/* do not change the comment above; it is looked up by GCCs fixincludes script */
+#ifdef __cplusplus
+struct __exception
+#else
+struct exception 
+#endif
+{
 	exception_type	type;	/* exception type */
 	const char	*name;	/* function in which it occured */
 	double		arg1;	/* an arg */
 	double		arg2;	/* another arg */
 	double		retval; /* val to return */
 };
+#endif /* __STRICT_ANSI__ */
 
-#define M_LN2                0.69314718055994530942
-#define M_PI         3.14159265358979323846
-#define M_SQRT2              1.41421356237309504880
-#define M_E          2.7182818284590452354
-#define M_LOG2E              1.4426950408889634074
-#define M_LOG10E     0.43429448190325182765
-#define M_LN10               2.30258509299404568402
-#define M_PI_2               1.57079632679489661923
-#define M_PI_4               0.78539816339744830962
-#define M_1_PI               0.31830988618379067154
-#define M_2_PI               0.63661977236758134308
-#define M_2_SQRTPI   1.12837916709551257390
-#define M_SQRT1_2    0.70710678118654752440
 
-#endif /* __STRICT_ANSI__ */
+/* Some useful constants.  */
+#if defined __USE_BSD || defined __USE_XOPEN
+# define M_E		2.7182818284590452354	/* e */
+# define M_LOG2E	1.4426950408889634074	/* log_2 e */
+# define M_LOG10E	0.43429448190325182765	/* log_10 e */
+# define M_LN2		0.69314718055994530942	/* log_e 2 */
+# define M_LN10		2.30258509299404568402	/* log_e 10 */
+# define M_PI		3.14159265358979323846	/* pi */
+# define M_PI_2		1.57079632679489661923	/* pi/2 */
+# define M_PI_4		0.78539816339744830962	/* pi/4 */
+# define M_1_PI		0.31830988618379067154	/* 1/pi */
+# define M_2_PI		0.63661977236758134308	/* 2/pi */
+# define M_2_SQRTPI	1.12837916709551257390	/* 2/sqrt(pi) */
+# define M_SQRT2	1.41421356237309504880	/* sqrt(2) */
+# define M_SQRT1_2	0.70710678118654752440	/* 1/sqrt(2) */
+#endif
+
+/* The above constants are not adequate for computation using `long double's.
+   Therefore we provide as an extension constants with similar names as a
+   GNU extension.  Provide enough digits for the 128-bit IEEE quad.  */
+#ifdef __USE_GNU
+# define M_El		2.7182818284590452353602874713526625L  /* e */
+# define M_LOG2El	1.4426950408889634073599246810018922L  /* log_2 e */
+# define M_LOG10El	0.4342944819032518276511289189166051L  /* log_10 e */
+# define M_LN2l		0.6931471805599453094172321214581766L  /* log_e 2 */
+# define M_LN10l	2.3025850929940456840179914546843642L  /* log_e 10 */
+# define M_PIl		3.1415926535897932384626433832795029L  /* pi */
+# define M_PI_2l	1.5707963267948966192313216916397514L  /* pi/2 */
+# define M_PI_4l	0.7853981633974483096156608458198757L  /* pi/4 */
+# define M_1_PIl	0.3183098861837906715377675267450287L  /* 1/pi */
+# define M_2_PIl	0.6366197723675813430755350534900574L  /* 2/pi */
+# define M_2_SQRTPIl	1.1283791670955125738961589031215452L  /* 2/sqrt(pi) */
+# define M_SQRT2l	1.4142135623730950488016887242096981L  /* sqrt(2) */
+# define M_SQRT1_2l	0.7071067811865475244008443621048490L  /* 1/sqrt(2) */
+#endif
+
 
 extern const double _infinitydf;	/* in normdf.cpp */
 
@@ -108,9 +143,7 @@ extern const double _infinitydf;	/* in normdf.cpp */
 #endif
 
 #if _INLINE_MATH
-#  include <math-68881.h>
-#else
-#  define HUGE_VAL  (_infinitydf)
+# include <math-68881.h>
 #endif
 
 #define HUGE HUGE_VAL
@@ -124,82 +157,147 @@ extern const double _infinitydf;	/* in normdf.cpp */
 # endif
 #endif
 
+#ifdef __USE_BSD
+
+extern int finite(double) __THROW;
+extern int __finite(double) __THROW;
+extern int finitef(float) __THROW;
+extern int __finitef(float) __THROW;
+extern int finitel(long double) __THROW;
+extern int __finitel(long double) __THROW;
+
+extern int isinf (double) __THROW;
+extern int __isinf (double) __THROW;
+extern int isinff (float) __THROW;
+extern int __isinff (float) __THROW;
+extern int isinfl (long double) __THROW;
+extern int __isinfl (long double) __THROW;
+
+extern int isnan (double) __THROW;
+extern int __isnan (double) __THROW;
+extern int isnanf (float) __THROW;
+extern int __isnanf (float) __THROW;
+extern int isnanl (long double) __THROW;
+extern int __isnanl (long double) __THROW;
+
+extern int signbit (double) __THROW;
+extern int __signbit (double) __THROW;
+extern int signbitf (float) __THROW;
+extern int __signbitf (float) __THROW;
+extern int signbitl (long double) __THROW;
+extern int __signbitl (long double) __THROW;
+
+#endif
+
+/* Return nonzero value if sign of X is negative.  */
+# ifdef __NO_LONG_DOUBLE_MATH
+#  define signbit(x) \
+     (sizeof (x) == sizeof (float) ? __signbitf (x) : __signbit (x))
+# else
+#  define signbit(x) \
+     (sizeof (x) == sizeof (float)					      \
+      ? __signbitf (x)							      \
+      : sizeof (x) == sizeof (double)					      \
+      ? __signbit (x) : __signbitl (x))
+# endif
+
+/* Return nonzero value if X is not +-Inf or NaN.  */
+# ifdef __NO_LONG_DOUBLE_MATH
+#  define isfinite(x) \
+     (sizeof (x) == sizeof (float) ? __finitef (x) : __finite (x))
+# else
+#  define isfinite(x) \
+     (sizeof (x) == sizeof (float)					      \
+      ? __finitef (x)							      \
+      : sizeof (x) == sizeof (double)					      \
+      ? __finite (x) : __finitel (x))
+# endif
+
+/* Return nonzero value if X is a NaN.  We could use `fpclassify' but
+   we already have this functions `__isnan' and it is faster.  */
+# ifdef __NO_LONG_DOUBLE_MATH
+#  define isnan(x) \
+     (sizeof (x) == sizeof (float) ? __isnanf (x) : __isnan (x))
+# else
+#  define isnan(x) \
+     (sizeof (x) == sizeof (float)					      \
+      ? __isnanf (x)							      \
+      : sizeof (x) == sizeof (double)					      \
+      ? __isnan (x) : __isnanl (x))
+# endif
+
+/* Return nonzero value is X is positive or negative infinity.  */
+# ifdef __NO_LONG_DOUBLE_MATH
+#  define isinf(x) \
+     (sizeof (x) == sizeof (float) ? __isinff (x) : __isinf (x))
+# else
+#  define isinf(x) \
+     (sizeof (x) == sizeof (float)					      \
+      ? __isinff (x)							      \
+      : sizeof (x) == sizeof (double)					      \
+      ? __isinf (x) : __isinfl (x))
+# endif
+
+
 #if !_INLINE_MATH
-__EXTERN double sin	__PROTO((double));
-__EXTERN double cos	__PROTO((double));
-__EXTERN double tan	__PROTO((double));
-__EXTERN double asin	__PROTO((double));
-__EXTERN double	acos	__PROTO((double));
-__EXTERN double atan	__PROTO((double));
-__EXTERN double atan2	__PROTO((double, double));
-__EXTERN double sinh	__PROTO((double));
-__EXTERN double cosh	__PROTO((double));
-__EXTERN double tanh	__PROTO((double));
-__EXTERN double atanh	__PROTO((double));
-__EXTERN double exp	__PROTO((double));
-__EXTERN double log	__PROTO((double));
-__EXTERN double log10	__PROTO((double));
-__EXTERN double sqrt	__PROTO((double));
-__EXTERN double hypot   __PROTO((double, double));
-__EXTERN double pow	__PROTO((double, double));
-__EXTERN double fabs	__PROTO((double));
-__EXTERN double ceil	__PROTO((double));
-__EXTERN double floor	__PROTO((double));
-__EXTERN double rint	__PROTO((double));
-__EXTERN double fmod	__PROTO((double, double));
-
-__EXTERN double ldexp	__PROTO((double, int));
-__EXTERN double frexp	__PROTO((double, int *));
-__EXTERN double modf	__PROTO((double, double *));
+extern double sin (double) __THROW;
+extern double cos (double) __THROW;
+extern double tan (double) __THROW;
+extern double asin (double) __THROW;
+extern double acos (double) __THROW;
+extern double atan (double) __THROW;
+extern double atan2 (double, double) __THROW;
+extern double sinh (double) __THROW;
+extern double cosh (double) __THROW;
+extern double tanh (double) __THROW;
+extern double atanh (double) __THROW;
+extern double exp (double) __THROW;
+extern double log (double) __THROW;
+extern double log10 (double) __THROW;
+extern double sqrt (double) __THROW;
+extern double hypot (double, double) __THROW;
+extern double pow (double, double) __THROW;
+extern double fabs (double) __THROW;
+extern double ceil (double) __THROW;
+extern double floor (double) __THROW;
+extern double rint (double) __THROW;
+extern double fmod (double, double) __THROW;
+
+extern double ldexp (double, int) __THROW;
+extern double frexp (double, int *) __THROW;
+extern double modf (double, double *) __THROW;
 #endif
 
-__EXTERN double acosh	__PROTO((double));
-__EXTERN double asinh	__PROTO((double));
+extern double acosh (double) __THROW;
+extern double asinh (double) __THROW;
 
 #ifndef __STRICT_ANSI__
 
+#ifndef dabs
 #if _INLINE_MATH
-#  define dabs(x) fabs(x)
+# define dabs(x) fabs(x)
 #else
-__EXTERN double dabs	__PROTO((double));
+extern double dabs (double) __THROW;
 #endif
-
-__EXTERN double copysign	__PROTO((double, double));
-__EXTERN int matherr	__PROTO((struct exception *));
-__EXTERN double cabs	__PROTO((COMPLEX));
-__EXTERN COMPLEX cmult	__PROTO((COMPLEX, COMPLEX));
-__EXTERN COMPLEX csqrt	__PROTO((COMPLEX));
-#ifndef __GNUG__
-__EXTERN COMPLEX clog	__PROTO((COMPLEX));
 #endif
-__EXTERN COMPLEX cacos	__PROTO((COMPLEX));
-__EXTERN COMPLEX cadd	__PROTO((COMPLEX,COMPLEX));
-__EXTERN COMPLEX casin	__PROTO((COMPLEX));
-__EXTERN COMPLEX catan	__PROTO((COMPLEX));
-__EXTERN COMPLEX ccosh	__PROTO((COMPLEX));
-__EXTERN COMPLEX crcp	__PROTO((COMPLEX));
-__EXTERN COMPLEX csinh	__PROTO((COMPLEX));
-__EXTERN COMPLEX ctan	__PROTO((COMPLEX));
-__EXTERN COMPLEX ctanh	__PROTO((COMPLEX));
-__EXTERN COMPLEX cexp	__PROTO((COMPLEX));
-__EXTERN COMPLEX ccos	__PROTO((COMPLEX));
-__EXTERN COMPLEX csin	__PROTO((COMPLEX));
-__EXTERN COMPLEX cdiv	__PROTO((COMPLEX, COMPLEX));
-__EXTERN COMPLEX csubt	__PROTO((COMPLEX,COMPLEX));
-
-__EXTERN int pmlcfs	__PROTO((int, int));
-__EXTERN int pmlcnt	__PROTO((void));
-__EXTERN int pmlerr	__PROTO((int));
-__EXTERN int pmllim	__PROTO((int));
-__EXTERN int pmlsfs	__PROTO((int, int));
-__EXTERN double poly	__PROTO((int, double *, double));
-
-#endif /* __STRICT_ANSI__ */
 
-#endif /* __TURBOC__ */
+extern double copysign (double, double) __THROW;
 
 #ifdef __cplusplus
-}
+extern int matherr (struct __exception *) throw();
+#else
+extern int matherr (struct exception *) __THROW;
 #endif
 
-#endif /* _MATH_H */
+extern int pmlcfs (int, int) __THROW;
+extern int pmlcnt (void) __THROW;
+extern int pmlerr (int) __THROW;
+extern int pmllim (int) __THROW;
+extern int pmlsfs (int, int) __THROW;
+extern double poly (int, double *, double) __THROW;
+
+#endif /* __STRICT_ANSI__ */
+
+__END_DECLS
+
+#endif /* math.h  */
diff --git a/pmlsrc/mod.c b/pmlsrc/mod.c
index 74f26bf..6749e91 100644
--- a/pmlsrc/mod.c
+++ b/pmlsrc/mod.c
@@ -52,6 +52,7 @@
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
 
 #if !defined (__M68881__) && !defined (sfp004)	/* mjr++	*/
 
@@ -67,166 +68,149 @@ double base;
 #endif	/* __M68881, sfp004	*/
 #ifdef	sfp004
 
-__asm("
+__asm(
 
-| base =	0xfffa50
-|      the fpu addresses are taken relativ to 'base':
-comm =	 -6
-resp =	-16
-zahl =	  0
+"| base =	0xfffa50\t\n"
+"|      the fpu addresses are taken relativ to 'base':\t\n"
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
+"\t\n"
+);	/* end asm	*/
 
-");	/* end asm	*/
-
-#endif	sfp004
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 
     __asm(".text; .even");
 
 # ifdef	ERROR_CHECK
 
-    __asm("
-
-
-_Overflow:
-	.ascii \"OVERFLOW\\0\"
-_Domain:
-	.ascii \"DOMAIN\\0\"
-_Error_String:
-	.ascii \"fmod: %s error\\n\\0\"
-
-| pml compatible tangent
-| m.ritzert 7.12.1991
-| ritzert@dfg.dbp.de
-|
-|    /* NAN  = {7fffffff,ffffffff}		*/
-|    /* +Inf = {7ff00000,00000000}		*/
-|    /* -Inf = {fff00000,00000000}		*/
-|    /* MAX_D= {7fee42d1,30773b76}		*/
-|    /* MIN_D= {ffee42d1,30773b76}		*/
-
-.even
-double_max:
-	.long	0x7fee42d1
-	.long	0x30273b76
-double_min:
-	.long	0xffee42d1
-	.long	0x30273b76
-NaN:
-	.long	0x7fffffff
-	.long	0xffffffff
-p_Inf:
-	.long	0x7ff00000
-	.long	0x00000000
-m_Inf:
-	.long	0xfff00000
-	.long	0x00000000
-    ");	/* end asm	*/
-# endif	ERROR_CHECK
-
-    __asm(".even
-	.globl _fmod
-_fmod:
-    ");	/* end asm	*/
+    __asm(
+"\t\n"
+"| pml compatible tangent\t\n"
+"| m.ritzert 7.12.1991\t\n"
+"| ritzert@dfg.dbp.de\t\n"
+"|\t\n"
+"|    /* NAN  = {7fffffff,ffffffff}		*/\t\n"
+"|    /* +Inf = {7ff00000,00000000}		*/\t\n"
+"|    /* -Inf = {fff00000,00000000}		*/\t\n"
+"|    /* MAX_D= {7fee42d1,30773b76}		*/\t\n"
+"|    /* MIN_D= {ffee42d1,30773b76}		*/\t\n"
+"\t\n"
+".even\t\n"
+"double_max:\t\n"
+"	.long	0x7fee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"double_min:\t\n"
+"	.long	0xffee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"NaN:\t\n"
+"	.long	0x7fffffff\t\n"
+"	.long	0xffffffff\t\n"
+"p_Inf:\t\n"
+"	.long	0x7ff00000\t\n"
+"	.long	0x00000000\t\n"
+"m_Inf:\t\n"
+"	.long	0xfff00000\t\n"
+"	.long	0x00000000\t\n"
+    );	/* end asm	*/
+# endif	/* ERROR_CHECK */
+
+    __asm(".even\t\n"
+"	.globl " C_SYMBOL_NAME(fmod) "\t\n"
+C_SYMBOL_NAME(fmod) ":\t\n"
+    );	/* end asm	*/
 
 #endif	/* __M68881__ || sfp004	*/
 #ifdef	__M68881__
 
-    __asm("
-	fmovex	fp0,sp@-	| 12 Bytes
-	fmoved	a7@(16), fp0	| value
-	fmodd	a7@(24),fp0	| base
-	fmoved	fp0,a7@-	| push result
-	moveml	a7@+,d0-d1	| return_value
-	fmovex	sp@+,fp0
-    ");	/* end asm	*/
+    __asm(
+"	fmovex	%fp0,%sp@-	| 12 Bytes\t\n"
+"	fmoved	%a7@(16), %fp0	| value\t\n"
+"	fmodd	%a7@(24),%fp0	| base\t\n"
+"	fmoved	%fp0,%a7@-	| push result\t\n"
+"	moveml	%a7@+,%d0-%d1	| return_value\t\n"
+"	fmovex	%sp@+,%fp0\t\n"
+    );	/* end asm	*/
 
-#endif	__M68881__
+#endif /* __M68881__ */
 #ifdef	sfp004
-    __asm("
-	lea	0xfffa50,a0
-	movew	#0x5400,a0@(comm)	| specify function (fmove)
-	cmpiw	#0x8900,a0@(resp)	| check
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-	movew	#0x5421,a0@(comm)	| specify function (fmod)
-	.long	0x0c688900, 0xfff067f8	| wait
-	movel	a7@(12),a0@		| load arg_hi
-	movel	a7@(16),a0@		| load arg_low
-	movew	#0x7400,a0@(comm)	| result to d0
-	.long	0x0c688900, 0xfff067f8	| wait
-	movel	a0@,d0
-	movel	a0@,d1
-    ");	/* end asm	*/
-
-#endif	sfp004
+    __asm(
+"	lea	0xfffa50,%a0\t\n"
+"	movew	#0x5400,%a0@(comm)	| specify function (fmove)\t\n"
+"	cmpiw	#0x8900,%a0@(resp)	| check\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"	movew	#0x5421,%a0@(comm)	| specify function (fmod)\t\n"
+"	.long	0x0c688900, 0xfff067f8	| wait\t\n"
+"	movel	%a7@(12),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(16),%a0@		| load arg_low\t\n"
+"	movew	#0x7400,%a0@(comm)	| result to d0\t\n"
+"	.long	0x0c688900, 0xfff067f8	| wait\t\n"
+"	movel	%a0@,%d0\t\n"
+"	movel	%a0@,%d1\t\n"
+);	/* end asm	*/
+
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 # ifdef	ERROR_CHECK
-    __asm("
-	lea	double_max,a0	|
-	swap	d0		| exponent into lower word
-	cmpw	a0@(16),d0	| == NaN ?
-	beq	error_nan	|
-	cmpw	a0@(24),d0	| == + Infinity ?
-	beq	error_plus	|
-	cmpw	a0@(32),d0	| == - Infinity ?
-	beq	error_minus	|
-	swap	d0		| result ok,
-	rts			| restore d0
-");
+    __asm(
+"	lea	double_max,%a0	|\t\n"
+"	swap	%d0		| exponent into lower word\t\n"
+"	cmpw	%a0@(16),%d0	| == NaN ?\t\n"
+"	beq	error_nan	|\t\n"
+"	cmpw	%a0@(24),%d0	| == + Infinity ?\t\n"
+"	beq	error_plus	|\t\n"
+"	cmpw	%a0@(32),%d0	| == - Infinity ?\t\n"
+"	beq	error_minus	|\t\n"
+"	swap	%d0		| result ok,\t\n"
+"	rts			| restore d0\t\n"
+);
 #ifndef	__MSHORT__
-__asm("
-error_minus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movel	#63,_errno	| errno = ERANGE
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movel	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movel	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
+__asm(
+"error_minus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#63," C_SYMBOL_NAME(errno) "	| errno = ERANGE\t\n"
+"	bra	error_exit	|\t\n"
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
 #else	__MSHORT__
-__asm("
-error_minus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movew	#63,_errno	| errno = ERANGE
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movew	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movew	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
+__asm(
+"error_minus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#63," C_SYMBOL_NAME(errno) "	| errno = ERANGE\t\n"
+"	bra	error_exit	|\t\n"
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
 #endif	__MSHORT__
-__asm("
-error_exit:
-	pea	_Error_String	|
-	pea	__iob+52	|
-	jbsr	_fprintf	|
-	addl	#12,a7		|
-	rts
-    ");
-# else	ERROR_CHECK
+__asm(
+"error_exit:\t\n"
+"	moveml	%a7@+,%d0-%d1\t\n"
+"	rts\t\n"
+    );
+# else	/* ERROR_CHECK */
 
 __asm("rts");
 
-# endif	ERROR_CHECK
+# endif	/* ERROR_CHECK */
 #endif /* __M68881__ || sfp004	*/
 
 #ifdef m68881
@@ -242,7 +226,6 @@ double fmod (double value, double base)
 	xcpt.arg1 = base;
 	xcpt.type = DOMAIN;
 	if (!matherr (&xcpt)) {
-	    fprintf (stderr, "%s: ZERO DIVIDE error\n", "fmod");
 	    errno = EDOM;
 	}
     } else {
@@ -253,4 +236,4 @@ double fmod (double value, double base)
     }
     return xcpt.retval;
 }
-#endif m68881
+#endif /* m68881 */
diff --git a/pmlsrc/pml.h b/pmlsrc/pml.h
index e785165..d35a091 100644
--- a/pmlsrc/pml.h
+++ b/pmlsrc/pml.h
@@ -48,7 +48,7 @@
 
 #ifndef NO_DBUG
 # define NO_DBUG
-#endif NO_DBUG
+#endif /* NO_DBUG */
 
 #ifndef NO_DBUG
 #    include <dbug.h>
@@ -74,7 +74,6 @@
 #endif
 
 #include <errno.h>
-extern int errno;
 
 #ifndef atarist
 #ifdef ATARI_ST
diff --git a/pmlsrc/pow.c b/pmlsrc/pow.c
index ab6a625..dacff69 100644
--- a/pmlsrc/pow.c
+++ b/pmlsrc/pow.c
@@ -5,13 +5,6 @@
 
 #include	<errno.h>
 #include	<math.h>
-int errno;
-
-#if __STDC__
-double log(double), exp(double);
-#else
-double log(), exp();
-#endif
 
 double 
 pow(x,y)
diff --git a/pmlsrc/rint.c b/pmlsrc/rint.c
index 9a61693..73c736d 100644
--- a/pmlsrc/rint.c
+++ b/pmlsrc/rint.c
@@ -12,6 +12,7 @@
  */
 
 #include <math.h>
+#include "symbols.h"
 
 /*    round.c - performs rounding
  */
@@ -46,58 +47,57 @@ double rint(double x)
 #if 0
   int rounding_mode, round_nearest;
 
-  __asm volatile ("fmove%.l fpcr,%0"
+  __asm volatile ("fmove%.l %%fpcr,%0"
 		  : "=dm" (rounding_mode)
 		  : /* no inputs */ );
   round_nearest = rounding_mode & ~0x30;
-  __asm volatile ("fmove%.l %0,fpcr"
+  __asm volatile ("fmove%.l %0,%%fpcr"
 		  : /* no outputs */
 		  : "dmi" (round_nearest));
-#endif 0
+#endif
   __asm volatile ("fint%.x %1,%0"
 		  : "=f" (value)
 		  : "f" (x));
 #if 0
-  __asm volatile ("fmove%.l %0,fpcr"
+  __asm volatile ("fmove%.l %0,%%fpcr"
 		  : /* no outputs */
 		  : "dmi" (rounding_mode));
-#endif 0
+#endif
   return value;
 }
-#endif __M68881__
+#endif /* __M68881__ */
 #ifdef	sfp004
-__asm("
-
-| pml compatible lib for the atari sfp004
-|
-| Michael Ritzert, Oktober 1990
-| ritzert@dfg.dbp.de
-|
-| FUNCTION:	DOUBLE RINT( DOUBLE X )
-|
-| base =	0xfffa50
-| the fpu addresses are taken relativ to 'base':
-
-comm =	 -6
-resp =	-16
-zahl =	  0
-
-.text
-	.globl _rint
-.even
-_rint:
-	lea	0xfffa50,a0
-|	movew	#0x5403,a0@(comm)	| fintrz to fp0
-	movew	#0x5401,a0@(comm)	| fint   to fp0
-	cmpiw	#0x8900,a0@(resp)	| check
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-	movew	#0x7400,a0@(comm)	| result to d0
-| wait
-	.long	0x0c688900, 0xfff067f8
-	movel	a0@,d0
-	movel	a0@,d1
- 	rts
-
-");
-#endif	sfp004
+__asm(
+"| pml compatible lib for the atari sfp004\t\n"
+"|\t\n"
+"| Michael Ritzert, Oktober 1990\t\n"
+"| ritzert@dfg.dbp.de\t\n"
+"|\t\n"
+"| FUNCTION:	DOUBLE RINT( DOUBLE X )\t\n"
+"|\t\n"
+"| base =	0xfffa50\t\n"
+"| the fpu addresses are taken relativ to 'base':\t\n"
+"\t\n"
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
+"\t\n"
+".text\t\n"
+"	.globl " C_SYMBOL_NAME(rint) "\t\n"
+".even\t\n"
+C_SYMBOL_NAME(rint) ":\t\n"
+"	lea	0xfffa50,%a0\t\n"
+"|	movew	#0x5403,%a0@(comm)	| fintrz to fp0\t\n"
+"	movew	#0x5401,%a0@(comm)	| fint   to fp0\t\n"
+"	cmpiw	#0x8900,%a0@(resp)	| check\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"	movew	#0x7400,%a0@(comm)	| result to d0\t\n"
+"| wait\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a0@,%d0\t\n"
+"	movel	%a0@,%d1\t\n"
+" 	rts\t\n"
+"\t\n"
+);
+#endif /* sfp004 */
diff --git a/pmlsrc/sign.c b/pmlsrc/sign.c
index 90210e5..1b6e39d 100644
--- a/pmlsrc/sign.c
+++ b/pmlsrc/sign.c
@@ -54,9 +54,9 @@
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
 
-
-#if OLD
+#ifdef OLD
 
 double copysign (x, y)
 double x;
@@ -84,21 +84,21 @@ double y;
     return (rtnval);
 }
 
-#else	OLD 	/* mjr: assembler version for  all machines */
-__asm("
-.text
-.even
-.globl _copysign
-
-_copysign:
-	moveml	a7@(4),d0-d1
-	btst	#31,a7@(12)
-	beq	clear
-	bset	#31,d0
-	rts
-clear:
-	bclr	#31,d0
-	rts
-");	/* end asm	*/
+#else /* OLD */ /* mjr: assembler version for  all machines */
+__asm(
+".text\t\n"
+".even\t\n"
+".globl " C_SYMBOL_NAME(copysign) "\t\n"
+"\t\n"
+C_SYMBOL_NAME(copysign) ":\t\n"
+"	moveml	%a7@(4),%d0-%d1\t\n"
+"	btst	#31,%a7@(12)\t\n"
+"	beq	clear\t\n"
+"	bset	#31,%d0\t\n"
+"	rts\t\n"
+"clear:\t\n"
+"	bclr	#31,%d0\t\n"
+"	rts\t\n"
+);	/* end asm	*/
 
-#endif	OLD
+#endif /* OLD */
diff --git a/pmlsrc/sin.c b/pmlsrc/sin.c
index 1a76069..affa42d 100644
--- a/pmlsrc/sin.c
+++ b/pmlsrc/sin.c
@@ -125,11 +125,12 @@
  *			
  */
 
-#if !defined (__M68881__) && !defined (sfp004)	/* mjr++	*/
-
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
+
+#if !defined (__M68881__) && !defined (sfp004)	/* mjr++	*/
 
 static char funcname[] = "sin";
 
@@ -183,126 +184,120 @@ double x;
 #endif	/* __M68881__, sfp004	*/
 #ifdef	sfp004
 
-__asm("
+__asm(
+"\t\n"
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
+"\t\n"
+);	/* end asm	*/
 
-comm =	 -6
-resp =	-16
-zahl =	  0
-
-");	/* end asm	*/
-
-#endif	sfp004
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 
     __asm(".text; .even");
 
 # ifdef	ERROR_CHECK
 
-    __asm("
-
-_Overflow:
-	.ascii \"OVERFLOW\\0\"
-_Domain:
-	.ascii \"DOMAIN\\0\"
-_Error_String:
-	.ascii \"sin: %s error\\n\\0\"
-.even
-| m.ritzert 7.12.1991
-| ritzert@dfg.dbp.de
-|
-|    /* NAN  = {7fffffff,ffffffff}		*/
-|    /* +Inf = {7ff00000,00000000}		*/
-|    /* -Inf = {fff00000,00000000}		*/
-|    /* MAX_D= {7fee42d1,30773b76}		*/
-|    /* MIN_D= {ffee42d1,30773b76}		*/
-
-.even
-double_max:
-	.long	0x7fee42d1
-	.long	0x30273b76
-double_min:
-	.long	0xffee42d1
-	.long	0x30273b76
-NaN:
-	.long	0x7fffffff
-	.long	0xffffffff
-p_Inf:
-	.long	0x7ff00000
-	.long	0x00000000
-m_Inf:
-	.long	0xfff00000
-	.long	0x00000000
-    ");	/* end asm	*/
-# endif	ERROR_CHECK
+    __asm(
+"\t\n"
+"_Overflow:\t\n"
+"	.ascii \"OVERFLOW\\0\"\t\n"
+"_Domain:\t\n"
+"	.ascii \"DOMAIN\\0\"\t\n"
+"_Error_String:\t\n"
+"	.ascii \"sin: %s error\\n\\0\"\t\n"
+".even\t\n"
+"| m.ritzert 7.12.1991\t\n"
+"| ritzert@dfg.dbp.de\t\n"
+"|\t\n"
+"|    /* NAN  = {7fffffff,ffffffff}		*/\t\n"
+"|    /* +Inf = {7ff00000,00000000}		*/\t\n"
+"|    /* -Inf = {fff00000,00000000}		*/\t\n"
+"|    /* MAX_D= {7fee42d1,30773b76}		*/\t\n"
+"|    /* MIN_D= {ffee42d1,30773b76}		*/\t\n"
+"\t\n"
+".even\t\n"
+"double_max:\t\n"
+"	.long	0x7fee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"double_min:\t\n"
+"	.long	0xffee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"NaN:\t\n"
+"	.long	0x7fffffff\t\n"
+"	.long	0xffffffff\t\n"
+"p_Inf:\t\n"
+"	.long	0x7ff00000\t\n"
+"	.long	0x00000000\t\n"
+"m_Inf:\t\n"
+"	.long	0xfff00000\t\n"
+"	.long	0x00000000\t\n"
+    );	/* end asm	*/
+# endif	/* ERROR_CHECK */
 
-    __asm(".even
-.globl _sin
-_sin:
-    ");	/* end asm	*/
+    __asm(".even\t\n"
+".globl " C_SYMBOL_NAME(sin) "\t\n"
+C_SYMBOL_NAME(sin) ":\t\n"
+    );	/* end asm	*/
 
 #endif	/* __M68881__ || sfp004	*/
 #ifdef	__M68881__
 
-    __asm("
-	fsind	a7@(4), fp0	| sin
-	fmoved	fp0,a7@-	| push result
-	moveml	a7@+,d0-d1	| return_value
-    ");	/* end asm	*/
+    __asm(
+"	fsind	%a7@(4), %fp0	| sin\t\n"
+"	fmoved	%fp0,%a7@-	| push result\t\n"
+"	moveml	%a7@+,%d0-%d1	| return_value\t\n"
+    );	/* end asm	*/
 
-#endif	__M68881__
+#endif /* __M68881__ */
 #ifdef	sfp004
-    __asm("
-	lea	0xfffa50,a0
-	movew	#0x540e,a0@(comm)	| specify function
-	cmpiw	#0x8900,a0@(resp)	| check
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-	movew	#0x7400,a0@(comm)	| result to d0
-	.long	0x0c688900, 0xfff067f8	| wait
-	movel	a0@,d0
-	movel	a0@,d1
-    ");	/* end asm	*/
+    __asm(
+"  	lea	0xfffa50,%a0\t\n"
+"	movew	#0x540e,%a0@(comm)	| specify function\t\n"
+"	cmpiw	#0x8900,%a0@(resp)	| check\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"	movew	#0x7400,%a0@(comm)	| result to d0\t\n"
+"	.long	0x0c688900, 0xfff067f8	| wait\t\n"
+"	movel	%a0@,%d0\t\n"
+"	movel	%a0@,%d1\t\n"
+);	/* end asm	*/
 
-#endif	sfp004
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 # ifdef	ERROR_CHECK
-    __asm("
-	lea	double_max,a0	|
-	swap	d0		| exponent into lower word
-	cmpw	a0@(16),d0	| == NaN ?
-	beq	error_nan	|
-	swap	d0		| result ok,
-	rts			| restore d0
-");
+    __asm(
+"	lea	double_max,%a0	|\t\n"
+"	swap	%d0		| exponent into lower word\t\n"
+"	cmpw	%a0@(16),%d0	| == NaN ?\t\n"
+"	beq	error_nan	|\t\n"
+"	swap	%d0		| result ok,\t\n"
+"	rts			| restore d0\t\n"
+);
 #ifndef	__MSHORT__
-__asm("
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movel	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
+__asm(
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
 #else	__MSHORT__
-__asm("
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movew	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
+__asm(
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
 #endif	__MSHORT__
-__asm("
-error_exit:
-	pea	_Error_String	|
-	pea	__iob+52	|
-	jbsr	_fprintf	|
-	addl	#12,a7		|
-	moveml	a7@+,d0-d1
-	rts
-    ");
-# else	ERROR_CHECK
+__asm(
+"error_exit:\t\n"
+"	moveml	%a7@+,%d0-%d1\t\n"
+"	rts\n"
+    );
+# else	/* ERROR_CHECK */
 
 __asm("rts");
 
-# endif	ERROR_CHECK
+# endif	/* ERROR_CHECK */
 #endif /* __M68881__ || sfp004	*/
diff --git a/pmlsrc/sinh.c b/pmlsrc/sinh.c
index 15afc1c..865e8bc 100644
--- a/pmlsrc/sinh.c
+++ b/pmlsrc/sinh.c
@@ -63,11 +63,12 @@
  *
  */
 
-#if !defined (__M68881__) && !defined (sfp004)
-
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
+
+#if !defined (__M68881__) && !defined (sfp004)
 
 static char funcname[] = "sinh";
 
@@ -81,7 +82,6 @@ double x;
 	xcpt.name = funcname;
 	xcpt.arg1 = x;
 	if (!matherr (&xcpt)) {
-	    fprintf (stderr, "%s: OVERFLOW error\n", funcname);
 	    errno = ERANGE;
 	    xcpt.retval = HUGE_VAL;
 	}
@@ -90,7 +90,6 @@ double x;
 	xcpt.name = funcname;
 	xcpt.arg1 = x;
 	if (!matherr (&xcpt)) {
-	    fprintf (stderr, "%s: UNDERFLOW error\n", funcname);
 	    errno = ERANGE;
 	    xcpt.retval = 0.0;
 	}
@@ -103,155 +102,139 @@ double x;
 #endif
 #ifdef	sfp004
 
-__asm("
-
-comm =	 -6
-resp =	-16
-zahl =	  0
+__asm(
+"\t\n"
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
 
-");	/* end asm	*/
+);	/* end asm	*/
 
-#endif	sfp004
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 
     __asm(".text; .even");
 
 # ifdef	ERROR_CHECK
 
-    __asm("
-
-
-_Overflow:
-	.ascii \"OVERFLOW\\0\"
-_Domain:
-	.ascii \"DOMAIN\\0\"
-_Error_String:
-	.ascii \"sinh: %s error\\n\\0\"
-.even
-| m.ritzert 7.12.1991
-| ritzert@dfg.dbp.de
-|
-|    /* NAN  = {7fffffff,ffffffff}		*/
-|    /* +Inf = {7ff00000,00000000}		*/
-|    /* -Inf = {fff00000,00000000}		*/
-|    /* MAX_D= {7fee42d1,30773b76}		*/
-|    /* MIN_D= {ffee42d1,30773b76}		*/
-
-.even
-double_max:
-	.long	0x7fee42d1
-	.long	0x30273b76
-double_min:
-	.long	0xffee42d1
-	.long	0x30273b76
-NaN:
-	.long	0x7fffffff
-	.long	0xffffffff
-p_Inf:
-	.long	0x7ff00000
-	.long	0x00000000
-m_Inf:
-	.long	0xfff00000
-	.long	0x00000000
-    ");	/* end asm	*/
-# endif	ERROR_CHECK
-
-    __asm(".even
-.globl _sinh
-_sinh:
-    ");	/* end asm	*/
+    __asm(
+"\t\n"
+"\t\n"
+".even\t\n"
+"| m.ritzert 7.12.1991\t\n"
+"| ritzert@dfg.dbp.de\t\n"
+"|\t\n"
+"|    /* NAN  = {7fffffff,ffffffff}		*/\t\n"
+"|    /* +Inf = {7ff00000,00000000}		*/\t\n"
+"|    /* -Inf = {fff00000,00000000}		*/\t\n"
+"|    /* MAX_D= {7fee42d1,30773b76}		*/\t\n"
+"|    /* MIN_D= {ffee42d1,30773b76}		*/\t\n"
+"\t\n"
+".even\t\n"
+"double_max:\t\n"
+"	.long	0x7fee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"double_min:\t\n"
+"	.long	0xffee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"NaN:\t\n"
+"	.long	0x7fffffff\t\n"
+"	.long	0xffffffff\t\n"
+"p_Inf:\t\n"
+"	.long	0x7ff00000\t\n"
+"	.long	0x00000000\t\n"
+"m_Inf:\t\n"
+"	.long	0xfff00000\t\n"
+"	.long	0x00000000\t\n"
+    );	/* end asm	*/
+# endif	/* ERROR_CHECK */
+
+    __asm(".even\t\n"
+".globl " C_SYMBOL_NAME(sinh) "\t\n"
+C_SYMBOL_NAME(sinh) ":\t\n"
+    );	/* end asm	*/
 
 #endif	/* __M68881__ || sfp004	*/
 #ifdef	__M68881__
 
-    __asm("
-	fsinhd	a7@(4), fp0	| sinh
-	fmoved	fp0,a7@-	| push result
-	moveml	a7@+,d0-d1	| return_value
-");	/* end asm	*/
+    __asm(
+"	fsinhd	%a7@(4), %fp0	| sinh\t\n"
+"	fmoved	%fp0,%a7@-	| push result\t\n"
+"	moveml	%a7@+,%d0-%d1	| return_value\t\n"
+);	/* end asm	*/
 
-#endif	__M68881__
+#endif /* __M68881__ */
 #ifdef	sfp004
-    __asm("
-	lea	0xfffa50,a0
-	movew	#0x5402,a0@(comm)	| specify function
-	cmpiw	#0x8900,a0@(resp)	| check
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-	movew	#0x7400,a0@(comm)	| result to d0
-	.long	0x0c688900, 0xfff067f8	| wait
-	movel	a0@,d0
-	movel	a0@,d1
-    ");	/* end asm	*/
-
-#endif	sfp004
+    __asm(
+"	lea	0xfffa50,%a0\t\n"
+"	movew	#0x5402,%a0@(comm)	| specify function\t\n"
+"	cmpiw	#0x8900,%a0@(resp)	| check\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"	movew	#0x7400,%a0@(comm)	| result to d0\t\n"
+"	.long	0x0c688900, 0xfff067f8	| wait\t\n"
+"	movel	%a0@,%d0\t\n"
+"	movel	%a0@,%d1\t\n"
+);	/* end asm	*/
+
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 # ifdef	ERROR_CHECK
-    __asm("
-	lea	double_max,a0	|
-	swap	d0		| exponent into lower word
-	cmpw	a0@(16),d0	| == NaN ?
-	beq	error_nan	|
-	cmpw	a0@(24),d0	| == + Infinity ?
-	beq	error_plus	|
-	cmpw	a0@(32),d0	| == - Infinity ?
-	beq	error_minus	|
-	swap	d0		| result ok,
-	rts			| restore d0
-");
+    __asm(
+"	lea	double_max,%a0	|\t\n"
+"	swap	%d0		| exponent into lower word\t\n"
+"	cmpw	%a0@(16),%d0	| == NaN ?\t\n"
+"	beq	error_nan	|\t\n"
+"	cmpw	%a0@(24),%d0	| == + Infinity ?\t\n"
+"	beq	error_plus	|\t\n"
+"	cmpw	%a0@(32),%d0	| == - Infinity ?\t\n"
+"	beq	error_minus	|\t\n"
+"	swap	%d0		| result ok,\t\n"
+"	rts			| restore d0\t\n"
+);
 #ifndef	__MSHORT__
-__asm("
-error_minus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movel	#63,_errno	| errno = ERANGE
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movel	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movel	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
+__asm(
+"error_minus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#63," C_SYMBOL_NAME(errno) "	| errno = ERANGE\t\n"
+"	bra	error_exit	|\t\n"
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
 #else	__MSHORT__
-__asm("
-error_minus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movew	#63,_errno	| errno = ERANGE
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movew	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movew	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
-#endif	__MSHORT__
-__asm("
-error_exit:
-	pea	_Error_String	|
-	pea	__iob+52	|
-	jbsr	_fprintf	|
-	addl	#12,a7		|
-	moveml	a7@+,d0-d1
-	rts
-    ");
-# else	ERROR_CHECK
+__asm(
+"error_minus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#63," C_SYMBOL_NAME(errno) "	| errno = ERANGE\t\n"
+"	bra	error_exit	|\t\n"
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
+#endif	/* __MSHORT__ */
+__asm(
+"error_exit:\t\n"
+"	moveml	%a7@+,%d0-%d1\t\n"
+"	rts\t\n"
+    );
+# else	/* ERROR_CHECK */
 
 __asm("rts");
 
-# endif	ERROR_CHECK
+# endif	/* ERROR_CHECK */
 #endif /* __M68881__ || sfp004	*/
diff --git a/pmlsrc/sqrt.c b/pmlsrc/sqrt.c
index 84df6d9..c5cbe55 100644
--- a/pmlsrc/sqrt.c
+++ b/pmlsrc/sqrt.c
@@ -143,11 +143,12 @@
  *	Michal Jaegermann, 21 October 1992
  */
 
-#if !defined (__M68881__) && !defined (sfp004)
-
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
+
+#if !defined (__M68881__) && !defined (sfp004)
 
 #define P0  0.3608580479718948e+00
 #define P1  0.7477707028388739e+00
@@ -171,7 +172,6 @@ double x;
 	xcpt.name = funcname;
 	xcpt.arg1 = x;
 	if (!matherr (&xcpt)) {
-	    fprintf (stderr, "%s: DOMAIN error\n", funcname);
 	    errno = EDOM;
 	    xcpt.retval = 0.0;
 	}
@@ -213,197 +213,183 @@ double hypot(double x, double y)
 
 #ifdef	sfp004
 
-__asm("
-
-comm =	 -6
-resp =	-16
-zahl =	  0
+__asm(
+"\t\n"
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
+"\t\n"
+);	/* end asm	*/
 
-");	/* end asm	*/
-
-#endif	sfp004
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 
     __asm(".text; .even");
 
 # ifdef	ERROR_CHECK
 
-    __asm("
-
-_Overflow:
-	.ascii \"OVERFLOW\\0\"
-_Domain:
-	.ascii \"DOMAIN\\0\"
-_Error_String:
-	.ascii \"sqrt: %s error\\n\\0\"
-.even
-
-| m.ritzert 7.12.1991
-| ritzert@dfg.dbp.de
-|
-|    /* NAN  = {7fffffff,ffffffff}		*/
-|    /* +Inf = {7ff00000,00000000}		*/
-|    /* -Inf = {fff00000,00000000}		*/
-|    /* MAX_D= {7fee42d1,30773b76}		*/
-|    /* MIN_D= {ffee42d1,30773b76}		*/
-
-.even
-double_max:
-	.long	0x7fee42d1
-	.long	0x30273b76
-double_min:
-	.long	0xffee42d1
-	.long	0x30273b76
-NaN:
-	.long	0x7fffffff
-	.long	0xffffffff
-p_Inf:
-	.long	0x7ff00000
-	.long	0x00000000
-m_Inf:
-	.long	0xfff00000
-	.long	0x00000000
-    ");	/* end asm	*/
-# endif	ERROR_CHECK
-
-    __asm(".even
-.globl _hypot
-.globl _sqrt
-_sqrt:
-    ");	/* end asm	*/
+    __asm(
+"\t\n"
+".even\t\n"
+"\t\n"
+"| m.ritzert 7.12.1991\t\n"
+"| ritzert@dfg.dbp.de\t\n"
+"|\t\n"
+"|    /* NAN  = {7fffffff,ffffffff}		*/\t\n"
+"|    /* +Inf = {7ff00000,00000000}		*/\t\n"
+"|    /* -Inf = {fff00000,00000000}		*/\t\n"
+"|    /* MAX_D= {7fee42d1,30773b76}		*/\t\n"
+"|    /* MIN_D= {ffee42d1,30773b76}		*/\t\n"
+"\t\n"
+".even\t\n"
+"double_max:\t\n"
+"	.long	0x7fee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"double_min:\t\n"
+"	.long	0xffee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"NaN:\t\n"
+"	.long	0x7fffffff\t\n"
+"	.long	0xffffffff\t\n"
+"p_Inf:\t\n"
+"	.long	0x7ff00000\t\n"
+"	.long	0x00000000\t\n"
+"m_Inf:\t\n"
+"	.long	0xfff00000\t\n"
+"	.long	0x00000000\t\n"
+    );	/* end asm	*/
+# endif	/* ERROR_CHECK */
+
+    __asm(".even\t\n"
+".globl " C_SYMBOL_NAME(sqrt) "\t\n"
+C_SYMBOL_NAME(sqrt) ":\t\n"
+    );	/* end asm	*/
 
 #endif	/* __M68881__ || sfp004	*/
 #ifdef	__M68881__
 
-    __asm("
-	fsqrtd	a7@(4), fp0	| sqrt
-	fmoved	fp0,a7@-	| push result
-	moveml	a7@+,d0-d1	| return_value
-    ");	/* end asm	*/
+    __asm(
+"	fsqrtd	%a7@(4), %fp0	| sqrt\t\n"
+"	fmoved	%fp0,%a7@-	| push result\t\n"
+"	moveml	%a7@+,%d0-%d1	| return_value\t\n"
+    );	/* end asm	*/
 
-#endif	__M68881__
+#endif /* __M68881__ */
 #ifdef	sfp004
-    __asm("
-	lea	0xfffa50,a0
-	movew	#0x5404,a0@(comm)	| specify function
-	cmpiw	#0x8900,a0@(resp)	| check
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-	movew	#0x7400,a0@(comm)	| result to d0
-	.long	0x0c688900, 0xfff067f8	| wait
-	movel	a0@,d0
-	movel	a0@,d1
-    ");	/* end asm	*/
-
-#endif	sfp004
+    __asm(
+"	lea	0xfffa50,%a0\t\n"
+"	movew	#0x5404,%a0@(comm)	| specify function\t\n"
+"	cmpiw	#0x8900,%a0@(resp)	| check\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"	movew	#0x7400,%a0@(comm)	| result to d0\t\n"
+"	.long	0x0c688900, 0xfff067f8	| wait\t\n"
+"	movel	%a0@,%d0\t\n"
+"	movel	%a0@,%d1\t\n"
+);	/* end asm	*/
+
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 # ifdef	ERROR_CHECK
-    __asm("
-err:
-	lea	double_max,a0	|
-	swap	d0		| exponent into lower word
-	cmpw	a0@(16),d0	| == NaN ?
-	beq	error_nan	|
-	cmpw	a0@(24),d0	| == + Infinity ?
-	beq	error_plus	|
-	swap	d0		| result ok,
-	rts			| restore d0
-");
+    __asm(
+"err:\t\n"
+"	lea	double_max,%a0	|\t\n"
+"	swap	%d0		| exponent into lower word\t\n"
+"	cmpw	%a0@(16),%d0	| == NaN ?\t\n"
+"	beq	error_nan	|\t\n"
+"	cmpw	%a0@(24),%d0	| == + Infinity ?\t\n"
+"	beq	error_plus	|\t\n"
+"	swap	%d0		| result ok,\t\n"
+"	rts			| restore d0\t\n"
+);
 #ifndef	__MSHORT__
-__asm("
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movel	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movel	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
+__asm(
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
 #else	__MSHORT__
-__asm("
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movew	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movew	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
-#endif	__MSHORT__
-__asm("
-error_exit:
-	pea	_Error_String	|
-	pea	__iob+52	|
-	jbsr	_fprintf	|
-	addl	#12,a7		|
-	moveml	a7@+,d0-d1
-");
-# endif	ERROR_CHECK
-__asm("
-	rts
-
-.even
-_hypot:
-    ");
+__asm(
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
+#endif	/* __MSHORT__ */
+__asm(
+"error_exit:\t\n"
+"	moveml	%a7@+,%d0-%d1\t\n"
+);
+# endif	/* ERROR_CHECK */
+__asm(
+"	rts\t\n"
+"\t\n"
+".even\t\n"
+".globl " C_SYMBOL_NAME(hypot) "\t\n"
+C_SYMBOL_NAME(hypot) ":\t\n"
+    );
 #endif /* __M68881__ || sfp004	*/
 #ifdef __M68881__
-__asm("
-	fmoved	a7@(4),fp0	|
-	fmulx	fp0,fp0		| x**2
-	fmoved	a7@(12),fp1	|
-	fmulx	fp1,fp1		| y**2
-	faddx	fp1,fp0		|
-	fsqrtx	fp0,fp0		| sqrt( x**2 + y**2 )
-	fmoved	fp0,a7@-	|
-	moveml	a7@+,d0-d1	| return arg
-");
-#endif	__M68881__
+__asm(
+"	fmoved	%a7@(4),%fp0	|\t\n"
+"	fmulx	%fp0,%fp0		| x**2\t\n"
+"	fmoved	%a7@(12),%fp1	|\t\n"
+"	fmulx	%fp1,%fp1		| y**2\t\n"
+"	faddx	%fp1,%fp0		|\t\n"
+"	fsqrtx	%fp0,%fp0		| sqrt( x**2 + y**2 )\t\n"
+"	fmoved	%fp0,%a7@-	|\t\n"
+"	moveml	%a7@+,%d0-%d1	| return arg\t\n"
+);
+#endif /* __M68881__ */
 #ifdef	sfp004
-__asm("
-	lea	0xfffa50,a0
-
-	movew	#0x5400,a0@(comm)	| load fp0
-	.long	0x0c688900, 0xfff067f8
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-
-	movew	#0x5480,a0@(comm)	| load fp1
-	.long	0x0c688900, 0xfff067f8
-	movel	a7@(12),a0@		| load arg_hi
-	movel	a7@(16),a0@		| load arg_low
-
-	movew	#0x0023,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-
-	movew	#0x04a3,a0@(comm)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-
-	movew	#0x0422,a0@(comm)	| fp0 = fp0 + fp1	
-	.word	0x4a68,0xfff0,0x6bfa	| test
-
-	movew	#0x0004,a0@(comm)	| sqrt(fp0)
-	.word	0x4a68,0xfff0,0x6bfa	| test
-
-	movew	#0x7400,a0@(comm)	| result to d0/d1
-	.long	0x0c688900, 0xfff067f8
-	movel	a0@(zahl),d0
-	movel	a0@(zahl),d1
-");
-#endif	sfp004
+__asm(
+"	lea	0xfffa50,%a0\t\n"
+"\t\n"
+"	movew	#0x5400,%a0@(comm)	| load fp0\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"\t\n"
+"	movew	#0x5480,%a0@(comm)	| load fp1\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a7@(12),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(16),%a0@		| load arg_low\t\n"
+"\t\n"
+"	movew	#0x0023,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"\t\n"
+"	movew	#0x04a3,%a0@(comm)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"\t\n"
+"	movew	#0x0422,%a0@(comm)	| fp0 = fp0 + fp1	\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"\t\n"
+"	movew	#0x0004,%a0@(comm)	| sqrt(fp0)\t\n"
+"	.word	0x4a68,0xfff0,0x6bfa	| test\t\n"
+"\t\n"
+"	movew	#0x7400,%a0@(comm)	| result to d0/d1\t\n"
+"	.long	0x0c688900, 0xfff067f8\t\n"
+"	movel	%a0@(zahl),%d0\t\n"
+"	movel	%a0@(zahl),%d1\t\n"
+);
+#endif /* sfp004 */
 #if ( defined (__M68881__) || defined (sfp004) ) && defined (ERROR_CHECK)
 
 __asm("bra err");
 
-#else	ERROR_CHECK
+#else /* ERROR_CHECK */
 
 __asm("rts");
 
-#endif	ERROR_CHECK
+#endif /* ERROR_CHECK */
diff --git a/pmlsrc/symbols.h b/pmlsrc/symbols.h
new file mode 100644
index 0000000..16ed51d
--- /dev/null
+++ b/pmlsrc/symbols.h
@@ -0,0 +1,27 @@
+#ifndef __USER_LABEL_PREFIX__
+#  if defined(__ELF__)
+#    define __USER_LABEL_PREFIX__
+#  else
+#    define __USER_LABEL_PREFIX__ _
+#  endif
+#endif
+
+#define __STRING(x)	#x
+#define __STRINGIFY(x)	__STRING(x)
+
+#ifndef __SYMBOL_PREFIX
+# define __SYMBOL_PREFIX __STRINGIFY(__USER_LABEL_PREFIX__)
+# define __ASM_SYMBOL_PREFIX __USER_LABEL_PREFIX__
+#endif
+
+#ifndef C_SYMBOL_NAME
+# ifdef __ASSEMBLER__
+#   define C_SYMBOL_NAME2(pref, name) pref##name
+#   define C_SYMBOL_NAME1(pref, name) C_SYMBOL_NAME2(pref, name)
+#   define C_SYMBOL_NAME(name) C_SYMBOL_NAME1(__ASM_SYMBOL_PREFIX, name)
+# else
+#   define C_SYMBOL_NAME(name) __SYMBOL_PREFIX #name
+# endif
+#endif
+
+
diff --git a/pmlsrc/tan.c b/pmlsrc/tan.c
index ac02558..f489f96 100644
--- a/pmlsrc/tan.c
+++ b/pmlsrc/tan.c
@@ -55,11 +55,12 @@
  *
  */
 
-#if !defined (__M68881__) && !defined (sfp004)	/* mjr++		*/
-
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
+
+#if !defined (__M68881__) && !defined (sfp004)	/* mjr++		*/
 
 static char funcname[] = "tan";
 
@@ -77,7 +78,6 @@ double x;
 	xcpt.name = funcname;
 	xcpt.arg1 = x;
 	if (!matherr (&xcpt)) {
-	    fprintf (stderr, "%s: OVERFLOW error\n", funcname);
 	    errno = ERANGE;
 	    if (sinx >= 0.0) {
 		xcpt.retval = HUGE_VAL;
@@ -94,154 +94,138 @@ double x;
 #endif	/* __M68881__ || sfp004	*/
 #ifdef	sfp004
 
-__asm("
-
-comm =	 -6
-resp =	-16
-zahl =	  0
+__asm(
+"\t\n"
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
 
-");	/* end asm	*/
+);	/* end asm	*/
 
-#endif	sfp004
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 
     __asm(".text; .even");
 
 # ifdef	ERROR_CHECK
 
-    __asm("
-
-_Overflow:
-	.ascii \"OVERFLOW\\0\"
-_Domain:
-	.ascii \"DOMAIN\\0\"
-_Error_String:
-	.ascii \"tan: %s error\\n\\0\"
-.even
-| pml compatible tangent
-| m.ritzert 7.12.1991
-| ritzert@dfg.dbp.de
-|
-|    /* NAN  = {7fffffff,ffffffff}		*/
-|    /* +Inf = {7ff00000,00000000}		*/
-|    /* -Inf = {fff00000,00000000}		*/
-|    /* MAX_D= {7fee42d1,30773b76}		*/
-|    /* MIN_D= {ffee42d1,30773b76}		*/
-
-.even
-double_max:
-	.long	0x7fee42d1
-	.long	0x30273b76
-double_min:
-	.long	0xffee42d1
-	.long	0x30273b76
-NaN:
-	.long	0x7fffffff
-	.long	0xffffffff
-p_Inf:
-	.long	0x7ff00000
-	.long	0x00000000
-m_Inf:
-	.long	0xfff00000
-	.long	0x00000000
-");
-# endif	ERROR_CHECK
-
-    __asm(".even
-.globl _tan
-_tan:
-    ");	/* end asm	*/
+    __asm(
+"\t\n"
+".even\t\n"
+"| pml compatible tangent\t\n"
+"| m.ritzert 7.12.1991\t\n"
+"| ritzert@dfg.dbp.de\t\n"
+"|\t\n"
+"|    /* NAN  = {7fffffff,ffffffff}		*/\t\n"
+"|    /* +Inf = {7ff00000,00000000}		*/\t\n"
+"|    /* -Inf = {fff00000,00000000}		*/\t\n"
+"|    /* MAX_D= {7fee42d1,30773b76}		*/\t\n"
+"|    /* MIN_D= {ffee42d1,30773b76}		*/\t\n"
+"\t\n"
+".even\t\n"
+"double_max:\t\n"
+"	.long	0x7fee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"double_min:\t\n"
+"	.long	0xffee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"NaN:\t\n"
+"	.long	0x7fffffff\t\n"
+"	.long	0xffffffff\t\n"
+"p_Inf:\t\n"
+"	.long	0x7ff00000\t\n"
+"	.long	0x00000000\t\n"
+"m_Inf:\t\n"
+"	.long	0xfff00000\t\n"
+"	.long	0x00000000\t\n"
+);
+# endif	/* ERROR_CHECK */
+
+    __asm(".even\t\n"
+".globl " C_SYMBOL_NAME(tan) "\t\n"
+C_SYMBOL_NAME(tan) ":\t\n"
+    );	/* end asm	*/
 
 #endif	/* __M68881__ || sfp004	*/
 #ifdef	__M68881__
 
-    __asm("
-	ftand	a7@(4), fp0	| tan
-	fmoved	fp0,a7@-	| push result
-	moveml	a7@+,d0-d1	| return_value
-    ");	/* end asm	*/
+    __asm(
+"	ftand	%a7@(4), %fp0	| tan\t\n"
+"	fmoved	%fp0,%a7@-	| push result\t\n"
+"	moveml	%a7@+,%d0-%d1	| return_value\t\n"
+    );	/* end asm	*/
 
-#endif	__M68881__
+#endif /* __M68881__ */
 #ifdef	sfp004
-    __asm("
-	lea	0xfffa50,a0
-	movew	#0x540f,a0@(comm)	| specify function
-	cmpiw	#0x8900,a0@(resp)	| check
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-	movew	#0x7400,a0@(comm)	| result to d0
-	.long	0x0c688900, 0xfff067f8	| wait
-	movel	a0@,d0
-	movel	a0@,d1
-    ");	/* end asm	*/
-
-#endif	sfp004
+    __asm(
+"	lea	0xfffa50,%a0\t\n"
+"	movew	#0x540f,%a0@(comm)	| specify function\t\n"
+"	cmpiw	#0x8900,%a0@(resp)	| check\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"	movew	#0x7400,%a0@(comm)	| result to d0\t\n"
+"	.long	0x0c688900, 0xfff067f8	| wait\t\n"
+"	movel	%a0@,%d0\t\n"
+"	movel	%a0@,%d1\t\n"
+);	/* end asm	*/
+
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 # ifdef	ERROR_CHECK
-    __asm("
-	lea	double_max,a0	|
-	swap	d0		| exponent into lower word
-	cmpw	a0@(16),d0	| == NaN ?
-	beq	error_nan	|
-	cmpw	a0@(24),d0	| == + Infinity ?
-	beq	error_plus	|
-	cmpw	a0@(32),d0	| == - Infinity ?
-	beq	error_minus	|
-	swap	d0		| result ok,
-	rts			| restore d0
-");
+    __asm(
+"	lea	double_max,%a0	|\t\n"
+"	swap	%d0		| exponent into lower word\t\n"
+"	cmpw	%a0@(16),%d0	| == NaN ?\t\n"
+"	beq	error_nan	|\t\n"
+"	cmpw	%a0@(24),%d0	| == + Infinity ?\t\n"
+"	beq	error_plus	|\t\n"
+"	cmpw	%a0@(32),%d0	| == - Infinity ?\t\n"
+"	beq	error_minus	|\t\n"
+"	swap	%d0		| result ok,\t\n"
+"	rts			| restore d0\t\n"
+);
 #ifndef	__MSHORT__
-__asm("
-error_minus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movel	#63,_errno	| errno = ERANGE
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movel	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movel	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
-#else	__MSHORT__
-__asm("
-error_minus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movew	#63,_errno	| errno = ERANGE
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_plus:
-	swap	d0
-	moveml	d0-d1,a7@-
-	movew	#63,_errno	| NAN => errno = EDOM
-	pea	_Overflow	| for printf
-	bra	error_exit	|
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movew	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
-#endif	__MSHORT__
-__asm("
-error_exit:
-	pea	_Error_String	|
-	pea	__iob+52	|
-	jbsr	_fprintf	|
-	addl	#12,a7		|
-	moveml	a7@+,d0-d1
-	rts
-    ");
-# else	ERROR_CHECK
+__asm(
+"error_minus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#63," C_SYMBOL_NAME(errno) "	| errno = ERANGE\t\n"
+"	bra	error_exit	|\t\n"
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
+#else	/* __MSHORT__ */
+__asm(
+"error_minus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#63," C_SYMBOL_NAME(errno) "	| errno = ERANGE\t\n"
+"	bra	error_exit	|\t\n"
+"error_plus:\t\n"
+"	swap	%d0\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#63," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+"	bra	error_exit	|\t\n"
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
+#endif	/* __MSHORT__ */
+__asm(
+"error_exit:\t\n"
+"	moveml	%a7@+,%d0-%d1\t\n"
+"	rts\t\n"
+    );
+# else	/* ERROR_CHECK */
 __asm("rts");
-# endif	ERROR_CHECK
+# endif	/* ERROR_CHECK */
 
 #endif /* __M68881__ || sfp004	*/
diff --git a/pmlsrc/tanh.c b/pmlsrc/tanh.c
index 7400c38..90b2766 100644
--- a/pmlsrc/tanh.c
+++ b/pmlsrc/tanh.c
@@ -62,11 +62,12 @@
  *
  */
 
-#if !defined (__M68881__) && !defined (sfp004)
-
 #include <stdio.h>
 #include <math.h>
 #include "pml.h"
+#include "symbols.h"
+
+#if !defined (__M68881__) && !defined (sfp004)
 
 static char funcname[] = "tanh";
 
@@ -87,7 +88,6 @@ double x;
 	xcpt.name = funcname;
 	xcpt.arg1 = x;
 	if (!matherr (&xcpt)) {
-	    fprintf (stderr, "%s: PLOSS error\n", funcname);
 	    errno = ERANGE;
 	    if (positive) {
 		xcpt.retval = 1.0;
@@ -103,127 +103,115 @@ double x;
 #endif	/* __M68881__, sfp004	*/
 #ifdef	sfp004
 
-__asm("
-
-comm =	 -6
-resp =	-16
-zahl =	  0
+__asm(
+"\t\n"
+"comm =	 -6\t\n"
+"resp =	-16\t\n"
+"zahl =	  0\t\n"
 
-");	/* end asm	*/
+);	/* end asm	*/
 
-#endif	sfp004
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 
    __asm(".text; .even");
 
 # ifdef	ERROR_CHECK
 
-    __asm("
-
-_Overflow:
-	.ascii \"OVERFLOW\\0\"
-_Domain:
-	.ascii \"DOMAIN\\0\"
-_Error_String:
-	.ascii \"tanh: %s error\\n\\0\"
-.even
-| pml compatible tanhgent
-| m.ritzert 7.12.1991
-| ritzert@dfg.dbp.de
-|
-|    /* NAN  = {7fffffff,ffffffff}		*/
-|    /* +Inf = {7ff00000,00000000}		*/
-|    /* -Inf = {fff00000,00000000}		*/
-|    /* MAX_D= {7fee42d1,30773b76}		*/
-|    /* MIN_D= {ffee42d1,30773b76}		*/
-
-.even
-double_max:
-	.long	0x7fee42d1
-	.long	0x30273b76
-double_min:
-	.long	0xffee42d1
-	.long	0x30273b76
-NaN:
-	.long	0x7fffffff
-	.long	0xffffffff
-p_Inf:
-	.long	0x7ff00000
-	.long	0x00000000
-m_Inf:
-	.long	0xfff00000
-	.long	0x00000000
-");
-#endif	ERROR_CHECK
-
-    __asm(".even
-.globl _tanh
-_tanh:
-    ");	/* end asm	*/
+    __asm(
+"\t\n"
+".even\t\n"
+"| pml compatible tanhgent\t\n"
+"| m.ritzert 7.12.1991\t\n"
+"| ritzert@dfg.dbp.de\t\n"
+"|\t\n"
+"|    /* NAN  = {7fffffff,ffffffff}		*/\t\n"
+"|    /* +Inf = {7ff00000,00000000}		*/\t\n"
+"|    /* -Inf = {fff00000,00000000}		*/\t\n"
+"|    /* MAX_D= {7fee42d1,30773b76}		*/\t\n"
+"|    /* MIN_D= {ffee42d1,30773b76}		*/\t\n"
+"\t\n"
+".even\t\n"
+"double_max:\t\n"
+"	.long	0x7fee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"double_min:\t\n"
+"	.long	0xffee42d1\t\n"
+"	.long	0x30273b76\t\n"
+"NaN:\t\n"
+"	.long	0x7fffffff\t\n"
+"	.long	0xffffffff\t\n"
+"p_Inf:\t\n"
+"	.long	0x7ff00000\t\n"
+"	.long	0x00000000\t\n"
+"m_Inf:\t\n"
+"	.long	0xfff00000\t\n"
+"	.long	0x00000000\t\n"
+);
+#endif /* ERROR_CHECK */
+
+    __asm(".even\t\n"
+".globl " C_SYMBOL_NAME(tanh) "\t\n"
+C_SYMBOL_NAME(tanh) ":\t\n"
+    );	/* end asm	*/
 
 #endif	/* __M68881__ || sfp004	*/
 #ifdef	__M68881__
 
-    __asm("
-	ftanhd	a7@(4), fp0	| tanh
-	fmoved	fp0,a7@-	| push result
-	moveml	a7@+,d0-d1	| return_value
-    ");	/* end asm	*/
+    __asm(
+"	ftanhd	%a7@(4), %fp0	| tanh\t\n"
+"	fmoved	%fp0,%a7@-	| push result\t\n"
+"	moveml	%a7@+,%d0-%d1	| return_value\t\n"
+    );	/* end asm	*/
 
-#endif	__M68881__
+#endif /* __M68881__ */
 #ifdef	sfp004
-    __asm("
-	lea	0xfffa50,a0
-	movew	#0x5409,a0@(comm)	| specify function
-	cmpiw	#0x8900,a0@(resp)	| check
-	movel	a7@(4),a0@		| load arg_hi
-	movel	a7@(8),a0@		| load arg_low
-	movew	#0x7400,a0@(comm)	| result to d0
-	.long	0x0c688900, 0xfff067f8	| wait
-	movel	a0@,d0
-	movel	a0@,d1
-    ");	/* end asm	*/
-
-#endif	sfp004
+    __asm(
+"	lea	0xfffa50,%a0\t\n"
+"	movew	#0x5409,%a0@(comm)	| specify function\t\n"
+"	cmpiw	#0x8900,%a0@(resp)	| check\t\n"
+"	movel	%a7@(4),%a0@		| load arg_hi\t\n"
+"	movel	%a7@(8),%a0@		| load arg_low\t\n"
+"	movew	#0x7400,%a0@(comm)	| result to d0\t\n"
+"	.long	0x0c688900, 0xfff067f8	| wait\t\n"
+"	movel	%a0@,%d0\t\n"
+"	movel	%a0@,%d1\t\n"
+);	/* end asm	*/
+
+#endif /* sfp004 */
 #if defined (__M68881__) || defined (sfp004)
 # ifdef	ERROR_CHECK
-    __asm("
-	lea	double_max,a0	|
-	swap	d0		| exponent into lower word
-	cmpw	a0@(16),d0	| == NaN ?
-	beq	error_nan	|
-	swap	d0		| result ok,
-	rts			| restore d0
-");
+    __asm(
+"	lea	double_max,%a0	|\t\n"
+"	swap	%d0		| exponent into lower word\t\n"
+"	cmpw	%a0@(16),%d0	| == NaN ?\t\n"
+"	beq	error_nan	|\t\n"
+"	swap	%d0		| result ok,\t\n"
+"	rts			| restore d0\t\n"
+);
 #ifndef	__MSHORT__
-__asm("
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movel	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
-#else	__MSHORT__
-__asm("
-error_nan:
-	moveml	a0@(24),d0-d1	| result = +inf
-	moveml	d0-d1,a7@-
-	movew	#62,_errno	| NAN => errno = EDOM
-	pea	_Domain		| for printf
-");
-#endif	__MSHORT__
-__asm("
-error_exit:
-	pea	_Error_String	|
-	pea	__iob+52	|
-	jbsr	_fprintf	|
-	addl	#12,a7		|
-	moveml	a7@+,d0-d1
-	rts
-    ");
-# else	ERROR_CHECK
+__asm(
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movel	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
+#else	/* __MSHORT__ */
+__asm(
+"error_nan:\t\n"
+"	moveml	%a0@(24),%d0-%d1	| result = +inf\t\n"
+"	moveml	%d0-%d1,%a7@-\t\n"
+"	movew	#62," C_SYMBOL_NAME(errno) "	| NAN => errno = EDOM\t\n"
+);
+#endif	/* __MSHORT__ */
+__asm(
+"error_exit:\t\n"
+"	moveml	%a7@+,%d0-%d1\t\n"
+"	rts\t\n"
+    );
+# else	/* ERROR_CHECK */
 
 __asm("rts");
 
-# endif	ERROR_CHECK
+# endif	/* ERROR_CHECK */
 #endif /* __M68881__ || sfp004	*/
diff --git a/pmltests/Makefile b/pmltests/Makefile
new file mode 100644
index 0000000..5d92498
--- /dev/null
+++ b/pmltests/Makefile
@@ -0,0 +1,34 @@
+srcdir = .
+top_srcdir = ..
+subdir = pmltests
+
+include $(top_srcdir)/CONFIGVARS
+include $(top_srcdir)/RULES
+
+CFLAGS +=	-I../pmlsrc
+LIBS =		../pmlsrc/libpml.a
+
+all :		d2d.tos dd2d.tos c2d.tos c2c.tos cc2c.tos
+
+d2d.tos :	d2d.o
+		$(CC) -o d2d.tos d2d.o $(LIBS)
+
+dd2d.tos :	dd2d.o
+		$(CC) -o dd2d.tos dd2d.o $(LIBS)
+		
+c2d.tos :	c2d.o
+		$(CC) -o c2d.tos c2d.o $(LIBS)
+
+c2c.tos :	c2c.o
+		$(CC) -o c2c.tos c2c.o $(LIBS)
+		
+cc2c.tos :	cc2c.o
+		$(CC) -o cc2c.tos cc2c.o $(LIBS)
+		
+
+#
+#	Clean up the directory.
+#
+
+clean::
+	rm -f c2c.tos c2d.tos cc2c.tos d2d.tos dd2d.tos *.BAK *.bak *.tmp nohup.out *.o
