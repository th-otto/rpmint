diff -rup ffmpeg-7.0.orig/configure ffmpeg-7.0/configure
--- ffmpeg-7.0.orig/configure	2024-04-05 01:22:59.000000000 +0200
+++ ffmpeg-7.0/configure	2024-05-12 09:12:43.610534410 +0200
@@ -4909,7 +4909,7 @@ probe_cc(){
                 warn "gcc 4.2 is outdated and may miscompile FFmpeg. Please use a newer compiler." ;;
             esac
         fi
-        _cflags_speed='-O3'
+        _cflags_speed='-O2'
         _cflags_size='-Os'
     elif $_cc --version 2>/dev/null | grep -q ^icc; then
         _type=icc
@@ -5590,19 +5590,6 @@ check_cxxflags_cc -std=$stdcxx ctype.h "
 check_cflags_cc -std=$stdc ctype.h "__STDC_VERSION__ >= 201112L" ||
     { check_cflags_cc -std=c11 ctype.h "__STDC_VERSION__ >= 201112L" && stdc="c11" || die "Compiler lacks C11 support"; }
 
-test_cc <<EOF || die "Compiler lacks support for C11 static assertions"
-#include <assert.h>
-#include <stddef.h>
-struct Foo {
-    int a;
-    void *ptr;
-} obj;
-static_assert(offsetof(struct Foo, a) == 0,
-              "First element of struct does not have offset 0");
-_Static_assert(offsetof(struct Foo, ptr) >= offsetof(struct Foo, a) + sizeof(obj.a),
-               "elements not properly ordered in struct");
-EOF
-
 check_cppflags -D_FILE_OFFSET_BITS=64
 check_cppflags -D_LARGEFILE_SOURCE
 
@@ -5731,6 +5718,8 @@ case $target_os in
     freebsd)
         enable section_data_rel_ro
         ;;
+    freemint)
+        ;;        
     bsd/os)
         add_extralibs -lpoll -lgnugetopt
         strip="strip -d"
@@ -7662,6 +7651,10 @@ enabled threads || warn \
     "environment."
 
 case $target_os in
+freemint)
+    disable memalign
+    disable posix_memalign
+    ;;
 haiku)
     disable memalign
     disable posix_memalign
diff -rup ffmpeg-7.0.orig/fftools/ffmpeg.h ffmpeg-7.0/fftools/ffmpeg.h
--- ffmpeg-7.0.orig/fftools/ffmpeg.h	2024-04-05 01:22:59.000000000 +0200
+++ ffmpeg-7.0/fftools/ffmpeg.h	2024-05-12 09:02:09.163249595 +0200
@@ -279,8 +279,13 @@ typedef struct OutputFilter {
 
     enum AVMediaType     type;
 
+#ifdef __MINT__
+    atomic_uint_least32_t nb_frames_dup;
+    atomic_uint_least32_t nb_frames_drop;
+#else
     atomic_uint_least64_t nb_frames_dup;
     atomic_uint_least64_t nb_frames_drop;
+#endif
 } OutputFilter;
 
 typedef struct FilterGraph {
@@ -553,7 +558,11 @@ typedef struct OutputStream {
 
     /* stats */
     // number of packets send to the muxer
+    #ifdef __MINT__
+    atomic_uint_least32_t packets_written;
+    #else
     atomic_uint_least64_t packets_written;
+    #endif
     // number of frames/samples sent to the encoder
     uint64_t frames_encoded;
     uint64_t samples_encoded;
diff -rup ffmpeg-7.0.orig/fftools/ffmpeg_mux.c ffmpeg-7.0/fftools/ffmpeg_mux.c
--- ffmpeg-7.0.orig/fftools/ffmpeg_mux.c	2024-04-05 01:22:59.000000000 +0200
+++ ffmpeg-7.0/fftools/ffmpeg_mux.c	2024-05-12 08:17:36.114605912 +0200
@@ -710,7 +710,7 @@ static void mux_final_stats(Muxer *mux)
             av_log(of, AV_LOG_VERBOSE, "; ");
         }
 
-        av_log(of, AV_LOG_VERBOSE, "%"PRIu64" packets muxed (%"PRIu64" bytes); ",
+        av_log(of, AV_LOG_VERBOSE, "%"PRIu32" packets muxed (%"PRIu64" bytes); ",
                atomic_load(&ost->packets_written), s);
 
         av_log(of, AV_LOG_VERBOSE, "\n");
diff -rup ffmpeg-7.0.orig/fftools/ffmpeg_mux.h ffmpeg-7.0/fftools/ffmpeg_mux.h
--- ffmpeg-7.0.orig/fftools/ffmpeg_mux.h	2024-04-05 01:22:59.000000000 +0200
+++ ffmpeg-7.0/fftools/ffmpeg_mux.h	2024-05-12 08:17:36.114605912 +0200
@@ -96,7 +96,11 @@ typedef struct Muxer {
 
     /* filesize limit expressed in bytes */
     int64_t                 limit_filesize;
+    #ifdef __MINT__
+    atomic_int_least32_t    last_filesize;
+    #else
     atomic_int_least64_t    last_filesize;
+    #endif
     int                     header_written;
 
     SyncQueue              *sq_mux;
diff -rup ffmpeg-7.0.orig/fftools/ffmpeg_sched.c ffmpeg-7.0/fftools/ffmpeg_sched.c
--- ffmpeg-7.0.orig/fftools/ffmpeg_sched.c	2024-04-05 01:22:59.000000000 +0200
+++ ffmpeg-7.0/fftools/ffmpeg_sched.c	2024-05-12 09:04:16.666037282 +0200
@@ -304,7 +304,11 @@ struct Scheduler {
 
     pthread_mutex_t     schedule_lock;
 
+#ifdef __MINT__
+    atomic_int_least32_t last_dts;
+#else
     atomic_int_least64_t last_dts;
+#endif
 };
 
 /**
diff -rup ffmpeg-7.0.orig/libavcodec/ccaption_dec.c ffmpeg-7.0/libavcodec/ccaption_dec.c
--- ffmpeg-7.0.orig/libavcodec/ccaption_dec.c	2024-04-05 01:22:59.000000000 +0200
+++ ffmpeg-7.0/libavcodec/ccaption_dec.c	2024-05-12 08:27:43.938682885 +0200
@@ -24,6 +24,7 @@
 #include "ass.h"
 #include "codec_internal.h"
 #include "libavutil/opt.h"
+#include "libavutil/avassert.h"
 
 #define SCREEN_ROWS 15
 #define SCREEN_COLUMNS 32
diff -rup ffmpeg-7.0.orig/libavcodec/dvdsubenc.c ffmpeg-7.0/libavcodec/dvdsubenc.c
--- ffmpeg-7.0.orig/libavcodec/dvdsubenc.c	2023-12-31 01:07:26.000000000 +0100
+++ ffmpeg-7.0/libavcodec/dvdsubenc.c	2024-05-12 08:17:36.114605912 +0200
@@ -453,7 +453,7 @@ static int dvdsub_init(AVCodecContext *a
     AVBPrint extradata;
     int i, ret;
 
-    av_assert0(sizeof(dvdc->global_palette) == sizeof(default_palette));
+    static_assert(sizeof(dvdc->global_palette) == sizeof(default_palette), "");
     if (dvdc->palette_str) {
         ff_dvdsub_parse_palette(dvdc->global_palette, dvdc->palette_str);
     } else {
diff -rup ffmpeg-7.0.orig/libavcodec/snowenc.c ffmpeg-7.0/libavcodec/snowenc.c
--- ffmpeg-7.0.orig/libavcodec/snowenc.c	2024-04-05 01:22:59.000000000 +0200
+++ ffmpeg-7.0/libavcodec/snowenc.c	2024-05-12 08:17:36.114605912 +0200
@@ -412,7 +412,7 @@ static int encode_q_branch(SnowEncContex
     int s_context= 2*left->level + 2*top->level + tl->level + tr->level;
     int ref, best_ref, ref_score, ref_mx, ref_my;
 
-    av_assert0(sizeof(s->block_state) >= 256);
+    static_assert(sizeof(s->block_state) >= 256, "");
     if(s->keyframe){
         set_blocks(s, level, x, y, pl, pcb, pcr, 0, 0, 0, BLOCK_INTRA);
         return 0;
diff -rup ffmpeg-7.0.orig/libavcodec/vvc/vvc_filter.c ffmpeg-7.0/libavcodec/vvc/vvc_filter.c
--- ffmpeg-7.0.orig/libavcodec/vvc/vvc_filter.c	2024-04-05 01:22:59.000000000 +0200
+++ ffmpeg-7.0/libavcodec/vvc/vvc_filter.c	2024-05-12 08:30:11.764719533 +0200
@@ -1125,8 +1125,8 @@ static void alf_filter_luma(VVCLocalCont
     int16_t *coeff            = (int16_t*)lc->tmp;
     int16_t *clip             = (int16_t *)lc->tmp1;
 
-    av_assert0(ALF_MAX_FILTER_SIZE <= sizeof(lc->tmp));
-    av_assert0(ALF_MAX_FILTER_SIZE * sizeof(int16_t) <= sizeof(lc->tmp1));
+    static_assert(ALF_MAX_FILTER_SIZE <= sizeof(lc->tmp), "");
+    static_assert(ALF_MAX_FILTER_SIZE * sizeof(int16_t) <= sizeof(lc->tmp1), "");
 
     alf_get_coeff_and_clip(lc, coeff, clip, src, src_stride, width, height, vb_pos, alf);
     fc->vvcdsp.alf.filter[LUMA](dst, dst_stride, src, src_stride, width, height, coeff, clip, vb_pos);
diff -rup ffmpeg-7.0.orig/libavcodec/wmaenc.c ffmpeg-7.0/libavcodec/wmaenc.c
--- ffmpeg-7.0.orig/libavcodec/wmaenc.c	2023-11-10 01:30:15.000000000 +0100
+++ ffmpeg-7.0/libavcodec/wmaenc.c	2024-05-12 08:17:36.114605912 +0200
@@ -363,10 +363,11 @@ static int encode_frame(WMACodecContext
 {
     init_put_bits(&s->pb, buf, buf_size);
 
-    if (s->use_bit_reservoir)
+    if (s->use_bit_reservoir){
         av_assert0(0); // FIXME not implemented
-    else if (encode_block(s, src_coefs, total_gain) < 0)
-        return INT_MAX;
+        }
+    else if (encode_block(s, src_coefs, total_gain) < 0){
+        return INT_MAX;}
 
     align_put_bits(&s->pb);
 
diff -rup ffmpeg-7.0.orig/libavformat/fifo.c ffmpeg-7.0/libavformat/fifo.c
--- ffmpeg-7.0.orig/libavformat/fifo.c	2024-04-05 01:23:00.000000000 +0200
+++ ffmpeg-7.0/libavformat/fifo.c	2024-05-12 08:17:36.114605912 +0200
@@ -79,8 +79,11 @@ typedef struct FifoContext {
     int overflow_flag_lock_initialized;
     /* Value > 0 signals queue overflow */
     volatile uint8_t overflow_flag;
-
+    #ifndef __MINT__
     atomic_int_least64_t queue_duration;
+    #else
+    atomic_int_least32_t queue_duration;
+    #endif
     int64_t last_sent_dts;
     int64_t timeshift;
 } FifoContext;
@@ -644,7 +647,11 @@ static int fifo_write_trailer(AVFormatCo
             av_usleep(10000);
             ret = av_thread_message_queue_send(fifo->queue, &msg, AV_THREAD_MESSAGE_NONBLOCK);
         } while (ret >= 0 || ret == AVERROR(EAGAIN));
+        #ifndef __MINT__
         atomic_store(&fifo->queue_duration, INT64_MAX);
+        #else
+        atomic_store(&fifo->queue_duration, INT32_MAX);
+        #endif
     }
 
     ret = pthread_join(fifo->writer_thread, NULL);
diff -rup ffmpeg-7.0.orig/libavformat/os_support.c ffmpeg-7.0/libavformat/os_support.c
--- ffmpeg-7.0.orig/libavformat/os_support.c	2023-11-11 01:25:17.000000000 +0100
+++ ffmpeg-7.0/libavformat/os_support.c	2024-05-12 08:17:36.114605912 +0200
@@ -23,6 +23,9 @@
 /* needed by inet_aton() */
 #define _DEFAULT_SOURCE
 #define _SVID_SOURCE
+#ifdef __MINT__
+typedef unsigned short u_short;
+#endif
 
 #include "config.h"
 #include "avformat.h"
diff -rup ffmpeg-7.0.orig/libavformat/riffdec.c ffmpeg-7.0/libavformat/riffdec.c
--- ffmpeg-7.0.orig/libavformat/riffdec.c	2023-11-11 01:25:17.000000000 +0100
+++ ffmpeg-7.0/libavformat/riffdec.c	2024-05-12 08:17:36.114605912 +0200
@@ -32,7 +32,7 @@
 int ff_get_guid(AVIOContext *s, ff_asf_guid *g)
 {
     int ret;
-    av_assert0(sizeof(*g) == 16); //compiler will optimize this out
+    static_assert(sizeof(*g) == 16, ""); //compiler will optimize this out
     ret = ffio_read_size(s, *g, sizeof(*g));
     if (ret < 0) {
         memset(*g, 0, sizeof(*g));
diff -rup ffmpeg-7.0.orig/libavformat/riffenc.c ffmpeg-7.0/libavformat/riffenc.c
--- ffmpeg-7.0.orig/libavformat/riffenc.c	2024-04-05 01:23:00.000000000 +0200
+++ ffmpeg-7.0/libavformat/riffenc.c	2024-05-12 08:17:36.114605912 +0200
@@ -357,7 +357,7 @@ void ff_riff_write_info(AVFormatContext
 
 void ff_put_guid(AVIOContext *s, const ff_asf_guid *g)
 {
-    av_assert0(sizeof(*g) == 16);
+    static_assert(sizeof(*g) == 16, "");
     avio_write(s, *g, sizeof(*g));
 }
 
diff -rup ffmpeg-7.0.orig/libavutil/avassert.h ffmpeg-7.0/libavutil/avassert.h
--- ffmpeg-7.0.orig/libavutil/avassert.h	2023-11-11 01:25:17.000000000 +0100
+++ ffmpeg-7.0/libavutil/avassert.h	2024-05-12 08:27:38.928704238 +0200
@@ -45,6 +45,11 @@
     }                                                                   \
 } while (0)
 
+# define _ASSERT_CONCAT(x, y) _ASSERT_CONCAT0 (x, y)
+# define _ASSERT_CONCAT0(x, y) x##y
+# define _ASSERT_GENSYM(prefix) _ASSERT_CONCAT (prefix, __COUNTER__)
+#define static_assert(R, msg) struct _ASSERT_GENSYM(_assert_verify_type) { unsigned int _assert_verify_error_if_negative: (R) ? 1 : -1; }
+
 
 /**
  * assert() equivalent, that does not lie in speed critical code.
diff -rup ffmpeg-7.0.orig/libavutil/cpu.c ffmpeg-7.0/libavutil/cpu.c
--- ffmpeg-7.0.orig/libavutil/cpu.c	2024-04-05 01:23:00.000000000 +0200
+++ ffmpeg-7.0/libavutil/cpu.c	2024-05-12 08:17:36.114605912 +0200
@@ -43,7 +43,11 @@
 #include <sys/param.h>
 #endif
 #include <sys/types.h>
+#ifndef __MINT__
 #include <sys/sysctl.h>
+#else
+#include <mint/sysctl.h>
+#endif
 #endif
 #if HAVE_UNISTD_H
 #include <unistd.h>
diff -rup ffmpeg-7.0.orig/libavutil/hash.c ffmpeg-7.0/libavutil/hash.c
--- ffmpeg-7.0.orig/libavutil/hash.c	2024-04-05 01:23:00.000000000 +0200
+++ ffmpeg-7.0/libavutil/hash.c	2024-05-12 08:30:48.444563137 +0200
@@ -38,6 +38,7 @@
 #include "error.h"
 #include "intreadwrite.h"
 #include "mem.h"
+#include "libavutil/avassert.h"
 
 // ENTRY(HASH_TYPE, HASH_NAME, HASH_SIZE)
 #define HASHES(ENTRY)                   \
diff -rup ffmpeg-7.0.orig/libavutil/mem_internal.h ffmpeg-7.0/libavutil/mem_internal.h
--- ffmpeg-7.0.orig/libavutil/mem_internal.h	2024-04-05 01:23:00.000000000 +0200
+++ ffmpeg-7.0/libavutil/mem_internal.h	2024-05-12 08:17:36.114605912 +0200
@@ -81,7 +81,7 @@
     #define DECLARE_ALIGNED_T(n,t,v)    t __attribute__ ((aligned (FFMIN(n, 16)))) v
     #define DECLARE_ASM_ALIGNED(n,t,v)  t av_used __attribute__ ((aligned (FFMIN(n, 16)))) v
     #define DECLARE_ASM_CONST(n,t,v)    static const t av_used __attribute__ ((aligned (FFMIN(n, 16)))) v
-#elif defined(__GNUC__) || defined(__clang__)
+#elif (defined(__GNUC__) || defined(__clang__)) && !defined(__MINT__)
     #define DECLARE_ALIGNED_T(n,t,v)    t __attribute__ ((aligned (n))) v
     #define DECLARE_ASM_ALIGNED(n,t,v)  t av_used __attribute__ ((aligned (n))) v
     #define DECLARE_ASM_CONST(n,t,v)    static const t av_used __attribute__ ((aligned (n))) v
diff -rup ffmpeg-7.0.orig/libswscale/utils.c ffmpeg-7.0/libswscale/utils.c
--- ffmpeg-7.0.orig/libswscale/utils.c	2024-04-05 01:23:00.000000000 +0200
+++ ffmpeg-7.0/libswscale/utils.c	2024-05-12 08:17:36.114605912 +0200
@@ -1181,7 +1181,9 @@ SwsContext *sws_alloc_context(void)
 {
     SwsContext *c = av_mallocz(sizeof(SwsContext));
 
-    av_assert0(offsetof(SwsContext, redDither) + DITHER32_INT == offsetof(SwsContext, dither32));
+#ifndef __MINT__
+    static_assert(offsetof(SwsContext, redDither) + DITHER32_INT == offsetof(SwsContext, dither32), "");
+#endif
 
     if (c) {
         c->av_class = &ff_sws_context_class;
