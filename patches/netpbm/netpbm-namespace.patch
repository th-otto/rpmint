--- a/converter/ppm/xpmtoppm.c.orig	2023-04-02 10:35:31.632557081 +0200
+++ b/converter/ppm/xpmtoppm.c	2023-04-02 10:36:18.300500520 +0200
@@ -349,7 +349,7 @@
 
 
 static void
-getLine(char * const line,
+my_getline(char * const line,
         size_t const size,
         FILE * const stream) {
 /*----------------------------------------------------------------------------
@@ -584,10 +584,10 @@
 
     for (seqNum = 0; seqNum < nColors; ++seqNum) {
         char line[MAX_LINE+1];
-        getLine(line, sizeof(line), ifP);
+        my_getline(line, sizeof(line), ifP);
         /* skip the comment line if any */
         if (strneq(line, "/*", 2))
-            getLine(line, sizeof(line), ifP);
+            my_getline(line, sizeof(line), ifP);
 
         interpretXpm3ColorTableLine(line, seqNum, charsPerPixel,
                                     colorNameHashP);
@@ -626,25 +626,25 @@
     unsigned int charsPerPixel;
 
     /* Read the XPM signature comment */
-    getLine(line, sizeof(line), ifP);
+    my_getline(line, sizeof(line), ifP);
     if (!strneq(line, xpm3_signature, strlen(xpm3_signature)))
         pm_error("Apparent XPM 3 file does not start with '/* XPM */'.  "
                  "First line is '%s'", xpm3_signature);
 
     /* Read the assignment line */
-    getLine(line, sizeof(line), ifP);
+    my_getline(line, sizeof(line), ifP);
     if (!strneq(line, "static char", 11))
         pm_error("Cannot find data structure declaration.  Expected a "
                  "line starting with 'static char', but found the line "
                  "'%s'.", line);
 
-    getLine(line, sizeof(line), ifP);
+    my_getline(line, sizeof(line), ifP);
 
     /* Skip the comment block, if one starts here */
     if (strneq(line, "/*", 2)) {
         while (!strstr(line, "*/"))
-            getLine(line, sizeof(line), ifP);
-        getLine(line, sizeof(line), ifP);
+            my_getline(line, sizeof(line), ifP);
+        my_getline(line, sizeof(line), ifP);
     }
 
     /* Parse the hints line */
@@ -688,7 +688,7 @@
         char * t1;
         char * t2;
 
-        getLine(line, sizeof(line), ifP);
+        my_getline(line, sizeof(line), ifP);
 
         if ((t1 = strchr(line, '"')) == NULL)
             pm_error("D error scanning color table");
@@ -746,7 +746,7 @@
         char line[MAX_LINE+1];
         char str1[MAX_LINE+1];
 
-        getLine(line, sizeof(line), ifP);
+        my_getline(line, sizeof(line), ifP);
 
         if (sscanf(line, "#define %s %d", str1, &v) == 2) {
             if ((t1 = strrchr(str1, '_')) == NULL)
@@ -801,7 +801,7 @@
     if (strneq(t1, "mono", 4)) {
         for (;;) {
             char line[MAX_LINE+1];
-            getLine(line, sizeof(line), ifP);
+            my_getline(line, sizeof(line), ifP);
             if (strneq(line, "static char", 11))
                 break;
         }
@@ -813,7 +813,7 @@
     */
     for (;;) {
         char line[MAX_LINE+1];
-        getLine(line, sizeof(line), ifP);
+        my_getline(line, sizeof(line), ifP);
         if (strneq(line, "static char", 11))
             break;
     }
@@ -928,7 +928,7 @@
         bool haveLine;
 
         for (haveLine = false; !haveLine; ) {
-            getLine(line, sizeof(line), ifP);
+            my_getline(line, sizeof(line), ifP);
 
             if (strneq(line, "/*", 2)) {
                 /* It's a comment.  Ignore it. */
@@ -972,7 +972,7 @@
     backup = FALSE;
 
     /* Read the header line */
-    getLine(line, sizeof(line), ifP);
+    my_getline(line, sizeof(line), ifP);
     backup = TRUE;  /* back up so next read reads this line again */
 
     rc = sscanf(line, "/* %s */", str1);
--- a/editor/pamscale.c.orig	2020-08-24 16:51:22.457412205 +0200
+++ b/editor/pamscale.c	2023-04-02 10:33:29.912704606 +0200
@@ -56,14 +56,14 @@
 
 /* x^2 and x^3 helper functions */
 static __inline__ double
-pow2(double const x) {
+my_pow2(double const x) {
     return x * x;
 }
 
 
 
 static __inline__ double
-pow3(double const x) {
+my_pow3(double const x) {
     return x * x * x;
 }
 
@@ -112,8 +112,8 @@
     double const absx = x < 0.0 ? -x : x;
 
     return
-        absx < 0.5 ? 0.75 - pow2(absx) :
-        absx < 1.5 ? 0.50 * pow2(absx - 1.5) :
+        absx < 0.5 ? 0.75 - my_pow2(absx) :
+        absx < 1.5 ? 0.50 * my_pow2(absx - 1.5) :
         0.0;
 }
 
@@ -129,8 +129,8 @@
     double const absx = x < 0.0 ? -x : x;
 
     return
-        absx < 1.0 ? 0.5 * pow3(absx) - pow2(absx) + 2.0/3.0 :
-        absx < 2.0 ? pow3(2.0-absx)/6.0 :
+        absx < 1.0 ? 0.5 * my_pow3(absx) - my_pow2(absx) + 2.0/3.0 :
+        absx < 2.0 ? my_pow3(2.0-absx)/6.0 :
         0.0;
 }
 
@@ -146,8 +146,8 @@
     double const absx = x < 0.0 ? -x : x;
 
     return
-        absx < 1.0 ?  1.5 * pow3(absx) - 2.5 * pow2(absx)         + 1.0 :
-        absx < 2.0 ? -0.5 * pow3(absx) + 2.5 * pow2(absx) - 4.0 * absx + 2.0 :
+        absx < 1.0 ?  1.5 * my_pow3(absx) - 2.5 * pow2(absx)         + 1.0 :
+        absx < 2.0 ? -0.5 * my_pow3(absx) + 2.5 * pow2(absx) - 4.0 * absx + 2.0 :
         0.0;
 }
 
@@ -177,8 +177,8 @@
     double const absx = x < 0.0 ? -x : x;
 
     return
-        absx <  1.0 ? p3 * pow3(absx) + p2 * pow2(absx)        + p0 :
-        absx < 2.0 ? q3 * pow3(absx) + q2 * pow2(absx) + q1 * absx + q0 :
+        absx <  1.0 ? p3 * my_pow3(absx) + p2 * pow2(absx)        + p0 :
+        absx < 2.0 ? q3 * my_pow3(absx) + q2 * pow2(absx) + q1 * absx + q0 :
         0.0;
 }
 
@@ -324,7 +324,7 @@
     double const absx = x < 0.0 ? -x : x;
 
     return
-        absx <  1.0 ? 2.0 * pow3(absx) - 3.0 * pow2(absx) + 1.0 :
+        absx <  1.0 ? 2.0 * my_pow3(absx) - 3.0 * pow2(absx) + 1.0 :
         0.0;
 }
 
