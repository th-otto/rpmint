diff -rup xv-3.10a.orig/bggen.c xv-3.10a/bggen.c
--- xv-3.10a.orig/bggen.c	1994-12-22 23:34:41.000000000 +0100
+++ xv-3.10a/bggen.c	2023-03-24 19:51:06.851509391 +0100
@@ -16,6 +16,8 @@
 #include <X11/Xutil.h>
 
 #include <stdio.h>
+#include <stdlib.h>
+#include <ctype.h>
 #include <math.h>
 
 #ifndef M_PI
diff -rup xv-3.10a.orig/tiff/Imakefile xv-3.10a/tiff/Imakefile
--- xv-3.10a.orig/tiff/Imakefile	2023-03-24 18:51:30.703329071 +0100
+++ xv-3.10a/tiff/Imakefile	2023-03-24 19:46:29.547799443 +0100
@@ -21,7 +21,7 @@ tif_fax3.o: 	tif_fax3.c g3states.h t4.h
 
 g3states.h: mkg3states.c t4.h
 	-${RM} g3states.h
-	${CC} -o mkg3states ${CFLAGS} mkg3states.c
+	gcc -o mkg3states -O2 mkg3states.c
 	./mkg3states > g3states.h || rm g3states.h
 
 depend:: g3states.h
diff -rup xv-3.10a.orig/tiff/tif_aux.c xv-3.10a/tiff/tif_aux.c
--- xv-3.10a.orig/tiff/tif_aux.c	1994-12-22 23:35:14.000000000 +0100
+++ xv-3.10a/tiff/tif_aux.c	2023-03-24 19:49:01.467640539 +0100
@@ -75,7 +75,7 @@ TIFFDefaultRefBlackWhite(TIFFDirectory*
  *	explcit values so that defaults exist only one
  *	place in the library -- in TIFFDefaultDirectory.
  */
-TIFFVGetFieldDefaulted(TIFF* tif, ttag_t tag, va_list ap)
+int TIFFVGetFieldDefaulted(TIFF* tif, ttag_t tag, va_list ap)
 {
 	TIFFDirectory *td = &tif->tif_dir;
 
@@ -192,7 +192,7 @@ TIFFVGetFieldDefaulted(TIFF* tif, ttag_t
  * Like TIFFGetField, but return any default
  * value if the tag is not present in the directory.
  */
-TIFFGetFieldDefaulted(TIFF* tif, ttag_t tag, ...)
+int TIFFGetFieldDefaulted(TIFF* tif, ttag_t tag, ...)
 {
 	int ok;
 	va_list ap;
diff -rup xv-3.10a.orig/tiff/tif_ccittrle.c xv-3.10a/tiff/tif_ccittrle.c
--- xv-3.10a.orig/tiff/tif_ccittrle.c	1994-12-22 23:35:14.000000000 +0100
+++ xv-3.10a/tiff/tif_ccittrle.c	2023-03-24 19:49:12.123629393 +0100
@@ -33,7 +33,7 @@
 #include "tiffiop.h"
 #include "tif_fax3.h"
 
-TIFFInitCCITTRLE(TIFF* tif)
+int TIFFInitCCITTRLE(TIFF* tif)
 {
 	TIFFInitCCITTFax3(tif);		/* reuse G3 compression */
 	/*
diff -rup xv-3.10a.orig/tiff/tif_fax3.c xv-3.10a/tiff/tif_fax3.c
--- xv-3.10a.orig/tiff/tif_fax3.c	1994-12-23 23:39:28.000000000 +0100
+++ xv-3.10a/tiff/tif_fax3.c	2023-03-24 19:52:51.707399714 +0100
@@ -215,7 +215,7 @@ Fax3SetupState(TIFF* tif, int space)
  * Setup state for decoding a strip.
  */
 static
-Fax3PreDecode(TIFF* tif)
+int Fax3PreDecode(TIFF* tif)
 {
 	Fax3DecodeState *sp = (Fax3DecodeState *)tif->tif_data;
 
@@ -329,7 +329,7 @@ _fillspan(char* cp, int32 x, int32 count
  * Decode the requested amount of data.
  */
 static
-Fax3Decode(TIFF* tif, tidata_t buf, tsize_t occ, tsample_t s)
+int Fax3Decode(TIFF* tif, tidata_t buf, tsize_t occ, tsample_t s)
 {
 	Fax3DecodeState *sp = (Fax3DecodeState *)tif->tif_data;
 	int status;
@@ -821,7 +821,7 @@ static const u_char oneruns[256] = {
 /*
  * Reset encoding state at the start of a strip.
  */
-static
+static int
 Fax3PreEncode(TIFF* tif)
 {
 	Fax3EncodeState *sp = (Fax3EncodeState *)tif->tif_data;
diff -rup xv-3.10a.orig/tiff/tif_fax4.c xv-3.10a/tiff/tif_fax4.c
--- xv-3.10a.orig/tiff/tif_fax4.c	1994-12-22 23:35:15.000000000 +0100
+++ xv-3.10a/tiff/tif_fax4.c	2023-03-24 19:48:28.307675223 +0100
@@ -78,7 +78,7 @@ Fax4Encode(TIFF* tif, tidata_t bp, tsize
 }
 
 static
-Fax4PostEncode(TIFF* tif)
+int Fax4PostEncode(TIFF* tif)
 {
 	Fax3BaseState *sp = (Fax3BaseState *)tif->tif_data;
 
diff -rup xv-3.10a.orig/tiff/tif_jpeg.c xv-3.10a/tiff/tif_jpeg.c
--- xv-3.10a.orig/tiff/tif_jpeg.c	1994-12-22 23:35:15.000000000 +0100
+++ xv-3.10a/tiff/tif_jpeg.c	2023-03-24 19:51:59.611454206 +0100
@@ -31,7 +31,7 @@
  */
 #include "tiffiop.h"
 
-TIFFInitJPEG(TIFF* tif)
+int TIFFInitJPEG(TIFF* tif)
 {
 	return (1);
 }
diff -rup xv-3.10a.orig/tiff/tif_tile.c xv-3.10a/tiff/tif_tile.c
--- xv-3.10a.orig/tiff/tif_tile.c	1994-12-22 23:35:16.000000000 +0100
+++ xv-3.10a/tiff/tif_tile.c	2023-03-24 19:52:16.387436658 +0100
@@ -71,7 +71,7 @@ TIFFComputeTile(TIFF* tif, uint32 x, uin
  * Check an (x,y,z,s) coordinate
  * against the image bounds.
  */
-TIFFCheckTile(TIFF* tif, uint32 x, uint32 y, uint32 z, tsample_t s)
+int TIFFCheckTile(TIFF* tif, uint32 x, uint32 y, uint32 z, tsample_t s)
 {
 	TIFFDirectory *td = &tif->tif_dir;
 
diff -rup xv-3.10a.orig/xcmap.c xv-3.10a/xcmap.c
--- xv-3.10a.orig/xcmap.c	1995-01-03 22:14:52.000000000 +0100
+++ xv-3.10a/xcmap.c	2023-03-24 19:51:22.587492931 +0100
@@ -11,6 +11,7 @@
 #include <stdio.h>
 #include <sys/types.h>
 #include <ctype.h>
+#include <stdlib.h>
 
 #include <X11/Xos.h>
 #include <X11/Xlib.h>
diff -rup xv-3.10a.orig/xv.c xv-3.10a/xv.c
--- xv-3.10a.orig/xv.c	2023-03-24 18:51:30.699329075 +0100
+++ xv-3.10a/xv.c	2023-03-24 18:52:58.399232227 +0100
@@ -9,6 +9,7 @@
 #define NEEDSDIR     /* for value of MAXPATHLEN */
 
 #include "xv.h"
+#include <time.h>
 
 #include "bits/icon"
 #include "bits/iconmask"
diff -rup xv-3.10a.orig/xv.h xv-3.10a/xv.h
--- xv-3.10a.orig/xv.h	2023-03-24 18:51:30.695329079 +0100
+++ xv-3.10a/xv.h	2023-03-24 19:50:17.395561121 +0100
@@ -114,16 +114,12 @@
 
 #ifndef VMS
 #  include <errno.h>
-#  if !defined(__NetBSD__) && !defined(__GNU_LIBRARY__)
-     extern int   errno;             /* SHOULD be in errno.h, but often isn't */
-     extern char *sys_errlist[];     /* this too... */
-#  endif
 #endif
 
 
 /* not everyone has the strerror() function, or so I'm told */
 #ifndef VMS
-#  define ERRSTR(x) sys_errlist[x]
+#  define ERRSTR(x) strerror(x)
 #else
 #  define ERRSTR(x) strerror(x, vaxc$errno)
 #endif
@@ -191,6 +187,7 @@
 
 
 #ifdef NEEDSTIME
+#  include <time.h>
 #  include <sys/time.h>
 
 #  ifdef _AIX
diff -rup xv-3.10a.orig/xvalg.c xv-3.10a/xvalg.c
--- xv-3.10a.orig/xvalg.c	1994-12-22 23:34:47.000000000 +0100
+++ xv-3.10a/xvalg.c	2023-03-24 19:00:56.674704064 +0100
@@ -9,6 +9,7 @@
 #include "copyright.h"
 
 #include "xv.h"
+#include <time.h>
 
 #ifndef M_PI
 #  define M_PI (3.1415926535897932385)
diff -rup xv-3.10a.orig/xvevent.c xv-3.10a/xvevent.c
--- xv-3.10a.orig/xvevent.c	2023-03-24 18:51:30.691329084 +0100
+++ xv-3.10a/xvevent.c	2023-03-24 18:53:21.895206280 +0100
@@ -22,6 +22,7 @@
 #define NEEDSTIME    /* for -wait handling in eventloop */
 
 #include "xv.h"
+#include <time.h>
 
 #include "bits/dropper"
 #include "bits/dropperm"
diff -rup xv-3.10a.orig/xvgifwr.c xv-3.10a/xvgifwr.c
--- xv-3.10a.orig/xvgifwr.c	1995-01-03 22:22:21.000000000 +0100
+++ xv-3.10a/xvgifwr.c	2023-03-24 19:01:33.498663398 +0100
@@ -239,7 +239,8 @@ static int           cur_bits = 0;
 
 
 
-#define min(a,b)        ((a>b) ? b : a)
+#undef min
+#define min(a,b)        (((a)>(b)) ? (b) : (a))
 
 #define XV_BITS	12    /* BITS was already defined on some systems */
 #define MSDOS	1
diff -rup xv-3.10a.orig/xvimage.c xv-3.10a/xvimage.c
--- xv-3.10a.orig/xvimage.c	2023-03-24 18:51:30.695329079 +0100
+++ xv-3.10a/xvimage.c	2023-03-24 19:00:03.254763056 +0100
@@ -1526,7 +1526,7 @@ XImage *Pic8ToXImage(pic8, wide, high, x
     imWIDE = wide + nullCount;
  
     /* Now create the image data - pad each scanline as necessary */
-    imagedata = (byte *) malloc((size_t) (imWIDE * high));
+    imagedata = (byte *) malloc( ((size_t)imWIDE * high));
     if (!imagedata) FatalError("couldn't malloc imagedata");
     
     pp = (dithpic) ? dithpic : pic8;
@@ -1565,7 +1565,7 @@ XImage *Pic8ToXImage(pic8, wide, high, x
     if (!xim) FatalError("couldn't create xim!");
 
     bperline = xim->bytes_per_line;
-    imagedata = (byte *) malloc((size_t) (bperline * high));
+    imagedata = (byte *) malloc( ((size_t)bperline * high));
     if (!imagedata) FatalError("couldn't malloc imagedata");
     xim->data = (char *) imagedata;
 
@@ -1619,7 +1619,7 @@ XImage *Pic8ToXImage(pic8, wide, high, x
     if (!xim) FatalError("couldn't create xim!");
 
     bperline = xim->bytes_per_line;
-    imagedata = (byte *) malloc((size_t) (bperline * high));
+    imagedata = (byte *) malloc( ((size_t)bperline * high));
     if (!imagedata) FatalError("couldn't malloc imagedata");
     xim->data = (char *) imagedata;
 
@@ -1695,7 +1695,7 @@ XImage *Pic8ToXImage(pic8, wide, high, x
       FatalError("This display's too bizarre.  Can't create XImage.");
 
     bperline = xim->bytes_per_line;
-    imagedata = (byte *) malloc((size_t) (bperline * high));
+    imagedata = (byte *) malloc( ((size_t)bperline * high));
     if (!imagedata) FatalError("couldn't malloc imagedata");
     xim->data = (char *) imagedata;
 
@@ -1714,10 +1714,10 @@ XImage *Pic8ToXImage(pic8, wide, high, x
   case 12:
   case 15:
   case 16: {
-    unsigned short  *imagedata, *ip;
+    unsigned char  *imagedata, *ip;
     byte  *pp;
 
-    imagedata = (unsigned short *) malloc((size_t) (2*wide*high));
+    imagedata = (unsigned char *) malloc( (2*(size_t)wide*high));
     if (!imagedata) FatalError("couldn't malloc imagedata");
 
     xim = XCreateImage(theDisp,theVisual,dispDEEP,ZPixmap,0,
@@ -1740,8 +1740,8 @@ XImage *Pic8ToXImage(pic8, wide, high, x
 	if (dithpic) xcol = ((*pp) ? white : black) & 0xffff;
 		else xcol = xcolors[*pp] & 0xffff;
 
-	*((unsigned char *)ip)++ = (xcol>>8) & 0xff;
-	*((unsigned char *)ip)++ = (xcol) & 0xff;
+	*ip++ = (xcol>>8) & 0xff;
+	*ip++ = (xcol) & 0xff;
       }
     }
     else {   /* LSBFirst */
@@ -1751,8 +1751,8 @@ XImage *Pic8ToXImage(pic8, wide, high, x
 	if (dithpic) xcol = ((*pp) ? white : black) & 0xffff;
 	        else xcol = xcolors[*pp];
 
-	*((unsigned char *)ip)++ = (xcol) & 0xff;
-	*((unsigned char *)ip)++ = (xcol>>8) & 0xff;
+	*ip++ = (xcol) & 0xff;
+	*ip++ = (xcol>>8) & 0xff;
       }
     }
   }
@@ -1766,7 +1766,7 @@ XImage *Pic8ToXImage(pic8, wide, high, x
     byte  *imagedata, *ip, *pp, *tip;
     int    j, do32;
 
-    imagedata = (byte *) malloc((size_t) (4*wide*high));
+    imagedata = (byte *) malloc((4*(size_t)wide*high));
     if (!imagedata) FatalError("couldn't malloc imagedata");
       
     xim = XCreateImage(theDisp,theVisual,dispDEEP,ZPixmap,0,
@@ -1913,7 +1913,7 @@ XImage *Pic24ToXImage(pic24, wide, high)
     bperpix  = xim->bits_per_pixel;
     border   = xim->byte_order;
 
-    imagedata = (byte *) malloc((size_t) (high * bperline));
+    imagedata = (byte *) malloc( ((size_t)high * bperline));
     if (!imagedata) FatalError("couldn't malloc imagedata");
 
     xim->data = (char *) imagedata;
@@ -2053,7 +2053,7 @@ XImage *Pic24ToXImage(pic24, wide, high)
       imWIDE = wide + nullCount;
  
       /* Now create the image data - pad each scanline as necessary */
-      imagedata = (byte *) malloc((size_t) (imWIDE * high));
+      imagedata = (byte *) malloc( ((size_t)imWIDE * high));
       if (!imagedata) FatalError("couldn't malloc imagedata");
       
       for (i=0, pp=pic8, ip=imagedata; i<high; i++) {
@@ -2088,7 +2088,7 @@ XImage *Pic24ToXImage(pic24, wide, high)
       if (!xim) FatalError("couldn't create xim!");
 
       bperline = xim->bytes_per_line;
-      imagedata = (byte *) malloc((size_t) (bperline * high));
+      imagedata = (byte *) malloc( ((size_t)bperline * high));
       if (!imagedata) FatalError("couldn't malloc imagedata");
       xim->data = (char *) imagedata;
 
@@ -2145,7 +2145,7 @@ XImage *Pic24ToXImage(pic24, wide, high)
       if (!xim) FatalError("couldn't create xim!");
 
       bperline = xim->bytes_per_line;
-      imagedata = (byte *) malloc((size_t) (bperline * high));
+      imagedata = (byte *) malloc( ((size_t)bperline * high));
       if (!imagedata) FatalError("couldn't malloc imagedata");
       xim->data = (char *) imagedata;
 
@@ -2223,7 +2223,7 @@ XImage *Pic24ToXImage(pic24, wide, high)
 	FatalError("This display's too bizarre.  Can't create XImage.");
 
       bperline = xim->bytes_per_line;
-      imagedata = (byte *) malloc((size_t) (bperline * high));
+      imagedata = (byte *) malloc( ((size_t)bperline * high));
       if (!imagedata) FatalError("couldn't malloc imagedata");
       xim->data = (char *) imagedata;
 
@@ -2250,7 +2250,7 @@ XImage *Pic24ToXImage(pic24, wide, high)
       int     bperline;
       unsigned long xcol;
 
-      imagedata = (unsigned short *) malloc((size_t) (2*wide*high));
+      imagedata = (unsigned short *) malloc( (2*(size_t)wide*high));
       if (!imagedata) FatalError("couldn't malloc imagedata");
 
       xim = XCreateImage(theDisp,theVisual,dispDEEP,ZPixmap,0,
@@ -2295,7 +2295,7 @@ XImage *Pic24ToXImage(pic24, wide, high)
       unsigned long xcol;
       int bperpix;
 
-      imagedata = (byte *) malloc((size_t) (4*wide*high));
+      imagedata = (byte *) malloc( (4*(size_t)wide*high));
       if (!imagedata) FatalError("couldn't malloc imagedata");
       
       xim = XCreateImage(theDisp,theVisual,dispDEEP,ZPixmap,0,
@@ -2650,7 +2650,7 @@ static int doPadSolid(str, wide, high, o
   
 
 
-  pic24 = (byte *) malloc(wide * high * 3 * sizeof(byte));
+  pic24 = (byte *) malloc((size_t)wide * high * 3 * sizeof(byte));
   if (!pic24) {
     sprintf(errstr,"Error:  Can't alloc memory for %d x %d image.",
 	    wide, high);
diff -rup xv-3.10a.orig/xvpng.c xv-3.10a/xvpng.c
--- xv-3.10a.orig/xvpng.c	1996-06-14 01:42:11.000000000 +0200
+++ xv-3.10a/xvpng.c	2023-03-24 19:41:17.428125912 +0100
@@ -26,6 +26,8 @@
 #ifdef HAVE_PNG
 
 #include "png.h"
+#include <zlib.h>
+#include <setjmp.h>
 
 /*** Stuff for PNG Dialog box ***/
 #define PWIDE 318
@@ -57,8 +59,8 @@ static    void writePNG       PARM((void
 static    int  WritePNG       PARM((FILE *, byte *, int, int, int,
                                     byte *, byte *, byte *, int));
 
-static    void png_xv_error   PARM((png_struct *png_ptr, char *message));
-static    void png_xv_warning PARM((png_struct *png_ptr, char *message));
+static    void png_xv_error   PARM((png_struct *png_ptr, const char *message));
+static    void png_xv_warning PARM((png_struct *png_ptr, const char *message));
 
 /*** local variables ***/
 static char *filename;
@@ -71,6 +73,7 @@ static DIAL  cDial, gDial;
 static BUTT  pbut[P_NBUTTS];
 static CBUTT interCB;
 static CBUTT FdefCB, FnoneCB, FsubCB, FupCB, FavgCB, FPaethCB;
+static jmp_buf ejmpbuf;
 
 /**************************************************************************/
 /* PNG SAVE DIALOG ROUTINES ***********************************************/
@@ -397,7 +400,13 @@ int WritePNG(fp, pic, ptype, w, h, rmap,
   byte       *p, *png_line;
   char        software[256];
   char       *savecmnt = NULL;
-
+  int interlace_method;
+  int color_type;
+  int bit_depth;
+  int num_text;
+  int max_text;
+  png_time mod_time;
+  
   if ((png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL,
        png_xv_error, png_xv_warning)) == NULL) {
     FatalError("malloc failure in WritePNG");
@@ -409,7 +418,7 @@ int WritePNG(fp, pic, ptype, w, h, rmap,
     FatalError("malloc failure in WritePNG");
   }
 
-  if (setjmp(png_ptr->jmpbuf)) {
+  if (setjmp(ejmpbuf)) {
     png_destroy_write_struct(&png_ptr, &info_ptr);
     return -1;
   }
@@ -435,48 +444,43 @@ int WritePNG(fp, pic, ptype, w, h, rmap,
     png_set_filter(png_ptr, 0, filter);
   }
 
-  info_ptr->width = w;
-  info_ptr->height = h;
-
-  info_ptr->interlace_type = interCB.val ? 1 : 0;
+  interlace_method = interCB.val ? PNG_INTERLACE_ADAM7 : PNG_INTERLACE_NONE;
 
   if (colorType == F_FULLCOLOR || colorType == F_REDUCED) {
     if(ptype == PIC24) {
       linesize = 3*w;
-      info_ptr->color_type = PNG_COLOR_TYPE_RGB;
-      info_ptr->bit_depth = 8;
+      color_type = PNG_COLOR_TYPE_RGB;
+      bit_depth = 8;
     } else {
       linesize = w;
-      info_ptr->color_type = PNG_COLOR_TYPE_PALETTE;
+      color_type = PNG_COLOR_TYPE_PALETTE;
       if(numcols <= 2)
-        info_ptr->bit_depth = 1;
+        bit_depth = 1;
       else
       if(numcols <= 4)
-        info_ptr->bit_depth = 2;
+        bit_depth = 2;
       else
       if(numcols <= 16)
-        info_ptr->bit_depth = 4;
+        bit_depth = 4;
       else
-        info_ptr->bit_depth = 8;
+        bit_depth = 8;
 
       for(i = 0; i < numcols; i++) {
         palette[i].red   = rmap[i];
         palette[i].green = gmap[i];
         palette[i].blue  = bmap[i];
       }
-      info_ptr->num_palette = numcols;
-      info_ptr->palette = palette;
-      info_ptr->valid |= PNG_INFO_PLTE;
+      png_set_PLTE(png_ptr, info_ptr, palette, numcols);
     }
   }
 
   else if(colorType == F_GREYSCALE || colorType == F_BWDITHER) {
-    info_ptr->color_type = PNG_COLOR_TYPE_GRAY;
+    color_type = PNG_COLOR_TYPE_GRAY;
     if(colorType == F_BWDITHER) {
       /* shouldn't happen */
       if (ptype == PIC24) FatalError("PIC24 and B/W Stipple in WritePNG()");
 
-      info_ptr->bit_depth = 1;
+      bit_depth = 1;
       if(MONO(rmap[0], gmap[0], bmap[0]) > MONO(rmap[1], gmap[1], bmap[1])) {
         remap[0] = 1;
         remap[1] = 0;
@@ -490,7 +494,7 @@ int WritePNG(fp, pic, ptype, w, h, rmap,
     else {
       if(ptype == PIC24) {
         linesize = w*3;
-        info_ptr->bit_depth = 8;
+        bit_depth = 8;
       }
       else {
         int low_presc;
@@ -503,7 +507,7 @@ int WritePNG(fp, pic, ptype, w, h, rmap,
         for(; i < 256; i++)
           remap[i]=0;
 
-        info_ptr->bit_depth = 8;
+        bit_depth = 8;
 
         /* Note that this fails most of the time because of gamma */
         /* try to adjust to 4 bit prescision grayscale */
@@ -521,7 +525,7 @@ int WritePNG(fp, pic, ptype, w, h, rmap,
           for(i = 0; i < numcols; i++) {
             remap[i] &= 0xf;
           }
-          info_ptr->bit_depth = 4;
+          bit_depth = 4;
 
           /* try to adjust to 2 bit prescision grayscale */
 
@@ -537,7 +541,7 @@ int WritePNG(fp, pic, ptype, w, h, rmap,
           for(i = 0; i < numcols; i++) {
             remap[i] &= 3;
           }
-          info_ptr->bit_depth = 2;
+          bit_depth = 2;
 
           /* try to adjust to 1 bit prescision grayscale */
 
@@ -553,7 +557,7 @@ int WritePNG(fp, pic, ptype, w, h, rmap,
           for(i = 0; i < numcols; i++) {
             remap[i] &= 1;
           }
-          info_ptr->bit_depth = 1;
+          bit_depth = 1;
         }
       }
     }
@@ -562,6 +566,8 @@ int WritePNG(fp, pic, ptype, w, h, rmap,
   else
     png_error(png_ptr, "Unknown colorstyle in WritePNG");
 
+  png_set_IHDR(png_ptr, info_ptr, w, h, bit_depth, color_type, interlace_method, PNG_COMPRESSION_TYPE_DEFAULT, PNG_FILTER_TYPE_DEFAULT);
+
   if ((text = (png_textp)malloc(sizeof(png_text)))) {
     sprintf(software, "XV %s", REVDATE);
 
@@ -570,19 +576,16 @@ int WritePNG(fp, pic, ptype, w, h, rmap,
     text->text = software;
     text->text_length = strlen(text->text);
 
-    info_ptr->max_text = 1;
-    info_ptr->num_text = 1;
-    info_ptr->text = text;
+    png_set_text(png_ptr, info_ptr, text, 1);
   }
 
   Display_Gamma = gDial.val;  /* Save the current gamma for loading */
 
-  info_ptr->gamma = 1.0/gDial.val;
-  info_ptr->valid |= PNG_INFO_gAMA;
+  png_set_gAMA(png_ptr,info_ptr, 1.0/gDial.val);
 
   png_write_info(png_ptr, info_ptr);
 
-  if(info_ptr->bit_depth < 8)
+  if(bit_depth < 8)
     png_set_packing(png_ptr);
 
   pass=png_set_interlace_handling(png_ptr);
@@ -595,7 +598,7 @@ int WritePNG(fp, pic, ptype, w, h, rmap,
     p = pic;
     for(j = 0; j < h; j++) {
   fflush(stdout);
-      if(info_ptr->color_type == PNG_COLOR_TYPE_GRAY) {
+      if(color_type == PNG_COLOR_TYPE_GRAY) {
         int k;
         for(k = 0; k < w; k++)
           png_line[k] = ptype==PIC24 ? MONO(p[k*3], p[k*3+1], p[k*3+2]) :
@@ -620,24 +623,25 @@ int WritePNG(fp, pic, ptype, w, h, rmap,
       strcpy(savecmnt, picComments);
       key = savecmnt;
       tp = text;
-      info_ptr->num_text = 0;
 
       comment = strchr(key, ':');
 
+	  num_text = 0;
+      max_text = 0;
       do  {
         /* Allocate a larger structure for comments if necessary */
-        if (info_ptr->num_text >= info_ptr->max_text)
+        if (num_text >= max_text)
         {
           if ((tp =
-              realloc(text, (info_ptr->num_text + 2)*sizeof(png_text))) == NULL)
+              realloc(text, (num_text + 2)*sizeof(png_text))) == NULL)
           {
             break;
           }
           else
           {
             text = tp;
-            tp = &text[info_ptr->num_text];
-            info_ptr->max_text += 2;
+            tp = &text[num_text];
+            max_text += 2;
           }
         }
 
@@ -686,7 +690,7 @@ int WritePNG(fp, pic, ptype, w, h, rmap,
             }
 
             tp->compression = tp->text_length > 640 ? 0 : -1;
-            info_ptr->num_text++;
+            num_text++;
             tp++;
           }
         }
@@ -696,20 +700,20 @@ int WritePNG(fp, pic, ptype, w, h, rmap,
           tp->text = key;
           tp->text_length = strlen(tp->text);
           tp->compression = tp->text_length > 750 ? 0 : -1;
-          info_ptr->num_text++;
+          num_text++;
           key = NULL;
         }
       } while (key && *key);
     }
     else
     {
-      info_ptr->num_text = 0;
+      num_text = 0;
     }
   }
-  info_ptr->text = text;
+  png_set_text(png_ptr, info_ptr, text, num_text);
 
-  png_convert_from_time_t(&(info_ptr->mod_time), time(NULL));
-  info_ptr->valid |= PNG_INFO_tIME;
+  png_convert_from_time_t(&mod_time, time(NULL));
+  png_set_tIME(png_ptr, info_ptr, &mod_time);
 
   png_write_end(png_ptr, info_ptr);
   png_destroy_write_struct(&png_ptr, &info_ptr);
@@ -737,12 +741,18 @@ int LoadPNG(fname, pinfo)
   png_struct *png_ptr;
   png_info *info_ptr;
   png_color_16 my_background;
+  png_color_16p background;
   int i,j;
   int linesize;
   int filesize;
   int pass;
   size_t commentsize;
-
+  png_uint_32 width, height;
+  int bit_depth, color_type, interlace_method, compression_method, filter_method;
+  double gamma;
+  png_textp text;
+  int num_text;
+  
   fbasename = BaseName(fname);
 
   pinfo->pic     = (byte *) NULL;
@@ -778,7 +788,7 @@ int LoadPNG(fname, pinfo)
     FatalError("malloc failure in LoadPNG");
   }
 
-  if(setjmp(png_ptr->jmpbuf)) {
+  if(setjmp(ejmpbuf)) {
     fclose(fp);
     png_destroy_read_struct(&png_ptr, &info_ptr, (png_infopp)NULL);
     if(!read_anything) {
@@ -797,15 +807,17 @@ int LoadPNG(fname, pinfo)
   png_init_io(png_ptr, fp);
   png_read_info(png_ptr, info_ptr);
 
-  pinfo->w = pinfo->normw = info_ptr->width;
-  pinfo->h = pinfo->normh = info_ptr->height;
+  png_get_IHDR(png_ptr, info_ptr, &width, &height, &bit_depth, &color_type, &interlace_method, &compression_method, &filter_method);
+  
+  pinfo->w = pinfo->normw = width;
+  pinfo->h = pinfo->normh = height;
 
   pinfo->frmType = F_PNG;
 
   sprintf(pinfo->fullInfo, "PNG, %d bit ",
-          info_ptr->bit_depth * info_ptr->channels);
+          bit_depth * png_get_channels(png_ptr, info_ptr));
 
-  switch(info_ptr->color_type) {
+  switch(color_type) {
     case PNG_COLOR_TYPE_PALETTE:
       strcat(pinfo->fullInfo, "palette color");
       break;
@@ -829,20 +841,20 @@ int LoadPNG(fname, pinfo)
 
   sprintf(pinfo->fullInfo + strlen(pinfo->fullInfo),
 	  ", %sinterlaced. (%d bytes)",
-	  info_ptr->interlace_type ? "" : "non-", filesize);
+	  interlace_method != PNG_INTERLACE_NONE ? "" : "non-", filesize);
 
-  sprintf(pinfo->shrtInfo, "%dx%d PNG", info_ptr->width, info_ptr->height);
+  sprintf(pinfo->shrtInfo, "%dx%d PNG", width, height);
 
-  if (info_ptr->bit_depth < 8)
+  if (bit_depth < 8)
       png_set_packing(png_ptr);
 
-  if (info_ptr->valid & PNG_INFO_gAMA)
-    png_set_gamma(png_ptr, Display_Gamma, info_ptr->gamma);
+  if (png_get_gAMA(png_ptr, info_ptr, &gamma) == 0)
+    png_set_gamma(png_ptr, Display_Gamma, gamma);
   else
     png_set_gamma(png_ptr, Display_Gamma, 0.45);
 
-  if (info_ptr->valid & PNG_INFO_bKGD)
-    png_set_background(png_ptr, &info_ptr->background,
+  if (png_get_bKGD(png_ptr, info_ptr, &background))
+    png_set_background(png_ptr, background,
                        PNG_BACKGROUND_GAMMA_FILE, 1, 1.0);
   else {
     my_background.red = my_background.green = my_background.blue =
@@ -851,13 +863,13 @@ int LoadPNG(fname, pinfo)
                        0, Display_Gamma);
   }
 
-  if (info_ptr->bit_depth == 16)
+  if (bit_depth == 16)
     png_set_strip_16(png_ptr);
 
-  if (info_ptr->color_type == PNG_COLOR_TYPE_GRAY ||
-      info_ptr->color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
+  if (color_type == PNG_COLOR_TYPE_GRAY ||
+      color_type == PNG_COLOR_TYPE_GRAY_ALPHA)
   {
-    if (info_ptr->bit_depth == 1)
+    if (bit_depth == 1)
       pinfo->colType = F_BWDITHER;
     else
       pinfo->colType = F_GREYSCALE;
@@ -868,24 +880,28 @@ int LoadPNG(fname, pinfo)
 
   png_read_update_info(png_ptr, info_ptr);
 
-  if(info_ptr->color_type == PNG_COLOR_TYPE_RGB ||
-     info_ptr->color_type == PNG_COLOR_TYPE_RGB_ALPHA) {
+  if(color_type == PNG_COLOR_TYPE_RGB ||
+     color_type == PNG_COLOR_TYPE_RGB_ALPHA) {
     linesize = pinfo->w * 3;
     pinfo->colType = F_FULLCOLOR;
     pinfo->type = PIC24;
   } else {
     linesize = pinfo->w;
     pinfo->type = PIC8;
-    if(info_ptr->color_type == PNG_COLOR_TYPE_GRAY ||
-       info_ptr->color_type == PNG_COLOR_TYPE_GRAY_ALPHA) {
+    if(color_type == PNG_COLOR_TYPE_GRAY ||
+       color_type == PNG_COLOR_TYPE_GRAY_ALPHA) {
       for(i = 0; i < 256; i++)
         pinfo->r[i] = pinfo->g[i] = pinfo->b[i] = i;
     } else {
+      png_colorp palette;
+      int num_palette;
+      
+      png_get_PLTE(png_ptr, info_ptr, &palette, &num_palette);
       pinfo->colType = F_FULLCOLOR;
-      for(i = 0; i < info_ptr->num_palette; i++) {
-        pinfo->r[i] = info_ptr->palette[i].red;
-        pinfo->g[i] = info_ptr->palette[i].green;
-        pinfo->b[i] = info_ptr->palette[i].blue;
+      for(i = 0; i < num_palette; i++) {
+        pinfo->r[i] = palette[i].red;
+        pinfo->g[i] = palette[i].green;
+        pinfo->b[i] = palette[i].blue;
       }
     }
   }
@@ -909,22 +925,22 @@ int LoadPNG(fname, pinfo)
 
   png_read_end(png_ptr, info_ptr);
 
-  if(info_ptr->num_text > 0) {
+  if(png_get_text(png_ptr, info_ptr, &text, &num_text) == 0 && num_text > 0) {
     commentsize = 1;
 
-    for(i = 0; i < info_ptr->num_text; i++)
-      commentsize += strlen(info_ptr->text[i].key) + 1 +
-                     info_ptr->text[i].text_length + 2;
+    for(i = 0; i < num_text; i++)
+      commentsize += strlen(text[i].key) + 1 +
+                     text[i].text_length + 2;
 
     if((pinfo->comment = malloc(commentsize)) == NULL) {
       png_warning(png_ptr,"can't allocate comment string");
     }
     else {
       pinfo->comment[0] = '\0';
-      for(i = 0; i < info_ptr->num_text; i++) {
-        strcat(pinfo->comment, info_ptr->text[i].key);
+      for(i = 0; i < num_text; i++) {
+        strcat(pinfo->comment, text[i].key);
         strcat(pinfo->comment, "::");
-        strcat(pinfo->comment, info_ptr->text[i].text);
+        strcat(pinfo->comment, text[i].text);
         strcat(pinfo->comment, "\n");
       }
     }
@@ -942,11 +958,11 @@ int LoadPNG(fname, pinfo)
 static void
 png_xv_error(png_ptr, message)
      png_struct *png_ptr;
-     char *message;
+     const char *message;
 {
   SetISTR(ISTR_WARNING,"%s:  libpng error: %s", fbasename, message);
 
-  longjmp(png_ptr->jmpbuf, 1);
+  longjmp(ejmpbuf, 1);
 }
 
 
@@ -954,7 +970,7 @@ png_xv_error(png_ptr, message)
 static void
 png_xv_warning(png_ptr, message)
      png_struct *png_ptr;
-     char *message;
+     const char *message;
 {
   if (!png_ptr)
     return;
