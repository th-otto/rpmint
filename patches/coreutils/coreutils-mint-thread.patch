diff -rup coreutils-8.32/src/ls.c coreutils-8.32.new/src/ls.c
--- coreutils-8.32/src/ls.c	2020-09-05 15:41:07.965280837 +0200
+++ coreutils-8.32.new/src/ls.c	2020-09-05 15:18:20.673240212 +0200
@@ -751,7 +751,12 @@ static bool format_needs_type;
    of remote clients.  1000 bytes should be enough for any practical
    timestamp format.  */
 
+#if defined(__GNUC__) && __GNUC__ >= 6
 enum { TIME_STAMP_LEN_MAXIMUM = MAX (1000, INT_STRLEN_BOUND (time_t)) };
+#else
+/* avoid error: braced-group within expression allowed only inside a function */
+enum { TIME_STAMP_LEN_MAXIMUM = 1000 };
+#endif
 
 /* strftime formats for non-recent and recent files, respectively, in
    -l output.  */
diff -rup coreutils-8.32/src/od.c coreutils-8.32.new/src/od.c
--- coreutils-8.32/src/od.c	2020-01-01 15:33:02.000000000 +0100
+++ coreutils-8.32.new/src/od.c	2020-09-05 15:20:55.577244815 +0200
@@ -82,6 +82,8 @@ enum output_format
    the trailing nul.  Each format string expects a variable amount of
    padding (guaranteed to be at least 1 plus the field width), then an
    element that will be formatted in the field.  */
+#undef MAX
+# define MAX(a,b) ((a) > (b) ? (a) : (b))
 enum
   {
     FMT_BYTES_ALLOCATED =
diff -rup coreutils-8.32/src/pr.c coreutils-8.32.new/src/pr.c
--- coreutils-8.32/src/pr.c	2020-09-05 15:41:07.933280836 +0200
+++ coreutils-8.32.new/src/pr.c	2020-09-05 15:34:03.537268227 +0200
@@ -317,6 +317,7 @@
 /* MB_LEN_MAX is incorrectly defined to be 1 in at least one GCC
    installation; work around this configuration error.  */
 #if !defined MB_LEN_MAX || MB_LEN_MAX == 1
+# undef MB_LEN_MAX
 # define MB_LEN_MAX 16
 #endif
 
diff -rup coreutils-8.32/src/sort.c coreutils-8.32.new/src/sort.c
--- coreutils-8.32/src/sort.c	2020-09-05 15:41:07.933280836 +0200
+++ coreutils-8.32.new/src/sort.c	2020-09-05 15:30:40.641262198 +0200
@@ -341,6 +341,8 @@ static struct month monthtab[] =
 /* The number of bytes needed for a merge or check buffer, which can
    function relatively efficiently even if it holds only one line.  If
    a longer line is seen, this value is increased.  */
+#undef MAX
+#define MAX(a,b) ((a) > (b) ? (a) : (b))
 static size_t merge_buffer_size = MAX (MIN_MERGE_BUFFER_SIZE, 256 * 1024);
 
 /* The approximate maximum number of bytes of main memory to use, as
@@ -664,8 +666,12 @@ struct cs_status
 static void
 cs_enter (struct cs_status *status)
 {
+#ifdef HAVE_PTHREAD_H
   int ret = pthread_sigmask (SIG_BLOCK, &caught_signals, &status->sigs);
   status->valid = ret == 0;
+#else
+  status->valid = 1;
+#endif
 }
 
 /* Leave a critical section.  */
@@ -675,7 +681,9 @@ cs_leave (struct cs_status const *status
   if (status->valid)
     {
       /* Ignore failure when restoring the signal mask. */
+#ifdef HAVE_PTHREAD_H
       pthread_sigmask (SIG_SETMASK, &status->sigs, NULL);
+#endif
     }
 }
 
@@ -849,6 +857,12 @@ static int
 static int
 (*numcompare) (const char *, const char *);
 
+#if HAVE_MBRTOWC
+#ifndef HAVE_NL_LANGINFO
+#undef HAVE_MBRTOWC
+#endif
+#endif
+
 /* Test for white space multibyte character.
    Set LENGTH the byte length of investigated multibyte character. */
 #if HAVE_MBRTOWC
@@ -3905,7 +3919,9 @@ merge_tree_init (size_t nthreads, size_t
   root->parent = NULL;
   root->level = MERGE_END;
   root->queued = false;
+#ifdef HAVE_PTHREAD_H
   pthread_mutex_init (&root->lock, NULL);
+#endif
 
   init_node (root, root + 1, dest, nthreads, nlines, false);
   return merge_tree;
@@ -3920,7 +3936,9 @@ merge_tree_destroy (size_t nthreads, str
 
   while (n_nodes--)
     {
+#ifdef HAVE_PTHREAD_H
       pthread_mutex_destroy (&node->lock);
+#endif
       node++;
     }
 
@@ -3956,7 +3974,9 @@ init_node (struct merge_node *restrict p
   node->parent = parent;
   node->level = parent->level + 1;
   node->queued = false;
+#ifdef HAVE_PTHREAD_H
   pthread_mutex_init (&node->lock, NULL);
+#endif
 
   if (nthreads > 1)
     {
@@ -3995,7 +4015,9 @@ compare_nodes (void const *a, void const
 static inline void
 lock_node (struct merge_node *node)
 {
+#ifdef HAVE_PTHREAD_H
   pthread_mutex_lock (&node->lock);
+#endif
 }
 
 /* Unlock a merge tree NODE. */
@@ -4003,7 +4025,9 @@ lock_node (struct merge_node *node)
 static inline void
 unlock_node (struct merge_node *node)
 {
+#ifdef HAVE_PTHREAD_H
   pthread_mutex_unlock (&node->lock);
+#endif
 }
 
 /* Destroy merge QUEUE. */
@@ -4012,8 +4036,10 @@ static void
 queue_destroy (struct merge_node_queue *queue)
 {
   heap_free (queue->priority_queue);
+#ifdef HAVE_PTHREAD_H
   pthread_cond_destroy (&queue->cond);
   pthread_mutex_destroy (&queue->mutex);
+#endif
 }
 
 /* Initialize merge QUEUE, allocating space suitable for a maximum of
@@ -4026,8 +4052,10 @@ queue_init (struct merge_node_queue *que
      time, the heap should accommodate all of them.  Counting a NULL
      dummy head for the heap, reserve 2 * NTHREADS nodes.  */
   queue->priority_queue = heap_alloc (compare_nodes, 2 * nthreads);
+#ifdef HAVE_PTHREAD_H
   pthread_mutex_init (&queue->mutex, NULL);
   pthread_cond_init (&queue->cond, NULL);
+#endif
 }
 
 /* Insert NODE into QUEUE.  The caller either holds a lock on NODE, or
@@ -4036,11 +4064,15 @@ queue_init (struct merge_node_queue *que
 static void
 queue_insert (struct merge_node_queue *queue, struct merge_node *node)
 {
+#ifdef HAVE_PTHREAD_H
   pthread_mutex_lock (&queue->mutex);
+#endif
   heap_insert (queue->priority_queue, node);
   node->queued = true;
+#ifdef HAVE_PTHREAD_H
   pthread_cond_signal (&queue->cond);
   pthread_mutex_unlock (&queue->mutex);
+#endif
 }
 
 /* Pop the top node off the priority QUEUE, lock the node, return it.  */
@@ -4049,10 +4081,17 @@ static struct merge_node *
 queue_pop (struct merge_node_queue *queue)
 {
   struct merge_node *node;
+#ifdef HAVE_PTHREAD_H
   pthread_mutex_lock (&queue->mutex);
+#endif
   while (! (node = heap_remove_top (queue->priority_queue)))
-    pthread_cond_wait (&queue->cond, &queue->mutex);
+#ifdef HAVE_PTHREAD_H
+    pthread_cond_wait (&queue->cond, &queue->mutex)
+#endif
+    ;
+#ifdef HAVE_PTHREAD_H
   pthread_mutex_unlock (&queue->mutex);
+#endif
   lock_node (node);
   node->queued = false;
   return node;
@@ -4297,6 +4336,7 @@ sortlines (struct line *restrict lines,
   struct thread_args args = {lines, lo_threads, total_lines,
                              node->lo_child, queue, tfp, temp_output};
 
+#ifdef HAVE_PTHREAD_H
   if (nthreads > 1 && SUBTHREAD_LINES_HEURISTIC <= nlines
       && pthread_create (&thread, NULL, sortlines_thread, &args) == 0)
     {
@@ -4305,6 +4345,7 @@ sortlines (struct line *restrict lines,
       pthread_join (thread, NULL);
     }
   else
+#endif
     {
       /* Nthreads = 1, this is a leaf NODE, or pthread_create failed.
          Sort with 1 thread. */
diff -rup coreutils-8.32/src/stat.c coreutils-8.32.new/src/stat.c
--- coreutils-8.32/src/stat.c	2020-02-25 12:19:45.000000000 +0100
+++ coreutils-8.32.new/src/stat.c	2020-09-05 15:35:32.685270875 +0200
@@ -170,6 +170,7 @@ statfs (char const *filename, struct fs_
 #endif
 
 /* FIXME: these are used by printf.c, too */
+#undef isodigit
 #define isodigit(c) ('0' <= (c) && (c) <= '7')
 #define octtobin(c) ((c) - '0')
 #define hextobin(c) ((c) >= 'a' && (c) <= 'f' ? (c) - 'a' + 10 : \
@@ -1119,6 +1120,8 @@ print_it (char const *format, int fd, ch
 
   /* Add 2 to accommodate our conversion of the stat '%s' format string
      to the longer printf '%llu' one.  */
+#undef MAX
+#define MAX(a,b) ((a) > (b) ? (a) : (b))
   enum
     {
       MAX_ADDITIONAL_BYTES =
diff -rup coreutils-8.32/src/uniq.c coreutils-8.32.new/src/uniq.c
--- coreutils-8.32/src/uniq.c	2020-09-05 15:41:07.933280836 +0200
+++ coreutils-8.32.new/src/uniq.c	2020-09-05 15:34:58.105269848 +0200
@@ -47,6 +47,7 @@
 /* MB_LEN_MAX is incorrectly defined to be 1 in at least one GCC
    installation; work around this configuration error.  */
 #if !defined MB_LEN_MAX || MB_LEN_MAX < 2
+# undef MB_LEN_MAX
 # define MB_LEN_MAX 16
 #endif
 
