From 5fdd51049321cddb8ed7184c661348245865eb19 Mon Sep 17 00:00:00 2001
From: Thorsten Otto <admin@tho-otto.de>
Date: Mon, 7 Sep 2020 12:53:11 +0200
Subject: [PATCH 02/14] Fixes for newer versions of bison

---
 gcc/c-gperf.h         |   366 +-
 gcc/c-lex.c           |     1 +
 gcc/c-parse.c         |  7331 +++++++++++-------
 gcc/c-parse.gperf     |     2 +-
 gcc/c-parse.h         |   202 +-
 gcc/c-parse.in        |    18 +-
 gcc/c-parse.y         |    14 +-
 gcc/cp/hash.h         |   430 +-
 gcc/cp/lex.c          |    14 +-
 gcc/cp/parse.c        | 16439 +++++++++++++++++++++++-----------------
 gcc/cp/parse.h        |   253 +-
 gcc/cp/parse.y        |    34 +-
 gcc/cp/spew.c         |    12 +-
 gcc/objc/objc-parse.c |  9472 +++++++++++++----------
 gcc/objc/objc-parse.y |    18 +-
 gcc/objc/objc.gperf   |     2 +-
 16 files changed, 20316 insertions(+), 14292 deletions(-)

diff --git a/gcc/c-gperf.h b/gcc/c-gperf.h
index 0b79d11e7c9..a85f5258eab 100644
--- a/gcc/c-gperf.h
+++ b/gcc/c-gperf.h
@@ -1,190 +1,300 @@
-/* C code produced by gperf version 2.7.1 (19981006 egcs) */
-/* Command-line: gperf -L C -F , 0, 0 -p -j1 -i 1 -g -o -t -G -N is_reserved_word -k1,3,$ ./c-parse.gperf  */
+/* C code produced by gperf version 3.1 */
+/* Command-line: gperf -L C -F ', 0, 0' -p -j1 -i 1 -g -o -t -G -N is_reserved_word c-parse.gperf  */
+/* Computed positions: -k'2-3,5' */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#endif
+
+#line 1 "c-parse.gperf"
+
 /* Command-line: gperf -L KR-C -F ', 0, 0' -p -j1 -i 1 -g -o -t -N is_reserved_word -k1,3,$ c-parse.gperf  */ 
+#line 4 "c-parse.gperf"
 struct resword { const char *name; short token; enum rid rid; };
 
 #define TOTAL_KEYWORDS 83
 #define MIN_WORD_LENGTH 2
 #define MAX_WORD_LENGTH 20
-#define MIN_HASH_VALUE 8
-#define MAX_HASH_VALUE 141
-/* maximum key range = 134, duplicates = 0 */
+#define MIN_HASH_VALUE 4
+#define MAX_HASH_VALUE 111
+/* maximum key range = 108, duplicates = 0 */
 
 #ifdef __GNUC__
 __inline
+#else
+#ifdef __cplusplus
+inline
+#endif
 #endif
 static unsigned int
 hash (str, len)
      register const char *str;
-     register unsigned int len;
+     register size_t len;
 {
   static unsigned char asso_values[] =
     {
-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
-      142, 142, 142, 142,  35, 142, 142, 142, 142, 142,
-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
-      142, 142, 142, 142, 142,   1, 142,  90,   1,  28,
-       40,   6,   1,  24,   3,  13, 142,  36,  60,  14,
-       49,   3,   6, 142,  19,   8,   1,  50,  33,  11,
-        2,  23,   4, 142, 142, 142, 142, 142, 142, 142,
-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
-      142, 142, 142, 142, 142, 142, 142, 142, 142, 142,
-      142, 142, 142, 142, 142, 142
+      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
+      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
+      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
+      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
+      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
+      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
+      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
+      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
+      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
+      112, 112, 112, 112, 112,   1, 112,  36,  17,  64,
+       34,  20,  41,  52,  36,  10,  22,   1,  30,   2,
+       16,   2,   2,  39,  58,   4,   1,   1,  31,   9,
+        1,  31, 112,  15, 112, 112, 112, 112, 112, 112,
+      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
+      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
+      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
+      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
+      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
+      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
+      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
+      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
+      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
+      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
+      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
+      112, 112, 112, 112, 112, 112, 112, 112, 112, 112,
+      112, 112, 112, 112, 112, 112, 112
     };
-  register int hval = len;
+  register unsigned int hval = len;
 
   switch (hval)
     {
       default:
+        hval += asso_values[(unsigned char)str[4]];
+      /*FALLTHROUGH*/
+      case 4:
       case 3:
-        hval += asso_values[(unsigned char)str[2]];
+        hval += asso_values[(unsigned char)str[2]+1];
+      /*FALLTHROUGH*/
       case 2:
-      case 1:
-        hval += asso_values[(unsigned char)str[0]];
+        hval += asso_values[(unsigned char)str[1]];
         break;
     }
-  return hval + asso_values[(unsigned char)str[len - 1]];
+  return hval;
 }
 
 static struct resword wordlist[] =
   {
-    {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
+    {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
+#line 56 "c-parse.gperf"
+    {"do", DO, NORID},
+#line 72 "c-parse.gperf"
     {"out", TYPE_QUAL, RID_OUT},
+#line 47 "c-parse.gperf"
+    {"auto", SCSPEC, RID_AUTO},
+#line 63 "c-parse.gperf"
+    {"goto", GOTO, NORID},
+#line 70 "c-parse.gperf"
+    {"long", TYPESPEC, RID_LONG},
+#line 62 "c-parse.gperf"
+    {"for", FOR, NORID},
+#line 53 "c-parse.gperf"
+    {"const", TYPE_QUAL, RID_CONST},
     {"", 0, 0},
-    {"float", TYPESPEC, RID_FLOAT},
+#line 42 "c-parse.gperf"
     {"__typeof", TYPEOF, NORID},
-    {"", 0, 0},
+#line 87 "c-parse.gperf"
+    {"volatile", TYPE_QUAL, RID_VOLATILE},
+#line 43 "c-parse.gperf"
     {"__typeof__", TYPEOF, NORID},
-    {"typeof", TYPEOF, NORID},
-    {"typedef", SCSPEC, RID_TYPEDEF},
-    {"if", IF, NORID},
-    {"short", TYPESPEC, RID_SHORT},
+    {"", 0, 0},
+#line 15 "c-parse.gperf"
+    {"@protocol", PROTOCOL, NORID},
+#line 14 "c-parse.gperf"
+    {"@protected", PROTECTED, NORID},
+#line 66 "c-parse.gperf"
+    {"in", TYPE_QUAL, RID_IN},
+#line 38 "c-parse.gperf"
+    {"__restrict", TYPE_QUAL, RID_RESTRICT},
+#line 69 "c-parse.gperf"
     {"int", TYPESPEC, RID_INT},
-    {"sizeof", SIZEOF, NORID},
-    {"__signed__", TYPESPEC, RID_SIGNED},
-    {"__extension__", EXTENSION, NORID},
+#line 39 "c-parse.gperf"
+    {"__restrict__", TYPE_QUAL, RID_RESTRICT},
+#line 54 "c-parse.gperf"
+    {"continue", CONTINUE, NORID},
+#line 46 "c-parse.gperf"
+    {"asm", ASM_KEYWORD, NORID},
+#line 67 "c-parse.gperf"
     {"inout", TYPE_QUAL, RID_INOUT},
-    {"__imag__", IMAGPART, NORID},
+#line 20 "c-parse.gperf"
+    {"__asm", ASM_KEYWORD, NORID},
+#line 10 "c-parse.gperf"
+    {"@end", END, NORID},
+#line 21 "c-parse.gperf"
+    {"__asm__", ASM_KEYWORD, NORID},
+#line 86 "c-parse.gperf"
+    {"void", TYPESPEC, RID_VOID},
+#line 35 "c-parse.gperf"
+    {"__label__", LABEL, NORID},
+#line 22 "c-parse.gperf"
+    {"__attribute", ATTRIBUTE, NORID},
+#line 9 "c-parse.gperf"
+    {"@encode", ENCODE, NORID},
+#line 23 "c-parse.gperf"
+    {"__attribute__", ATTRIBUTE, NORID},
+#line 78 "c-parse.gperf"
+    {"sizeof", SIZEOF, NORID},
+#line 79 "c-parse.gperf"
+    {"static", SCSPEC, RID_STATIC},
+#line 58 "c-parse.gperf"
     {"else", ELSE, NORID},
-    {"__inline__", SCSPEC, RID_INLINE},
-    {"byref", TYPE_QUAL, RID_BYREF},
-    {"__iterator__", SCSPEC, RID_ITERATOR},
-    {"__inline", SCSPEC, RID_INLINE},
-    {"__real__", REALPART, NORID},
-    {"switch", SWITCH, NORID},
-    {"__restrict", TYPE_QUAL, RID_RESTRICT},
-    {"goto", GOTO, NORID},
-    {"__restrict__", TYPE_QUAL, RID_RESTRICT},
-    {"struct", STRUCT, NORID},
-    {"while", WHILE, NORID},
-    {"restrict", TYPE_QUAL, RID_RESTRICT},
-    {"__const", TYPE_QUAL, RID_CONST},
-    {"oneway", TYPE_QUAL, RID_ONEWAY},
-    {"__const__", TYPE_QUAL, RID_CONST},
+#line 64 "c-parse.gperf"
+    {"id", OBJECTNAME, RID_ID},
+#line 18 "c-parse.gperf"
+    {"__alignof", ALIGNOF, NORID},
+#line 61 "c-parse.gperf"
+    {"float", TYPESPEC, RID_FLOAT},
+#line 19 "c-parse.gperf"
+    {"__alignof__", ALIGNOF, NORID},
+#line 68 "c-parse.gperf"
+    {"inline", SCSPEC, RID_INLINE},
+#line 51 "c-parse.gperf"
+    {"case", CASE, NORID},
+#line 12 "c-parse.gperf"
+    {"@interface", INTERFACE, NORID},
+#line 65 "c-parse.gperf"
+    {"if", IF, NORID},
+#line 76 "c-parse.gperf"
+    {"short", TYPESPEC, RID_SHORT},
+#line 13 "c-parse.gperf"
+    {"@private", PRIVATE, NORID},
+#line 24 "c-parse.gperf"
     {"__complex", TYPESPEC, RID_COMPLEX},
+#line 36 "c-parse.gperf"
+    {"__real", REALPART, NORID},
+#line 25 "c-parse.gperf"
     {"__complex__", TYPESPEC, RID_COMPLEX},
-    {"for", FOR, NORID},
-    {"__iterator", SCSPEC, RID_ITERATOR},
-    {"__imag", IMAGPART, NORID},
-    {"do", DO, NORID},
-    {"case", CASE, NORID},
-    {"__volatile__", TYPE_QUAL, RID_VOLATILE},
-    {"break", BREAK, NORID},
-    {"default", DEFAULT, NORID},
+#line 37 "c-parse.gperf"
+    {"__real__", REALPART, NORID},
+#line 44 "c-parse.gperf"
     {"__volatile", TYPE_QUAL, RID_VOLATILE},
-    {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-    {"@defs", DEFS, NORID},
-    {"id", OBJECTNAME, RID_ID},
+#line 59 "c-parse.gperf"
+    {"enum", ENUM, NORID},
+#line 45 "c-parse.gperf"
+    {"__volatile__", TYPE_QUAL, RID_VOLATILE},
+#line 33 "c-parse.gperf"
+    {"__iterator", SCSPEC, RID_ITERATOR},
     {"", 0, 0},
+#line 34 "c-parse.gperf"
+    {"__iterator__", SCSPEC, RID_ITERATOR},
+#line 28 "c-parse.gperf"
+    {"__extension__", EXTENSION, NORID},
+#line 52 "c-parse.gperf"
+    {"char", TYPESPEC, RID_CHAR},
+#line 26 "c-parse.gperf"
+    {"__const", TYPE_QUAL, RID_CONST},
+#line 84 "c-parse.gperf"
+    {"union", UNION, NORID},
+#line 27 "c-parse.gperf"
+    {"__const__", TYPE_QUAL, RID_CONST},
+#line 31 "c-parse.gperf"
+    {"__inline", SCSPEC, RID_INLINE},
+#line 40 "c-parse.gperf"
     {"__signed", TYPESPEC, RID_SIGNED},
-    {"bycopy", TYPE_QUAL, RID_BYCOPY},
-    {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
+#line 32 "c-parse.gperf"
+    {"__inline__", SCSPEC, RID_INLINE},
+#line 41 "c-parse.gperf"
+    {"__signed__", TYPESPEC, RID_SIGNED},
+#line 29 "c-parse.gperf"
+    {"__imag", IMAGPART, NORID},
+#line 60 "c-parse.gperf"
     {"extern", SCSPEC, RID_EXTERN},
+#line 30 "c-parse.gperf"
+    {"__imag__", IMAGPART, NORID},
+#line 73 "c-parse.gperf"
+    {"register", SCSPEC, RID_REGISTER},
+#line 57 "c-parse.gperf"
+    {"double", TYPESPEC, RID_DOUBLE},
+#line 16 "c-parse.gperf"
+    {"@public", PUBLIC, NORID},
+#line 11 "c-parse.gperf"
+    {"@implementation", IMPLEMENTATION, NORID},
+#line 77 "c-parse.gperf"
+    {"signed", TYPESPEC, RID_SIGNED},
+#line 49 "c-parse.gperf"
+    {"bycopy", TYPE_QUAL, RID_BYCOPY},
+#line 17 "c-parse.gperf"
+    {"@selector", SELECTOR, NORID},
+#line 80 "c-parse.gperf"
+    {"struct", STRUCT, NORID},
+#line 6 "c-parse.gperf"
+    {"@class", CLASS, NORID},
+#line 85 "c-parse.gperf"
+    {"unsigned", TYPESPEC, RID_UNSIGNED},
+#line 83 "c-parse.gperf"
+    {"typeof", TYPEOF, NORID},
     {"", 0, 0},
-    {"in", TYPE_QUAL, RID_IN},
+#line 55 "c-parse.gperf"
+    {"default", DEFAULT, NORID},
+#line 50 "c-parse.gperf"
+    {"byref", TYPE_QUAL, RID_BYREF},
     {"", 0, 0},
-    {"@compatibility_alias", ALIAS, NORID},
+#line 88 "c-parse.gperf"
+    {"while", WHILE, NORID},
+#line 8 "c-parse.gperf"
+    {"@defs", DEFS, NORID},
+#line 75 "c-parse.gperf"
+    {"return", RETURN_KEYWORD, NORID},
     {"", 0, 0},
-    {"@private", PRIVATE, NORID},
-    {"@selector", SELECTOR, NORID},
-    {"register", SCSPEC, RID_REGISTER},
-    {"__label__", LABEL, NORID},
-    {"", 0, 0}, {"", 0, 0},
-    {"enum", ENUM, NORID},
-    {"return", RETURN, NORID},
-    {"", 0, 0}, {"", 0, 0},
-    {"signed", TYPESPEC, RID_SIGNED},
+#line 74 "c-parse.gperf"
+    {"restrict", TYPE_QUAL, RID_RESTRICT},
+#line 7 "c-parse.gperf"
+    {"@compatibility_alias", ALIAS, NORID},
+    {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
     {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-    {"const", TYPE_QUAL, RID_CONST},
-    {"", 0, 0},
-    {"inline", SCSPEC, RID_INLINE},
-    {"__real", REALPART, NORID},
-    {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-    {"void", TYPESPEC, RID_VOID},
-    {"continue", CONTINUE, NORID},
-    {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-    {"@encode", ENCODE, NORID},
-    {"auto", SCSPEC, RID_AUTO},
-    {"__asm__", ASM_KEYWORD, NORID},
-    {"@interface", INTERFACE, NORID},
-    {"__alignof", ALIGNOF, NORID},
-    {"double", TYPESPEC, RID_DOUBLE},
-    {"__alignof__", ALIGNOF, NORID},
-    {"@protected", PROTECTED, NORID},
-    {"__attribute__", ATTRIBUTE, NORID},
-    {"unsigned", TYPESPEC, RID_UNSIGNED},
-    {"volatile", TYPE_QUAL, RID_VOLATILE},
-    {"__attribute", ATTRIBUTE, NORID},
-    {"@class", CLASS, NORID},
-    {"__asm", ASM_KEYWORD, NORID},
-    {"", 0, 0}, {"", 0, 0},
-    {"@implementation", IMPLEMENTATION, NORID},
-    {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-    {"union", UNION, NORID},
     {"", 0, 0}, {"", 0, 0},
-    {"@public", PUBLIC, NORID},
-    {"asm", ASM_KEYWORD, NORID},
+#line 71 "c-parse.gperf"
+    {"oneway", TYPE_QUAL, RID_ONEWAY},
     {"", 0, 0},
-    {"@protocol", PROTOCOL, NORID},
-    {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-    {"@end", END, NORID},
+#line 81 "c-parse.gperf"
+    {"switch", SWITCH, NORID},
     {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-    {"static", SCSPEC, RID_STATIC},
+#line 48 "c-parse.gperf"
+    {"break", BREAK, NORID},
     {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-    {"long", TYPESPEC, RID_LONG},
-    {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-    {"char", TYPESPEC, RID_CHAR}
+    {"", 0, 0},
+#line 82 "c-parse.gperf"
+    {"typedef", SCSPEC, RID_TYPEDEF}
   };
 
-#ifdef __GNUC__
-__inline
-#endif
 struct resword *
 is_reserved_word (str, len)
      register const char *str;
-     register unsigned int len;
+     register size_t len;
 {
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
     {
-      register int key = hash (str, len);
+      register unsigned int key = hash (str, len);
 
-      if (key <= MAX_HASH_VALUE && key >= 0)
+      if (key <= MAX_HASH_VALUE)
         {
           register const char *s = wordlist[key].name;
 
diff --git a/gcc/c-lex.c b/gcc/c-lex.c
index 27c65f3fa27..e22e71918b9 100644
--- a/gcc/c-lex.c
+++ b/gcc/c-lex.c
@@ -62,6 +62,7 @@ extern void yyprint			PROTO((FILE *, int, YYSTYPE));
 tree ridpointers[(int) RID_MAX];
 
 /* Cause the `yydebug' variable to be defined.  */
+#undef YYDEBUG
 #define YYDEBUG 1
 
 #if USE_CPPLIB
diff --git a/gcc/c-parse.c b/gcc/c-parse.c
index 85a70035d5f..ff2602c0f3a 100644
--- a/gcc/c-parse.c
+++ b/gcc/c-parse.c
@@ -1,70 +1,68 @@
+/* A Bison parser, made by GNU Bison 2.7.  */
 
-/*  A Bison parser, made from c-parse.y
- by  GNU Bison version 1.25
-  */
+/* Bison implementation for Yacc-like parsers in C
+   
+      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.
+   
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+   
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+   
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+/* As a special exception, you may create a larger work that contains
+   part or all of the Bison parser skeleton and distribute that work
+   under terms of your choice, so long as that work isn't itself a
+   parser generator using the skeleton or a modified version thereof
+   as a parser skeleton.  Alternatively, if you modify or redistribute
+   the parser skeleton itself, you may (at your option) remove this
+   special exception, which will cause the skeleton and the resulting
+   Bison output files to be licensed under the GNU General Public
+   License without this special exception.
+   
+   This special exception was added by the Free Software Foundation in
+   version 2.2 of Bison.  */
+
+/* C LALR(1) parser skeleton written by Richard Stallman, by
+   simplifying the original so-called "semantic" parser.  */
+
+/* All symbols defined below should begin with yy or YY, to avoid
+   infringing on user name space.  This should be done even for local
+   variables, as they might otherwise be expanded by user macros.
+   There are some unavoidable exceptions within include files to
+   define necessary library symbols; they are noted "INFRINGES ON
+   USER NAME SPACE" below.  */
+
+/* Identify Bison output.  */
+#define YYBISON 1
+
+/* Bison version.  */
+#define YYBISON_VERSION "2.7"
+
+/* Skeleton name.  */
+#define YYSKELETON_NAME "yacc.c"
+
+/* Pure parsers.  */
+#define YYPURE 0
 
-#define YYBISON 1  /* Identify Bison output.  */
-
-#define	IDENTIFIER	258
-#define	TYPENAME	259
-#define	SCSPEC	260
-#define	TYPESPEC	261
-#define	TYPE_QUAL	262
-#define	CONSTANT	263
-#define	STRING	264
-#define	ELLIPSIS	265
-#define	SIZEOF	266
-#define	ENUM	267
-#define	STRUCT	268
-#define	UNION	269
-#define	IF	270
-#define	ELSE	271
-#define	WHILE	272
-#define	DO	273
-#define	FOR	274
-#define	SWITCH	275
-#define	CASE	276
-#define	DEFAULT	277
-#define	BREAK	278
-#define	CONTINUE	279
-#define	RETURN	280
-#define	GOTO	281
-#define	ASM_KEYWORD	282
-#define	TYPEOF	283
-#define	ALIGNOF	284
-#define	ATTRIBUTE	285
-#define	EXTENSION	286
-#define	LABEL	287
-#define	REALPART	288
-#define	IMAGPART	289
-#define	ASSIGN	290
-#define	OROR	291
-#define	ANDAND	292
-#define	EQCOMPARE	293
-#define	ARITHCOMPARE	294
-#define	LSHIFT	295
-#define	RSHIFT	296
-#define	UNARY	297
-#define	PLUSPLUS	298
-#define	MINUSMINUS	299
-#define	HYPERUNARY	300
-#define	POINTSAT	301
-#define	INTERFACE	302
-#define	IMPLEMENTATION	303
-#define	END	304
-#define	SELECTOR	305
-#define	DEFS	306
-#define	ENCODE	307
-#define	CLASSNAME	308
-#define	PUBLIC	309
-#define	PRIVATE	310
-#define	PROTECTED	311
-#define	PROTOCOL	312
-#define	OBJECTNAME	313
-#define	CLASS	314
-#define	ALIAS	315
-#define	OBJC_STRING	316
+/* Push parsers.  */
+#define YYPUSH 0
 
+/* Pull parsers.  */
+#define YYPULL 1
+
+
+
+
+/* Copy the first part of user declarations.  */
+/* Line 371 of yacc.c  */
 #line 56 "c-parse.y"
 
 #include "config.h"
@@ -94,9 +92,142 @@ char *language_string = "GNU C";
 /* Cause the `yydebug' variable to be defined.  */
 #define YYDEBUG 1
 
+/* Line 371 of yacc.c  */
+#line 97 "c-parse.c"
+
+# ifndef YY_NULL
+#  if defined __cplusplus && 201103L <= __cplusplus
+#   define YY_NULL nullptr
+#  else
+#   define YY_NULL 0
+#  endif
+# endif
+
+/* Enabling verbose error messages.  */
+#ifdef YYERROR_VERBOSE
+# undef YYERROR_VERBOSE
+# define YYERROR_VERBOSE 1
+#else
+# define YYERROR_VERBOSE 0
+#endif
+
+/* In a future release of Bison, this section will be replaced
+   by #include "c-parse.h".  */
+#ifndef YY_YY_C_PARSE_H_INCLUDED
+# define YY_YY_C_PARSE_H_INCLUDED
+/* Enabling traces.  */
+#ifndef YYDEBUG
+# define YYDEBUG 0
+#endif
+#if YYDEBUG
+extern int yydebug;
+#endif
+
+/* Tokens.  */
+#ifndef YYTOKENTYPE
+# define YYTOKENTYPE
+   /* Put the tokens into the symbol table, so that GDB and other debuggers
+      know about them.  */
+   enum yytokentype {
+     IDENTIFIER = 258,
+     TYPENAME = 259,
+     SCSPEC = 260,
+     TYPESPEC = 261,
+     TYPE_QUAL = 262,
+     CONSTANT = 263,
+     STRING = 264,
+     ELLIPSIS = 265,
+     SIZEOF = 266,
+     ENUM = 267,
+     STRUCT = 268,
+     UNION = 269,
+     IF = 270,
+     ELSE = 271,
+     WHILE = 272,
+     DO = 273,
+     FOR = 274,
+     SWITCH = 275,
+     CASE = 276,
+     DEFAULT = 277,
+     BREAK = 278,
+     CONTINUE = 279,
+     RETURN_KEYWORD = 280,
+     GOTO = 281,
+     ASM_KEYWORD = 282,
+     TYPEOF = 283,
+     ALIGNOF = 284,
+     ATTRIBUTE = 285,
+     EXTENSION = 286,
+     LABEL = 287,
+     REALPART = 288,
+     IMAGPART = 289,
+     ASSIGN = 290,
+     OROR = 291,
+     ANDAND = 292,
+     EQCOMPARE = 293,
+     ARITHCOMPARE = 294,
+     RSHIFT = 295,
+     LSHIFT = 296,
+     MINUSMINUS = 297,
+     PLUSPLUS = 298,
+     UNARY = 299,
+     HYPERUNARY = 300,
+     POINTSAT = 301,
+     INTERFACE = 302,
+     IMPLEMENTATION = 303,
+     END = 304,
+     SELECTOR = 305,
+     DEFS = 306,
+     ENCODE = 307,
+     CLASSNAME = 308,
+     PUBLIC = 309,
+     PRIVATE = 310,
+     PROTECTED = 311,
+     PROTOCOL = 312,
+     OBJECTNAME = 313,
+     CLASS = 314,
+     ALIAS = 315,
+     OBJC_STRING = 316
+   };
+#endif
+
+
+#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
+typedef union YYSTYPE
+{
+/* Line 387 of yacc.c  */
 #line 87 "c-parse.y"
-typedef union {long itype; tree ttype; enum tree_code code;
-	char *filename; int lineno; int ends_in_label; } YYSTYPE;
+long itype; tree ttype; enum tree_code code;
+	char *filename; int lineno; int ends_in_label; 
+
+/* Line 387 of yacc.c  */
+#line 205 "c-parse.c"
+} YYSTYPE;
+# define YYSTYPE_IS_TRIVIAL 1
+# define yystype YYSTYPE /* obsolescent; will be withdrawn */
+# define YYSTYPE_IS_DECLARED 1
+#endif
+
+extern YYSTYPE yylval;
+
+#ifdef YYPARSE_PARAM
+#if defined __STDC__ || defined __cplusplus
+int yyparse (void *YYPARSE_PARAM);
+#else
+int yyparse ();
+#endif
+#else /* ! YYPARSE_PARAM */
+#if defined __STDC__ || defined __cplusplus
+int yyparse (void);
+#else
+int yyparse ();
+#endif
+#endif /* ! YYPARSE_PARAM */
+
+#endif /* !YY_YY_C_PARSE_H_INCLUDED  */
+
+/* Copy the second part of user declarations.  */
+/* Line 390 of yacc.c  */
 #line 204 "c-parse.y"
 
 /* Number of statements (loosely speaking) and compound statements 
@@ -124,1626 +255,2317 @@ static int undeclared_variable_notice;
 
 #define YYPRINT(FILE,YYCHAR,YYLVAL) yyprint(FILE,YYCHAR,YYLVAL)
 extern void yyprint			PROTO ((FILE *, int, YYSTYPE));
-#include <stdio.h>
 
-#ifndef __cplusplus
-#ifndef __STDC__
-#define const
+/* Line 390 of yacc.c  */
+#line 261 "c-parse.c"
+
+#ifdef short
+# undef short
 #endif
+
+#ifdef YYTYPE_UINT8
+typedef YYTYPE_UINT8 yytype_uint8;
+#else
+typedef unsigned char yytype_uint8;
 #endif
 
+#ifdef YYTYPE_INT8
+typedef YYTYPE_INT8 yytype_int8;
+#elif (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+typedef signed char yytype_int8;
+#else
+typedef short int yytype_int8;
+#endif
 
+#ifdef YYTYPE_UINT16
+typedef YYTYPE_UINT16 yytype_uint16;
+#else
+typedef unsigned short int yytype_uint16;
+#endif
 
-#define	YYFINAL		692
-#define	YYFLAG		-32768
-#define	YYNTBASE	84
-
-#define YYTRANSLATE(x) ((unsigned)(x) <= 316 ? yytranslate[x] : 241)
-
-static const char yytranslate[] = {     0,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,    80,     2,     2,     2,    52,    43,     2,    59,
-    76,    50,    48,    81,    49,    58,    51,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,    38,    77,     2,
-    36,     2,    37,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-    60,     2,    83,    42,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,    82,    41,    78,    79,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
-     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
-    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-    39,    40,    44,    45,    46,    47,    53,    54,    55,    56,
-    57,    61,    62,    63,    64,    65,    66,    67,    68,    69,
-    70,    71,    72,    73,    74,    75
-};
+#ifdef YYTYPE_INT16
+typedef YYTYPE_INT16 yytype_int16;
+#else
+typedef short int yytype_int16;
+#endif
 
-#if YYDEBUG != 0
-static const short yyprhs[] = {     0,
-     0,     1,     3,     4,     7,     8,    12,    14,    16,    22,
-    25,    29,    34,    39,    42,    45,    48,    51,    53,    54,
-    55,    63,    68,    69,    70,    78,    83,    84,    85,    92,
-    96,    98,   100,   102,   104,   106,   108,   110,   112,   114,
-   116,   117,   119,   121,   125,   127,   130,   133,   136,   139,
-   142,   147,   150,   155,   158,   161,   163,   165,   167,   172,
-   173,   181,   183,   187,   191,   195,   199,   203,   207,   211,
-   215,   219,   223,   227,   231,   232,   237,   238,   243,   244,
-   245,   253,   254,   260,   264,   268,   270,   272,   274,   278,
-   282,   283,   288,   293,   298,   302,   306,   309,   312,   314,
-   317,   318,   320,   323,   327,   329,   331,   334,   337,   342,
-   347,   350,   353,   357,   359,   361,   364,   367,   368,   369,
-   374,   379,   383,   387,   390,   393,   396,   399,   403,   404,
-   407,   410,   413,   416,   420,   421,   424,   427,   429,   431,
-   434,   437,   439,   441,   444,   447,   450,   454,   455,   458,
-   460,   462,   464,   469,   474,   476,   478,   480,   482,   486,
-   488,   492,   493,   498,   499,   506,   510,   511,   518,   522,
-   523,   525,   527,   530,   537,   539,   543,   544,   546,   551,
-   558,   563,   565,   567,   569,   571,   573,   574,   579,   581,
-   582,   585,   587,   591,   595,   598,   599,   604,   606,   607,
-   612,   614,   616,   618,   621,   624,   630,   634,   635,   636,
-   642,   643,   644,   650,   652,   654,   658,   662,   667,   671,
-   675,   679,   681,   685,   690,   695,   699,   703,   707,   709,
-   713,   717,   721,   726,   731,   735,   739,   741,   743,   746,
-   748,   751,   753,   756,   757,   765,   771,   774,   775,   783,
-   789,   792,   793,   802,   803,   811,   814,   815,   817,   818,
-   820,   822,   825,   826,   830,   833,   837,   839,   843,   845,
-   847,   850,   852,   856,   861,   868,   874,   876,   880,   882,
-   884,   888,   891,   894,   895,   897,   899,   902,   903,   906,
-   910,   914,   917,   921,   926,   930,   933,   937,   940,   944,
-   946,   948,   951,   954,   955,   957,   960,   961,   962,   964,
-   966,   969,   973,   975,   978,   980,   983,   990,   996,  1002,
-  1005,  1008,  1013,  1014,  1019,  1020,  1021,  1025,  1030,  1034,
-  1036,  1038,  1040,  1042,  1045,  1046,  1051,  1053,  1057,  1058,
-  1059,  1067,  1073,  1076,  1077,  1078,  1079,  1092,  1093,  1100,
-  1103,  1106,  1109,  1113,  1120,  1129,  1140,  1153,  1157,  1162,
-  1164,  1166,  1167,  1174,  1178,  1184,  1187,  1191,  1192,  1194,
-  1195,  1197,  1198,  1200,  1202,  1206,  1211,  1213,  1217,  1218,
-  1221,  1224,  1225,  1230,  1233,  1234,  1236,  1238,  1242,  1244,
-  1248,  1253,  1258,  1263,  1268,  1273,  1274,  1277,  1279,  1282,
-  1284,  1288,  1290,  1294
-};
+#ifndef YYSIZE_T
+# ifdef __SIZE_TYPE__
+#  define YYSIZE_T __SIZE_TYPE__
+# elif defined size_t
+#  define YYSIZE_T size_t
+# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYSIZE_T size_t
+# else
+#  define YYSIZE_T unsigned int
+# endif
+#endif
 
-static const short yyrhs[] = {    -1,
-    85,     0,     0,    86,    88,     0,     0,    85,    87,    88,
-     0,    90,     0,    89,     0,    27,    59,    99,    76,    77,
-     0,   240,    88,     0,   122,   136,    77,     0,   129,   122,
-   136,    77,     0,   125,   122,   135,    77,     0,   129,    77,
-     0,   125,    77,     0,     1,    77,     0,     1,    78,     0,
-    77,     0,     0,     0,   125,   122,   164,    91,   116,    92,
-   198,     0,   125,   122,   164,     1,     0,     0,     0,   129,
-   122,   167,    93,   116,    94,   198,     0,   129,   122,   167,
-     1,     0,     0,     0,   122,   167,    95,   116,    96,   198,
-     0,   122,   167,     1,     0,     3,     0,     4,     0,    43,
-     0,    49,     0,    48,     0,    54,     0,    55,     0,    79,
-     0,    80,     0,   101,     0,     0,   101,     0,   107,     0,
-   101,    81,   107,     0,   113,     0,    50,   105,     0,   240,
-   105,     0,    98,   105,     0,    40,    97,     0,   103,   102,
-     0,   103,    59,   185,    76,     0,   104,   102,     0,   104,
-    59,   185,    76,     0,    33,   105,     0,    34,   105,     0,
-    11,     0,    29,     0,   102,     0,    59,   185,    76,   105,
-     0,     0,    59,   185,    76,    82,   106,   150,    78,     0,
-   105,     0,   107,    48,   107,     0,   107,    49,   107,     0,
-   107,    50,   107,     0,   107,    51,   107,     0,   107,    52,
-   107,     0,   107,    46,   107,     0,   107,    47,   107,     0,
-   107,    45,   107,     0,   107,    44,   107,     0,   107,    43,
-   107,     0,   107,    41,   107,     0,   107,    42,   107,     0,
-     0,   107,    40,   108,   107,     0,     0,   107,    39,   109,
-   107,     0,     0,     0,   107,    37,   110,    99,    38,   111,
-   107,     0,     0,   107,    37,   112,    38,   107,     0,   107,
-    36,   107,     0,   107,    35,   107,     0,     3,     0,     8,
-     0,   115,     0,    59,    99,    76,     0,    59,     1,    76,
-     0,     0,    59,   114,   200,    76,     0,   113,    59,   100,
-    76,     0,   113,    60,    99,    83,     0,   113,    58,    97,
-     0,   113,    57,    97,     0,   113,    54,     0,   113,    55,
-     0,     9,     0,   115,     9,     0,     0,   118,     0,   118,
-    10,     0,   205,   206,   119,     0,   117,     0,   193,     0,
-   118,   117,     0,   117,   193,     0,   127,   122,   135,    77,
-     0,   130,   122,   136,    77,     0,   127,    77,     0,   130,
-    77,     0,   205,   206,   124,     0,   120,     0,   193,     0,
-   121,   120,     0,   120,   193,     0,     0,     0,   125,   122,
-   135,    77,     0,   129,   122,   136,    77,     0,   125,   122,
-   158,     0,   129,   122,   161,     0,   125,    77,     0,   129,
-    77,     0,   240,   124,     0,   133,   126,     0,   129,   133,
-   126,     0,     0,   126,   134,     0,   126,     5,     0,   126,
-   143,     0,   133,   128,     0,   130,   133,   128,     0,     0,
-   128,   134,     0,   128,     5,     0,   130,     0,   143,     0,
-   129,   130,     0,   129,   143,     0,     7,     0,     5,     0,
-   130,     7,     0,   130,     5,     0,   133,   132,     0,   187,
-   133,   132,     0,     0,   132,   134,     0,     6,     0,   171,
-     0,     4,     0,    28,    59,    99,    76,     0,    28,    59,
-   185,    76,     0,     6,     0,     7,     0,   171,     0,   138,
-     0,   135,    81,   138,     0,   140,     0,   136,    81,   138,
-     0,     0,    27,    59,   115,    76,     0,     0,   164,   137,
-   142,    36,   139,   148,     0,   164,   137,   142,     0,     0,
-   167,   137,   142,    36,   141,   148,     0,   167,   137,   142,
-     0,     0,   143,     0,   144,     0,   143,   144,     0,    30,
-    59,    59,   145,    76,    76,     0,   146,     0,   145,    81,
-   146,     0,     0,   147,     0,   147,    59,     3,    76,     0,
-   147,    59,     3,    81,   101,    76,     0,   147,    59,   100,
-    76,     0,    97,     0,     5,     0,     6,     0,     7,     0,
-   107,     0,     0,    82,   149,   150,    78,     0,     1,     0,
-     0,   151,   176,     0,   152,     0,   151,    81,   152,     0,
-   156,    36,   154,     0,   157,   154,     0,     0,    97,    38,
-   153,   154,     0,   154,     0,     0,    82,   155,   150,    78,
-     0,   107,     0,     1,     0,   157,     0,   156,   157,     0,
-    58,    97,     0,    60,   107,    10,   107,    83,     0,    60,
-   107,    83,     0,     0,     0,   164,   159,   116,   160,   200,
-     0,     0,     0,   167,   162,   116,   163,   200,     0,   165,
-     0,   167,     0,    59,   165,    76,     0,   165,    59,   235,
-     0,   165,    60,    99,    83,     0,   165,    60,    83,     0,
-    50,   188,   165,     0,   143,   123,   165,     0,     4,     0,
-   166,    59,   235,     0,   166,    60,    50,    83,     0,   166,
-    60,    99,    83,     0,   166,    60,    83,     0,    50,   188,
-   166,     0,   143,   123,   166,     0,     4,     0,   167,    59,
-   235,     0,    59,   167,    76,     0,    50,   188,   167,     0,
-   167,    60,    50,    83,     0,   167,    60,    99,    83,     0,
-   167,    60,    83,     0,   143,   123,   167,     0,     3,     0,
-    13,     0,    13,   143,     0,    14,     0,    14,   143,     0,
-    12,     0,    12,   143,     0,     0,   168,    97,    82,   172,
-   178,    78,   142,     0,   168,    82,   178,    78,   142,     0,
-   168,    97,     0,     0,   169,    97,    82,   173,   178,    78,
-   142,     0,   169,    82,   178,    78,   142,     0,   169,    97,
-     0,     0,   170,    97,    82,   174,   183,   177,    78,   142,
-     0,     0,   170,    82,   175,   183,   177,    78,   142,     0,
-   170,    97,     0,     0,    81,     0,     0,    81,     0,   179,
-     0,   179,   180,     0,     0,   179,   180,    77,     0,   179,
-    77,     0,   131,   122,   181,     0,   131,     0,   187,   122,
-   181,     0,   187,     0,     1,     0,   240,   180,     0,   182,
-     0,   181,    81,   182,     0,   205,   206,   164,   142,     0,
-   205,   206,   164,    38,   107,   142,     0,   205,   206,    38,
-   107,   142,     0,   184,     0,   183,    81,   184,     0,     1,
-     0,    97,     0,    97,    36,   107,     0,   131,   186,     0,
-   187,   186,     0,     0,   189,     0,     7,     0,   187,     7,
-     0,     0,   188,     7,     0,    59,   189,    76,     0,    50,
-   188,   189,     0,    50,   188,     0,   189,    59,   228,     0,
-   189,    60,    99,    83,     0,   189,    60,    83,     0,    59,
-   228,     0,    60,    99,    83,     0,    60,    83,     0,   143,
-   123,   189,     0,   191,     0,   208,     0,   191,   208,     0,
-   191,   193,     0,     0,   190,     0,     1,    77,     0,     0,
-     0,   196,     0,   197,     0,   196,   197,     0,    32,   239,
-    77,     0,   200,     0,     1,   200,     0,    82,     0,   199,
-    78,     0,   199,   194,   195,   121,   192,    78,     0,   199,
-   194,   195,     1,    78,     0,   199,   194,   195,   190,    78,
-     0,   202,   207,     0,   202,     1,     0,    15,    59,    99,
-    76,     0,     0,    18,   204,   207,    17,     0,     0,     0,
-   205,   206,   210,     0,   205,   206,   221,   207,     0,   205,
-   206,   209,     0,   210,     0,   221,     0,   200,     0,   218,
-     0,    99,    77,     0,     0,   201,    16,   211,   207,     0,
-   201,     0,   201,    16,     1,     0,     0,     0,    17,   212,
-    59,    99,    76,   213,   207,     0,   203,    59,    99,    76,
-    77,     0,   203,     1,     0,     0,     0,     0,    19,    59,
-   223,    77,   214,   223,    77,   215,   223,    76,   216,   207,
-     0,     0,    20,    59,    99,    76,   217,   207,     0,    23,
-    77,     0,    24,    77,     0,    25,    77,     0,    25,    99,
-    77,     0,    27,   222,    59,    99,    76,    77,     0,    27,
-   222,    59,    99,    38,   224,    76,    77,     0,    27,   222,
-    59,    99,    38,   224,    38,   224,    76,    77,     0,    27,
-   222,    59,    99,    38,   224,    38,   224,    38,   227,    76,
-    77,     0,    26,    97,    77,     0,    26,    50,    99,    77,
-     0,    77,     0,   219,     0,     0,    19,    59,   113,    76,
-   220,   207,     0,    21,   107,    38,     0,    21,   107,    10,
-   107,    38,     0,    22,    38,     0,    97,    38,   142,     0,
-     0,     7,     0,     0,    99,     0,     0,   225,     0,   226,
-     0,   225,    81,   226,     0,     9,    59,    99,    76,     0,
-   115,     0,   227,    81,   115,     0,     0,   229,   230,     0,
-   232,    76,     0,     0,   233,    77,   231,   230,     0,     1,
-    76,     0,     0,    10,     0,   233,     0,   233,    81,    10,
-     0,   234,     0,   233,    81,   234,     0,   125,   122,   166,
-   142,     0,   125,   122,   167,   142,     0,   125,   122,   186,
-   142,     0,   129,   122,   167,   142,     0,   129,   122,   186,
-   142,     0,     0,   236,   237,     0,   230,     0,   238,    76,
-     0,     3,     0,   238,    81,     3,     0,    97,     0,   239,
-    81,    97,     0,    31,     0
-};
+#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)
+
+#ifndef YY_
+# if defined YYENABLE_NLS && YYENABLE_NLS
+#  if ENABLE_NLS
+#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
+#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
+#  endif
+# endif
+# ifndef YY_
+#  define YY_(Msgid) Msgid
+# endif
+#endif
 
+/* Suppress unused-variable warnings by "using" E.  */
+#if ! defined lint || defined __GNUC__
+# define YYUSE(E) ((void) (E))
+#else
+# define YYUSE(E) /* empty */
+#endif
+
+/* Identity function, used to suppress warnings about constant conditions.  */
+#ifndef lint
+# define YYID(N) (N)
+#else
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static int
+YYID (int yyi)
+#else
+static int
+YYID (yyi)
+    int yyi;
+#endif
+{
+  return yyi;
+}
 #endif
 
-#if YYDEBUG != 0
-static const short yyrline[] = { 0,
-   233,   238,   252,   254,   254,   255,   257,   259,   260,   268,
-   272,   283,   288,   293,   295,   297,   298,   299,   304,   311,
-   313,   318,   323,   329,   331,   336,   341,   347,   349,   354,
-   361,   363,   366,   368,   370,   372,   374,   376,   378,   382,
-   386,   389,   392,   395,   399,   401,   404,   407,   411,   439,
-   445,   448,   451,   454,   456,   460,   464,   468,   470,   473,
-   477,   504,   506,   508,   510,   512,   514,   516,   518,   520,
-   522,   524,   526,   528,   530,   534,   536,   540,   542,   545,
-   549,   551,   558,   561,   569,   580,   679,   680,   682,   688,
-   690,   704,   727,   729,   731,   735,   741,   743,   748,   750,
-   755,   757,   758,   768,   773,   775,   776,   777,   784,   790,
-   795,   798,   806,   811,   813,   814,   815,   822,   833,   837,
-   843,   848,   853,   858,   860,   862,   871,   874,   878,   880,
-   882,   887,   891,   894,   898,   901,   903,   915,   918,   920,
-   922,   926,   930,   932,   935,   948,   951,   955,   957,   965,
-   966,   967,   971,   973,   979,   980,   981,   984,   986,   989,
-   991,   994,   997,  1003,  1010,  1012,  1019,  1026,  1029,  1036,
-  1039,  1043,  1046,  1050,  1055,  1058,  1062,  1065,  1067,  1069,
-  1071,  1078,  1080,  1081,  1082,  1087,  1089,  1094,  1102,  1107,
-  1111,  1114,  1116,  1121,  1123,  1124,  1127,  1127,  1130,  1133,
-  1135,  1137,  1140,  1142,  1145,  1151,  1153,  1157,  1168,  1176,
-  1180,  1191,  1199,  1206,  1208,  1213,  1216,  1221,  1223,  1225,
-  1232,  1234,  1242,  1248,  1253,  1255,  1257,  1264,  1266,  1272,
-  1278,  1280,  1282,  1287,  1289,  1296,  1298,  1301,  1304,  1308,
-  1311,  1315,  1318,  1322,  1327,  1329,  1333,  1335,  1337,  1339,
-  1343,  1345,  1348,  1351,  1354,  1357,  1361,  1363,  1366,  1368,
-  1373,  1376,  1381,  1383,  1385,  1399,  1406,  1411,  1417,  1422,
-  1424,  1429,  1431,  1435,  1439,  1443,  1453,  1455,  1460,  1465,
-  1468,  1472,  1475,  1479,  1482,  1485,  1488,  1492,  1495,  1499,
-  1503,  1505,  1507,  1509,  1511,  1513,  1515,  1517,  1521,  1529,
-  1537,  1539,  1541,  1545,  1547,  1550,  1553,  1564,  1566,  1571,
-  1573,  1576,  1590,  1593,  1596,  1598,  1600,  1608,  1616,  1627,
-  1632,  1635,  1649,  1658,  1662,  1666,  1670,  1676,  1680,  1685,
-  1688,  1693,  1696,  1697,  1714,  1719,  1722,  1734,  1736,  1746,
-  1756,  1757,  1765,  1768,  1780,  1784,  1801,  1811,  1820,  1825,
-  1830,  1835,  1839,  1843,  1854,  1861,  1868,  1875,  1886,  1892,
-  1895,  1900,  1923,  1957,  1988,  2019,  2034,  2048,  2052,  2056,
-  2059,  2064,  2066,  2069,  2071,  2075,  2080,  2083,  2089,  2094,
-  2099,  2101,  2110,  2111,  2117,  2119,  2129,  2131,  2135,  2138,
-  2144,  2154,  2163,  2172,  2182,  2196,  2201,  2206,  2208,  2217,
-  2220,  2225,  2228,  2232
+#if ! defined yyoverflow || YYERROR_VERBOSE
+
+/* The parser invokes alloca or malloc; define the necessary symbols.  */
+
+# ifdef YYSTACK_USE_ALLOCA
+#  if YYSTACK_USE_ALLOCA
+#   ifdef __GNUC__
+#    define YYSTACK_ALLOC __builtin_alloca
+#   elif defined __BUILTIN_VA_ARG_INCR
+#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
+#   elif defined _AIX
+#    define YYSTACK_ALLOC __alloca
+#   elif defined _MSC_VER
+#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
+#    define alloca _alloca
+#   else
+#    define YYSTACK_ALLOC alloca
+#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
+#     ifndef EXIT_SUCCESS
+#      define EXIT_SUCCESS 0
+#     endif
+#    endif
+#   endif
+#  endif
+# endif
+
+# ifdef YYSTACK_ALLOC
+   /* Pacify GCC's `empty if-body' warning.  */
+#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
+#  ifndef YYSTACK_ALLOC_MAXIMUM
+    /* The OS might guarantee only one guard page at the bottom of the stack,
+       and a page size can be as small as 4096 bytes.  So we cannot safely
+       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
+       to allow for a few compiler-allocated temporary stack slots.  */
+#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
+#  endif
+# else
+#  define YYSTACK_ALLOC YYMALLOC
+#  define YYSTACK_FREE YYFREE
+#  ifndef YYSTACK_ALLOC_MAXIMUM
+#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
+#  endif
+#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
+       && ! ((defined YYMALLOC || defined malloc) \
+	     && (defined YYFREE || defined free)))
+#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+#   ifndef EXIT_SUCCESS
+#    define EXIT_SUCCESS 0
+#   endif
+#  endif
+#  ifndef YYMALLOC
+#   define YYMALLOC malloc
+#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
+#   endif
+#  endif
+#  ifndef YYFREE
+#   define YYFREE free
+#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+void free (void *); /* INFRINGES ON USER NAME SPACE */
+#   endif
+#  endif
+# endif
+#endif /* ! defined yyoverflow || YYERROR_VERBOSE */
+
+
+#if (! defined yyoverflow \
+     && (! defined __cplusplus \
+	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
+
+/* A type that is properly aligned for any stack member.  */
+union yyalloc
+{
+  yytype_int16 yyss_alloc;
+  YYSTYPE yyvs_alloc;
 };
+
+/* The size of the maximum gap between one aligned stack and the next.  */
+# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)
+
+/* The size of an array large to enough to hold all stacks, each with
+   N elements.  */
+# define YYSTACK_BYTES(N) \
+     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
+      + YYSTACK_GAP_MAXIMUM)
+
+# define YYCOPY_NEEDED 1
+
+/* Relocate STACK from its old location to the new one.  The
+   local variables YYSIZE and YYSTACKSIZE give the old and new number of
+   elements in the stack, and YYPTR gives the new location of the
+   stack.  Advance YYPTR to a properly aligned location for the next
+   stack.  */
+# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
+    do									\
+      {									\
+	YYSIZE_T yynewbytes;						\
+	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
+	Stack = &yyptr->Stack_alloc;					\
+	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
+	yyptr += yynewbytes / sizeof (*yyptr);				\
+      }									\
+    while (YYID (0))
+
 #endif
 
+#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
+/* Copy COUNT objects from SRC to DST.  The source and destination do
+   not overlap.  */
+# ifndef YYCOPY
+#  if defined __GNUC__ && 1 < __GNUC__
+#   define YYCOPY(Dst, Src, Count) \
+      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
+#  else
+#   define YYCOPY(Dst, Src, Count)              \
+      do                                        \
+        {                                       \
+          YYSIZE_T yyi;                         \
+          for (yyi = 0; yyi < (Count); yyi++)   \
+            (Dst)[yyi] = (Src)[yyi];            \
+        }                                       \
+      while (YYID (0))
+#  endif
+# endif
+#endif /* !YYCOPY_NEEDED */
+
+/* YYFINAL -- State number of the termination state.  */
+#define YYFINAL  4
+/* YYLAST -- Last index in YYTABLE.  */
+#define YYLAST   2490
+
+/* YYNTOKENS -- Number of terminals.  */
+#define YYNTOKENS  84
+/* YYNNTS -- Number of nonterminals.  */
+#define YYNNTS  158
+/* YYNRULES -- Number of rules.  */
+#define YYNRULES  405
+/* YYNRULES -- Number of states.  */
+#define YYNSTATES  692
+
+/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
+#define YYUNDEFTOK  2
+#define YYMAXUTOK   316
+
+#define YYTRANSLATE(YYX)						\
+  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
+
+/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
+static const yytype_uint8 yytranslate[] =
+{
+       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,    80,     2,     2,     2,    52,    43,     2,
+      58,    76,    50,    48,    81,    49,    57,    51,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,    38,    77,
+       2,    35,     2,    37,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,    59,     2,    83,    42,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,    82,    41,    78,    79,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
+       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      36,    39,    40,    44,    45,    46,    47,    53,    54,    55,
+      56,    60,    61,    62,    63,    64,    65,    66,    67,    68,
+      69,    70,    71,    72,    73,    74,    75
+};
 
-#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)
-
-static const char * const yytname[] = {   "$","error","$undefined.","IDENTIFIER",
-"TYPENAME","SCSPEC","TYPESPEC","TYPE_QUAL","CONSTANT","STRING","ELLIPSIS","SIZEOF",
-"ENUM","STRUCT","UNION","IF","ELSE","WHILE","DO","FOR","SWITCH","CASE","DEFAULT",
-"BREAK","CONTINUE","RETURN","GOTO","ASM_KEYWORD","TYPEOF","ALIGNOF","ATTRIBUTE",
-"EXTENSION","LABEL","REALPART","IMAGPART","ASSIGN","'='","'?'","':'","OROR",
-"ANDAND","'|'","'^'","'&'","EQCOMPARE","ARITHCOMPARE","LSHIFT","RSHIFT","'+'",
-"'-'","'*'","'/'","'%'","UNARY","PLUSPLUS","MINUSMINUS","HYPERUNARY","POINTSAT",
-"'.'","'('","'['","INTERFACE","IMPLEMENTATION","END","SELECTOR","DEFS","ENCODE",
-"CLASSNAME","PUBLIC","PRIVATE","PROTECTED","PROTOCOL","OBJECTNAME","CLASS","ALIAS",
-"OBJC_STRING","')'","';'","'}'","'~'","'!'","','","'{'","']'","program","extdefs",
-"@1","@2","extdef","datadef","fndef","@3","@4","@5","@6","@7","@8","identifier",
-"unop","expr","exprlist","nonnull_exprlist","unary_expr","sizeof","alignof",
-"cast_expr","@9","expr_no_commas","@10","@11","@12","@13","@14","primary","@15",
-"string","old_style_parm_decls","lineno_datadecl","datadecls","datadecl","lineno_decl",
-"decls","setspecs","setattrs","decl","typed_declspecs","reserved_declspecs",
-"typed_declspecs_no_prefix_attr","reserved_declspecs_no_prefix_attr","declmods",
-"declmods_no_prefix_attr","typed_typespecs","reserved_typespecquals","typespec",
-"typespecqual_reserved","initdecls","notype_initdecls","maybeasm","initdcl",
-"@16","notype_initdcl","@17","maybe_attribute","attributes","attribute","attribute_list",
-"attrib","any_word","init","@18","initlist_maybe_comma","initlist1","initelt",
-"@19","initval","@20","designator_list","designator","nested_function","@21",
-"@22","notype_nested_function","@23","@24","declarator","after_type_declarator",
-"parm_declarator","notype_declarator","struct_head","union_head","enum_head",
-"structsp","@25","@26","@27","@28","maybecomma","maybecomma_warn","component_decl_list",
-"component_decl_list2","component_decl","components","component_declarator",
-"enumlist","enumerator","typename","absdcl","nonempty_type_quals","type_quals",
-"absdcl1","stmts","lineno_stmt_or_labels","xstmts","errstmt","pushlevel","maybe_label_decls",
-"label_decls","label_decl","compstmt_or_error","compstmt_start","compstmt","simple_if",
-"if_prefix","do_stmt_start","@29","save_filename","save_lineno","lineno_labeled_stmt",
-"lineno_stmt_or_label","stmt_or_label","stmt","@30","@31","@32","@33","@34",
-"@35","@36","all_iter_stmt","all_iter_stmt_simple","@37","label","maybe_type_qual",
-"xexpr","asm_operands","nonnull_asm_operands","asm_operand","asm_clobbers","parmlist",
-"@38","parmlist_1","@39","parmlist_2","parms","parm","parmlist_or_identifiers",
-"@40","parmlist_or_identifiers_1","identifiers","identifiers_or_typenames","extension", NULL
+#if YYDEBUG
+/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
+   YYRHS.  */
+static const yytype_uint16 yyprhs[] =
+{
+       0,     0,     3,     4,     6,     7,    10,    11,    15,    17,
+      19,    25,    28,    32,    37,    42,    45,    48,    51,    54,
+      56,    57,    58,    66,    71,    72,    73,    81,    86,    87,
+      88,    95,    99,   101,   103,   105,   107,   109,   111,   113,
+     115,   117,   119,   120,   122,   124,   128,   130,   133,   136,
+     139,   142,   145,   150,   153,   158,   161,   164,   166,   168,
+     170,   175,   176,   184,   186,   190,   194,   198,   202,   206,
+     210,   214,   218,   222,   226,   230,   234,   235,   240,   241,
+     246,   247,   248,   256,   257,   263,   267,   271,   273,   275,
+     277,   281,   285,   286,   291,   296,   301,   305,   309,   312,
+     315,   317,   320,   321,   323,   326,   330,   332,   334,   337,
+     340,   345,   350,   353,   356,   360,   362,   364,   367,   370,
+     371,   372,   377,   382,   386,   390,   393,   396,   399,   402,
+     406,   407,   410,   413,   416,   419,   423,   424,   427,   430,
+     432,   434,   437,   440,   442,   444,   447,   450,   453,   457,
+     458,   461,   463,   465,   467,   472,   477,   479,   481,   483,
+     485,   489,   491,   495,   496,   501,   502,   509,   513,   514,
+     521,   525,   526,   528,   530,   533,   540,   542,   546,   547,
+     549,   554,   561,   566,   568,   570,   572,   574,   576,   577,
+     582,   584,   585,   588,   590,   594,   598,   601,   602,   607,
+     609,   610,   615,   617,   619,   621,   624,   627,   633,   637,
+     638,   639,   645,   646,   647,   653,   655,   657,   661,   665,
+     670,   674,   678,   682,   684,   688,   693,   698,   702,   706,
+     710,   712,   716,   720,   724,   729,   734,   738,   742,   744,
+     746,   749,   751,   754,   756,   759,   760,   768,   774,   777,
+     778,   786,   792,   795,   796,   805,   806,   814,   817,   818,
+     820,   821,   823,   825,   828,   829,   833,   836,   840,   842,
+     846,   848,   850,   853,   855,   859,   864,   871,   877,   879,
+     883,   885,   887,   891,   894,   897,   898,   900,   902,   905,
+     906,   909,   913,   917,   920,   924,   929,   933,   936,   940,
+     943,   947,   949,   951,   954,   957,   958,   960,   963,   964,
+     965,   967,   969,   972,   976,   978,   981,   983,   986,   993,
+     999,  1005,  1008,  1011,  1016,  1017,  1022,  1023,  1024,  1028,
+    1033,  1037,  1039,  1041,  1043,  1045,  1048,  1049,  1054,  1056,
+    1060,  1061,  1062,  1070,  1076,  1079,  1080,  1081,  1082,  1095,
+    1096,  1103,  1106,  1109,  1112,  1116,  1123,  1132,  1143,  1156,
+    1160,  1165,  1167,  1169,  1170,  1177,  1181,  1187,  1190,  1194,
+    1195,  1197,  1198,  1200,  1201,  1203,  1205,  1209,  1214,  1216,
+    1220,  1221,  1224,  1227,  1228,  1233,  1236,  1237,  1239,  1241,
+    1245,  1247,  1251,  1256,  1261,  1266,  1271,  1276,  1277,  1280,
+    1282,  1285,  1287,  1291,  1293,  1297
+};
+
+/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
+static const yytype_int16 yyrhs[] =
+{
+      85,     0,    -1,    -1,    86,    -1,    -1,    87,    89,    -1,
+      -1,    86,    88,    89,    -1,    91,    -1,    90,    -1,    27,
+      58,   100,    76,    77,    -1,   241,    89,    -1,   123,   137,
+      77,    -1,   130,   123,   137,    77,    -1,   126,   123,   136,
+      77,    -1,   130,    77,    -1,   126,    77,    -1,     1,    77,
+      -1,     1,    78,    -1,    77,    -1,    -1,    -1,   126,   123,
+     165,    92,   117,    93,   199,    -1,   126,   123,   165,     1,
+      -1,    -1,    -1,   130,   123,   168,    94,   117,    95,   199,
+      -1,   130,   123,   168,     1,    -1,    -1,    -1,   123,   168,
+      96,   117,    97,   199,    -1,   123,   168,     1,    -1,     3,
+      -1,     4,    -1,    43,    -1,    49,    -1,    48,    -1,    54,
+      -1,    53,    -1,    79,    -1,    80,    -1,   102,    -1,    -1,
+     102,    -1,   108,    -1,   102,    81,   108,    -1,   114,    -1,
+      50,   106,    -1,   241,   106,    -1,    99,   106,    -1,    40,
+      98,    -1,   104,   103,    -1,   104,    58,   186,    76,    -1,
+     105,   103,    -1,   105,    58,   186,    76,    -1,    33,   106,
+      -1,    34,   106,    -1,    11,    -1,    29,    -1,   103,    -1,
+      58,   186,    76,   106,    -1,    -1,    58,   186,    76,    82,
+     107,   151,    78,    -1,   106,    -1,   108,    48,   108,    -1,
+     108,    49,   108,    -1,   108,    50,   108,    -1,   108,    51,
+     108,    -1,   108,    52,   108,    -1,   108,    47,   108,    -1,
+     108,    46,   108,    -1,   108,    45,   108,    -1,   108,    44,
+     108,    -1,   108,    43,   108,    -1,   108,    41,   108,    -1,
+     108,    42,   108,    -1,    -1,   108,    40,   109,   108,    -1,
+      -1,   108,    39,   110,   108,    -1,    -1,    -1,   108,    37,
+     111,   100,    38,   112,   108,    -1,    -1,   108,    37,   113,
+      38,   108,    -1,   108,    35,   108,    -1,   108,    36,   108,
+      -1,     3,    -1,     8,    -1,   116,    -1,    58,   100,    76,
+      -1,    58,     1,    76,    -1,    -1,    58,   115,   201,    76,
+      -1,   114,    58,   101,    76,    -1,   114,    59,   100,    83,
+      -1,   114,    57,    98,    -1,   114,    60,    98,    -1,   114,
+      54,    -1,   114,    53,    -1,     9,    -1,   116,     9,    -1,
+      -1,   119,    -1,   119,    10,    -1,   206,   207,   120,    -1,
+     118,    -1,   194,    -1,   119,   118,    -1,   118,   194,    -1,
+     128,   123,   136,    77,    -1,   131,   123,   137,    77,    -1,
+     128,    77,    -1,   131,    77,    -1,   206,   207,   125,    -1,
+     121,    -1,   194,    -1,   122,   121,    -1,   121,   194,    -1,
+      -1,    -1,   126,   123,   136,    77,    -1,   130,   123,   137,
+      77,    -1,   126,   123,   159,    -1,   130,   123,   162,    -1,
+     126,    77,    -1,   130,    77,    -1,   241,   125,    -1,   134,
+     127,    -1,   130,   134,   127,    -1,    -1,   127,   135,    -1,
+     127,     5,    -1,   127,   144,    -1,   134,   129,    -1,   131,
+     134,   129,    -1,    -1,   129,   135,    -1,   129,     5,    -1,
+     131,    -1,   144,    -1,   130,   131,    -1,   130,   144,    -1,
+       7,    -1,     5,    -1,   131,     7,    -1,   131,     5,    -1,
+     134,   133,    -1,   188,   134,   133,    -1,    -1,   133,   135,
+      -1,     6,    -1,   172,    -1,     4,    -1,    28,    58,   100,
+      76,    -1,    28,    58,   186,    76,    -1,     6,    -1,     7,
+      -1,   172,    -1,   139,    -1,   136,    81,   139,    -1,   141,
+      -1,   137,    81,   139,    -1,    -1,    27,    58,   116,    76,
+      -1,    -1,   165,   138,   143,    35,   140,   149,    -1,   165,
+     138,   143,    -1,    -1,   168,   138,   143,    35,   142,   149,
+      -1,   168,   138,   143,    -1,    -1,   144,    -1,   145,    -1,
+     144,   145,    -1,    30,    58,    58,   146,    76,    76,    -1,
+     147,    -1,   146,    81,   147,    -1,    -1,   148,    -1,   148,
+      58,     3,    76,    -1,   148,    58,     3,    81,   102,    76,
+      -1,   148,    58,   101,    76,    -1,    98,    -1,     5,    -1,
+       6,    -1,     7,    -1,   108,    -1,    -1,    82,   150,   151,
+      78,    -1,     1,    -1,    -1,   152,   177,    -1,   153,    -1,
+     152,    81,   153,    -1,   157,    35,   155,    -1,   158,   155,
+      -1,    -1,    98,    38,   154,   155,    -1,   155,    -1,    -1,
+      82,   156,   151,    78,    -1,   108,    -1,     1,    -1,   158,
+      -1,   157,   158,    -1,    57,    98,    -1,    59,   108,    10,
+     108,    83,    -1,    59,   108,    83,    -1,    -1,    -1,   165,
+     160,   117,   161,   201,    -1,    -1,    -1,   168,   163,   117,
+     164,   201,    -1,   166,    -1,   168,    -1,    58,   166,    76,
+      -1,   166,    58,   236,    -1,   166,    59,   100,    83,    -1,
+     166,    59,    83,    -1,    50,   189,   166,    -1,   144,   124,
+     166,    -1,     4,    -1,   167,    58,   236,    -1,   167,    59,
+      50,    83,    -1,   167,    59,   100,    83,    -1,   167,    59,
+      83,    -1,    50,   189,   167,    -1,   144,   124,   167,    -1,
+       4,    -1,   168,    58,   236,    -1,    58,   168,    76,    -1,
+      50,   189,   168,    -1,   168,    59,    50,    83,    -1,   168,
+      59,   100,    83,    -1,   168,    59,    83,    -1,   144,   124,
+     168,    -1,     3,    -1,    13,    -1,    13,   144,    -1,    14,
+      -1,    14,   144,    -1,    12,    -1,    12,   144,    -1,    -1,
+     169,    98,    82,   173,   179,    78,   143,    -1,   169,    82,
+     179,    78,   143,    -1,   169,    98,    -1,    -1,   170,    98,
+      82,   174,   179,    78,   143,    -1,   170,    82,   179,    78,
+     143,    -1,   170,    98,    -1,    -1,   171,    98,    82,   175,
+     184,   178,    78,   143,    -1,    -1,   171,    82,   176,   184,
+     178,    78,   143,    -1,   171,    98,    -1,    -1,    81,    -1,
+      -1,    81,    -1,   180,    -1,   180,   181,    -1,    -1,   180,
+     181,    77,    -1,   180,    77,    -1,   132,   123,   182,    -1,
+     132,    -1,   188,   123,   182,    -1,   188,    -1,     1,    -1,
+     241,   181,    -1,   183,    -1,   182,    81,   183,    -1,   206,
+     207,   165,   143,    -1,   206,   207,   165,    38,   108,   143,
+      -1,   206,   207,    38,   108,   143,    -1,   185,    -1,   184,
+      81,   185,    -1,     1,    -1,    98,    -1,    98,    35,   108,
+      -1,   132,   187,    -1,   188,   187,    -1,    -1,   190,    -1,
+       7,    -1,   188,     7,    -1,    -1,   189,     7,    -1,    58,
+     190,    76,    -1,    50,   189,   190,    -1,    50,   189,    -1,
+     190,    58,   229,    -1,   190,    59,   100,    83,    -1,   190,
+      59,    83,    -1,    58,   229,    -1,    59,   100,    83,    -1,
+      59,    83,    -1,   144,   124,   190,    -1,   192,    -1,   209,
+      -1,   192,   209,    -1,   192,   194,    -1,    -1,   191,    -1,
+       1,    77,    -1,    -1,    -1,   197,    -1,   198,    -1,   197,
+     198,    -1,    32,   240,    77,    -1,   201,    -1,     1,   201,
+      -1,    82,    -1,   200,    78,    -1,   200,   195,   196,   122,
+     193,    78,    -1,   200,   195,   196,     1,    78,    -1,   200,
+     195,   196,   191,    78,    -1,   203,   208,    -1,   203,     1,
+      -1,    15,    58,   100,    76,    -1,    -1,    18,   205,   208,
+      17,    -1,    -1,    -1,   206,   207,   211,    -1,   206,   207,
+     222,   208,    -1,   206,   207,   210,    -1,   211,    -1,   222,
+      -1,   201,    -1,   219,    -1,   100,    77,    -1,    -1,   202,
+      16,   212,   208,    -1,   202,    -1,   202,    16,     1,    -1,
+      -1,    -1,    17,   213,    58,   100,    76,   214,   208,    -1,
+     204,    58,   100,    76,    77,    -1,   204,     1,    -1,    -1,
+      -1,    -1,    19,    58,   224,    77,   215,   224,    77,   216,
+     224,    76,   217,   208,    -1,    -1,    20,    58,   100,    76,
+     218,   208,    -1,    23,    77,    -1,    24,    77,    -1,    25,
+      77,    -1,    25,   100,    77,    -1,    27,   223,    58,   100,
+      76,    77,    -1,    27,   223,    58,   100,    38,   225,    76,
+      77,    -1,    27,   223,    58,   100,    38,   225,    38,   225,
+      76,    77,    -1,    27,   223,    58,   100,    38,   225,    38,
+     225,    38,   228,    76,    77,    -1,    26,    98,    77,    -1,
+      26,    50,   100,    77,    -1,    77,    -1,   220,    -1,    -1,
+      19,    58,   114,    76,   221,   208,    -1,    21,   108,    38,
+      -1,    21,   108,    10,   108,    38,    -1,    22,    38,    -1,
+      98,    38,   143,    -1,    -1,     7,    -1,    -1,   100,    -1,
+      -1,   226,    -1,   227,    -1,   226,    81,   227,    -1,     9,
+      58,   100,    76,    -1,   116,    -1,   228,    81,   116,    -1,
+      -1,   230,   231,    -1,   233,    76,    -1,    -1,   234,    77,
+     232,   231,    -1,     1,    76,    -1,    -1,    10,    -1,   234,
+      -1,   234,    81,    10,    -1,   235,    -1,   234,    81,   235,
+      -1,   126,   123,   167,   143,    -1,   126,   123,   168,   143,
+      -1,   126,   123,   187,   143,    -1,   130,   123,   168,   143,
+      -1,   130,   123,   187,   143,    -1,    -1,   237,   238,    -1,
+     231,    -1,   239,    76,    -1,     3,    -1,   239,    81,     3,
+      -1,    98,    -1,   240,    81,    98,    -1,    31,    -1
+};
+
+/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
+static const yytype_uint16 yyrline[] =
+{
+       0,   234,   234,   238,   253,   253,   254,   254,   258,   259,
+     260,   268,   273,   283,   288,   293,   295,   297,   298,   299,
+     306,   311,   305,   318,   324,   329,   323,   336,   342,   347,
+     341,   354,   362,   363,   366,   368,   370,   372,   374,   376,
+     378,   382,   388,   389,   393,   395,   400,   401,   404,   407,
+     411,   439,   445,   448,   451,   454,   456,   461,   465,   469,
+     470,   474,   473,   505,   506,   508,   510,   512,   514,   516,
+     518,   520,   522,   524,   526,   528,   531,   530,   537,   536,
+     543,   546,   542,   552,   551,   561,   569,   581,   679,   680,
+     682,   688,   691,   690,   727,   729,   731,   735,   741,   743,
+     749,   750,   755,   757,   758,   769,   774,   775,   776,   777,
+     785,   790,   795,   798,   807,   812,   813,   814,   815,   823,
+     834,   838,   843,   848,   853,   858,   860,   862,   872,   874,
+     879,   880,   882,   887,   892,   894,   900,   901,   903,   916,
+     918,   920,   922,   927,   930,   932,   935,   949,   951,   956,
+     957,   965,   966,   967,   971,   973,   979,   980,   981,   985,
+     986,   990,   991,   996,   997,  1005,  1004,  1012,  1021,  1020,
+    1029,  1038,  1039,  1044,  1046,  1051,  1056,  1058,  1064,  1065,
+    1067,  1069,  1071,  1079,  1080,  1081,  1082,  1088,  1090,  1089,
+    1102,  1109,  1111,  1115,  1116,  1122,  1123,  1125,  1124,  1127,
+    1132,  1131,  1135,  1137,  1141,  1142,  1146,  1151,  1153,  1159,
+    1168,  1158,  1182,  1191,  1181,  1207,  1208,  1214,  1216,  1221,
+    1223,  1225,  1232,  1234,  1243,  1248,  1253,  1255,  1257,  1264,
+    1266,  1273,  1278,  1280,  1282,  1287,  1289,  1296,  1298,  1302,
+    1304,  1309,  1311,  1316,  1318,  1324,  1323,  1329,  1333,  1336,
+    1335,  1339,  1343,  1346,  1345,  1352,  1351,  1357,  1361,  1363,
+    1366,  1368,  1374,  1376,  1382,  1383,  1385,  1400,  1406,  1411,
+    1417,  1422,  1424,  1430,  1431,  1436,  1439,  1443,  1454,  1455,
+    1460,  1466,  1468,  1473,  1475,  1481,  1482,  1486,  1488,  1494,
+    1495,  1500,  1503,  1505,  1507,  1509,  1511,  1513,  1515,  1517,
+    1521,  1530,  1538,  1539,  1541,  1545,  1547,  1550,  1554,  1564,
+    1566,  1572,  1573,  1577,  1591,  1593,  1596,  1598,  1600,  1608,
+    1616,  1628,  1632,  1636,  1651,  1650,  1663,  1667,  1671,  1676,
+    1681,  1686,  1688,  1694,  1696,  1697,  1715,  1714,  1722,  1734,
+    1737,  1747,  1736,  1757,  1765,  1770,  1782,  1785,  1768,  1812,
+    1811,  1825,  1830,  1835,  1839,  1843,  1854,  1861,  1868,  1875,
+    1886,  1892,  1896,  1902,  1901,  1957,  1988,  2019,  2034,  2050,
+    2052,  2058,  2059,  2065,  2066,  2070,  2071,  2076,  2081,  2083,
+    2090,  2090,  2100,  2102,  2101,  2111,  2118,  2119,  2129,  2131,
+    2136,  2138,  2145,  2154,  2163,  2172,  2182,  2197,  2197,  2207,
+    2208,  2218,  2220,  2226,  2228,  2233
 };
 #endif
 
-static const short yyr1[] = {     0,
-    84,    84,    86,    85,    87,    85,    88,    88,    88,    88,
-    89,    89,    89,    89,    89,    89,    89,    89,    91,    92,
-    90,    90,    93,    94,    90,    90,    95,    96,    90,    90,
-    97,    97,    98,    98,    98,    98,    98,    98,    98,    99,
-   100,   100,   101,   101,   102,   102,   102,   102,   102,   102,
-   102,   102,   102,   102,   102,   103,   104,   105,   105,   106,
-   105,   107,   107,   107,   107,   107,   107,   107,   107,   107,
-   107,   107,   107,   107,   108,   107,   109,   107,   110,   111,
-   107,   112,   107,   107,   107,   113,   113,   113,   113,   113,
-   114,   113,   113,   113,   113,   113,   113,   113,   115,   115,
-   116,   116,   116,   117,   118,   118,   118,   118,   119,   119,
-   119,   119,   120,   121,   121,   121,   121,   122,   123,   124,
-   124,   124,   124,   124,   124,   124,   125,   125,   126,   126,
-   126,   126,   127,   127,   128,   128,   128,   129,   129,   129,
-   129,   130,   130,   130,   130,   131,   131,   132,   132,   133,
-   133,   133,   133,   133,   134,   134,   134,   135,   135,   136,
-   136,   137,   137,   139,   138,   138,   141,   140,   140,   142,
-   142,   143,   143,   144,   145,   145,   146,   146,   146,   146,
-   146,   147,   147,   147,   147,   148,   149,   148,   148,   150,
-   150,   151,   151,   152,   152,   153,   152,   152,   155,   154,
-   154,   154,   156,   156,   157,   157,   157,   159,   160,   158,
-   162,   163,   161,   164,   164,   165,   165,   165,   165,   165,
-   165,   165,   166,   166,   166,   166,   166,   166,   166,   167,
-   167,   167,   167,   167,   167,   167,   167,   168,   168,   169,
-   169,   170,   170,   172,   171,   171,   171,   173,   171,   171,
-   171,   174,   171,   175,   171,   171,   176,   176,   177,   177,
-   178,   178,   179,   179,   179,   180,   180,   180,   180,   180,
-   180,   181,   181,   182,   182,   182,   183,   183,   183,   184,
-   184,   185,   185,   186,   186,   187,   187,   188,   188,   189,
-   189,   189,   189,   189,   189,   189,   189,   189,   189,   190,
-   191,   191,   191,   192,   192,   193,   194,   195,   195,   196,
-   196,   197,   198,   198,   199,   200,   200,   200,   200,   201,
-   201,   202,   204,   203,   205,   206,   207,   207,   208,   209,
-   209,   210,   210,   210,   211,   210,   210,   210,   212,   213,
-   210,   210,   210,   214,   215,   216,   210,   217,   210,   210,
-   210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
-   218,   220,   219,   221,   221,   221,   221,   222,   222,   223,
-   223,   224,   224,   225,   225,   226,   227,   227,   229,   228,
-   230,   231,   230,   230,   232,   232,   232,   232,   233,   233,
-   234,   234,   234,   234,   234,   236,   235,   237,   237,   238,
-   238,   239,   239,   240
+#if YYDEBUG || YYERROR_VERBOSE || 0
+/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
+   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
+static const char *const yytname[] =
+{
+  "$end", "error", "$undefined", "IDENTIFIER", "TYPENAME", "SCSPEC",
+  "TYPESPEC", "TYPE_QUAL", "CONSTANT", "STRING", "ELLIPSIS", "SIZEOF",
+  "ENUM", "STRUCT", "UNION", "IF", "ELSE", "WHILE", "DO", "FOR", "SWITCH",
+  "CASE", "DEFAULT", "BREAK", "CONTINUE", "RETURN_KEYWORD", "GOTO",
+  "ASM_KEYWORD", "TYPEOF", "ALIGNOF", "ATTRIBUTE", "EXTENSION", "LABEL",
+  "REALPART", "IMAGPART", "'='", "ASSIGN", "'?'", "':'", "OROR", "ANDAND",
+  "'|'", "'^'", "'&'", "EQCOMPARE", "ARITHCOMPARE", "RSHIFT", "LSHIFT",
+  "'+'", "'-'", "'*'", "'/'", "'%'", "MINUSMINUS", "PLUSPLUS", "UNARY",
+  "HYPERUNARY", "'.'", "'('", "'['", "POINTSAT", "INTERFACE",
+  "IMPLEMENTATION", "END", "SELECTOR", "DEFS", "ENCODE", "CLASSNAME",
+  "PUBLIC", "PRIVATE", "PROTECTED", "PROTOCOL", "OBJECTNAME", "CLASS",
+  "ALIAS", "OBJC_STRING", "')'", "';'", "'}'", "'~'", "'!'", "','", "'{'",
+  "']'", "$accept", "program", "extdefs", "@1", "@2", "extdef", "datadef",
+  "fndef", "$@3", "$@4", "$@5", "$@6", "$@7", "$@8", "identifier", "unop",
+  "expr", "exprlist", "nonnull_exprlist", "unary_expr", "sizeof",
+  "alignof", "cast_expr", "$@9", "expr_no_commas", "$@10", "$@11", "$@12",
+  "$@13", "$@14", "primary", "@15", "string", "old_style_parm_decls",
+  "lineno_datadecl", "datadecls", "datadecl", "lineno_decl", "decls",
+  "setspecs", "setattrs", "decl", "typed_declspecs", "reserved_declspecs",
+  "typed_declspecs_no_prefix_attr", "reserved_declspecs_no_prefix_attr",
+  "declmods", "declmods_no_prefix_attr", "typed_typespecs",
+  "reserved_typespecquals", "typespec", "typespecqual_reserved",
+  "initdecls", "notype_initdecls", "maybeasm", "initdcl", "@16",
+  "notype_initdcl", "@17", "maybe_attribute", "attributes", "attribute",
+  "attribute_list", "attrib", "any_word", "init", "$@18",
+  "initlist_maybe_comma", "initlist1", "initelt", "$@19", "initval",
+  "$@20", "designator_list", "designator", "nested_function", "$@21",
+  "$@22", "notype_nested_function", "$@23", "$@24", "declarator",
+  "after_type_declarator", "parm_declarator", "notype_declarator",
+  "struct_head", "union_head", "enum_head", "structsp", "@25", "@26",
+  "@27", "@28", "maybecomma", "maybecomma_warn", "component_decl_list",
+  "component_decl_list2", "component_decl", "components",
+  "component_declarator", "enumlist", "enumerator", "typename", "absdcl",
+  "nonempty_type_quals", "type_quals", "absdcl1", "stmts",
+  "lineno_stmt_or_labels", "xstmts", "errstmt", "pushlevel",
+  "maybe_label_decls", "label_decls", "label_decl", "compstmt_or_error",
+  "compstmt_start", "compstmt", "simple_if", "if_prefix", "do_stmt_start",
+  "$@29", "save_filename", "save_lineno", "lineno_labeled_stmt",
+  "lineno_stmt_or_label", "stmt_or_label", "stmt", "$@30", "$@31", "$@32",
+  "$@33", "@34", "$@35", "$@36", "all_iter_stmt", "all_iter_stmt_simple",
+  "@37", "label", "maybe_type_qual", "xexpr", "asm_operands",
+  "nonnull_asm_operands", "asm_operand", "asm_clobbers", "parmlist",
+  "$@38", "parmlist_1", "$@39", "parmlist_2", "parms", "parm",
+  "parmlist_or_identifiers", "$@40", "parmlist_or_identifiers_1",
+  "identifiers", "identifiers_or_typenames", "extension", YY_NULL
 };
+#endif
 
-static const short yyr2[] = {     0,
-     0,     1,     0,     2,     0,     3,     1,     1,     5,     2,
-     3,     4,     4,     2,     2,     2,     2,     1,     0,     0,
-     7,     4,     0,     0,     7,     4,     0,     0,     6,     3,
-     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
-     0,     1,     1,     3,     1,     2,     2,     2,     2,     2,
-     4,     2,     4,     2,     2,     1,     1,     1,     4,     0,
-     7,     1,     3,     3,     3,     3,     3,     3,     3,     3,
-     3,     3,     3,     3,     0,     4,     0,     4,     0,     0,
-     7,     0,     5,     3,     3,     1,     1,     1,     3,     3,
-     0,     4,     4,     4,     3,     3,     2,     2,     1,     2,
-     0,     1,     2,     3,     1,     1,     2,     2,     4,     4,
-     2,     2,     3,     1,     1,     2,     2,     0,     0,     4,
-     4,     3,     3,     2,     2,     2,     2,     3,     0,     2,
-     2,     2,     2,     3,     0,     2,     2,     1,     1,     2,
-     2,     1,     1,     2,     2,     2,     3,     0,     2,     1,
-     1,     1,     4,     4,     1,     1,     1,     1,     3,     1,
-     3,     0,     4,     0,     6,     3,     0,     6,     3,     0,
-     1,     1,     2,     6,     1,     3,     0,     1,     4,     6,
-     4,     1,     1,     1,     1,     1,     0,     4,     1,     0,
-     2,     1,     3,     3,     2,     0,     4,     1,     0,     4,
-     1,     1,     1,     2,     2,     5,     3,     0,     0,     5,
-     0,     0,     5,     1,     1,     3,     3,     4,     3,     3,
-     3,     1,     3,     4,     4,     3,     3,     3,     1,     3,
-     3,     3,     4,     4,     3,     3,     1,     1,     2,     1,
-     2,     1,     2,     0,     7,     5,     2,     0,     7,     5,
-     2,     0,     8,     0,     7,     2,     0,     1,     0,     1,
-     1,     2,     0,     3,     2,     3,     1,     3,     1,     1,
-     2,     1,     3,     4,     6,     5,     1,     3,     1,     1,
-     3,     2,     2,     0,     1,     1,     2,     0,     2,     3,
-     3,     2,     3,     4,     3,     2,     3,     2,     3,     1,
-     1,     2,     2,     0,     1,     2,     0,     0,     1,     1,
-     2,     3,     1,     2,     1,     2,     6,     5,     5,     2,
-     2,     4,     0,     4,     0,     0,     3,     4,     3,     1,
-     1,     1,     1,     2,     0,     4,     1,     3,     0,     0,
-     7,     5,     2,     0,     0,     0,    12,     0,     6,     2,
-     2,     2,     3,     6,     8,    10,    12,     3,     4,     1,
-     1,     0,     6,     3,     5,     2,     3,     0,     1,     0,
-     1,     0,     1,     1,     3,     4,     1,     3,     0,     2,
-     2,     0,     4,     2,     0,     1,     1,     3,     1,     3,
-     4,     4,     4,     4,     4,     0,     2,     1,     2,     1,
-     3,     1,     3,     1
+# ifdef YYPRINT
+/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
+   token YYLEX-NUM.  */
+static const yytype_uint16 yytoknum[] =
+{
+       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
+     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
+     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
+     285,   286,   287,   288,   289,    61,   290,    63,    58,   291,
+     292,   124,    94,    38,   293,   294,   295,   296,    43,    45,
+      42,    47,    37,   297,   298,   299,   300,    46,    40,    91,
+     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
+     311,   312,   313,   314,   315,   316,    41,    59,   125,   126,
+      33,    44,   123,    93
 };
+# endif
 
-static const short yydefact[] = {     3,
-     5,     0,     0,     0,   152,   143,   150,   142,   242,   238,
-   240,     0,     0,     0,   404,    18,     4,     8,     7,     0,
-   118,   118,   138,   129,   139,   172,     0,     0,     0,   151,
-     0,     6,    16,    17,   243,   239,   241,     0,     0,     0,
-   237,   288,     0,     0,   160,   119,     0,    15,     0,    14,
-     0,   140,   129,   141,   145,   144,   127,   173,    31,    32,
-   263,   247,   263,   251,   254,   256,    10,    86,    87,    99,
-    56,    57,     0,     0,     0,    33,    35,    34,     0,    36,
-    37,     0,    38,    39,     0,     0,    40,    58,     0,     0,
-    62,    43,    45,    88,     0,   286,     0,   284,   148,     0,
-   284,   177,     0,     0,    11,     0,     0,    30,     0,   396,
-     0,     0,   170,   222,   288,     0,     0,   158,   119,     0,
-   214,   215,     0,     0,   128,   131,   155,   156,   130,   132,
-   157,     0,     0,   244,     0,   248,     0,   252,    54,    55,
-    49,    46,     0,     0,     0,     0,    48,     0,     0,     0,
-    50,     0,    52,     0,     0,    79,    77,    75,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-    97,    98,     0,     0,    41,     0,   100,    47,   153,   288,
-   379,     0,   119,   282,   285,   146,   154,   287,   148,   283,
-   183,   184,   185,   182,     0,   175,   178,   289,   232,   231,
-   161,   162,   236,     0,   230,     0,     0,   235,     0,     0,
-    28,     0,   325,   106,   326,   169,   171,     0,     0,    13,
-     0,     0,    22,     0,   170,   396,     0,    12,    26,     0,
-   170,   270,   265,   118,   262,   118,     0,   263,   170,   263,
-   279,   280,   259,   277,     0,    90,    89,   315,   307,     0,
-     0,     9,    44,     0,     0,    85,    84,     0,     0,     0,
-     0,    73,    74,    72,    71,    70,    68,    69,    63,    64,
-    65,    66,    67,    96,    95,     0,    42,     0,   292,     0,
-   296,     0,   298,     0,     0,   379,     0,   149,   147,     0,
-   177,    41,     0,     0,   400,   386,   118,   118,   398,     0,
-   387,   389,   397,     0,   233,   234,   306,     0,   108,   103,
-   107,     0,   167,   220,   216,   159,   221,    20,   166,   217,
-   219,     0,    24,   246,   325,   264,   325,   271,     0,   250,
-     0,     0,   260,     0,   259,   316,   308,    92,    60,    59,
-    51,    53,     0,     0,    78,    76,    93,    94,   291,   290,
-   380,   297,   299,   293,   295,     0,   174,   176,    86,     0,
-   163,   384,   284,   284,   381,   382,     0,   399,     0,     0,
-    29,   313,   104,   118,   118,   135,     0,     0,   164,   218,
-     0,   266,   272,   326,   268,   170,   170,   281,   278,   170,
-     0,     0,     0,   309,   310,     0,    80,    83,   294,   179,
-     0,   181,   229,   288,   379,   119,   170,   170,   170,   288,
-   119,   170,   170,     0,   388,   390,   401,   314,   111,     0,
-   112,     0,   135,   133,   189,   187,   186,   168,    21,     0,
-    25,   325,     0,   245,   249,   255,   170,   402,     0,     0,
-     0,   325,     0,     0,   115,   326,   301,   311,   202,    86,
-     0,     0,   199,     0,   201,     0,   257,   192,   198,     0,
-     0,     0,     0,   292,     0,   396,     0,   391,   392,   393,
-   292,     0,   394,   395,   383,     0,     0,   162,   134,   137,
-   136,     0,   165,   273,     0,   170,   253,   312,     0,   318,
-   117,   116,   305,     0,   319,   303,   326,   302,     0,   205,
-     0,     0,   196,    61,     0,   191,     0,   204,   195,    81,
-   180,   227,   228,   223,     0,   226,     0,   109,   110,     0,
-   170,     0,   274,   403,   317,     0,   152,     0,   339,   323,
-     0,     0,     0,     0,     0,     0,     0,     0,   368,   360,
-     0,     0,   113,   118,   118,   332,   337,     0,     0,   329,
-   330,   333,   361,   331,     0,     0,   207,     0,     0,   193,
-   194,   224,   225,   188,   276,   170,     0,     0,   325,   370,
-     0,     0,   366,   350,   351,   352,     0,     0,     0,   369,
-     0,   170,   334,   124,     0,   125,     0,     0,   321,   326,
-   320,   343,     0,   126,     0,   200,   197,   275,     0,     0,
-     0,   371,    45,     0,     0,     0,   364,   353,     0,   358,
-     0,   367,     0,   122,   208,     0,   123,   211,   338,   325,
-     0,     0,   206,   322,     0,   324,   362,   344,   348,     0,
-   359,     0,   120,     0,   121,     0,   336,   327,   325,     0,
-   340,   325,   370,   325,   365,   372,     0,   209,   212,   328,
-   342,   325,   363,     0,   349,     0,     0,   373,   374,   354,
-     0,     0,   341,   345,     0,   372,     0,     0,   210,   213,
-   370,     0,     0,   355,   375,     0,   376,     0,     0,   346,
-   377,     0,   356,   325,     0,     0,   347,   357,   378,     0,
-     0,     0
+/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
+static const yytype_uint8 yyr1[] =
+{
+       0,    84,    85,    85,    87,    86,    88,    86,    89,    89,
+      89,    89,    90,    90,    90,    90,    90,    90,    90,    90,
+      92,    93,    91,    91,    94,    95,    91,    91,    96,    97,
+      91,    91,    98,    98,    99,    99,    99,    99,    99,    99,
+      99,   100,   101,   101,   102,   102,   103,   103,   103,   103,
+     103,   103,   103,   103,   103,   103,   103,   104,   105,   106,
+     106,   107,   106,   108,   108,   108,   108,   108,   108,   108,
+     108,   108,   108,   108,   108,   108,   109,   108,   110,   108,
+     111,   112,   108,   113,   108,   108,   108,   114,   114,   114,
+     114,   114,   115,   114,   114,   114,   114,   114,   114,   114,
+     116,   116,   117,   117,   117,   118,   119,   119,   119,   119,
+     120,   120,   120,   120,   121,   122,   122,   122,   122,   123,
+     124,   125,   125,   125,   125,   125,   125,   125,   126,   126,
+     127,   127,   127,   127,   128,   128,   129,   129,   129,   130,
+     130,   130,   130,   131,   131,   131,   131,   132,   132,   133,
+     133,   134,   134,   134,   134,   134,   135,   135,   135,   136,
+     136,   137,   137,   138,   138,   140,   139,   139,   142,   141,
+     141,   143,   143,   144,   144,   145,   146,   146,   147,   147,
+     147,   147,   147,   148,   148,   148,   148,   149,   150,   149,
+     149,   151,   151,   152,   152,   153,   153,   154,   153,   153,
+     156,   155,   155,   155,   157,   157,   158,   158,   158,   160,
+     161,   159,   163,   164,   162,   165,   165,   166,   166,   166,
+     166,   166,   166,   166,   167,   167,   167,   167,   167,   167,
+     167,   168,   168,   168,   168,   168,   168,   168,   168,   169,
+     169,   170,   170,   171,   171,   173,   172,   172,   172,   174,
+     172,   172,   172,   175,   172,   176,   172,   172,   177,   177,
+     178,   178,   179,   179,   180,   180,   180,   181,   181,   181,
+     181,   181,   181,   182,   182,   183,   183,   183,   184,   184,
+     184,   185,   185,   186,   186,   187,   187,   188,   188,   189,
+     189,   190,   190,   190,   190,   190,   190,   190,   190,   190,
+     190,   191,   192,   192,   192,   193,   193,   194,   195,   196,
+     196,   197,   197,   198,   199,   199,   200,   201,   201,   201,
+     201,   202,   202,   203,   205,   204,   206,   207,   208,   208,
+     209,   210,   210,   211,   211,   211,   212,   211,   211,   211,
+     213,   214,   211,   211,   211,   215,   216,   217,   211,   218,
+     211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
+     211,   211,   219,   221,   220,   222,   222,   222,   222,   223,
+     223,   224,   224,   225,   225,   226,   226,   227,   228,   228,
+     230,   229,   231,   232,   231,   231,   233,   233,   233,   233,
+     234,   234,   235,   235,   235,   235,   235,   237,   236,   238,
+     238,   239,   239,   240,   240,   241
 };
 
-static const short yydefgoto[] = {   690,
-     1,     2,     3,    17,    18,    19,   224,   378,   230,   381,
-   112,   308,   454,    85,   144,   276,    87,    88,    89,    90,
-    91,   396,    92,   261,   260,   258,   462,   259,    93,   145,
-    94,   211,   212,   213,   373,   441,   442,    20,   107,   543,
-   297,    57,   374,   424,   298,    23,    98,   186,    24,   129,
-   117,    44,   113,   118,   430,    45,   377,   216,   217,    26,
-   195,   196,   197,   428,   482,   456,   457,   458,   559,   459,
-   502,   460,   461,   614,   634,   661,   617,   636,   662,   202,
-   121,   407,   122,    27,    28,    29,    30,   238,   240,   245,
-   137,   506,   334,   132,   133,   235,   382,   383,   243,   244,
-   100,   184,   101,   103,   185,   443,   444,   494,   214,   337,
-   393,   394,   395,   371,   249,   372,   547,   548,   549,   569,
-   590,   312,   591,   447,   550,   551,   620,   568,   652,   643,
-   671,   684,   644,   552,   553,   642,   554,   581,   604,   657,
-   658,   659,   682,   281,   282,   299,   414,   300,   301,   302,
-   205,   206,   303,   304,   439,    95
+/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
+static const yytype_uint8 yyr2[] =
+{
+       0,     2,     0,     1,     0,     2,     0,     3,     1,     1,
+       5,     2,     3,     4,     4,     2,     2,     2,     2,     1,
+       0,     0,     7,     4,     0,     0,     7,     4,     0,     0,
+       6,     3,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     0,     1,     1,     3,     1,     2,     2,     2,
+       2,     2,     4,     2,     4,     2,     2,     1,     1,     1,
+       4,     0,     7,     1,     3,     3,     3,     3,     3,     3,
+       3,     3,     3,     3,     3,     3,     0,     4,     0,     4,
+       0,     0,     7,     0,     5,     3,     3,     1,     1,     1,
+       3,     3,     0,     4,     4,     4,     3,     3,     2,     2,
+       1,     2,     0,     1,     2,     3,     1,     1,     2,     2,
+       4,     4,     2,     2,     3,     1,     1,     2,     2,     0,
+       0,     4,     4,     3,     3,     2,     2,     2,     2,     3,
+       0,     2,     2,     2,     2,     3,     0,     2,     2,     1,
+       1,     2,     2,     1,     1,     2,     2,     2,     3,     0,
+       2,     1,     1,     1,     4,     4,     1,     1,     1,     1,
+       3,     1,     3,     0,     4,     0,     6,     3,     0,     6,
+       3,     0,     1,     1,     2,     6,     1,     3,     0,     1,
+       4,     6,     4,     1,     1,     1,     1,     1,     0,     4,
+       1,     0,     2,     1,     3,     3,     2,     0,     4,     1,
+       0,     4,     1,     1,     1,     2,     2,     5,     3,     0,
+       0,     5,     0,     0,     5,     1,     1,     3,     3,     4,
+       3,     3,     3,     1,     3,     4,     4,     3,     3,     3,
+       1,     3,     3,     3,     4,     4,     3,     3,     1,     1,
+       2,     1,     2,     1,     2,     0,     7,     5,     2,     0,
+       7,     5,     2,     0,     8,     0,     7,     2,     0,     1,
+       0,     1,     1,     2,     0,     3,     2,     3,     1,     3,
+       1,     1,     2,     1,     3,     4,     6,     5,     1,     3,
+       1,     1,     3,     2,     2,     0,     1,     1,     2,     0,
+       2,     3,     3,     2,     3,     4,     3,     2,     3,     2,
+       3,     1,     1,     2,     2,     0,     1,     2,     0,     0,
+       1,     1,     2,     3,     1,     2,     1,     2,     6,     5,
+       5,     2,     2,     4,     0,     4,     0,     0,     3,     4,
+       3,     1,     1,     1,     1,     2,     0,     4,     1,     3,
+       0,     0,     7,     5,     2,     0,     0,     0,    12,     0,
+       6,     2,     2,     2,     3,     6,     8,    10,    12,     3,
+       4,     1,     1,     0,     6,     3,     5,     2,     3,     0,
+       1,     0,     1,     0,     1,     1,     3,     4,     1,     3,
+       0,     2,     2,     0,     4,     2,     0,     1,     1,     3,
+       1,     3,     4,     4,     4,     4,     4,     0,     2,     1,
+       2,     1,     3,     1,     3,     1
 };
 
-static const short yypact[] = {    95,
-   110,  2206,  2206,   260,-32768,-32768,-32768,-32768,    40,    40,
-    40,    57,    59,    89,-32768,-32768,-32768,-32768,-32768,    42,
-    99,  2234,    79,-32768,    40,-32768,    87,    93,   108,-32768,
-  2206,-32768,-32768,-32768,    40,    40,    40,  2068,  2002,   125,
--32768,-32768,    42,   147,-32768,    40,  1355,-32768,   257,-32768,
-    42,    79,-32768,    40,-32768,-32768,   696,-32768,-32768,-32768,
--32768,    76,-32768,   124,-32768,   132,-32768,-32768,-32768,-32768,
--32768,-32768,  2068,  2068,   373,-32768,-32768,-32768,  2068,-32768,
--32768,   721,-32768,-32768,  2068,   149,   153,-32768,  2095,  2122,
--32768,  2335,   881,   231,  2068,-32768,   186,   319,-32768,   203,
-   578,   708,   627,   304,-32768,   257,    42,-32768,   194,-32768,
-  1430,   438,    40,-32768,-32768,   257,   177,-32768,    40,   276,
-   398,   417,   188,  1417,   696,-32768,-32768,-32768,-32768,    40,
--32768,   208,   778,-32768,   214,-32768,   468,-32768,-32768,-32768,
--32768,-32768,   223,   269,   288,   312,-32768,   315,  2068,   721,
--32768,   721,-32768,  2068,  2068,   362,-32768,-32768,  2068,  2068,
-  2068,  2068,  2068,  2068,  2068,  2068,  2068,  2068,  2068,  2068,
--32768,-32768,   373,   373,  2068,  2068,-32768,-32768,-32768,-32768,
-   319,  1457,    40,-32768,   426,   760,-32768,-32768,-32768,-32768,
--32768,-32768,-32768,-32768,    50,-32768,   344,-32768,   417,-32768,
--32768,   385,   417,   419,-32768,   611,  1512,-32768,   349,   361,
--32768,   316,    70,-32768,-32768,   405,    40,   545,   323,-32768,
-   257,   257,-32768,   438,    40,-32768,  1539,-32768,-32768,   438,
-    40,-32768,-32768,   428,   370,   198,   953,-32768,    40,-32768,
--32768,   413,   383,-32768,   468,-32768,-32768,-32768,   376,   391,
-  1891,-32768,  2335,   402,   411,  2335,  2335,  2068,   443,  2068,
-  2068,  1564,  1645,  1859,  1078,   747,   838,   838,   356,   356,
--32768,-32768,-32768,-32768,-32768,   432,   153,   412,   463,   485,
--32768,   871,-32768,   434,   319,-32768,  1594,-32768,   760,   445,
-   708,  2149,    54,   448,-32768,-32768,-32768,  1036,-32768,   450,
-   197,-32768,-32768,    81,-32768,-32768,-32768,    39,-32768,-32768,
--32768,   846,-32768,   398,-32768,-32768,   398,-32768,   483,-32768,
--32768,   452,-32768,-32768,-32768,-32768,-32768,-32768,   461,-32768,
-   473,  2068,   373,   480,   383,-32768,   496,-32768,-32768,-32768,
--32768,-32768,   508,  2068,  2258,  1483,-32768,-32768,   426,-32768,
--32768,-32768,   426,-32768,-32768,   493,-32768,-32768,    85,   510,
--32768,-32768,   550,   497,-32768,-32768,  1006,-32768,   585,   288,
--32768,-32768,-32768,   512,   328,-32768,  1291,    39,-32768,-32768,
-    39,   513,-32768,-32768,   513,    40,    40,  2335,-32768,    40,
-   515,   373,   814,   496,-32768,  1111,-32768,  2351,-32768,-32768,
-  2068,-32768,-32768,-32768,   497,    40,   133,   140,    40,-32768,
-    40,   140,    40,   871,-32768,-32768,-32768,-32768,-32768,   257,
--32768,    42,-32768,   692,-32768,-32768,  2335,-32768,-32768,  1291,
--32768,-32768,   430,-32768,-32768,-32768,    40,-32768,   220,   433,
-   641,   518,   520,   894,-32768,-32768,-32768,-32768,-32768,   563,
-   373,  2068,-32768,   564,  2335,   525,   526,-32768,-32768,   326,
-  1231,  2068,   146,   500,   550,-32768,  1621,-32768,-32768,-32768,
-   423,   497,-32768,-32768,-32768,   237,   250,   112,   692,-32768,
--32768,  1111,-32768,-32768,  2068,    49,-32768,-32768,   373,-32768,
--32768,-32768,-32768,   541,-32768,-32768,-32768,-32768,  1757,-32768,
-  2245,  1111,-32768,-32768,  1171,-32768,  1346,-32768,-32768,  2351,
--32768,   504,   504,-32768,  1676,-32768,   537,-32768,-32768,   544,
-  1778,  2068,-32768,-32768,-32768,  1837,   588,   570,-32768,-32768,
-   572,   576,  2068,   598,   566,   596,  2015,   193,   633,-32768,
-   638,   601,-32768,   602,  2238,-32768,   664,   974,    66,-32768,
--32768,-32768,-32768,-32768,  1948,  2068,-32768,   604,  1346,-32768,
--32768,-32768,-32768,-32768,-32768,  1778,  2068,   624,-32768,  2068,
-  2068,  1701,-32768,-32768,-32768,-32768,   615,  2068,   616,-32768,
-   629,    40,-32768,-32768,   257,-32768,    42,  1054,-32768,-32768,
--32768,-32768,  2068,-32768,  2290,-32768,-32768,-32768,   618,  2068,
-   714,-32768,   687,   659,   662,  2068,-32768,-32768,   666,-32768,
-  2068,-32768,   271,-32768,   266,   284,-32768,   158,-32768,-32768,
-  1837,   663,-32768,-32768,   672,-32768,-32768,-32768,-32768,  2308,
--32768,    24,-32768,   438,-32768,   438,-32768,-32768,-32768,   674,
--32768,-32768,  2068,-32768,-32768,   744,   679,-32768,-32768,-32768,
--32768,-32768,-32768,   681,-32768,   700,    43,   684,-32768,-32768,
-   288,   288,-32768,-32768,  2068,   744,   691,   744,-32768,-32768,
-  2068,   702,    61,-32768,-32768,   705,-32768,   419,   706,-32768,
-   231,   176,-32768,-32768,   709,   419,-32768,-32768,   231,   787,
-   789,-32768
+/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
+   Performed when YYTABLE doesn't specify something else to do.  Zero
+   means the default is an error.  */
+static const yytype_uint16 yydefact[] =
+{
+       4,     0,     6,     0,     1,     0,     0,   153,   144,   151,
+     143,   243,   239,   241,     0,     0,     0,   405,    19,     5,
+       9,     8,     0,   119,   119,   139,   130,   140,   173,     0,
+       0,     0,   152,     0,     7,    17,    18,   244,   240,   242,
+       0,     0,     0,   238,   289,     0,     0,   161,   120,     0,
+      16,     0,    15,     0,   141,   130,   142,   146,   145,   128,
+     174,    32,    33,   264,   248,   264,   252,   255,   257,    11,
+      87,    88,   100,    57,    58,     0,     0,     0,    34,    36,
+      35,     0,    38,    37,     0,    39,    40,     0,     0,    41,
+      59,     0,     0,    63,    44,    46,    89,     0,   287,     0,
+     285,   149,     0,   285,   178,     0,     0,    12,     0,     0,
+      31,     0,   397,     0,     0,   171,   223,   289,     0,     0,
+     159,   120,     0,   215,   216,     0,     0,   129,   132,   156,
+     157,   131,   133,   158,     0,     0,   245,     0,   249,     0,
+     253,    55,    56,    50,    47,     0,     0,     0,     0,    49,
+       0,     0,     0,    51,     0,    53,     0,     0,    80,    78,
+      76,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,    99,    98,     0,    42,     0,     0,   101,
+      48,   154,   289,   380,     0,   120,   283,   286,   147,   155,
+     288,   149,   284,   184,   185,   186,   183,     0,   176,   179,
+     290,   233,   232,   162,   163,   237,     0,   231,     0,     0,
+     236,     0,     0,    29,     0,   326,   107,   327,   170,   172,
+       0,     0,    14,     0,     0,    23,     0,   171,   397,     0,
+      13,    27,     0,   171,   271,   266,   119,   263,   119,     0,
+     264,   171,   264,   280,   281,   260,   278,     0,    91,    90,
+     316,   308,     0,     0,    10,    45,     0,     0,    85,    86,
+       0,     0,     0,     0,    74,    75,    73,    72,    71,    70,
+      69,    64,    65,    66,    67,    68,    96,     0,    43,     0,
+      97,   293,     0,   297,     0,   299,     0,     0,   380,     0,
+     150,   148,     0,   178,    42,     0,     0,   401,   387,   119,
+     119,   399,     0,   388,   390,   398,     0,   234,   235,   307,
+       0,   109,   104,   108,     0,   168,   221,   217,   160,   222,
+      21,   167,   218,   220,     0,    25,   247,   326,   265,   326,
+     272,     0,   251,     0,     0,   261,     0,   260,   317,   309,
+      93,    61,    60,    52,    54,     0,     0,    79,    77,    94,
+      95,   292,   291,   381,   298,   300,   294,   296,     0,   175,
+     177,    87,     0,   164,   385,   285,   285,   382,   383,     0,
+     400,     0,     0,    30,   314,   105,   119,   119,   136,     0,
+       0,   165,   219,     0,   267,   273,   327,   269,   171,   171,
+     282,   279,   171,     0,     0,     0,   310,   311,     0,    81,
+      84,   295,   180,     0,   182,   230,   289,   380,   120,   171,
+     171,   171,   289,   120,   171,   171,     0,   389,   391,   402,
+     315,   112,     0,   113,     0,   136,   134,   190,   188,   187,
+     169,    22,     0,    26,   326,     0,   246,   250,   256,   171,
+     403,     0,     0,     0,   326,     0,     0,   116,   327,   302,
+     312,   203,    87,     0,     0,   200,     0,   202,     0,   258,
+     193,   199,     0,     0,     0,     0,   293,     0,   397,     0,
+     392,   393,   394,   293,     0,   395,   396,   384,     0,     0,
+     163,   135,   138,   137,     0,   166,   274,     0,   171,   254,
+     313,     0,   319,   118,   117,   306,     0,   320,   304,   327,
+     303,     0,   206,     0,     0,   197,    62,     0,   192,     0,
+     205,   196,    82,   181,   228,   229,   224,     0,   227,     0,
+     110,   111,     0,   171,     0,   275,   404,   318,     0,   153,
+       0,   340,   324,     0,     0,     0,     0,     0,     0,     0,
+       0,   369,   361,     0,     0,   114,   119,   119,   333,   338,
+       0,     0,   330,   331,   334,   362,   332,     0,     0,   208,
+       0,     0,   194,   195,   225,   226,   189,   277,   171,     0,
+       0,   326,   371,     0,     0,   367,   351,   352,   353,     0,
+       0,     0,   370,     0,   171,   335,   125,     0,   126,     0,
+       0,   322,   327,   321,   344,     0,   127,     0,   201,   198,
+     276,     0,     0,     0,   372,    46,     0,     0,     0,   365,
+     354,     0,   359,     0,   368,     0,   123,   209,     0,   124,
+     212,   339,   326,     0,     0,   207,   323,     0,   325,   363,
+     345,   349,     0,   360,     0,   121,     0,   122,     0,   337,
+     328,   326,     0,   341,   326,   371,   326,   366,   373,     0,
+     210,   213,   329,   343,   326,   364,     0,   350,     0,     0,
+     374,   375,   355,     0,     0,   342,   346,     0,   373,     0,
+       0,   211,   214,   371,     0,     0,   356,   376,     0,   377,
+       0,     0,   347,   378,     0,   357,   326,     0,     0,   348,
+     358,   379
 };
 
-static const short yypgoto[] = {-32768,
--32768,-32768,-32768,   103,-32768,-32768,-32768,-32768,-32768,-32768,
--32768,-32768,   -24,-32768,   -38,   516,  -110,   477,-32768,-32768,
-   -21,-32768,   255,-32768,-32768,-32768,-32768,-32768,   232,-32768,
-  -194,  -199,   591,-32768,-32768,   363,-32768,    -3,   -60,   252,
-    10,   757,-32768,   389,    19,   -14,   -90,   635,    27,  -169,
-  -390,   -49,  -114,   -68,-32768,-32768,-32768,  -171,    26,    68,
--32768,   522,-32768,   386,-32768,  -347,-32768,   325,-32768,  -405,
--32768,-32768,   406,-32768,-32768,-32768,-32768,-32768,-32768,   -42,
-   -77,   105,    -9,-32768,-32768,-32768,   -43,-32768,-32768,-32768,
--32768,-32768,   511,   -37,-32768,   612,   538,   435,   625,   546,
-   -35,   -92,   -72,   -91,  -105,   429,-32768,-32768,  -185,-32768,
--32768,-32768,   486,    16,-32768,  -125,-32768,-32768,-32768,-32768,
-   -57,  -361,  -461,   456,-32768,   261,-32768,-32768,-32768,-32768,
--32768,-32768,-32768,-32768,-32768,-32768,   283,-32768,  -503,   226,
--32768,   238,-32768,   621,-32768,  -250,-32768,-32768,-32768,   543,
-  -193,-32768,-32768,-32768,-32768,    13
+/* YYDEFGOTO[NTERM-NUM].  */
+static const yytype_int16 yydefgoto[] =
+{
+      -1,     1,     2,     3,     5,    19,    20,    21,   226,   380,
+     232,   383,   114,   310,   456,    87,   146,   277,    89,    90,
+      91,    92,    93,   398,    94,   263,   262,   260,   464,   261,
+      95,   147,    96,   213,   214,   215,   375,   443,   444,    22,
+     109,   545,   299,    59,   376,   426,   300,    25,   100,   188,
+      26,   131,   119,    46,   115,   120,   432,    47,   379,   218,
+     219,    28,   197,   198,   199,   430,   484,   458,   459,   460,
+     561,   461,   504,   462,   463,   616,   636,   663,   619,   638,
+     664,   204,   123,   409,   124,    29,    30,    31,    32,   240,
+     242,   247,   139,   508,   336,   134,   135,   237,   384,   385,
+     245,   246,   102,   186,   103,   105,   187,   445,   446,   496,
+     216,   339,   395,   396,   397,   373,   251,   374,   549,   550,
+     551,   571,   592,   314,   593,   449,   552,   553,   622,   570,
+     654,   645,   673,   686,   646,   554,   555,   644,   556,   583,
+     606,   659,   660,   661,   684,   283,   284,   301,   416,   302,
+     303,   304,   207,   208,   305,   306,   441,    97
 };
 
+/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
+   STATE-NUM.  */
+#define YYPACT_NINF -571
+static const yytype_int16 yypact[] =
+{
+      79,    90,   121,  2328,  -571,  2328,   252,  -571,  -571,  -571,
+    -571,   136,   136,   136,   154,   164,   176,  -571,  -571,  -571,
+    -571,  -571,   382,   117,  1173,   101,  -571,   136,  -571,    51,
+      63,    66,  -571,  2328,  -571,  -571,  -571,   136,   136,   136,
+    2154,  2088,   184,  -571,  -571,   382,   107,  -571,   136,  1346,
+    -571,   376,  -571,   382,   101,  -571,   136,  -571,  -571,   687,
+    -571,  -571,  -571,  -571,    96,  -571,   118,  -571,   145,  -571,
+    -571,  -571,  -571,  -571,  -571,  2154,  2154,   357,  -571,  -571,
+    -571,  2154,  -571,  -571,  1109,  -571,  -571,  2154,   168,   178,
+    -571,  2206,  2239,  -571,  2438,   468,   263,  2154,  -571,   219,
+     232,  -571,   229,  1722,   589,   324,   216,  -571,   376,   382,
+    -571,   254,  -571,  1448,   312,   136,  -571,  -571,   376,   120,
+    -571,   136,  1441,   383,   385,   199,  1408,   687,  -571,  -571,
+    -571,  -571,   136,  -571,   261,  1027,  -571,   270,  -571,   283,
+    -571,  -571,  -571,  -571,  -571,   279,   290,   302,   317,  -571,
+     318,  2154,  1109,  -571,  1109,  -571,  2154,  2154,   359,  -571,
+    -571,  2154,  2154,  2154,  2154,  2154,  2154,  2154,  2154,  2154,
+    2154,  2154,  2154,  -571,  -571,   357,  2154,  2154,   357,  -571,
+    -571,  -571,  -571,   232,  1501,   136,  -571,   391,   504,  -571,
+    -571,  -571,  -571,  -571,  -571,  -571,  -571,    13,  -571,   341,
+    -571,   385,  -571,  -571,   404,   385,   415,  -571,  1563,  1554,
+    -571,   350,   361,  -571,   397,    61,  -571,  -571,   411,   136,
+     465,   235,  -571,   376,   376,  -571,   312,   136,  -571,  1607,
+    -571,  -571,   312,   136,  -571,  -571,   386,   375,   358,   470,
+    -571,   136,  -571,  -571,   419,   381,  -571,   283,  -571,  -571,
+    -571,   392,   402,  1979,  -571,  2438,   431,   433,  2438,  2438,
+    2154,   447,  2154,  2154,  2061,   919,   896,   759,   839,   550,
+     550,   368,   368,  -571,  -571,  -571,  -571,   437,   178,   390,
+    -571,   398,   262,  -571,  1616,  -571,   408,   232,  -571,  1660,
+    -571,   504,   459,   589,  2272,    49,   473,  -571,  -571,  -571,
+    1879,  -571,   478,   202,  -571,  -571,    46,  -571,  -571,  -571,
+      32,  -571,  -571,  -571,   717,  -571,   383,  -571,  -571,   383,
+    -571,   469,  -571,  -571,   477,  -571,  -571,  -571,  -571,  -571,
+    -571,   485,  -571,   487,  2154,   357,   488,   381,  -571,   455,
+    -571,  -571,  -571,  -571,  -571,   529,  2154,  1870,  1950,  -571,
+    -571,   391,  -571,  -571,  -571,   391,  -571,  -571,   486,  -571,
+    -571,   110,   495,  -571,  -571,   205,   238,  -571,  -571,  1798,
+    -571,   569,   302,  -571,  -571,  -571,   497,   409,  -571,  1283,
+      32,  -571,  -571,    32,   494,  -571,  -571,   494,   136,   136,
+    2438,  -571,   136,   498,   357,   735,   455,  -571,   871,  -571,
+    1790,  -571,  -571,  2154,  -571,  -571,  -571,   238,   136,   124,
+     160,   136,  -571,   136,   160,   136,  1616,  -571,  -571,  -571,
+    -571,  -571,   376,  -571,   382,  -571,   329,  -571,  -571,  2438,
+    -571,  -571,  1283,  -571,  -571,   195,  -571,  -571,  -571,   136,
+    -571,   225,   403,   655,   500,   501,   815,  -571,  -571,  -571,
+    -571,  -571,   548,   357,  2154,  -571,   549,  2438,   526,   525,
+    -571,  -571,   169,  1224,  2154,   111,   165,   205,  -571,  1713,
+    -571,  -571,  -571,   207,   238,  -571,  -571,  -571,   269,   276,
+      33,   329,  -571,  -571,   871,  -571,  -571,  2154,   143,  -571,
+    -571,   357,  -571,  -571,  -571,  -571,   547,  -571,  -571,  -571,
+    -571,  1847,  -571,  2352,   871,  -571,  -571,  1165,  -571,  1337,
+    -571,  -571,  1790,  -571,   435,   435,  -571,  1766,  -571,   543,
+    -571,  -571,   551,  2397,  2154,  -571,  -571,  -571,  1927,   590,
+     573,  -571,  -571,   574,   576,  2154,   597,   577,   578,  2121,
+      60,   650,  -571,   633,   610,  -571,   613,  1668,  -571,   675,
+     971,    58,  -571,  -571,  -571,  -571,  -571,  2035,  2154,  -571,
+     618,  1337,  -571,  -571,  -571,  -571,  -571,  -571,  2397,  2154,
+     639,  -571,  2154,  2154,   601,  -571,  -571,  -571,  -571,   625,
+    2154,   629,  -571,   649,   136,  -571,  -571,   376,  -571,   382,
+    1053,  -571,  -571,  -571,  -571,  2154,  -571,  2371,  -571,  -571,
+    -571,   635,  2154,   695,  -571,   531,   641,   640,  2154,  -571,
+    -571,   642,  -571,  2154,  -571,   286,  -571,    53,   310,  -571,
+     744,  -571,  -571,  1927,   644,  -571,  -571,   651,  -571,  -571,
+    -571,  -571,  2420,  -571,    39,  -571,   312,  -571,   312,  -571,
+    -571,  -571,   648,  -571,  -571,  2154,  -571,  -571,   719,   674,
+    -571,  -571,  -571,  -571,  -571,  -571,   690,  -571,   712,    43,
+     691,  -571,  -571,   302,   302,  -571,  -571,  2154,   719,   696,
+     719,  -571,  -571,  2154,   700,    48,  -571,  -571,   701,  -571,
+     415,   703,  -571,   263,   135,  -571,  -571,   704,   415,  -571,
+    -571,   263
+};
 
-#define	YYLAST		2403
-
-
-static const short yytable[] = {    86,
-    97,   123,    62,    64,    66,   225,   120,    52,   190,   293,
-    47,    21,    21,   131,    31,    31,   288,    49,    51,   250,
-    22,    22,   433,   218,   318,   135,   309,    25,    25,   476,
-   323,   351,   320,   104,    35,    36,    37,   201,   219,   370,
-    21,   124,   234,    31,    41,    46,   146,    54,    53,    22,
-   141,   139,   140,   319,   215,   509,    25,   142,   222,   324,
-   236,   646,   177,   147,   277,    99,   592,   330,    46,    14,
-  -102,    14,   209,   178,   119,   280,    46,   194,    14,   310,
-   666,   131,   130,    55,   499,    56,   522,   225,   279,    59,
-    60,    42,    58,   199,    -1,    59,    60,   203,   678,   647,
-    43,   561,    58,    58,    58,    32,   104,   601,    99,    -2,
-    59,    60,   242,    58,   254,    38,   255,    39,   667,   288,
-   248,    58,   285,   183,   593,   290,   183,   189,    46,   361,
-   291,   119,    46,    67,   520,   526,   679,   278,   109,   654,
-   314,   119,   131,   284,   317,   237,   234,    40,   274,   275,
-   130,  -102,   316,   597,   558,   215,   368,   134,   637,    99,
-   400,   369,    14,   475,   236,   401,   215,   676,    61,    14,
-   110,   111,   215,   349,    63,    48,    99,   650,    99,   353,
-   653,   277,   655,   102,   109,   142,    58,  -162,   322,    65,
-   663,   466,   467,  -162,   613,    59,    60,    58,   110,   111,
-   329,     5,   331,     7,   188,   136,   183,   445,   199,     9,
-    10,    11,   203,   138,   434,   435,   110,   111,   436,   343,
-   242,   511,   687,   105,   148,    13,   149,   106,   621,   340,
-   325,    25,   327,   149,  -162,   468,   469,   470,  -162,   177,
-   473,   474,   578,   119,   418,   131,   119,   119,   356,   237,
-    58,   685,   204,   220,   481,   491,   686,   221,   496,    41,
-   114,   179,   189,    99,   228,   487,   194,   384,   106,   384,
-   409,   413,   514,   366,  -269,  -269,   223,   367,   187,   -19,
-   -19,   -19,   -19,    52,    58,   231,    14,   -19,   -19,   -19,
-   463,   239,   109,   363,   364,  -162,   488,   375,   246,   280,
-   489,  -162,   109,   -19,   183,  -162,   115,    25,   242,   481,
-   183,  -162,   464,   518,   523,   116,   210,   221,   471,  -105,
-  -105,  -105,  -105,    54,    53,  -105,   519,  -105,  -105,  -105,
-   106,     5,    55,     7,    56,   446,    33,    34,   376,     9,
-    10,    11,  -162,  -105,   247,   465,  -162,   633,    14,   565,
-   472,   221,  -162,   408,   412,    13,  -162,   -19,   349,   353,
-   635,   507,   110,   111,   106,   349,   353,   438,   180,   248,
-   420,   422,   477,   546,   384,    59,    60,   181,   182,   200,
-   131,   226,   227,   451,   446,   452,   497,   251,   406,   411,
-   486,   252,    25,   429,   598,   104,   431,  -105,   315,   -82,
-   546,   423,   292,   253,   421,   168,   169,   170,   256,   257,
-   612,   109,   478,   262,   263,   264,   265,   266,   267,   268,
-   269,   270,   271,   272,   273,    41,   500,    70,   517,   198,
-   411,   306,    41,   114,   648,   131,   649,   307,   210,    25,
-   313,  -325,  -325,  -325,  -325,   119,   326,    46,   332,  -325,
-  -325,  -325,    14,   336,   199,   203,   226,   227,   119,    14,
-   542,   199,   203,   333,   524,  -325,   338,   485,   241,   198,
-    59,    60,   410,    58,   541,   110,   111,   341,    58,   115,
-   344,   405,   182,   681,   286,   287,   342,   542,   116,   406,
-   406,   689,    14,   142,   348,   546,   411,   411,   577,    41,
-   225,   541,    41,   403,  -267,  -267,   198,   347,   544,   307,
-   490,   555,   180,   579,   345,   346,   352,   545,   379,  -101,
-   357,   181,   182,   362,    25,   365,    14,   392,   599,    14,
-    52,   602,   605,   178,   380,   669,   670,   616,   386,   609,
-   585,   587,   615,   286,   287,   397,   410,    41,   114,   404,
-   387,   198,    41,   403,   622,   405,   182,   390,   405,   182,
-   350,   625,   466,   467,   544,   151,   153,   555,   512,   513,
-    54,    53,   632,   545,    14,   399,   215,   618,   215,    14,
-    25,     5,   542,     7,   188,   402,   388,   417,   419,     9,
-    10,    11,   437,   432,   115,  -304,   541,   495,   398,   404,
-   -31,   503,   504,   116,   602,    13,   505,    14,   405,   182,
-   119,   294,    46,   295,     5,     6,     7,     8,   525,   563,
-   296,   564,     9,    10,    11,   -32,   672,   180,   567,    41,
-   570,   427,   602,   198,   571,   573,   181,   182,    13,   580,
-    14,   210,   574,  -114,  -114,  -114,  -114,  -114,  -114,  -114,
-   455,  -114,  -114,  -114,  -114,  -114,    14,  -114,  -114,  -114,
-  -114,  -114,  -114,  -114,  -114,  -114,  -114,  -114,  -114,  -114,
-  -114,  -114,   575,  -114,  -114,   582,    42,   583,   584,   588,
-  -114,   596,   600,  -114,   427,    43,  -385,   611,  -114,  -114,
-  -114,   608,   610,   624,  -114,  -114,   480,   127,   128,  -114,
-   126,   127,   128,     9,    10,    11,   501,     9,    10,    11,
-    59,    60,   191,   192,   193,   455,   510,  -114,  -114,  -114,
-  -114,   143,  -114,    68,     5,    14,     7,    96,    69,    70,
-   626,    71,     9,    10,    11,   628,   455,   629,   640,   521,
-   171,   172,   631,   173,   174,   175,   176,   641,    13,    72,
-   651,    15,   656,    73,    74,   660,   455,   664,   665,   455,
-    75,   455,   627,    76,   668,   127,   128,   674,    77,    78,
-    79,     9,    10,    11,    80,    81,   566,   677,   232,    82,
-   680,     5,   683,     7,    96,   688,   691,   572,   692,     9,
-    10,    11,   164,   165,   166,   167,   168,   169,   170,    83,
-    84,   603,   -91,   311,   492,    13,   594,   360,    15,   125,
-   595,   479,   358,   455,   440,   483,  -325,  -325,  -325,  -325,
-  -325,  -325,  -325,   289,  -325,  -325,  -325,  -325,  -325,   560,
-  -325,  -325,  -325,  -325,  -325,  -325,  -325,  -325,  -325,  -325,
-  -325,  -325,  -325,  -325,  -325,   391,  -325,  -325,   328,     5,
-     6,     7,     8,  -325,   233,  -261,  -325,     9,    10,    11,
-   630,  -325,  -325,  -325,   385,   508,   484,  -325,  -325,   335,
-   493,   294,  -325,    13,     5,     6,     7,     8,   389,   448,
-   296,   638,     9,    10,    11,   166,   167,   168,   169,   170,
-  -325,   673,  -325,  -325,   210,  -325,  -325,  -325,    13,   498,
-    14,  -325,  -325,   639,  -325,   675,   354,     0,  -325,   416,
-  -325,  -325,  -325,  -325,  -325,  -325,  -325,  -325,  -325,  -325,
-  -325,     0,  -325,     0,  -325,     0,  -325,  -325,     0,     0,
-     0,     0,     0,  -325,   171,   172,  -325,   173,   174,   175,
-   176,  -325,  -325,  -325,     0,     0,  -385,  -325,  -325,     0,
-     0,     0,  -325,   232,     0,     0,     5,     0,     7,    96,
-     0,     0,     0,     0,     9,    10,    11,     0,     0,     0,
-  -325,  -300,  -325,  -325,   589,  -325,  -325,  -325,     0,     0,
-    13,  -325,  -325,    15,  -325,     0,     0,     0,  -325,     0,
-  -325,  -325,  -325,  -325,  -325,  -325,  -325,  -325,  -325,  -325,
-  -325,     0,  -325,     0,  -325,     0,  -325,  -325,     0,     5,
-     6,     7,     8,  -325,     0,   415,  -325,     9,    10,    11,
-     0,  -325,  -325,  -325,     0,     0,     0,  -325,  -325,     0,
-     0,     0,  -325,    13,     0,    14,     0,     0,     0,     5,
-     6,     7,     8,     0,     0,     0,     0,     9,    10,    11,
-  -325,     0,  -325,  -325,   619,  -325,  -335,  -335,     0,     0,
-     0,  -335,  -335,    13,  -335,    14,     0,     0,  -335,     0,
-  -335,  -335,  -335,  -335,  -335,  -335,  -335,  -335,  -335,  -335,
-  -335,     0,  -335,     0,  -335,     0,  -335,  -335,     0,     0,
-     0,     0,     0,  -335,     0,     0,  -335,     0,     0,     0,
-     0,  -335,  -335,  -335,     0,     0,     0,  -335,  -335,     0,
-     0,   449,  -335,   450,    60,     0,     0,     0,    69,    70,
-     0,    71,   163,   164,   165,   166,   167,   168,   169,   170,
-  -335,     0,  -335,  -335,     0,  -335,     0,     0,     0,    72,
-     0,    15,     0,    73,    74,     0,     0,     0,     0,     0,
-    75,     0,     0,    76,     0,     0,     0,     0,    77,    78,
-    79,     0,     0,     0,    80,    81,     0,     0,   451,    82,
-   452,   449,     0,   450,    60,     0,     0,     0,    69,    70,
-     0,    71,     0,     0,     0,     0,     0,     0,  -190,    83,
-    84,     0,   453,     0,     0,     0,     0,     0,     0,    72,
-     0,    15,     0,    73,    74,     0,     0,     0,     0,     0,
-    75,     0,     0,    76,     0,     0,     0,     0,    77,    78,
-    79,     0,     0,     0,    80,    81,     0,     0,   451,    82,
-   452,   449,     0,    68,     0,     0,     0,     0,    69,    70,
-     0,    71,     0,     0,     0,     0,     0,     0,  -258,    83,
-    84,     0,   453,     0,     0,     0,     0,     0,     0,    72,
-     0,    15,     0,    73,    74,     0,  -203,     0,     0,     0,
-    75,     0,     0,    76,     0,     0,     0,     0,    77,    78,
-    79,     0,     0,     0,    80,    81,     0,     0,  -203,    82,
-  -203,   425,     0,    68,     0,     0,     0,     0,    69,    70,
-     0,    71,     0,     0,     0,     0,     0,     0,     0,    83,
-    84,     0,   453,     0,     0,     0,     0,     0,     0,    72,
-     0,    15,     0,    73,    74,     0,     0,     0,     0,     0,
-    75,     0,     0,    76,     0,     0,     0,     0,    77,    78,
-    79,     0,     0,     0,    80,    81,   449,     0,    68,    82,
-     0,     0,     0,    69,    70,   108,    71,     0,   -27,   -27,
-   -27,   -27,     0,     0,     0,     0,   -27,   -27,   -27,    83,
-    84,     0,   426,     0,    72,     0,    15,     0,    73,    74,
-     0,   109,   -27,     0,  -162,    75,     0,     0,    76,     0,
-  -162,     0,     0,    77,    78,    79,     0,     0,     0,    80,
-    81,     0,     0,     0,    82,     0,     0,     0,     0,     0,
-     0,     0,     0,   110,   111,     0,     0,   229,     0,     0,
-   -23,   -23,   -23,   -23,    83,    84,     0,   453,   -23,   -23,
-   -23,  -162,    68,     0,     0,  -162,   -27,    69,    70,     0,
-    71,     0,     0,   109,   -23,     0,  -162,     0,     0,     0,
-     0,     0,  -162,     0,     0,     0,     0,     0,    72,    68,
-    15,     0,    73,    74,    69,    70,     0,    71,     0,    75,
-     0,     0,    76,     0,     0,   110,   111,    77,    78,   207,
-     0,     0,     0,    80,    81,    72,     0,    15,    82,    73,
-    74,     0,     0,  -162,     0,     0,    75,  -162,   -23,    76,
-     0,     0,     0,     0,    77,    78,    79,     0,    83,    84,
-    80,    81,   208,     0,    68,    82,     0,     0,     0,    69,
-    70,     0,    71,   159,   160,   161,   162,   163,   164,   165,
-   166,   167,   168,   169,   170,    83,    84,     0,     0,   283,
-    72,    68,    15,     0,    73,    74,    69,    70,     0,    71,
-     0,    75,     0,     0,    76,     0,     0,     0,     0,    77,
-    78,    79,     0,     0,     0,    80,    81,    72,     0,    15,
-    82,    73,    74,     0,     0,     0,     0,     0,    75,     0,
-     0,    76,     0,     0,     0,     0,    77,    78,    79,     0,
-    83,    84,    80,    81,   305,     0,    68,    82,     0,     0,
-     0,    69,    70,     0,    71,   160,   161,   162,   163,   164,
-   165,   166,   167,   168,   169,   170,     0,    83,    84,     0,
-     0,   321,    72,    68,    15,     0,    73,    74,    69,    70,
-     0,    71,     0,    75,     0,     0,    76,     0,     0,     0,
-     0,    77,    78,    79,     0,     0,     0,    80,    81,    72,
-     0,    15,    82,    73,    74,     0,     0,     0,     0,     0,
-    75,     0,     0,    76,     0,     0,     0,     0,    77,    78,
-   515,     0,    83,    84,    80,    81,   355,     0,    68,    82,
-     0,     0,     0,    69,    70,     0,    71,   161,   162,   163,
-   164,   165,   166,   167,   168,   169,   170,     0,     0,    83,
-    84,     0,     0,   516,    72,     0,    15,     0,    73,    74,
-   606,     0,     0,     0,     0,    75,     0,     0,    76,     0,
-     0,     0,     0,    77,    78,    79,     0,     0,     0,    80,
-    81,     0,     0,     0,    82,   154,   155,   156,   607,   157,
-   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
-   168,   169,   170,     0,    83,    84,     0,     0,   562,   450,
-   527,     6,     7,     8,    69,    70,     0,    71,     9,    10,
-    11,   528,     0,   529,   530,   531,   532,   533,   534,   535,
-   536,   537,   538,   539,    13,    72,    14,    15,     0,    73,
-    74,     0,     0,     0,     0,     0,    75,     0,     0,    76,
-     0,     0,     0,     0,    77,    78,    79,    14,     0,     0,
-    80,    81,   154,   155,   156,    82,   157,   158,   159,   160,
-   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
-     0,     0,     0,   540,     0,    83,    84,     0,   248,   450,
-    60,     0,     0,     0,    69,    70,     0,    71,     0,     0,
-     0,   528,     0,   529,   530,   531,   532,   533,   534,   535,
-   536,   537,   538,   539,     0,    72,     0,    15,     0,    73,
-    74,     0,     0,     0,     0,     0,    75,     0,     0,    76,
-     0,     0,     0,     0,    77,    78,    79,     0,     0,     0,
-    80,    81,     0,    68,     0,    82,     0,     0,    69,    70,
-     0,    71,   162,   163,   164,   165,   166,   167,   168,   169,
-   170,     0,     0,   540,     0,    83,    84,     0,   248,    72,
-     0,    15,     0,    73,    74,     0,     0,     0,     0,     0,
-    75,     0,     0,    76,     0,     0,     0,     0,    77,    78,
-    79,     0,     0,     0,    80,    81,     0,     0,     0,    82,
-    68,     5,     6,     7,     8,    69,    70,     0,    71,     9,
-    10,    11,     0,     0,     0,     0,     0,     0,     0,    83,
-    84,     0,   339,     0,     0,    13,    72,    14,    15,     0,
-    73,    74,     0,     0,     0,     0,     0,    75,     0,     0,
-    76,     0,     0,     0,     0,    77,    78,    79,     0,     0,
-     0,    80,    81,     0,    68,     5,    82,     7,    96,    69,
-    70,     0,    71,     9,    10,    11,     0,    68,     0,     0,
-     0,     0,    69,    70,     0,    71,    83,    84,     0,    13,
-    72,     0,    15,     0,    73,    74,     0,     0,     0,     0,
-     0,    75,     0,    72,    76,    15,     0,    73,    74,    77,
-    78,    79,     0,     0,    75,    80,    81,    76,     0,     0,
-    82,     0,    77,    78,    79,     0,     0,     0,    80,    81,
-    68,     0,     0,    82,     0,    69,    70,     0,    71,     0,
-    83,    84,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,   576,     0,    83,    84,     0,    72,    68,    15,     0,
-    73,    74,    69,    70,     0,    71,     0,    75,     0,     0,
-    76,     0,     0,     0,     0,    77,    78,    79,     0,     0,
-     0,    80,    81,    72,    68,    15,    82,    73,    74,    69,
-    70,     0,    71,     0,    75,     0,     0,    76,     0,     0,
-     0,     0,    77,    78,    79,     0,    83,    84,    80,    81,
-    72,   359,    15,   150,    73,    74,    69,    70,     0,    71,
-     0,    75,     0,     0,    76,     0,     0,     0,     0,    77,
-    78,    79,     0,    83,    84,    80,    81,    72,     0,    15,
-   152,    73,    74,     0,     0,     0,     0,     0,    75,     0,
-     0,    76,     0,     0,     0,     0,    77,    78,    79,     0,
-    83,    84,    80,    81,     0,     0,     4,    82,  -118,     5,
-     6,     7,     8,     0,     0,     0,     0,     9,    10,    11,
-     0,     0,     0,     0,     0,     0,     0,    83,    84,     0,
-     0,     0,    12,    13,     0,    14,    15,     5,     6,     7,
-     8,     5,     6,     7,     8,     9,    10,    11,     0,     9,
-    10,    11,     0,     0,   556,  -118,     0,     0,     0,     0,
-     0,    13,     0,    14,  -118,    13,     0,    14,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,   154,
-   155,   156,    16,   157,   158,   159,   160,   161,   162,   163,
-   164,   165,   166,   167,   168,   169,   170,   158,   159,   160,
-   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
-    50,     0,     0,     0,   586,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,   154,   155,   156,   557,   157,   158,
-   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
-   169,   170,   154,   155,   156,   645,   157,   158,   159,   160,
-   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,   154,
-   155,   156,   623,   157,   158,   159,   160,   161,   162,   163,
-   164,   165,   166,   167,   168,   169,   170,   156,     0,   157,
-   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
-   168,   169,   170
+/* YYPGOTO[NTERM-NUM].  */
+static const yytype_int16 yypgoto[] =
+{
+    -571,  -571,  -571,  -571,  -571,    67,  -571,  -571,  -571,  -571,
+    -571,  -571,  -571,  -571,   -26,  -571,   -40,   493,  -155,   428,
+    -571,  -571,    20,  -571,   452,  -571,  -571,  -571,  -571,  -571,
+     210,  -571,  -188,  -183,   575,  -571,  -571,   347,  -571,     0,
+     -80,   237,     4,   737,  -571,   370,     7,   -11,   -83,   605,
+       1,  -149,  -391,   -51,  -111,   -76,  -571,  -571,  -571,   142,
+      23,   137,  -571,   506,  -571,   365,  -571,  -364,  -571,   293,
+    -571,  -410,  -571,  -571,   339,  -571,  -571,  -571,  -571,  -571,
+    -571,   -45,   -53,    92,    -7,  -571,  -571,  -571,   -30,  -571,
+    -571,  -571,  -571,  -571,   476,   -35,  -571,   581,   499,   388,
+     580,   508,    25,   -95,   -78,   -98,  -122,   401,  -571,  -571,
+    -192,  -571,  -571,  -571,   451,  -102,  -571,  -120,  -571,  -571,
+    -571,  -571,   -97,  -336,  -484,   405,  -571,   206,  -571,  -571,
+    -571,  -571,  -571,  -571,  -571,  -571,  -571,  -571,   230,  -571,
+    -570,   186,  -571,   182,  -571,   568,  -571,  -236,  -571,  -571,
+    -571,   490,  -208,  -571,  -571,  -571,  -571,    11
 };
 
-static const short yycheck[] = {    38,
-    39,    51,    27,    28,    29,   120,    49,    22,   101,   204,
-    20,     2,     3,    57,     2,     3,   186,    21,    22,   145,
-     2,     3,   384,   115,   224,    63,   212,     2,     3,   420,
-   230,   282,   226,    43,     9,    10,    11,   106,   116,     1,
-    31,    51,   133,    31,     3,    20,    82,    22,    22,    31,
-    75,    73,    74,   225,   112,   461,    31,    79,   119,   231,
-   133,    38,     9,    85,   175,    39,     1,   239,    43,    30,
-     1,    30,   111,    95,    49,   181,    51,   102,    30,    10,
-    38,   125,    57,     5,   446,     7,    38,   202,   180,     3,
-     4,    50,    25,   103,     0,     3,     4,   107,    38,    76,
-    59,   507,    35,    36,    37,     3,   116,   569,    82,     0,
-     3,     4,   137,    46,   150,    59,   152,    59,    76,   289,
-    82,    54,   183,    98,    59,    76,   101,   101,   103,    76,
-    81,   106,   107,    31,   482,   497,    76,   176,    27,   643,
-   218,   116,   186,   182,   222,   133,   237,    59,   173,   174,
-   125,    82,   221,   559,   502,   213,    76,    82,   620,   133,
-    76,    81,    30,   414,   237,    81,   224,   671,    82,    30,
-    59,    60,   230,   279,    82,    77,   150,   639,   152,   285,
-   642,   292,   644,    59,    27,   207,   119,    30,   227,    82,
-   652,    59,    60,    36,   585,     3,     4,   130,    59,    60,
-   238,     4,   240,     6,     7,    82,   181,   393,   218,    12,
-    13,    14,   222,    82,   386,   387,    59,    60,   390,   258,
-   245,    76,   684,    77,    76,    28,    81,    81,   590,   251,
-   234,   206,   236,    81,    77,   407,   408,   409,    81,     9,
-   412,   413,    50,   218,   370,   289,   221,   222,   287,   237,
-   183,    76,    59,    77,   424,   441,    81,    81,   444,     3,
-     4,    76,   236,   237,    77,   437,   291,   325,    81,   327,
-   363,   364,   466,    77,    77,    78,     1,    81,    76,     4,
-     5,     6,     7,   298,   217,    78,    30,    12,    13,    14,
-   401,    78,    27,   297,   298,    30,    77,   312,    76,   405,
-    81,    36,    27,    28,   279,    30,    50,   282,   333,   479,
-   285,    36,   404,    77,   486,    59,     1,    81,   410,     4,
-     5,     6,     7,   298,   298,    10,    77,    12,    13,    14,
-    81,     4,     5,     6,     7,   393,    77,    78,   312,    12,
-    13,    14,    77,    28,    76,   406,    81,    77,    30,   521,
-   411,    81,    77,   363,   364,    28,    81,    82,   464,   465,
-    77,    36,    59,    60,    81,   471,   472,   392,    50,    82,
-   374,   375,   422,   499,   432,     3,     4,    59,    60,    76,
-   424,    59,    60,    58,   442,    60,   444,    76,   363,   364,
-   433,    77,   367,   378,   566,   405,   381,    82,    76,    38,
-   526,   375,    59,   149,    77,    50,    51,    52,   154,   155,
-   582,    27,   422,   159,   160,   161,   162,   163,   164,   165,
-   166,   167,   168,   169,   170,     3,   451,     9,   467,     7,
-   405,    83,     3,     4,   634,   479,   636,    77,     1,   414,
-    36,     4,     5,     6,     7,   420,    77,   422,    36,    12,
-    13,    14,    30,    78,   464,   465,    59,    60,   433,    30,
-   499,   471,   472,    81,   489,    28,    76,    38,     1,     7,
-     3,     4,    50,   406,   499,    59,    60,    76,   411,    50,
-    38,    59,    60,   678,    59,    60,    76,   526,    59,   464,
-   465,   686,    30,   515,    83,   621,   471,   472,   537,     3,
-   615,   526,     3,     4,    77,    78,     7,    76,   499,    77,
-    78,   499,    50,   538,   260,   261,    83,   499,    36,    82,
-    76,    59,    60,    76,   499,    76,    30,    32,   567,    30,
-   545,   570,   571,   555,    83,   661,   662,   587,    78,   578,
-   544,   545,   585,    59,    60,    38,    50,     3,     4,    50,
-    78,     7,     3,     4,   593,    59,    60,    78,    59,    60,
-    76,   600,    59,    60,   555,    89,    90,   555,   464,   465,
-   545,   545,   611,   555,    30,    83,   634,   587,   636,    30,
-   555,     4,   621,     6,     7,    76,   332,     3,    77,    12,
-    13,    14,    78,    81,    50,    78,   621,    78,   344,    50,
-    38,    38,    78,    59,   643,    28,    81,    30,    59,    60,
-   585,     1,   587,     3,     4,     5,     6,     7,    78,    83,
-    10,    78,    12,    13,    14,    38,   665,    50,    59,     3,
-    59,   377,   671,     7,    59,    38,    59,    60,    28,     7,
-    30,     1,    77,     3,     4,     5,     6,     7,     8,     9,
-   396,    11,    12,    13,    14,    15,    30,    17,    18,    19,
-    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
-    30,    31,    77,    33,    34,    38,    50,    77,    77,    16,
-    40,    78,    59,    43,   430,    59,    76,    59,    48,    49,
-    50,    77,    77,    76,    54,    55,     5,     6,     7,    59,
-     5,     6,     7,    12,    13,    14,   452,    12,    13,    14,
-     3,     4,     5,     6,     7,   461,   462,    77,    78,    79,
-    80,     1,    82,     3,     4,    30,     6,     7,     8,     9,
-    17,    11,    12,    13,    14,    77,   482,    76,    76,   485,
-    54,    55,    77,    57,    58,    59,    60,    76,    28,    29,
-    77,    31,     9,    33,    34,    77,   502,    77,    59,   505,
-    40,   507,    76,    43,    81,     6,     7,    77,    48,    49,
-    50,    12,    13,    14,    54,    55,   522,    76,     1,    59,
-    76,     4,    77,     6,     7,    77,     0,   533,     0,    12,
-    13,    14,    46,    47,    48,    49,    50,    51,    52,    79,
-    80,   570,    82,   213,   442,    28,   555,   292,    31,    53,
-   556,   423,   291,   559,     1,   430,     3,     4,     5,     6,
-     7,     8,     9,   189,    11,    12,    13,    14,    15,   505,
-    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
-    27,    28,    29,    30,    31,   335,    33,    34,   237,     4,
-     5,     6,     7,    40,    77,    78,    43,    12,    13,    14,
-   606,    48,    49,    50,   327,   460,   432,    54,    55,   245,
-   442,     1,    59,    28,     4,     5,     6,     7,   333,   394,
-    10,   621,    12,    13,    14,    48,    49,    50,    51,    52,
-    77,   666,    79,    80,     1,    82,     3,     4,    28,   444,
-    30,     8,     9,   621,    11,   668,   286,    -1,    15,   367,
-    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
-    27,    -1,    29,    -1,    31,    -1,    33,    34,    -1,    -1,
-    -1,    -1,    -1,    40,    54,    55,    43,    57,    58,    59,
-    60,    48,    49,    50,    -1,    -1,    76,    54,    55,    -1,
-    -1,    -1,    59,     1,    -1,    -1,     4,    -1,     6,     7,
-    -1,    -1,    -1,    -1,    12,    13,    14,    -1,    -1,    -1,
-    77,    78,    79,    80,     1,    82,     3,     4,    -1,    -1,
-    28,     8,     9,    31,    11,    -1,    -1,    -1,    15,    -1,
-    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
-    27,    -1,    29,    -1,    31,    -1,    33,    34,    -1,     4,
-     5,     6,     7,    40,    -1,    10,    43,    12,    13,    14,
-    -1,    48,    49,    50,    -1,    -1,    -1,    54,    55,    -1,
-    -1,    -1,    59,    28,    -1,    30,    -1,    -1,    -1,     4,
-     5,     6,     7,    -1,    -1,    -1,    -1,    12,    13,    14,
-    77,    -1,    79,    80,     1,    82,     3,     4,    -1,    -1,
-    -1,     8,     9,    28,    11,    30,    -1,    -1,    15,    -1,
-    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
-    27,    -1,    29,    -1,    31,    -1,    33,    34,    -1,    -1,
-    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    -1,    -1,
-    -1,    48,    49,    50,    -1,    -1,    -1,    54,    55,    -1,
-    -1,     1,    59,     3,     4,    -1,    -1,    -1,     8,     9,
-    -1,    11,    45,    46,    47,    48,    49,    50,    51,    52,
-    77,    -1,    79,    80,    -1,    82,    -1,    -1,    -1,    29,
-    -1,    31,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,
-    40,    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,    49,
-    50,    -1,    -1,    -1,    54,    55,    -1,    -1,    58,    59,
-    60,     1,    -1,     3,     4,    -1,    -1,    -1,     8,     9,
-    -1,    11,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,
-    80,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    29,
-    -1,    31,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,
-    40,    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,    49,
-    50,    -1,    -1,    -1,    54,    55,    -1,    -1,    58,    59,
-    60,     1,    -1,     3,    -1,    -1,    -1,    -1,     8,     9,
-    -1,    11,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,
-    80,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    29,
-    -1,    31,    -1,    33,    34,    -1,    36,    -1,    -1,    -1,
-    40,    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,    49,
-    50,    -1,    -1,    -1,    54,    55,    -1,    -1,    58,    59,
-    60,     1,    -1,     3,    -1,    -1,    -1,    -1,     8,     9,
-    -1,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    79,
-    80,    -1,    82,    -1,    -1,    -1,    -1,    -1,    -1,    29,
-    -1,    31,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,
-    40,    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,    49,
-    50,    -1,    -1,    -1,    54,    55,     1,    -1,     3,    59,
-    -1,    -1,    -1,     8,     9,     1,    11,    -1,     4,     5,
-     6,     7,    -1,    -1,    -1,    -1,    12,    13,    14,    79,
-    80,    -1,    82,    -1,    29,    -1,    31,    -1,    33,    34,
-    -1,    27,    28,    -1,    30,    40,    -1,    -1,    43,    -1,
-    36,    -1,    -1,    48,    49,    50,    -1,    -1,    -1,    54,
-    55,    -1,    -1,    -1,    59,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    59,    60,    -1,    -1,     1,    -1,    -1,
-     4,     5,     6,     7,    79,    80,    -1,    82,    12,    13,
-    14,    77,     3,    -1,    -1,    81,    82,     8,     9,    -1,
-    11,    -1,    -1,    27,    28,    -1,    30,    -1,    -1,    -1,
-    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    29,     3,
-    31,    -1,    33,    34,     8,     9,    -1,    11,    -1,    40,
-    -1,    -1,    43,    -1,    -1,    59,    60,    48,    49,    50,
-    -1,    -1,    -1,    54,    55,    29,    -1,    31,    59,    33,
-    34,    -1,    -1,    77,    -1,    -1,    40,    81,    82,    43,
-    -1,    -1,    -1,    -1,    48,    49,    50,    -1,    79,    80,
-    54,    55,    83,    -1,     3,    59,    -1,    -1,    -1,     8,
-     9,    -1,    11,    41,    42,    43,    44,    45,    46,    47,
-    48,    49,    50,    51,    52,    79,    80,    -1,    -1,    83,
-    29,     3,    31,    -1,    33,    34,     8,     9,    -1,    11,
-    -1,    40,    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,
-    49,    50,    -1,    -1,    -1,    54,    55,    29,    -1,    31,
-    59,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
-    -1,    43,    -1,    -1,    -1,    -1,    48,    49,    50,    -1,
-    79,    80,    54,    55,    83,    -1,     3,    59,    -1,    -1,
-    -1,     8,     9,    -1,    11,    42,    43,    44,    45,    46,
-    47,    48,    49,    50,    51,    52,    -1,    79,    80,    -1,
-    -1,    83,    29,     3,    31,    -1,    33,    34,     8,     9,
-    -1,    11,    -1,    40,    -1,    -1,    43,    -1,    -1,    -1,
-    -1,    48,    49,    50,    -1,    -1,    -1,    54,    55,    29,
-    -1,    31,    59,    33,    34,    -1,    -1,    -1,    -1,    -1,
-    40,    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,    49,
-    50,    -1,    79,    80,    54,    55,    83,    -1,     3,    59,
-    -1,    -1,    -1,     8,     9,    -1,    11,    43,    44,    45,
-    46,    47,    48,    49,    50,    51,    52,    -1,    -1,    79,
-    80,    -1,    -1,    83,    29,    -1,    31,    -1,    33,    34,
-    10,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,
-    -1,    -1,    -1,    48,    49,    50,    -1,    -1,    -1,    54,
-    55,    -1,    -1,    -1,    59,    35,    36,    37,    38,    39,
-    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
-    50,    51,    52,    -1,    79,    80,    -1,    -1,    83,     3,
-     4,     5,     6,     7,     8,     9,    -1,    11,    12,    13,
-    14,    15,    -1,    17,    18,    19,    20,    21,    22,    23,
-    24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
-    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,
-    -1,    -1,    -1,    -1,    48,    49,    50,    30,    -1,    -1,
-    54,    55,    35,    36,    37,    59,    39,    40,    41,    42,
-    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
-    -1,    -1,    -1,    77,    -1,    79,    80,    -1,    82,     3,
-     4,    -1,    -1,    -1,     8,     9,    -1,    11,    -1,    -1,
-    -1,    15,    -1,    17,    18,    19,    20,    21,    22,    23,
-    24,    25,    26,    27,    -1,    29,    -1,    31,    -1,    33,
-    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,
-    -1,    -1,    -1,    -1,    48,    49,    50,    -1,    -1,    -1,
-    54,    55,    -1,     3,    -1,    59,    -1,    -1,     8,     9,
-    -1,    11,    44,    45,    46,    47,    48,    49,    50,    51,
-    52,    -1,    -1,    77,    -1,    79,    80,    -1,    82,    29,
-    -1,    31,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,
-    40,    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,    49,
-    50,    -1,    -1,    -1,    54,    55,    -1,    -1,    -1,    59,
-     3,     4,     5,     6,     7,     8,     9,    -1,    11,    12,
-    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    79,
-    80,    -1,    82,    -1,    -1,    28,    29,    30,    31,    -1,
-    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
-    43,    -1,    -1,    -1,    -1,    48,    49,    50,    -1,    -1,
-    -1,    54,    55,    -1,     3,     4,    59,     6,     7,     8,
-     9,    -1,    11,    12,    13,    14,    -1,     3,    -1,    -1,
-    -1,    -1,     8,     9,    -1,    11,    79,    80,    -1,    28,
-    29,    -1,    31,    -1,    33,    34,    -1,    -1,    -1,    -1,
-    -1,    40,    -1,    29,    43,    31,    -1,    33,    34,    48,
-    49,    50,    -1,    -1,    40,    54,    55,    43,    -1,    -1,
-    59,    -1,    48,    49,    50,    -1,    -1,    -1,    54,    55,
-     3,    -1,    -1,    59,    -1,     8,     9,    -1,    11,    -1,
-    79,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    77,    -1,    79,    80,    -1,    29,     3,    31,    -1,
-    33,    34,     8,     9,    -1,    11,    -1,    40,    -1,    -1,
-    43,    -1,    -1,    -1,    -1,    48,    49,    50,    -1,    -1,
-    -1,    54,    55,    29,     3,    31,    59,    33,    34,     8,
-     9,    -1,    11,    -1,    40,    -1,    -1,    43,    -1,    -1,
-    -1,    -1,    48,    49,    50,    -1,    79,    80,    54,    55,
-    29,     3,    31,    59,    33,    34,     8,     9,    -1,    11,
-    -1,    40,    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,
-    49,    50,    -1,    79,    80,    54,    55,    29,    -1,    31,
-    59,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
-    -1,    43,    -1,    -1,    -1,    -1,    48,    49,    50,    -1,
-    79,    80,    54,    55,    -1,    -1,     1,    59,     3,     4,
-     5,     6,     7,    -1,    -1,    -1,    -1,    12,    13,    14,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    79,    80,    -1,
-    -1,    -1,    27,    28,    -1,    30,    31,     4,     5,     6,
-     7,     4,     5,     6,     7,    12,    13,    14,    -1,    12,
-    13,    14,    -1,    -1,    10,    50,    -1,    -1,    -1,    -1,
-    -1,    28,    -1,    30,    59,    28,    -1,    30,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,
-    36,    37,    77,    39,    40,    41,    42,    43,    44,    45,
-    46,    47,    48,    49,    50,    51,    52,    40,    41,    42,
-    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
-    77,    -1,    -1,    -1,    77,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    35,    36,    37,    83,    39,    40,
-    41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
-    51,    52,    35,    36,    37,    38,    39,    40,    41,    42,
-    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    35,
-    36,    37,    83,    39,    40,    41,    42,    43,    44,    45,
-    46,    47,    48,    49,    50,    51,    52,    37,    -1,    39,
-    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
-    50,    51,    52
+/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
+   positive, shift that token.  If negative, reduce the rule which
+   number is the opposite.  If YYTABLE_NINF, syntax error.  */
+#define YYTABLE_NINF -387
+static const yytype_int16 yytable[] =
+{
+      88,    99,   125,    64,    66,    68,   122,    23,   192,    23,
+      24,   227,    24,    54,    33,    49,    33,   217,   295,   220,
+     322,   278,   311,    51,    53,    55,    27,   252,    27,   133,
+     137,   478,   203,   372,    37,    38,    39,    23,   106,   290,
+      24,   224,   101,   320,    33,    48,   126,    56,   353,   325,
+     435,   143,   236,   511,    61,    62,    27,   238,   179,   594,
+     111,   282,  -103,    61,    62,   221,    61,    62,    48,    61,
+      62,   312,    34,   211,   121,   656,    48,   648,   196,    -2,
+     111,   668,   132,  -163,   281,   101,   680,   603,  -163,   292,
+       4,   112,   113,   227,   293,   141,   142,   133,   201,   563,
+      69,   144,   205,   678,   191,   287,    57,   149,    58,   148,
+     580,   106,   501,   244,   250,   649,   595,   180,   217,   669,
+     522,    -3,   370,   185,   681,   363,   185,   371,    48,   217,
+    -163,   121,    48,    63,  -163,   217,   101,   279,   639,   278,
+     560,   121,   290,  -103,   286,    65,   239,   318,    67,   276,
+     132,   599,   280,   101,    16,   101,   236,   652,   133,   351,
+     655,   238,   657,   528,    60,   355,    16,   316,    43,   405,
+     665,   319,   200,    16,    60,    60,    60,   256,   136,   257,
+     477,   524,   468,   469,   107,    60,   402,   513,   108,   324,
+      16,   403,   151,    60,    50,    16,   615,   222,    43,   116,
+     138,   223,   689,   447,   509,   331,   185,   333,    43,   405,
+      43,   687,    40,   201,   200,   406,   688,   205,   112,   113,
+     345,   244,    41,   407,   184,    16,   453,   140,   454,   144,
+     386,    27,   386,   487,    42,    16,   327,    16,   329,   191,
+     101,    43,   104,   121,   150,   117,   121,   121,   465,   358,
+     239,   493,   420,   118,   498,   406,   623,   412,    60,   151,
+     516,   133,    16,   407,   184,   407,   184,   196,    16,    60,
+     411,   415,   179,   342,   112,   113,   230,   483,   431,   368,
+     108,   433,   182,   369,   243,   282,    61,    62,   412,    54,
+     183,   184,   202,   228,   229,   181,   407,   184,   448,   365,
+     366,    55,   490,   377,   185,   189,   491,    27,   466,   244,
+     185,   317,   206,   212,   473,   378,  -326,  -326,  -326,  -326,
+     288,   289,    60,    56,  -326,  -326,  -326,    43,   467,    35,
+      36,   200,   483,   474,   482,   129,   130,   386,   352,   233,
+    -326,    11,    12,    13,   351,   355,   520,   448,   241,   499,
+     223,   351,   355,   521,    16,   248,    60,   108,   410,   414,
+      61,    62,     7,   635,     9,   190,   249,   223,   440,   321,
+      11,    12,    13,   479,    44,   326,   422,   424,   425,    43,
+     116,   548,    45,   332,   250,    43,    15,   637,   408,   413,
+     488,   108,    27,   253,  -102,   254,   133,   -83,   212,   294,
+     106,  -106,  -106,  -106,  -106,   200,    16,  -106,   548,  -106,
+    -106,  -106,    16,     7,    57,     9,    58,   480,   170,   171,
+     172,    11,    12,    13,    72,  -106,   117,   502,    16,   519,
+     413,   111,    44,   308,   118,  -270,  -270,    15,   309,    27,
+      45,   228,   229,   112,   113,   121,   315,    48,   182,   288,
+     289,   133,   328,   650,   334,   651,   183,   184,   121,   201,
+     205,   544,   335,  -268,  -268,   526,   201,   205,    43,   116,
+     338,   234,   200,   350,     7,   543,     9,    98,   340,  -106,
+     309,   492,    11,    12,    13,   346,   423,   394,   544,   408,
+     408,   354,   683,   468,   469,    16,   413,   413,    15,   579,
+     691,    17,   543,   548,   381,   546,   227,   343,   547,   344,
+     129,   130,   557,   349,   581,   117,    11,    12,    13,   153,
+     155,   173,   174,   118,    27,   175,   176,   177,   178,   601,
+     436,   437,   604,   607,   438,   359,    54,   144,   618,   217,
+     611,   217,   617,   671,   672,    60,   587,   589,    55,   364,
+      60,   470,   471,   472,   367,   624,   475,   476,   514,   515,
+     382,   546,   627,   388,   547,   389,   392,   399,   557,   401,
+      56,   404,   419,   634,   421,   434,   439,   180,  -305,   497,
+      27,   489,   620,   544,   173,   174,   -32,   505,   175,   176,
+     177,   178,    61,    62,   193,   194,   195,   543,   168,   169,
+     170,   171,   172,   255,   506,   604,   507,   629,   258,   259,
+     121,   608,    48,   264,   265,   266,   267,   268,   269,   270,
+     271,   272,   273,   274,   275,   527,   565,   674,   -33,   566,
+     525,   569,   572,   604,   573,   575,   156,   157,   158,   609,
+     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
+     169,   170,   171,   172,   576,   577,   212,   582,  -115,  -115,
+    -115,  -115,  -115,  -115,  -115,   567,  -115,  -115,  -115,  -115,
+    -115,   584,  -115,  -115,  -115,  -115,  -115,  -115,  -115,  -115,
+    -115,  -115,  -115,  -115,  -115,  -115,  -115,   585,  -115,  -115,
+     586,   590,   128,   129,   130,  -115,   598,   602,  -115,    11,
+      12,    13,   610,  -115,  -115,  -115,   612,   613,  -115,  -115,
+     600,   626,   628,  -115,   347,   348,   631,    16,   630,   633,
+     642,     7,     8,     9,    10,   653,   614,   643,   658,    11,
+      12,    13,  -115,  -115,  -115,  -115,   442,  -115,  -326,  -326,
+    -326,  -326,  -326,  -326,  -326,    15,  -326,  -326,  -326,  -326,
+    -326,   662,  -326,  -326,  -326,  -326,  -326,  -326,  -326,  -326,
+    -326,  -326,  -326,  -326,  -326,  -326,  -326,   666,  -326,  -326,
+     667,   111,   670,   676,  -163,  -326,   679,   682,  -326,  -163,
+     685,   690,   605,  -326,  -326,  -326,   390,   362,  -326,  -326,
+     313,   494,   127,  -326,   596,   481,   291,   485,   400,   360,
+     562,   510,   112,   113,   165,   166,   167,   168,   169,   170,
+     171,   172,  -326,   393,  -326,  -326,   212,  -326,  -326,  -326,
+     330,  -163,   486,  -326,  -326,  -163,  -326,   337,   387,   640,
+    -326,   429,  -326,  -326,  -326,  -326,  -326,  -326,  -326,  -326,
+    -326,  -326,  -326,   391,  -326,   495,  -326,   450,  -326,  -326,
+     457,   500,   677,   641,   675,  -326,   356,     0,  -326,   418,
+       0,     0,     0,  -326,  -326,  -326,     0,     0,  -326,  -326,
+       0,     0,   451,  -326,   452,    62,     0,     0,     0,    71,
+      72,     0,    73,     0,   429,   166,   167,   168,   169,   170,
+     171,   172,  -326,  -301,  -326,  -326,     0,  -326,     0,     0,
+      74,     0,    17,     0,    75,    76,   503,     0,     0,     0,
+       0,    77,     0,     0,    78,   457,   512,     0,     0,    79,
+      80,    81,     0,     0,    82,    83,     0,     0,   453,    84,
+     454,     0,     0,     0,     0,     0,   457,     0,     0,   523,
+     164,   165,   166,   167,   168,   169,   170,   171,   172,  -191,
+      85,    86,     0,   455,     0,     0,   457,     0,     0,   457,
+       0,   457,   163,   164,   165,   166,   167,   168,   169,   170,
+     171,   172,   591,     0,  -326,  -326,   568,     0,     0,  -326,
+    -326,     0,  -326,     0,     0,     0,  -326,   574,  -326,  -326,
+    -326,  -326,  -326,  -326,  -326,  -326,  -326,  -326,  -326,     0,
+    -326,     0,  -326,     0,  -326,  -326,     0,     0,     0,     0,
+     597,  -326,     0,   457,  -326,     0,     0,     0,     0,  -326,
+    -326,  -326,     0,     0,  -326,  -326,     0,     0,   234,  -326,
+       0,     7,     0,     9,    98,     0,     0,     0,     0,    11,
+      12,    13,     0,     0,     0,     0,     0,     0,  -326,     0,
+    -326,  -326,     0,  -326,   621,    15,  -336,  -336,    17,     0,
+     632,  -336,  -336,     0,  -336,     0,     0,     0,  -336,     0,
+    -336,  -336,  -336,  -336,  -336,  -336,  -336,  -336,  -336,  -336,
+    -336,     0,  -336,     0,  -336,     0,  -336,  -336,     0,     0,
+       0,     0,     0,  -336,     0,     0,  -336,     0,     0,     0,
+       0,  -336,  -336,  -336,   235,  -262,  -336,  -336,     0,     0,
+     145,  -336,    70,     7,     0,     9,    98,    71,    72,     0,
+      73,    11,    12,    13,     0,     0,     0,     0,     0,     0,
+    -336,     0,  -336,  -336,     0,  -336,     0,    15,    74,     0,
+      17,     0,    75,    76,     0,     0,     0,     0,     0,    77,
+       0,     0,    78,     0,     0,     0,     0,    79,    80,    81,
+       0,     0,    82,    83,     0,     0,   451,    84,   452,    62,
+       0,     0,     0,    71,    72,     0,    73,     7,     8,     9,
+      10,     0,     0,     0,     0,    11,    12,    13,    85,    86,
+       0,   -92,     0,     0,    74,     0,    17,     0,    75,    76,
+       0,    15,     0,    16,     0,    77,     0,     0,    78,     0,
+       0,     0,     0,    79,    80,    81,     0,     0,    82,    83,
+       0,     0,   453,    84,   454,   451,     0,    70,     0,     0,
+       0,     0,    71,    72,     0,    73,     0,     0,     0,     0,
+       0,     0,     0,  -259,    85,    86,     0,   455,     0,     0,
+      52,     0,     0,    74,     0,    17,     0,    75,    76,  -204,
+       0,     0,     0,     0,    77,     0,     0,    78,     0,     0,
+       0,     0,    79,    80,    81,     0,     0,    82,    83,     0,
+       0,  -204,    84,  -204,   427,     0,    70,     0,     0,     0,
+       0,    71,    72,     0,    73,     0,     0,     0,     0,     0,
+       0,     0,     0,    85,    86,     0,   455,     0,     0,     0,
+       0,     0,    74,     0,    17,     0,    75,    76,     0,     0,
+       0,     0,     0,    77,     0,     0,    78,     0,     0,     0,
+       0,    79,    80,    81,     0,     0,    82,    83,   451,     0,
+      70,    84,     0,     0,     0,    71,    72,   110,    73,     0,
+     -28,   -28,   -28,   -28,     0,     0,     0,     0,   -28,   -28,
+     -28,     0,    85,    86,     0,   428,    74,     0,    17,     0,
+      75,    76,     0,   111,   -28,     0,  -163,    77,     0,     0,
+      78,  -163,     0,     0,     0,    79,    80,    81,     0,     0,
+      82,    83,     0,     0,     0,    84,     0,     0,     0,     0,
+       0,     0,     0,     0,   112,   113,     0,     0,     0,   231,
+       0,     0,   -24,   -24,   -24,   -24,    85,    86,     0,   455,
+     -24,   -24,   -24,  -163,     0,     0,     0,  -163,   -28,     0,
+       0,     0,     0,     0,     0,   111,   -24,     0,  -163,     0,
+       0,     0,   225,  -163,     0,   -20,   -20,   -20,   -20,     0,
+       0,    70,     0,   -20,   -20,   -20,    71,    72,     0,    73,
+       0,     0,     0,     0,     0,     0,   112,   113,   111,   -20,
+       0,  -163,     0,     0,     0,     0,  -163,    74,     0,    17,
+       0,    75,    76,     0,     0,  -163,     0,     0,    77,  -163,
+     -24,    78,     0,     0,     0,     0,    79,    80,   209,     0,
+       0,    82,    83,     0,    70,     0,    84,     0,     0,    71,
+      72,     0,    73,     0,     0,     0,     0,     0,  -163,     0,
+       0,     0,  -163,   -20,     0,     0,     0,    85,    86,     0,
+      74,   210,    17,     0,    75,    76,     0,     0,     0,     0,
+       0,    77,     0,     0,    78,     0,     0,     0,     0,    79,
+      80,    81,     0,     0,    82,    83,     0,    70,     0,    84,
+       0,     0,    71,    72,   296,    73,   297,     7,     8,     9,
+      10,     0,     0,   298,     0,    11,    12,    13,     0,     0,
+      85,    86,     0,    74,   285,    17,     0,    75,    76,     0,
+       0,    15,     0,    16,    77,     0,     0,    78,     0,     0,
+       0,     0,    79,    80,    81,     0,     0,    82,    83,     0,
+      70,     0,    84,     0,     0,    71,    72,   296,    73,     0,
+       7,     8,     9,    10,     0,     0,   298,     0,    11,    12,
+      13,     0,     0,    85,    86,     0,    74,   307,    17,  -386,
+      75,    76,     0,     0,    15,     0,    16,    77,     0,     0,
+      78,     0,     0,     0,     0,    79,    80,    81,     0,     0,
+      82,    83,     0,    70,     0,    84,     0,     0,    71,    72,
+       0,    73,     7,     8,     9,    10,     0,     0,     0,     0,
+      11,    12,    13,     0,     0,     0,    85,    86,     0,    74,
+     323,    17,  -386,    75,    76,     0,    15,     0,    16,     0,
+      77,     0,     0,    78,     0,     0,     0,     0,    79,    80,
+      81,     0,     0,    82,    83,     0,    70,     0,    84,     0,
+       0,    71,    72,     0,    73,     0,     7,     0,     9,   190,
+       0,     0,     0,     0,    11,    12,    13,     0,     0,    85,
+      86,     0,    74,   357,    17,   588,    75,    76,     0,     0,
+      15,     0,    16,    77,     0,     0,    78,     0,     0,     0,
+       0,    79,    80,   517,     0,     0,    82,    83,     0,    70,
+       0,    84,   182,     0,    71,    72,     0,    73,     0,     0,
+     183,   184,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,    85,    86,     0,    74,   518,    17,     0,    75,
+      76,     0,     7,     8,     9,    10,    77,     0,   417,    78,
+      11,    12,    13,     0,    79,    80,    81,     0,     0,    82,
+      83,     0,     0,     0,    84,     0,    15,   158,    16,   159,
+     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
+     170,   171,   172,     0,     0,    85,    86,     0,     0,   564,
+     452,   529,     8,     9,    10,    71,    72,     0,    73,    11,
+      12,    13,   530,     0,   531,   532,   533,   534,   535,   536,
+     537,   538,   539,   540,   541,    15,    74,    16,    17,     0,
+      75,    76,     0,     7,     8,     9,    10,    77,     0,     0,
+      78,    11,    12,    13,     0,    79,    80,    81,     0,     0,
+      82,    83,     0,     0,     0,    84,     0,    15,     0,    16,
+     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
+     170,   171,   172,     0,   542,     0,    85,    86,     0,   250,
+     452,    62,     0,     0,     0,    71,    72,     0,    73,     0,
+       0,     0,   530,     0,   531,   532,   533,   534,   535,   536,
+     537,   538,   539,   540,   541,     0,    74,     0,    17,     0,
+      75,    76,     0,     0,     0,     0,     0,    77,     0,     0,
+      78,     0,     0,     0,     0,    79,    80,    81,     0,     0,
+      82,    83,    70,     0,     0,    84,     0,    71,    72,     0,
+      73,   161,   162,   163,   164,   165,   166,   167,   168,   169,
+     170,   171,   172,     0,   542,     0,    85,    86,    74,   250,
+      17,     0,    75,    76,     0,     0,     0,     0,     0,    77,
+       0,     0,    78,     0,     0,     0,     0,    79,    80,    81,
+       0,     0,    82,    83,     0,     0,     0,    84,    70,     7,
+       8,     9,    10,    71,    72,     0,    73,    11,    12,    13,
+       0,     0,     0,     0,     0,     0,     0,     0,    85,    86,
+       0,   341,     0,    15,    74,    16,    17,     0,    75,    76,
+       0,     0,     0,     0,     0,    77,     0,     0,    78,     0,
+       0,     0,     0,    79,    80,    81,     0,     0,    82,    83,
+       0,    70,     7,    84,     9,    98,    71,    72,     0,    73,
+      11,    12,    13,   162,   163,   164,   165,   166,   167,   168,
+     169,   170,   171,   172,    85,    86,    15,    74,     0,    17,
+       0,    75,    76,     0,    70,     0,     0,     0,    77,    71,
+      72,    78,    73,     0,     0,     0,    79,    80,    81,     0,
+       0,    82,    83,     0,     0,     0,    84,     0,     0,     0,
+      74,     0,    17,     0,    75,    76,     0,    70,     0,     0,
+       0,    77,    71,    72,    78,    73,     0,    85,    86,    79,
+      80,    81,     0,     0,    82,    83,     0,     0,     0,    84,
+       0,     0,     0,    74,     0,    17,     0,    75,    76,     0,
+       0,     0,     0,     0,    77,     0,     0,    78,   578,     0,
+      85,    86,    79,    80,    81,     0,     0,    82,    83,    70,
+       0,     0,    84,     0,    71,    72,     0,    73,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,    85,    86,    74,     0,    17,     0,    75,
+      76,     0,    70,     0,     0,     0,    77,    71,    72,    78,
+      73,     0,     0,     0,    79,    80,    81,     0,     0,    82,
+      83,     0,     0,     0,   152,     0,     0,     0,    74,     0,
+      17,     0,    75,    76,     0,   361,     0,     0,     0,    77,
+      71,    72,    78,    73,     0,    85,    86,    79,    80,    81,
+       0,     0,    82,    83,     0,     0,     0,   154,     0,     0,
+       0,    74,     0,    17,     0,    75,    76,     0,     0,     0,
+       0,     0,    77,     0,     0,    78,     0,     0,    85,    86,
+      79,    80,    81,     0,     0,    82,    83,     0,     0,     6,
+      84,  -119,     7,     8,     9,    10,     0,     0,     0,     0,
+      11,    12,    13,     0,     0,     0,     0,     0,     0,     0,
+       0,    85,    86,     0,     0,    14,    15,     0,    16,    17,
+       0,     0,   558,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,  -119,     0,
+       0,     0,     0,     0,     0,     0,  -119,   156,   157,   158,
+       0,   159,   160,   161,   162,   163,   164,   165,   166,   167,
+     168,   169,   170,   171,   172,    18,   156,   157,   158,     0,
+     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
+     169,   170,   171,   172,     0,     0,     0,    16,     0,     0,
+       0,     0,   156,   157,   158,   559,   159,   160,   161,   162,
+     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
+       0,     0,     0,     0,   625,   156,   157,   158,   647,   159,
+     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
+     170,   171,   172,   156,   157,   158,     0,   159,   160,   161,
+     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
+     172
 };
-/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
-#line 3 "/usr/lib/bison.simple"
 
-/* Skeleton output parser for bison,
-   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.
+#define yypact_value_is_default(Yystate) \
+  (!!((Yystate) == (-571)))
 
-   This program is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
+#define yytable_value_is_error(Yytable_value) \
+  YYID (0)
 
-   This program is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-   GNU General Public License for more details.
+static const yytype_int16 yycheck[] =
+{
+      40,    41,    53,    29,    30,    31,    51,     3,   103,     5,
+       3,   122,     5,    24,     3,    22,     5,   114,   206,   117,
+     228,   176,   214,    23,    24,    24,     3,   147,     5,    59,
+      65,   422,   108,     1,    11,    12,    13,    33,    45,   188,
+      33,   121,    41,   226,    33,    22,    53,    24,   284,   232,
+     386,    77,   135,   463,     3,     4,    33,   135,     9,     1,
+      27,   183,     1,     3,     4,   118,     3,     4,    45,     3,
+       4,    10,     5,   113,    51,   645,    53,    38,   104,     0,
+      27,    38,    59,    30,   182,    84,    38,   571,    35,    76,
+       0,    58,    59,   204,    81,    75,    76,   127,   105,   509,
+      33,    81,   109,   673,   103,   185,     5,    87,     7,    84,
+      50,   118,   448,   139,    82,    76,    58,    97,   215,    76,
+     484,     0,    76,   100,    76,    76,   103,    81,   105,   226,
+      77,   108,   109,    82,    81,   232,   135,   177,   622,   294,
+     504,   118,   291,    82,   184,    82,   135,   223,    82,   175,
+     127,   561,   178,   152,    30,   154,   239,   641,   188,   281,
+     644,   239,   646,   499,    27,   287,    30,   220,     3,     4,
+     654,   224,     7,    30,    37,    38,    39,   152,    82,   154,
+     416,    38,    58,    59,    77,    48,    76,    76,    81,   229,
+      30,    81,    81,    56,    77,    30,   587,    77,     3,     4,
+      82,    81,   686,   395,    35,   240,   183,   242,     3,     4,
+       3,    76,    58,   220,     7,    50,    81,   224,    58,    59,
+     260,   247,    58,    58,    59,    30,    57,    82,    59,   209,
+     327,   208,   329,    38,    58,    30,   236,    30,   238,   238,
+     239,     3,    58,   220,    76,    50,   223,   224,   403,   289,
+     239,   443,   372,    58,   446,    50,   592,    50,   121,    81,
+     468,   291,    30,    58,    59,    58,    59,   293,    30,   132,
+     365,   366,     9,   253,    58,    59,    77,   426,   380,    77,
+      81,   383,    50,    81,     1,   407,     3,     4,    50,   300,
+      58,    59,    76,    58,    59,    76,    58,    59,   395,   299,
+     300,   300,    77,   314,   281,    76,    81,   284,   406,   335,
+     287,    76,    58,     1,   412,   314,     4,     5,     6,     7,
+      58,    59,   185,   300,    12,    13,    14,     3,   408,    77,
+      78,     7,   481,   413,     5,     6,     7,   434,    76,    78,
+      28,    12,    13,    14,   466,   467,    77,   444,    78,   446,
+      81,   473,   474,    77,    30,    76,   219,    81,   365,   366,
+       3,     4,     4,    77,     6,     7,    76,    81,   394,   227,
+      12,    13,    14,   424,    50,   233,   376,   377,   377,     3,
+       4,   501,    58,   241,    82,     3,    28,    77,   365,   366,
+     435,    81,   369,    76,    82,    77,   426,    38,     1,    58,
+     407,     4,     5,     6,     7,     7,    30,    10,   528,    12,
+      13,    14,    30,     4,     5,     6,     7,   424,    50,    51,
+      52,    12,    13,    14,     9,    28,    50,   453,    30,   469,
+     407,    27,    50,    83,    58,    77,    78,    28,    77,   416,
+      58,    58,    59,    58,    59,   422,    35,   424,    50,    58,
+      59,   481,    77,   636,    35,   638,    58,    59,   435,   466,
+     467,   501,    81,    77,    78,   491,   473,   474,     3,     4,
+      78,     1,     7,    83,     4,   501,     6,     7,    76,    82,
+      77,    78,    12,    13,    14,    38,    77,    32,   528,   466,
+     467,    83,   680,    58,    59,    30,   473,   474,    28,   539,
+     688,    31,   528,   623,    35,   501,   617,    76,   501,    76,
+       6,     7,   501,    76,   540,    50,    12,    13,    14,    91,
+      92,    53,    54,    58,   501,    57,    58,    59,    60,   569,
+     388,   389,   572,   573,   392,    76,   547,   517,   589,   636,
+     580,   638,   587,   663,   664,   408,   546,   547,   547,    76,
+     413,   409,   410,   411,    76,   595,   414,   415,   466,   467,
+      83,   557,   602,    78,   557,    78,    78,    38,   557,    83,
+     547,    76,     3,   613,    77,    81,    78,   557,    78,    78,
+     557,   439,   589,   623,    53,    54,    38,    38,    57,    58,
+      59,    60,     3,     4,     5,     6,     7,   623,    48,    49,
+      50,    51,    52,   151,    78,   645,    81,    76,   156,   157,
+     587,    10,   589,   161,   162,   163,   164,   165,   166,   167,
+     168,   169,   170,   171,   172,    78,    83,   667,    38,    78,
+     488,    58,    58,   673,    58,    38,    35,    36,    37,    38,
+      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
+      49,    50,    51,    52,    77,    77,     1,     7,     3,     4,
+       5,     6,     7,     8,     9,   523,    11,    12,    13,    14,
+      15,    38,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    77,    33,    34,
+      77,    16,     5,     6,     7,    40,    78,    58,    43,    12,
+      13,    14,    77,    48,    49,    50,    77,    58,    53,    54,
+     568,    76,    17,    58,   262,   263,    76,    30,    77,    77,
+      76,     4,     5,     6,     7,    77,   584,    76,     9,    12,
+      13,    14,    77,    78,    79,    80,     1,    82,     3,     4,
+       5,     6,     7,     8,     9,    28,    11,    12,    13,    14,
+      15,    77,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    77,    33,    34,
+      58,    27,    81,    77,    30,    40,    76,    76,    43,    35,
+      77,    77,   572,    48,    49,    50,   334,   294,    53,    54,
+     215,   444,    55,    58,   557,   425,   191,   432,   346,   293,
+     507,   462,    58,    59,    45,    46,    47,    48,    49,    50,
+      51,    52,    77,   337,    79,    80,     1,    82,     3,     4,
+     239,    77,   434,     8,     9,    81,    11,   247,   329,   623,
+      15,   379,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,   335,    29,   444,    31,   396,    33,    34,
+     398,   446,   670,   623,   668,    40,   288,    -1,    43,   369,
+      -1,    -1,    -1,    48,    49,    50,    -1,    -1,    53,    54,
+      -1,    -1,     1,    58,     3,     4,    -1,    -1,    -1,     8,
+       9,    -1,    11,    -1,   432,    46,    47,    48,    49,    50,
+      51,    52,    77,    78,    79,    80,    -1,    82,    -1,    -1,
+      29,    -1,    31,    -1,    33,    34,   454,    -1,    -1,    -1,
+      -1,    40,    -1,    -1,    43,   463,   464,    -1,    -1,    48,
+      49,    50,    -1,    -1,    53,    54,    -1,    -1,    57,    58,
+      59,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,   487,
+      44,    45,    46,    47,    48,    49,    50,    51,    52,    78,
+      79,    80,    -1,    82,    -1,    -1,   504,    -1,    -1,   507,
+      -1,   509,    43,    44,    45,    46,    47,    48,    49,    50,
+      51,    52,     1,    -1,     3,     4,   524,    -1,    -1,     8,
+       9,    -1,    11,    -1,    -1,    -1,    15,   535,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
+      29,    -1,    31,    -1,    33,    34,    -1,    -1,    -1,    -1,
+     558,    40,    -1,   561,    43,    -1,    -1,    -1,    -1,    48,
+      49,    50,    -1,    -1,    53,    54,    -1,    -1,     1,    58,
+      -1,     4,    -1,     6,     7,    -1,    -1,    -1,    -1,    12,
+      13,    14,    -1,    -1,    -1,    -1,    -1,    -1,    77,    -1,
+      79,    80,    -1,    82,     1,    28,     3,     4,    31,    -1,
+     608,     8,     9,    -1,    11,    -1,    -1,    -1,    15,    -1,
+      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
+      27,    -1,    29,    -1,    31,    -1,    33,    34,    -1,    -1,
+      -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    -1,    -1,
+      -1,    48,    49,    50,    77,    78,    53,    54,    -1,    -1,
+       1,    58,     3,     4,    -1,     6,     7,     8,     9,    -1,
+      11,    12,    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,
+      77,    -1,    79,    80,    -1,    82,    -1,    28,    29,    -1,
+      31,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
+      -1,    -1,    43,    -1,    -1,    -1,    -1,    48,    49,    50,
+      -1,    -1,    53,    54,    -1,    -1,     1,    58,     3,     4,
+      -1,    -1,    -1,     8,     9,    -1,    11,     4,     5,     6,
+       7,    -1,    -1,    -1,    -1,    12,    13,    14,    79,    80,
+      -1,    82,    -1,    -1,    29,    -1,    31,    -1,    33,    34,
+      -1,    28,    -1,    30,    -1,    40,    -1,    -1,    43,    -1,
+      -1,    -1,    -1,    48,    49,    50,    -1,    -1,    53,    54,
+      -1,    -1,    57,    58,    59,     1,    -1,     3,    -1,    -1,
+      -1,    -1,     8,     9,    -1,    11,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    78,    79,    80,    -1,    82,    -1,    -1,
+      77,    -1,    -1,    29,    -1,    31,    -1,    33,    34,    35,
+      -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    -1,
+      -1,    -1,    48,    49,    50,    -1,    -1,    53,    54,    -1,
+      -1,    57,    58,    59,     1,    -1,     3,    -1,    -1,    -1,
+      -1,     8,     9,    -1,    11,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    79,    80,    -1,    82,    -1,    -1,    -1,
+      -1,    -1,    29,    -1,    31,    -1,    33,    34,    -1,    -1,
+      -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    -1,    -1,
+      -1,    48,    49,    50,    -1,    -1,    53,    54,     1,    -1,
+       3,    58,    -1,    -1,    -1,     8,     9,     1,    11,    -1,
+       4,     5,     6,     7,    -1,    -1,    -1,    -1,    12,    13,
+      14,    -1,    79,    80,    -1,    82,    29,    -1,    31,    -1,
+      33,    34,    -1,    27,    28,    -1,    30,    40,    -1,    -1,
+      43,    35,    -1,    -1,    -1,    48,    49,    50,    -1,    -1,
+      53,    54,    -1,    -1,    -1,    58,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    58,    59,    -1,    -1,    -1,     1,
+      -1,    -1,     4,     5,     6,     7,    79,    80,    -1,    82,
+      12,    13,    14,    77,    -1,    -1,    -1,    81,    82,    -1,
+      -1,    -1,    -1,    -1,    -1,    27,    28,    -1,    30,    -1,
+      -1,    -1,     1,    35,    -1,     4,     5,     6,     7,    -1,
+      -1,     3,    -1,    12,    13,    14,     8,     9,    -1,    11,
+      -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    27,    28,
+      -1,    30,    -1,    -1,    -1,    -1,    35,    29,    -1,    31,
+      -1,    33,    34,    -1,    -1,    77,    -1,    -1,    40,    81,
+      82,    43,    -1,    -1,    -1,    -1,    48,    49,    50,    -1,
+      -1,    53,    54,    -1,     3,    -1,    58,    -1,    -1,     8,
+       9,    -1,    11,    -1,    -1,    -1,    -1,    -1,    77,    -1,
+      -1,    -1,    81,    82,    -1,    -1,    -1,    79,    80,    -1,
+      29,    83,    31,    -1,    33,    34,    -1,    -1,    -1,    -1,
+      -1,    40,    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,
+      49,    50,    -1,    -1,    53,    54,    -1,     3,    -1,    58,
+      -1,    -1,     8,     9,     1,    11,     3,     4,     5,     6,
+       7,    -1,    -1,    10,    -1,    12,    13,    14,    -1,    -1,
+      79,    80,    -1,    29,    83,    31,    -1,    33,    34,    -1,
+      -1,    28,    -1,    30,    40,    -1,    -1,    43,    -1,    -1,
+      -1,    -1,    48,    49,    50,    -1,    -1,    53,    54,    -1,
+       3,    -1,    58,    -1,    -1,     8,     9,     1,    11,    -1,
+       4,     5,     6,     7,    -1,    -1,    10,    -1,    12,    13,
+      14,    -1,    -1,    79,    80,    -1,    29,    83,    31,    76,
+      33,    34,    -1,    -1,    28,    -1,    30,    40,    -1,    -1,
+      43,    -1,    -1,    -1,    -1,    48,    49,    50,    -1,    -1,
+      53,    54,    -1,     3,    -1,    58,    -1,    -1,     8,     9,
+      -1,    11,     4,     5,     6,     7,    -1,    -1,    -1,    -1,
+      12,    13,    14,    -1,    -1,    -1,    79,    80,    -1,    29,
+      83,    31,    76,    33,    34,    -1,    28,    -1,    30,    -1,
+      40,    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,    49,
+      50,    -1,    -1,    53,    54,    -1,     3,    -1,    58,    -1,
+      -1,     8,     9,    -1,    11,    -1,     4,    -1,     6,     7,
+      -1,    -1,    -1,    -1,    12,    13,    14,    -1,    -1,    79,
+      80,    -1,    29,    83,    31,    77,    33,    34,    -1,    -1,
+      28,    -1,    30,    40,    -1,    -1,    43,    -1,    -1,    -1,
+      -1,    48,    49,    50,    -1,    -1,    53,    54,    -1,     3,
+      -1,    58,    50,    -1,     8,     9,    -1,    11,    -1,    -1,
+      58,    59,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    79,    80,    -1,    29,    83,    31,    -1,    33,
+      34,    -1,     4,     5,     6,     7,    40,    -1,    10,    43,
+      12,    13,    14,    -1,    48,    49,    50,    -1,    -1,    53,
+      54,    -1,    -1,    -1,    58,    -1,    28,    37,    30,    39,
+      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
+      50,    51,    52,    -1,    -1,    79,    80,    -1,    -1,    83,
+       3,     4,     5,     6,     7,     8,     9,    -1,    11,    12,
+      13,    14,    15,    -1,    17,    18,    19,    20,    21,    22,
+      23,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
+      33,    34,    -1,     4,     5,     6,     7,    40,    -1,    -1,
+      43,    12,    13,    14,    -1,    48,    49,    50,    -1,    -1,
+      53,    54,    -1,    -1,    -1,    58,    -1,    28,    -1,    30,
+      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
+      50,    51,    52,    -1,    77,    -1,    79,    80,    -1,    82,
+       3,     4,    -1,    -1,    -1,     8,     9,    -1,    11,    -1,
+      -1,    -1,    15,    -1,    17,    18,    19,    20,    21,    22,
+      23,    24,    25,    26,    27,    -1,    29,    -1,    31,    -1,
+      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
+      43,    -1,    -1,    -1,    -1,    48,    49,    50,    -1,    -1,
+      53,    54,     3,    -1,    -1,    58,    -1,     8,     9,    -1,
+      11,    41,    42,    43,    44,    45,    46,    47,    48,    49,
+      50,    51,    52,    -1,    77,    -1,    79,    80,    29,    82,
+      31,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
+      -1,    -1,    43,    -1,    -1,    -1,    -1,    48,    49,    50,
+      -1,    -1,    53,    54,    -1,    -1,    -1,    58,     3,     4,
+       5,     6,     7,     8,     9,    -1,    11,    12,    13,    14,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    79,    80,
+      -1,    82,    -1,    28,    29,    30,    31,    -1,    33,    34,
+      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,
+      -1,    -1,    -1,    48,    49,    50,    -1,    -1,    53,    54,
+      -1,     3,     4,    58,     6,     7,     8,     9,    -1,    11,
+      12,    13,    14,    42,    43,    44,    45,    46,    47,    48,
+      49,    50,    51,    52,    79,    80,    28,    29,    -1,    31,
+      -1,    33,    34,    -1,     3,    -1,    -1,    -1,    40,     8,
+       9,    43,    11,    -1,    -1,    -1,    48,    49,    50,    -1,
+      -1,    53,    54,    -1,    -1,    -1,    58,    -1,    -1,    -1,
+      29,    -1,    31,    -1,    33,    34,    -1,     3,    -1,    -1,
+      -1,    40,     8,     9,    43,    11,    -1,    79,    80,    48,
+      49,    50,    -1,    -1,    53,    54,    -1,    -1,    -1,    58,
+      -1,    -1,    -1,    29,    -1,    31,    -1,    33,    34,    -1,
+      -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    77,    -1,
+      79,    80,    48,    49,    50,    -1,    -1,    53,    54,     3,
+      -1,    -1,    58,    -1,     8,     9,    -1,    11,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    79,    80,    29,    -1,    31,    -1,    33,
+      34,    -1,     3,    -1,    -1,    -1,    40,     8,     9,    43,
+      11,    -1,    -1,    -1,    48,    49,    50,    -1,    -1,    53,
+      54,    -1,    -1,    -1,    58,    -1,    -1,    -1,    29,    -1,
+      31,    -1,    33,    34,    -1,     3,    -1,    -1,    -1,    40,
+       8,     9,    43,    11,    -1,    79,    80,    48,    49,    50,
+      -1,    -1,    53,    54,    -1,    -1,    -1,    58,    -1,    -1,
+      -1,    29,    -1,    31,    -1,    33,    34,    -1,    -1,    -1,
+      -1,    -1,    40,    -1,    -1,    43,    -1,    -1,    79,    80,
+      48,    49,    50,    -1,    -1,    53,    54,    -1,    -1,     1,
+      58,     3,     4,     5,     6,     7,    -1,    -1,    -1,    -1,
+      12,    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    79,    80,    -1,    -1,    27,    28,    -1,    30,    31,
+      -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    58,    35,    36,    37,
+      -1,    39,    40,    41,    42,    43,    44,    45,    46,    47,
+      48,    49,    50,    51,    52,    77,    35,    36,    37,    -1,
+      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
+      49,    50,    51,    52,    -1,    -1,    -1,    30,    -1,    -1,
+      -1,    -1,    35,    36,    37,    83,    39,    40,    41,    42,
+      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
+      -1,    -1,    -1,    -1,    83,    35,    36,    37,    38,    39,
+      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
+      50,    51,    52,    35,    36,    37,    -1,    39,    40,    41,
+      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
+      52
+};
 
-   You should have received a copy of the GNU General Public License
-   along with this program; if not, write to the Free Software
-   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
-
-/* As a special exception, when this file is copied by Bison into a
-   Bison output file, you may use that output file without restriction.
-   This special exception was added by the Free Software Foundation
-   in version 1.24 of Bison.  */
-
-#ifndef alloca
-#ifdef __GNUC__
-#define alloca __builtin_alloca
-#else /* not GNU C.  */
-#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
-#include <alloca.h>
-#else /* not sparc */
-#if defined (MSDOS) && !defined (__TURBOC__)
-#include <malloc.h>
-#else /* not MSDOS, or __TURBOC__ */
-#if defined(_AIX)
-#include <malloc.h>
- #pragma alloca
-#else /* not MSDOS, __TURBOC__, or _AIX */
-#ifdef __hpux
-#ifdef __cplusplus
-extern "C" {
-void *alloca (unsigned int);
+/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
+   symbol of state STATE-NUM.  */
+static const yytype_uint8 yystos[] =
+{
+       0,    85,    86,    87,     0,    88,     1,     4,     5,     6,
+       7,    12,    13,    14,    27,    28,    30,    31,    77,    89,
+      90,    91,   123,   126,   130,   131,   134,   144,   145,   169,
+     170,   171,   172,   241,    89,    77,    78,   144,   144,   144,
+      58,    58,    58,     3,    50,    58,   137,   141,   144,   168,
+      77,   123,    77,   123,   131,   134,   144,     5,     7,   127,
+     145,     3,     4,    82,    98,    82,    98,    82,    98,    89,
+       3,     8,     9,    11,    29,    33,    34,    40,    43,    48,
+      49,    50,    53,    54,    58,    79,    80,    99,   100,   102,
+     103,   104,   105,   106,   108,   114,   116,   241,     7,   100,
+     132,   134,   186,   188,    58,   189,   168,    77,    81,   124,
+       1,    27,    58,    59,    96,   138,     4,    50,    58,   136,
+     139,   144,   165,   166,   168,   137,   168,   127,     5,     6,
+       7,   135,   144,   172,   179,   180,    82,   179,    82,   176,
+      82,   106,   106,    98,   106,     1,   100,   115,   186,   106,
+      76,    81,    58,   103,    58,   103,    35,    36,    37,    39,
+      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
+      50,    51,    52,    53,    54,    57,    58,    59,    60,     9,
+     106,    76,    50,    58,    59,   144,   187,   190,   133,    76,
+       7,   134,   187,     5,     6,     7,    98,   146,   147,   148,
+       7,   168,    76,   139,   165,   168,    58,   236,   237,    50,
+      83,   100,     1,   117,   118,   119,   194,   206,   143,   144,
+     189,   166,    77,    81,   124,     1,    92,   138,    58,    59,
+      77,     1,    94,    78,     1,    77,   132,   181,   188,   241,
+     173,    78,   174,     1,    98,   184,   185,   175,    76,    76,
+      82,   200,   201,    76,    77,   108,   186,   186,   108,   108,
+     111,   113,   110,   109,   108,   108,   108,   108,   108,   108,
+     108,   108,   108,   108,   108,   108,    98,   101,   102,   100,
+      98,   189,   190,   229,   230,    83,   100,   124,    58,    59,
+     135,   133,    76,    81,    58,   116,     1,     3,    10,   126,
+     130,   231,   233,   234,   235,   238,   239,    83,    83,    77,
+      97,   194,    10,   118,   207,    35,   166,    76,   139,   166,
+     117,   143,   236,    83,   100,   117,   143,   123,    77,   123,
+     181,   179,   143,   179,    35,    81,   178,   184,    78,   195,
+      76,    82,   106,    76,    76,   100,    38,   108,   108,    76,
+      83,   190,    76,   231,    83,   190,   229,    83,   100,    76,
+     147,     3,   101,    76,    76,   123,   123,    76,    77,    81,
+      76,    81,     1,   199,   201,   120,   128,   131,   134,   142,
+      93,    35,    83,    95,   182,   183,   206,   182,    78,    78,
+     108,   185,    78,   178,    32,   196,   197,   198,   107,    38,
+     108,    83,    76,    81,    76,     4,    50,    58,   144,   167,
+     168,   187,    50,   144,   168,   187,   232,    10,   235,     3,
+     201,    77,   123,    77,   123,   134,   129,     1,    82,   108,
+     149,   199,   140,   199,    81,   207,   143,   143,   143,    78,
+      98,   240,     1,   121,   122,   191,   192,   194,   206,   209,
+     198,     1,     3,    57,    59,    82,    98,   108,   151,   152,
+     153,   155,   157,   158,   112,   102,   189,   124,    58,    59,
+     143,   143,   143,   189,   124,   143,   143,   231,   136,   137,
+     168,   129,     5,   135,   150,   149,   183,    38,   165,   143,
+      77,    81,    78,   194,   121,   191,   193,    78,   194,   206,
+     209,   207,    98,   108,   156,    38,    78,    81,   177,    35,
+     158,   155,   108,    76,   167,   167,   236,    50,    83,   100,
+      77,    77,   151,   108,    38,   143,    98,    78,   207,     4,
+      15,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    77,    98,   100,   125,   126,   130,   201,   202,
+     203,   204,   210,   211,   219,   220,   222,   241,    10,    83,
+     151,   154,   153,   155,    83,    83,    78,   143,   108,    58,
+     213,   205,    58,    58,   108,    38,    77,    77,    77,   100,
+      50,    98,     7,   223,    38,    77,    77,   123,    77,   123,
+      16,     1,   206,   208,     1,    58,   125,   108,    78,   155,
+     143,   100,    58,   208,   100,   114,   224,   100,    10,    38,
+      77,   100,    77,    58,   143,   136,   159,   165,   137,   162,
+     168,     1,   212,   207,   100,    83,    76,   100,    17,    76,
+      77,    76,   108,    77,   100,    77,   160,    77,   163,   208,
+     211,   222,    76,    76,   221,   215,   218,    38,    38,    76,
+     117,   117,   208,    77,   214,   208,   224,   208,     9,   225,
+     226,   227,    77,   161,   164,   208,    77,    58,    38,    76,
+      81,   201,   201,   216,   100,   225,    77,   227,   224,    76,
+      38,    76,    76,   116,   228,    77,   217,    76,    81,   208,
+      77,   116
 };
-#else /* not __cplusplus */
-void *alloca ();
-#endif /* not __cplusplus */
-#endif /* __hpux */
-#endif /* not _AIX */
-#endif /* not MSDOS, or __TURBOC__ */
-#endif /* not sparc.  */
-#endif /* not GNU C.  */
-#endif /* alloca not defined.  */
-
-/* This is the parser code that is written into each bison parser
-  when the %semantic_parser declaration is not specified in the grammar.
-  It was written by Richard Stallman by simplifying the hairy parser
-  used when %semantic_parser is specified.  */
-
-/* Note: there must be only one dollar sign in this file.
-   It is replaced by the list of actions, each action
-   as one case of the switch.  */
 
 #define yyerrok		(yyerrstatus = 0)
 #define yyclearin	(yychar = YYEMPTY)
-#define YYEMPTY		-2
+#define YYEMPTY		(-2)
 #define YYEOF		0
-#define YYACCEPT	return(0)
-#define YYABORT 	return(1)
-#define YYERROR		goto yyerrlab1
-/* Like YYERROR except do call yyerror.
-   This remains here temporarily to ease the
-   transition to the new meaning of YYERROR, for GCC.
-   Once GCC version 2 has supplanted version 1, this can go.  */
+
+#define YYACCEPT	goto yyacceptlab
+#define YYABORT		goto yyabortlab
+#define YYERROR		goto yyerrorlab
+
+
+/* Like YYERROR except do call yyerror.  This remains here temporarily
+   to ease the transition to the new meaning of YYERROR, for GCC.
+   Once GCC version 2 has supplanted version 1, this can go.  However,
+   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
+   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
+   discussed.  */
+
 #define YYFAIL		goto yyerrlab
+#if defined YYFAIL
+  /* This is here to suppress warnings from the GCC cpp's
+     -Wunused-macros.  Normally we don't worry about that warning, but
+     some users do, and we want to make it easy for users to remove
+     YYFAIL uses, which will produce warnings from Bison 2.5.  */
+#endif
+
 #define YYRECOVERING()  (!!yyerrstatus)
-#define YYBACKUP(token, value) \
-do								\
-  if (yychar == YYEMPTY && yylen == 1)				\
-    { yychar = (token), yylval = (value);			\
-      yychar1 = YYTRANSLATE (yychar);				\
-      YYPOPSTACK;						\
-      goto yybackup;						\
+
+#define YYBACKUP(Token, Value)                                  \
+do                                                              \
+  if (yychar == YYEMPTY)                                        \
+    {                                                           \
+      yychar = (Token);                                         \
+      yylval = (Value);                                         \
+      YYPOPSTACK (yylen);                                       \
+      yystate = *yyssp;                                         \
+      goto yybackup;                                            \
+    }                                                           \
+  else                                                          \
+    {                                                           \
+      yyerror (YY_("syntax error: cannot back up")); \
+      YYERROR;							\
     }								\
-  else								\
-    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
-while (0)
+while (YYID (0))
 
+/* Error token number */
 #define YYTERROR	1
 #define YYERRCODE	256
 
-#ifndef YYPURE
-#define YYLEX		yylex()
+
+/* This macro is provided for backward compatibility. */
+#ifndef YY_LOCATION_PRINT
+# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
 #endif
 
-#ifdef YYPURE
-#ifdef YYLSP_NEEDED
+
+/* YYLEX -- calling `yylex' with the right arguments.  */
 #ifdef YYLEX_PARAM
-#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
+# define YYLEX yylex (YYLEX_PARAM)
 #else
-#define YYLEX		yylex(&yylval, &yylloc)
+# define YYLEX yylex ()
 #endif
-#else /* not YYLSP_NEEDED */
-#ifdef YYLEX_PARAM
-#define YYLEX		yylex(&yylval, YYLEX_PARAM)
+
+/* Enable debugging if requested.  */
+#if YYDEBUG
+
+# ifndef YYFPRINTF
+#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYFPRINTF fprintf
+# endif
+
+# define YYDPRINTF(Args)			\
+do {						\
+  if (yydebug)					\
+    YYFPRINTF Args;				\
+} while (YYID (0))
+
+# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
+do {									  \
+  if (yydebug)								  \
+    {									  \
+      YYFPRINTF (stderr, "%s ", Title);					  \
+      yy_symbol_print (stderr,						  \
+		  Type, Value); \
+      YYFPRINTF (stderr, "\n");						  \
+    }									  \
+} while (YYID (0))
+
+
+/*--------------------------------.
+| Print this symbol on YYOUTPUT.  |
+`--------------------------------*/
+
+/*ARGSUSED*/
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
 #else
-#define YYLEX		yylex(&yylval)
-#endif
-#endif /* not YYLSP_NEEDED */
+static void
+yy_symbol_value_print (yyoutput, yytype, yyvaluep)
+    FILE *yyoutput;
+    int yytype;
+    YYSTYPE const * const yyvaluep;
 #endif
+{
+  FILE *yyo = yyoutput;
+  YYUSE (yyo);
+  if (!yyvaluep)
+    return;
+# ifdef YYPRINT
+  if (yytype < YYNTOKENS)
+    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
+# else
+  YYUSE (yyoutput);
+# endif
+  switch (yytype)
+    {
+      default:
+        break;
+    }
+}
 
-/* If nonreentrant, generate the variables here */
 
-#ifndef YYPURE
+/*--------------------------------.
+| Print this symbol on YYOUTPUT.  |
+`--------------------------------*/
 
-int	yychar;			/*  the lookahead symbol		*/
-YYSTYPE	yylval;			/*  the semantic value of the		*/
-				/*  lookahead symbol			*/
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
+#else
+static void
+yy_symbol_print (yyoutput, yytype, yyvaluep)
+    FILE *yyoutput;
+    int yytype;
+    YYSTYPE const * const yyvaluep;
+#endif
+{
+  if (yytype < YYNTOKENS)
+    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
+  else
+    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);
 
-#ifdef YYLSP_NEEDED
-YYLTYPE yylloc;			/*  location data for the lookahead	*/
-				/*  symbol				*/
+  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
+  YYFPRINTF (yyoutput, ")");
+}
+
+/*------------------------------------------------------------------.
+| yy_stack_print -- Print the state stack from its BOTTOM up to its |
+| TOP (included).                                                   |
+`------------------------------------------------------------------*/
+
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
+#else
+static void
+yy_stack_print (yybottom, yytop)
+    yytype_int16 *yybottom;
+    yytype_int16 *yytop;
 #endif
+{
+  YYFPRINTF (stderr, "Stack now");
+  for (; yybottom <= yytop; yybottom++)
+    {
+      int yybot = *yybottom;
+      YYFPRINTF (stderr, " %d", yybot);
+    }
+  YYFPRINTF (stderr, "\n");
+}
 
-int yynerrs;			/*  number of parse errors so far       */
-#endif  /* not YYPURE */
+# define YY_STACK_PRINT(Bottom, Top)				\
+do {								\
+  if (yydebug)							\
+    yy_stack_print ((Bottom), (Top));				\
+} while (YYID (0))
 
-#if YYDEBUG != 0
-int yydebug;			/*  nonzero means print parse trace	*/
-/* Since this is uninitialized, it does not stop multiple parsers
-   from coexisting.  */
+
+/*------------------------------------------------.
+| Report that the YYRULE is going to be reduced.  |
+`------------------------------------------------*/
+
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
+#else
+static void
+yy_reduce_print (yyvsp, yyrule)
+    YYSTYPE *yyvsp;
+    int yyrule;
 #endif
+{
+  int yynrhs = yyr2[yyrule];
+  int yyi;
+  unsigned long int yylno = yyrline[yyrule];
+  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
+	     yyrule - 1, yylno);
+  /* The symbols being reduced.  */
+  for (yyi = 0; yyi < yynrhs; yyi++)
+    {
+      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
+      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
+		       &(yyvsp[(yyi + 1) - (yynrhs)])
+		       		       );
+      YYFPRINTF (stderr, "\n");
+    }
+}
+
+# define YY_REDUCE_PRINT(Rule)		\
+do {					\
+  if (yydebug)				\
+    yy_reduce_print (yyvsp, Rule); \
+} while (YYID (0))
 
-/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/
+/* Nonzero means print parse trace.  It is left uninitialized so that
+   multiple parsers can coexist.  */
+int yydebug;
+#else /* !YYDEBUG */
+# define YYDPRINTF(Args)
+# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
+# define YY_STACK_PRINT(Bottom, Top)
+# define YY_REDUCE_PRINT(Rule)
+#endif /* !YYDEBUG */
 
+
+/* YYINITDEPTH -- initial size of the parser's stacks.  */
 #ifndef	YYINITDEPTH
-#define YYINITDEPTH 200
+# define YYINITDEPTH 200
 #endif
 
-/*  YYMAXDEPTH is the maximum size the stacks can grow to
-    (effective only if the built-in stack extension method is used).  */
+/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
+   if the built-in stack extension method is used).
 
-#if YYMAXDEPTH == 0
-#undef YYMAXDEPTH
-#endif
+   Do not make this value too large; the results are undefined if
+   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
+   evaluated with infinite-precision integer arithmetic.  */
 
 #ifndef YYMAXDEPTH
-#define YYMAXDEPTH 10000
+# define YYMAXDEPTH 10000
 #endif
 
-/* Prevent warning if -Wstrict-prototypes.  */
-#ifdef __GNUC__
-int yyparse (void);
+
+#if YYERROR_VERBOSE
+
+# ifndef yystrlen
+#  if defined __GLIBC__ && defined _STRING_H
+#   define yystrlen strlen
+#  else
+/* Return the length of YYSTR.  */
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static YYSIZE_T
+yystrlen (const char *yystr)
+#else
+static YYSIZE_T
+yystrlen (yystr)
+    const char *yystr;
 #endif
-
-#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
-#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
-#else				/* not GNU C or C++ */
-#ifndef __cplusplus
-
-/* This is the most reliable way to avoid incompatibilities
-   in available built-in functions on various systems.  */
-static void
-__yy_memcpy (to, from, count)
-     char *to;
-     char *from;
-     int count;
 {
-  register char *f = from;
-  register char *t = to;
-  register int i = count;
+  YYSIZE_T yylen;
+  for (yylen = 0; yystr[yylen]; yylen++)
+    continue;
+  return yylen;
+}
+#  endif
+# endif
+
+# ifndef yystpcpy
+#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
+#   define yystpcpy stpcpy
+#  else
+/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
+   YYDEST.  */
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static char *
+yystpcpy (char *yydest, const char *yysrc)
+#else
+static char *
+yystpcpy (yydest, yysrc)
+    char *yydest;
+    const char *yysrc;
+#endif
+{
+  char *yyd = yydest;
+  const char *yys = yysrc;
+
+  while ((*yyd++ = *yys++) != '\0')
+    continue;
 
-  while (i-- > 0)
-    *t++ = *f++;
+  return yyd - 1;
 }
+#  endif
+# endif
+
+# ifndef yytnamerr
+/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
+   quotes and backslashes, so that it's suitable for yyerror.  The
+   heuristic is that double-quoting is unnecessary unless the string
+   contains an apostrophe, a comma, or backslash (other than
+   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
+   null, do not copy; instead, return the length of what the result
+   would have been.  */
+static YYSIZE_T
+yytnamerr (char *yyres, const char *yystr)
+{
+  if (*yystr == '"')
+    {
+      YYSIZE_T yyn = 0;
+      char const *yyp = yystr;
+
+      for (;;)
+	switch (*++yyp)
+	  {
+	  case '\'':
+	  case ',':
+	    goto do_not_strip_quotes;
+
+	  case '\\':
+	    if (*++yyp != '\\')
+	      goto do_not_strip_quotes;
+	    /* Fall through.  */
+	  default:
+	    if (yyres)
+	      yyres[yyn] = *yyp;
+	    yyn++;
+	    break;
+
+	  case '"':
+	    if (yyres)
+	      yyres[yyn] = '\0';
+	    return yyn;
+	  }
+    do_not_strip_quotes: ;
+    }
 
-#else /* __cplusplus */
+  if (! yyres)
+    return yystrlen (yystr);
 
-/* This is the most reliable way to avoid incompatibilities
-   in available built-in functions on various systems.  */
-static void
-__yy_memcpy (char *to, char *from, int count)
+  return yystpcpy (yyres, yystr) - yyres;
+}
+# endif
+
+/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
+   about the unexpected token YYTOKEN for the state stack whose top is
+   YYSSP.
+
+   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
+   not large enough to hold the message.  In that case, also set
+   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
+   required number of bytes is too large to store.  */
+static int
+yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
+                yytype_int16 *yyssp, int yytoken)
 {
-  register char *f = from;
-  register char *t = to;
-  register int i = count;
+  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
+  YYSIZE_T yysize = yysize0;
+  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
+  /* Internationalized format string. */
+  const char *yyformat = YY_NULL;
+  /* Arguments of yyformat. */
+  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
+  /* Number of reported tokens (one for the "unexpected", one per
+     "expected"). */
+  int yycount = 0;
+
+  /* There are many possibilities here to consider:
+     - Assume YYFAIL is not used.  It's too flawed to consider.  See
+       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
+       for details.  YYERROR is fine as it does not invoke this
+       function.
+     - If this state is a consistent state with a default action, then
+       the only way this function was invoked is if the default action
+       is an error action.  In that case, don't check for expected
+       tokens because there are none.
+     - The only way there can be no lookahead present (in yychar) is if
+       this state is a consistent state with a default action.  Thus,
+       detecting the absence of a lookahead is sufficient to determine
+       that there is no unexpected or expected token to report.  In that
+       case, just report a simple "syntax error".
+     - Don't assume there isn't a lookahead just because this state is a
+       consistent state with a default action.  There might have been a
+       previous inconsistent state, consistent state with a non-default
+       action, or user semantic action that manipulated yychar.
+     - Of course, the expected token list depends on states to have
+       correct lookahead information, and it depends on the parser not
+       to perform extra reductions after fetching a lookahead from the
+       scanner and before detecting a syntax error.  Thus, state merging
+       (from LALR or IELR) and default reductions corrupt the expected
+       token list.  However, the list is correct for canonical LR with
+       one exception: it will still contain any token that will not be
+       accepted due to an error action in a later state.
+  */
+  if (yytoken != YYEMPTY)
+    {
+      int yyn = yypact[*yyssp];
+      yyarg[yycount++] = yytname[yytoken];
+      if (!yypact_value_is_default (yyn))
+        {
+          /* Start YYX at -YYN if negative to avoid negative indexes in
+             YYCHECK.  In other words, skip the first -YYN actions for
+             this state because they are default actions.  */
+          int yyxbegin = yyn < 0 ? -yyn : 0;
+          /* Stay within bounds of both yycheck and yytname.  */
+          int yychecklim = YYLAST - yyn + 1;
+          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
+          int yyx;
+
+          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
+            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
+                && !yytable_value_is_error (yytable[yyx + yyn]))
+              {
+                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
+                  {
+                    yycount = 1;
+                    yysize = yysize0;
+                    break;
+                  }
+                yyarg[yycount++] = yytname[yyx];
+                {
+                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
+                  if (! (yysize <= yysize1
+                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
+                    return 2;
+                  yysize = yysize1;
+                }
+              }
+        }
+    }
+
+  switch (yycount)
+    {
+# define YYCASE_(N, S)                      \
+      case N:                               \
+        yyformat = S;                       \
+      break
+      YYCASE_(0, YY_("syntax error"));
+      YYCASE_(1, YY_("syntax error, unexpected %s"));
+      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
+      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
+      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
+      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
+# undef YYCASE_
+    }
 
-  while (i-- > 0)
-    *t++ = *f++;
+  {
+    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
+    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
+      return 2;
+    yysize = yysize1;
+  }
+
+  if (*yymsg_alloc < yysize)
+    {
+      *yymsg_alloc = 2 * yysize;
+      if (! (yysize <= *yymsg_alloc
+             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
+        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
+      return 1;
+    }
+
+  /* Avoid sprintf, as that infringes on the user's name space.
+     Don't have undefined behavior even if the translation
+     produced a string with the wrong number of "%s"s.  */
+  {
+    char *yyp = *yymsg;
+    int yyi = 0;
+    while ((*yyp = *yyformat) != '\0')
+      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
+        {
+          yyp += yytnamerr (yyp, yyarg[yyi++]);
+          yyformat += 2;
+        }
+      else
+        {
+          yyp++;
+          yyformat++;
+        }
+  }
+  return 0;
 }
+#endif /* YYERROR_VERBOSE */
 
+/*-----------------------------------------------.
+| Release the memory associated to this symbol.  |
+`-----------------------------------------------*/
+
+/*ARGSUSED*/
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
+#else
+static void
+yydestruct (yymsg, yytype, yyvaluep)
+    const char *yymsg;
+    int yytype;
+    YYSTYPE *yyvaluep;
 #endif
-#endif
-
-#line 196 "/usr/lib/bison.simple"
+{
+  YYUSE (yyvaluep);
 
-/* The user can define YYPARSE_PARAM as the name of an argument to be passed
-   into yyparse.  The argument should have type void *.
-   It should actually point to an object.
-   Grammar actions can access the variable by casting it
-   to the proper pointer type.  */
+  if (!yymsg)
+    yymsg = "Deleting";
+  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
 
-#ifdef YYPARSE_PARAM
-#ifdef __cplusplus
-#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
-#define YYPARSE_PARAM_DECL
-#else /* not __cplusplus */
-#define YYPARSE_PARAM_ARG YYPARSE_PARAM
-#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
-#endif /* not __cplusplus */
-#else /* not YYPARSE_PARAM */
-#define YYPARSE_PARAM_ARG
-#define YYPARSE_PARAM_DECL
-#endif /* not YYPARSE_PARAM */
+  switch (yytype)
+    {
 
-int
-yyparse(YYPARSE_PARAM_ARG)
-     YYPARSE_PARAM_DECL
-{
-  register int yystate;
-  register int yyn;
-  register short *yyssp;
-  register YYSTYPE *yyvsp;
-  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
-  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */
+      default:
+        break;
+    }
+}
 
-  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
-  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/
 
-  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
-  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */
 
-#ifdef YYLSP_NEEDED
-  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
-  YYLTYPE *yyls = yylsa;
-  YYLTYPE *yylsp;
 
-#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
-#else
-#define YYPOPSTACK   (yyvsp--, yyssp--)
-#endif
+/* The lookahead symbol.  */
+int yychar;
 
-  int yystacksize = YYINITDEPTH;
 
-#ifdef YYPURE
-  int yychar;
-  YYSTYPE yylval;
-  int yynerrs;
-#ifdef YYLSP_NEEDED
-  YYLTYPE yylloc;
+#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+# define YY_IGNORE_MAYBE_UNINITIALIZED_END
 #endif
+#ifndef YY_INITIAL_VALUE
+# define YY_INITIAL_VALUE(Value) /* Nothing. */
 #endif
 
-  YYSTYPE yyval;		/*  the variable used to return		*/
-				/*  semantic values from the action	*/
-				/*  routines				*/
+/* The semantic value of the lookahead symbol.  */
+YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);
+
+/* Number of syntax errors so far.  */
+int yynerrs;
+
 
-  int yylen;
+/*----------.
+| yyparse.  |
+`----------*/
 
-#if YYDEBUG != 0
-  if (yydebug)
-    fprintf(stderr, "Starting parse\n");
+#ifdef YYPARSE_PARAM
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+int
+yyparse (void *YYPARSE_PARAM)
+#else
+int
+yyparse (YYPARSE_PARAM)
+    void *YYPARSE_PARAM;
 #endif
+#else /* ! YYPARSE_PARAM */
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+int
+yyparse (void)
+#else
+int
+yyparse ()
+
+#endif
+#endif
+{
+    int yystate;
+    /* Number of tokens to shift before error messages enabled.  */
+    int yyerrstatus;
+
+    /* The stacks and their tools:
+       `yyss': related to states.
+       `yyvs': related to semantic values.
+
+       Refer to the stacks through separate pointers, to allow yyoverflow
+       to reallocate them elsewhere.  */
+
+    /* The state stack.  */
+    yytype_int16 yyssa[YYINITDEPTH];
+    yytype_int16 *yyss;
+    yytype_int16 *yyssp;
+
+    /* The semantic value stack.  */
+    YYSTYPE yyvsa[YYINITDEPTH];
+    YYSTYPE *yyvs;
+    YYSTYPE *yyvsp;
+
+    YYSIZE_T yystacksize;
+
+  int yyn;
+  int yyresult;
+  /* Lookahead token as an internal (translated) token number.  */
+  int yytoken = 0;
+  /* The variables used to return semantic value and location from the
+     action routines.  */
+  YYSTYPE yyval;
+
+#if YYERROR_VERBOSE
+  /* Buffer for error messages, and its allocated size.  */
+  char yymsgbuf[128];
+  char *yymsg = yymsgbuf;
+  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
+#endif
+
+#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))
+
+  /* The number of symbols on the RHS of the reduced rule.
+     Keep to zero when no symbol should be popped.  */
+  int yylen = 0;
+
+  yyssp = yyss = yyssa;
+  yyvsp = yyvs = yyvsa;
+  yystacksize = YYINITDEPTH;
+
+  YYDPRINTF ((stderr, "Starting parse\n"));
 
   yystate = 0;
   yyerrstatus = 0;
   yynerrs = 0;
-  yychar = YYEMPTY;		/* Cause a token to be read.  */
+  yychar = YYEMPTY; /* Cause a token to be read.  */
+  goto yysetstate;
 
-  /* Initialize stack pointers.
-     Waste one element of value and location stack
-     so that they stay on the same level as the state stack.
-     The wasted elements are never initialized.  */
+/*------------------------------------------------------------.
+| yynewstate -- Push a new state, which is found in yystate.  |
+`------------------------------------------------------------*/
+ yynewstate:
+  /* In all cases, when you get here, the value and location stacks
+     have just been pushed.  So pushing a state here evens the stacks.  */
+  yyssp++;
 
-  yyssp = yyss - 1;
-  yyvsp = yyvs;
-#ifdef YYLSP_NEEDED
-  yylsp = yyls;
-#endif
+ yysetstate:
+  *yyssp = (yytype_int16)yystate;
 
-/* Push a new state, which is found in  yystate  .  */
-/* In all cases, when you get here, the value and location stacks
-   have just been pushed. so pushing a state here evens the stacks.  */
-yynewstate:
-
-  *++yyssp = yystate;
-
-  if (yyssp >= yyss + yystacksize - 1)
+  if (yyss + yystacksize - 1 <= yyssp)
     {
-      /* Give user a chance to reallocate the stack */
-      /* Use copies of these so that the &'s don't force the real ones into memory. */
-      YYSTYPE *yyvs1 = yyvs;
-      short *yyss1 = yyss;
-#ifdef YYLSP_NEEDED
-      YYLTYPE *yyls1 = yyls;
-#endif
-
       /* Get the current used size of the three stacks, in elements.  */
-      int size = yyssp - yyss + 1;
+      YYSIZE_T yysize = (YYSIZE_T)(yyssp - yyss + 1);
 
 #ifdef yyoverflow
-      /* Each stack pointer address is followed by the size of
-	 the data in use in that stack, in bytes.  */
-#ifdef YYLSP_NEEDED
-      /* This used to be a conditional around just the two extra args,
-	 but that might be undefined if yyoverflow is a macro.  */
-      yyoverflow("parser stack overflow",
-		 &yyss1, size * sizeof (*yyssp),
-		 &yyvs1, size * sizeof (*yyvsp),
-		 &yyls1, size * sizeof (*yylsp),
-		 &yystacksize);
-#else
-      yyoverflow("parser stack overflow",
-		 &yyss1, size * sizeof (*yyssp),
-		 &yyvs1, size * sizeof (*yyvsp),
-		 &yystacksize);
-#endif
-
-      yyss = yyss1; yyvs = yyvs1;
-#ifdef YYLSP_NEEDED
-      yyls = yyls1;
-#endif
+      {
+	/* Give user a chance to reallocate the stack.  Use copies of
+	   these so that the &'s don't force the real ones into
+	   memory.  */
+	YYSTYPE *yyvs1 = yyvs;
+	yytype_int16 *yyss1 = yyss;
+
+	/* Each stack pointer address is followed by the size of the
+	   data in use in that stack, in bytes.  This used to be a
+	   conditional around just the two extra args, but that might
+	   be undefined if yyoverflow is a macro.  */
+	yyoverflow (YY_("memory exhausted"),
+		    &yyss1, yysize * sizeof (*yyssp),
+		    &yyvs1, yysize * sizeof (*yyvsp),
+		    &yystacksize);
+
+	yyss = yyss1;
+	yyvs = yyvs1;
+      }
 #else /* no yyoverflow */
+# ifndef YYSTACK_RELOCATE
+      goto yyexhaustedlab;
+# else
       /* Extend the stack our own way.  */
-      if (yystacksize >= YYMAXDEPTH)
-	{
-	  yyerror("parser stack overflow");
-	  return 2;
-	}
+      if (YYMAXDEPTH <= yystacksize)
+	goto yyexhaustedlab;
       yystacksize *= 2;
-      if (yystacksize > YYMAXDEPTH)
+      if (YYMAXDEPTH < yystacksize)
 	yystacksize = YYMAXDEPTH;
-      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
-      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
-      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
-      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
-#ifdef YYLSP_NEEDED
-      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
-      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
-#endif
+
+      {
+	yytype_int16 *yyss1 = yyss;
+	union yyalloc *yyptr =
+	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
+	if (! yyptr)
+	  goto yyexhaustedlab;
+	YYSTACK_RELOCATE (yyss_alloc, yyss);
+	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
+#  undef YYSTACK_RELOCATE
+	if (yyss1 != yyssa)
+	  YYSTACK_FREE (yyss1);
+      }
+# endif
 #endif /* no yyoverflow */
 
-      yyssp = yyss + size - 1;
-      yyvsp = yyvs + size - 1;
-#ifdef YYLSP_NEEDED
-      yylsp = yyls + size - 1;
-#endif
+      yyssp = yyss + yysize - 1;
+      yyvsp = yyvs + yysize - 1;
 
-#if YYDEBUG != 0
-      if (yydebug)
-	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
-#endif
+      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
+		  (unsigned long int) yystacksize));
 
-      if (yyssp >= yyss + yystacksize - 1)
+      if (yyss + yystacksize - 1 <= yyssp)
 	YYABORT;
     }
 
-#if YYDEBUG != 0
-  if (yydebug)
-    fprintf(stderr, "Entering state %d\n", yystate);
-#endif
+  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
+
+  if (yystate == YYFINAL)
+    YYACCEPT;
 
   goto yybackup;
- yybackup:
 
-/* Do appropriate processing given the current state.  */
-/* Read a lookahead token if we need one and don't already have one.  */
-/* yyresume: */
+/*-----------.
+| yybackup.  |
+`-----------*/
+yybackup:
 
-  /* First try to decide what to do without reference to lookahead token.  */
+  /* Do appropriate processing given the current state.  Read a
+     lookahead token if we need one and don't already have one.  */
 
+  /* First try to decide what to do without reference to lookahead token.  */
   yyn = yypact[yystate];
-  if (yyn == YYFLAG)
+  if (yypact_value_is_default (yyn))
     goto yydefault;
 
   /* Not known => get a lookahead token if don't already have one.  */
 
-  /* yychar is either YYEMPTY or YYEOF
-     or a valid token in external form.  */
-
+  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
   if (yychar == YYEMPTY)
     {
-#if YYDEBUG != 0
-      if (yydebug)
-	fprintf(stderr, "Reading a token: ");
-#endif
+      YYDPRINTF ((stderr, "Reading a token: "));
       yychar = YYLEX;
     }
 
-  /* Convert token to internal form (in yychar1) for indexing tables with */
-
-  if (yychar <= 0)		/* This means end of input. */
+  if (yychar <= YYEOF)
     {
-      yychar1 = 0;
-      yychar = YYEOF;		/* Don't call YYLEX any more */
-
-#if YYDEBUG != 0
-      if (yydebug)
-	fprintf(stderr, "Now at end of input.\n");
-#endif
+      yychar = yytoken = YYEOF;
+      YYDPRINTF ((stderr, "Now at end of input.\n"));
     }
   else
     {
-      yychar1 = YYTRANSLATE(yychar);
-
-#if YYDEBUG != 0
-      if (yydebug)
-	{
-	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
-	  /* Give the individual parser a way to print the precise meaning
-	     of a token, for further debugging info.  */
-#ifdef YYPRINT
-	  YYPRINT (stderr, yychar, yylval);
-#endif
-	  fprintf (stderr, ")\n");
-	}
-#endif
+      yytoken = YYTRANSLATE (yychar);
+      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
     }
 
-  yyn += yychar1;
-  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
+  /* If the proper action on seeing token YYTOKEN is to reduce or to
+     detect an error, take that action.  */
+  yyn += yytoken;
+  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
     goto yydefault;
-
   yyn = yytable[yyn];
-
-  /* yyn is what to do for this token type in this state.
-     Negative => reduce, -yyn is rule number.
-     Positive => shift, yyn is new state.
-       New state is final state => don't bother to shift,
-       just return success.
-     0, or most negative number => error.  */
-
-  if (yyn < 0)
+  if (yyn <= 0)
     {
-      if (yyn == YYFLAG)
-	goto yyerrlab;
+      if (yytable_value_is_error (yyn))
+        goto yyerrlab;
       yyn = -yyn;
       goto yyreduce;
     }
-  else if (yyn == 0)
-    goto yyerrlab;
 
-  if (yyn == YYFINAL)
-    YYACCEPT;
+  /* Count tokens shifted since error; after three, turn off error
+     status.  */
+  if (yyerrstatus)
+    yyerrstatus--;
 
   /* Shift the lookahead token.  */
+  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
 
-#if YYDEBUG != 0
-  if (yydebug)
-    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
-#endif
-
-  /* Discard the token being shifted unless it is eof.  */
-  if (yychar != YYEOF)
-    yychar = YYEMPTY;
+  /* Discard the shifted token.  */
+  yychar = YYEMPTY;
 
+  yystate = yyn;
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
   *++yyvsp = yylval;
-#ifdef YYLSP_NEEDED
-  *++yylsp = yylloc;
-#endif
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
 
-  /* count tokens shifted since error; after three, turn off error status.  */
-  if (yyerrstatus) yyerrstatus--;
-
-  yystate = yyn;
   goto yynewstate;
 
-/* Do the default action for the current state.  */
-yydefault:
 
+/*-----------------------------------------------------------.
+| yydefault -- do the default action for the current state.  |
+`-----------------------------------------------------------*/
+yydefault:
   yyn = yydefact[yystate];
   if (yyn == 0)
     goto yyerrlab;
+  goto yyreduce;
+
 
-/* Do a reduction.  yyn is the number of a rule to reduce with.  */
+/*-----------------------------.
+| yyreduce -- Do a reduction.  |
+`-----------------------------*/
 yyreduce:
+  /* yyn is the number of a rule to reduce with.  */
   yylen = yyr2[yyn];
-  if (yylen > 0)
-    yyval = yyvsp[1-yylen]; /* implement default value of the action */
 
-#if YYDEBUG != 0
-  if (yydebug)
-    {
-      int i;
-
-      fprintf (stderr, "Reducing via rule %d (line %d), ",
-	       yyn, yyrline[yyn]);
-
-      /* Print the symbols being reduced, and their result.  */
-      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
-	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
-      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
-    }
-#endif
+  /* If YYLEN is nonzero, implement the default value of the action:
+     `$$ = $1'.
 
+     Otherwise, the following line sets YYVAL to garbage.
+     This behavior is undocumented and Bison
+     users should not rely upon it.  Assigning to YYVAL
+     unconditionally makes the parser a bit smaller, and it avoids a
+     GCC warning that YYVAL may be used uninitialized.  */
+  yyval = yyvsp[1-yylen];
 
-  switch (yyn) {
 
-case 1:
+  YY_REDUCE_PRINT (yyn);
+  switch (yyn)
+    {
+        case 2:
+/* Line 1792 of yacc.c  */
 #line 234 "c-parse.y"
-{ if (pedantic)
+    { if (pedantic)
 		    pedwarn ("ANSI C forbids an empty source file");
 		  finish_file ();
-		;
-    break;}
-case 2:
+		}
+    break;
+
+  case 3:
+/* Line 1792 of yacc.c  */
 #line 239 "c-parse.y"
-{
+    {
 		  /* In case there were missing closebraces,
 		     get us back to the global binding level.  */
 		  while (! global_bindings_p ())
 		    poplevel (0, 0, 0);
 		  finish_file ();
-		;
-    break;}
-case 3:
+		}
+    break;
+
+  case 4:
+/* Line 1792 of yacc.c  */
 #line 253 "c-parse.y"
-{yyval.ttype = NULL_TREE; ;
-    break;}
-case 5:
+    {(yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 6:
+/* Line 1792 of yacc.c  */
 #line 254 "c-parse.y"
-{yyval.ttype = NULL_TREE; ;
-    break;}
-case 9:
+    {(yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 10:
+/* Line 1792 of yacc.c  */
 #line 261 "c-parse.y"
-{ STRIP_NOPS (yyvsp[-2].ttype);
-		  if ((TREE_CODE (yyvsp[-2].ttype) == ADDR_EXPR
-		       && TREE_CODE (TREE_OPERAND (yyvsp[-2].ttype, 0)) == STRING_CST)
-		      || TREE_CODE (yyvsp[-2].ttype) == STRING_CST)
-		    assemble_asm (yyvsp[-2].ttype);
+    { STRIP_NOPS ((yyvsp[(3) - (5)].ttype));
+		  if ((TREE_CODE ((yyvsp[(3) - (5)].ttype)) == ADDR_EXPR
+		       && TREE_CODE (TREE_OPERAND ((yyvsp[(3) - (5)].ttype), 0)) == STRING_CST)
+		      || TREE_CODE ((yyvsp[(3) - (5)].ttype)) == STRING_CST)
+		    assemble_asm ((yyvsp[(3) - (5)].ttype));
 		  else
-		    error ("argument of `asm' is not a constant string"); ;
-    break;}
-case 10:
+		    error ("argument of `asm' is not a constant string"); }
+    break;
+
+  case 11:
+/* Line 1792 of yacc.c  */
 #line 269 "c-parse.y"
-{ pedantic = yyvsp[-1].itype; ;
-    break;}
-case 11:
+    { pedantic = (yyvsp[(1) - (2)].itype); }
+    break;
+
+  case 12:
+/* Line 1792 of yacc.c  */
 #line 274 "c-parse.y"
-{ if (pedantic)
+    { if (pedantic)
 		    error ("ANSI C forbids data definition with no type or storage class");
 		  else if (!flag_traditional)
 		    warning ("data definition has no type or storage class"); 
@@ -1751,241 +2573,327 @@ case 11:
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 12:
+		  resume_momentary ((yyvsp[(1) - (3)].itype)); }
+    break;
+
+  case 13:
+/* Line 1792 of yacc.c  */
 #line 284 "c-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);
+    { current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 13:
+		  resume_momentary ((yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 14:
+/* Line 1792 of yacc.c  */
 #line 289 "c-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);
+    { current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype);  ;
-    break;}
-case 14:
+		  resume_momentary ((yyvsp[(2) - (4)].itype));  }
+    break;
+
+  case 15:
+/* Line 1792 of yacc.c  */
 #line 294 "c-parse.y"
-{ pedwarn ("empty declaration"); ;
-    break;}
-case 15:
+    { pedwarn ("empty declaration"); }
+    break;
+
+  case 16:
+/* Line 1792 of yacc.c  */
 #line 296 "c-parse.y"
-{ shadow_tag (yyvsp[-1].ttype); ;
-    break;}
-case 18:
+    { shadow_tag ((yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 19:
+/* Line 1792 of yacc.c  */
 #line 300 "c-parse.y"
-{ if (pedantic)
-		    pedwarn ("ANSI C does not allow extra `;' outside of a function"); ;
-    break;}
-case 19:
+    { if (pedantic)
+		    pedwarn ("ANSI C does not allow extra `;' outside of a function"); }
+    break;
+
+  case 20:
+/* Line 1792 of yacc.c  */
 #line 306 "c-parse.y"
-{ if (! start_function (current_declspecs, yyvsp[0].ttype,
+    { if (! start_function (current_declspecs, (yyvsp[(3) - (3)].ttype),
 					prefix_attributes, NULL_TREE, 0))
 		    YYERROR1;
-		  reinit_parse_for_function (); ;
-    break;}
-case 20:
+		  reinit_parse_for_function (); }
+    break;
+
+  case 21:
+/* Line 1792 of yacc.c  */
 #line 311 "c-parse.y"
-{ store_parm_decls (); ;
-    break;}
-case 21:
+    { store_parm_decls (); }
+    break;
+
+  case 22:
+/* Line 1792 of yacc.c  */
 #line 313 "c-parse.y"
-{ finish_function (0); 
+    { finish_function (0); 
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-5].itype); ;
-    break;}
-case 22:
+		  resume_momentary ((yyvsp[(2) - (7)].itype)); }
+    break;
+
+  case 23:
+/* Line 1792 of yacc.c  */
 #line 319 "c-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);
+    { current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 23:
+		  resume_momentary ((yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 24:
+/* Line 1792 of yacc.c  */
 #line 324 "c-parse.y"
-{ if (! start_function (current_declspecs, yyvsp[0].ttype,
+    { if (! start_function (current_declspecs, (yyvsp[(3) - (3)].ttype),
 					prefix_attributes, NULL_TREE, 0))
 		    YYERROR1;
-		  reinit_parse_for_function (); ;
-    break;}
-case 24:
+		  reinit_parse_for_function (); }
+    break;
+
+  case 25:
+/* Line 1792 of yacc.c  */
 #line 329 "c-parse.y"
-{ store_parm_decls (); ;
-    break;}
-case 25:
+    { store_parm_decls (); }
+    break;
+
+  case 26:
+/* Line 1792 of yacc.c  */
 #line 331 "c-parse.y"
-{ finish_function (0); 
+    { finish_function (0); 
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-5].itype); ;
-    break;}
-case 26:
+		  resume_momentary ((yyvsp[(2) - (7)].itype)); }
+    break;
+
+  case 27:
+/* Line 1792 of yacc.c  */
 #line 337 "c-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);
+    { current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 27:
+		  resume_momentary ((yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 28:
+/* Line 1792 of yacc.c  */
 #line 342 "c-parse.y"
-{ if (! start_function (NULL_TREE, yyvsp[0].ttype,
+    { if (! start_function (NULL_TREE, (yyvsp[(2) - (2)].ttype),
 					prefix_attributes, NULL_TREE, 0))
 		    YYERROR1;
-		  reinit_parse_for_function (); ;
-    break;}
-case 28:
+		  reinit_parse_for_function (); }
+    break;
+
+  case 29:
+/* Line 1792 of yacc.c  */
 #line 347 "c-parse.y"
-{ store_parm_decls (); ;
-    break;}
-case 29:
+    { store_parm_decls (); }
+    break;
+
+  case 30:
+/* Line 1792 of yacc.c  */
 #line 349 "c-parse.y"
-{ finish_function (0); 
+    { finish_function (0); 
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-5].itype); ;
-    break;}
-case 30:
+		  resume_momentary ((yyvsp[(1) - (6)].itype)); }
+    break;
+
+  case 31:
+/* Line 1792 of yacc.c  */
 #line 355 "c-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);
+    { current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 33:
+		  resume_momentary ((yyvsp[(1) - (3)].itype)); }
+    break;
+
+  case 34:
+/* Line 1792 of yacc.c  */
 #line 367 "c-parse.y"
-{ yyval.code = ADDR_EXPR; ;
-    break;}
-case 34:
+    { (yyval.code) = ADDR_EXPR; }
+    break;
+
+  case 35:
+/* Line 1792 of yacc.c  */
 #line 369 "c-parse.y"
-{ yyval.code = NEGATE_EXPR; ;
-    break;}
-case 35:
+    { (yyval.code) = NEGATE_EXPR; }
+    break;
+
+  case 36:
+/* Line 1792 of yacc.c  */
 #line 371 "c-parse.y"
-{ yyval.code = CONVERT_EXPR; ;
-    break;}
-case 36:
+    { (yyval.code) = CONVERT_EXPR; }
+    break;
+
+  case 37:
+/* Line 1792 of yacc.c  */
 #line 373 "c-parse.y"
-{ yyval.code = PREINCREMENT_EXPR; ;
-    break;}
-case 37:
+    { (yyval.code) = PREINCREMENT_EXPR; }
+    break;
+
+  case 38:
+/* Line 1792 of yacc.c  */
 #line 375 "c-parse.y"
-{ yyval.code = PREDECREMENT_EXPR; ;
-    break;}
-case 38:
+    { (yyval.code) = PREDECREMENT_EXPR; }
+    break;
+
+  case 39:
+/* Line 1792 of yacc.c  */
 #line 377 "c-parse.y"
-{ yyval.code = BIT_NOT_EXPR; ;
-    break;}
-case 39:
+    { (yyval.code) = BIT_NOT_EXPR; }
+    break;
+
+  case 40:
+/* Line 1792 of yacc.c  */
 #line 379 "c-parse.y"
-{ yyval.code = TRUTH_NOT_EXPR; ;
-    break;}
-case 40:
+    { (yyval.code) = TRUTH_NOT_EXPR; }
+    break;
+
+  case 41:
+/* Line 1792 of yacc.c  */
 #line 383 "c-parse.y"
-{ yyval.ttype = build_compound_expr (yyvsp[0].ttype); ;
-    break;}
-case 41:
+    { (yyval.ttype) = build_compound_expr ((yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 42:
+/* Line 1792 of yacc.c  */
 #line 388 "c-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 43:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 44:
+/* Line 1792 of yacc.c  */
 #line 394 "c-parse.y"
-{ yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;
-    break;}
-case 44:
+    { (yyval.ttype) = build_tree_list (NULL_TREE, (yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 45:
+/* Line 1792 of yacc.c  */
 #line 396 "c-parse.y"
-{ chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;
-    break;}
-case 46:
+    { chainon ((yyvsp[(1) - (3)].ttype), build_tree_list (NULL_TREE, (yyvsp[(3) - (3)].ttype))); }
+    break;
+
+  case 47:
+/* Line 1792 of yacc.c  */
 #line 402 "c-parse.y"
-{ yyval.ttype = build_indirect_ref (yyvsp[0].ttype, "unary *"); ;
-    break;}
-case 47:
+    { (yyval.ttype) = build_indirect_ref ((yyvsp[(2) - (2)].ttype), "unary *"); }
+    break;
+
+  case 48:
+/* Line 1792 of yacc.c  */
 #line 405 "c-parse.y"
-{ yyval.ttype = yyvsp[0].ttype;
-		  pedantic = yyvsp[-1].itype; ;
-    break;}
-case 48:
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype);
+		  pedantic = (yyvsp[(1) - (2)].itype); }
+    break;
+
+  case 49:
+/* Line 1792 of yacc.c  */
 #line 408 "c-parse.y"
-{ yyval.ttype = build_unary_op (yyvsp[-1].code, yyvsp[0].ttype, 0);
-		  overflow_warning (yyval.ttype); ;
-    break;}
-case 49:
+    { (yyval.ttype) = build_unary_op ((yyvsp[(1) - (2)].code), (yyvsp[(2) - (2)].ttype), 0);
+		  overflow_warning ((yyval.ttype)); }
+    break;
+
+  case 50:
+/* Line 1792 of yacc.c  */
 #line 412 "c-parse.y"
-{ tree label = lookup_label (yyvsp[0].ttype);
+    { tree label = lookup_label ((yyvsp[(2) - (2)].ttype));
 		  if (pedantic)
 		    pedwarn ("ANSI C forbids `&&'");
 		  if (label == 0)
-		    yyval.ttype = null_pointer_node;
+		    (yyval.ttype) = null_pointer_node;
 		  else
 		    {
 		      TREE_USED (label) = 1;
-		      yyval.ttype = build1 (ADDR_EXPR, ptr_type_node, label);
-		      TREE_CONSTANT (yyval.ttype) = 1;
+		      (yyval.ttype) = build1 (ADDR_EXPR, ptr_type_node, label);
+		      TREE_CONSTANT ((yyval.ttype)) = 1;
 		    }
-		;
-    break;}
-case 50:
+		}
+    break;
+
+  case 51:
+/* Line 1792 of yacc.c  */
 #line 440 "c-parse.y"
-{ skip_evaluation--;
-		  if (TREE_CODE (yyvsp[0].ttype) == COMPONENT_REF
-		      && DECL_C_BIT_FIELD (TREE_OPERAND (yyvsp[0].ttype, 1)))
+    { skip_evaluation--;
+		  if (TREE_CODE ((yyvsp[(2) - (2)].ttype)) == COMPONENT_REF
+		      && DECL_C_BIT_FIELD (TREE_OPERAND ((yyvsp[(2) - (2)].ttype), 1)))
 		    error ("`sizeof' applied to a bit-field");
-		  yyval.ttype = c_sizeof (TREE_TYPE (yyvsp[0].ttype)); ;
-    break;}
-case 51:
+		  (yyval.ttype) = c_sizeof (TREE_TYPE ((yyvsp[(2) - (2)].ttype))); }
+    break;
+
+  case 52:
+/* Line 1792 of yacc.c  */
 #line 446 "c-parse.y"
-{ skip_evaluation--;
-		  yyval.ttype = c_sizeof (groktypename (yyvsp[-1].ttype)); ;
-    break;}
-case 52:
+    { skip_evaluation--;
+		  (yyval.ttype) = c_sizeof (groktypename ((yyvsp[(3) - (4)].ttype))); }
+    break;
+
+  case 53:
+/* Line 1792 of yacc.c  */
 #line 449 "c-parse.y"
-{ skip_evaluation--;
-		  yyval.ttype = c_alignof_expr (yyvsp[0].ttype); ;
-    break;}
-case 53:
+    { skip_evaluation--;
+		  (yyval.ttype) = c_alignof_expr ((yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 54:
+/* Line 1792 of yacc.c  */
 #line 452 "c-parse.y"
-{ skip_evaluation--;
-		  yyval.ttype = c_alignof (groktypename (yyvsp[-1].ttype)); ;
-    break;}
-case 54:
+    { skip_evaluation--;
+		  (yyval.ttype) = c_alignof (groktypename ((yyvsp[(3) - (4)].ttype))); }
+    break;
+
+  case 55:
+/* Line 1792 of yacc.c  */
 #line 455 "c-parse.y"
-{ yyval.ttype = build_unary_op (REALPART_EXPR, yyvsp[0].ttype, 0); ;
-    break;}
-case 55:
+    { (yyval.ttype) = build_unary_op (REALPART_EXPR, (yyvsp[(2) - (2)].ttype), 0); }
+    break;
+
+  case 56:
+/* Line 1792 of yacc.c  */
 #line 457 "c-parse.y"
-{ yyval.ttype = build_unary_op (IMAGPART_EXPR, yyvsp[0].ttype, 0); ;
-    break;}
-case 56:
+    { (yyval.ttype) = build_unary_op (IMAGPART_EXPR, (yyvsp[(2) - (2)].ttype), 0); }
+    break;
+
+  case 57:
+/* Line 1792 of yacc.c  */
 #line 461 "c-parse.y"
-{ skip_evaluation++; ;
-    break;}
-case 57:
+    { skip_evaluation++; }
+    break;
+
+  case 58:
+/* Line 1792 of yacc.c  */
 #line 465 "c-parse.y"
-{ skip_evaluation++; ;
-    break;}
-case 59:
+    { skip_evaluation++; }
+    break;
+
+  case 60:
+/* Line 1792 of yacc.c  */
 #line 471 "c-parse.y"
-{ tree type = groktypename (yyvsp[-2].ttype);
-		  yyval.ttype = build_c_cast (type, yyvsp[0].ttype); ;
-    break;}
-case 60:
+    { tree type = groktypename ((yyvsp[(2) - (4)].ttype));
+		  (yyval.ttype) = build_c_cast (type, (yyvsp[(4) - (4)].ttype)); }
+    break;
+
+  case 61:
+/* Line 1792 of yacc.c  */
 #line 474 "c-parse.y"
-{ start_init (NULL_TREE, NULL, 0);
-		  yyvsp[-2].ttype = groktypename (yyvsp[-2].ttype);
-		  really_start_incremental_init (yyvsp[-2].ttype); ;
-    break;}
-case 61:
+    { start_init (NULL_TREE, NULL, 0);
+		  (yyvsp[(2) - (4)].ttype) = groktypename ((yyvsp[(2) - (4)].ttype));
+		  really_start_incremental_init ((yyvsp[(2) - (4)].ttype)); }
+    break;
+
+  case 62:
+/* Line 1792 of yacc.c  */
 #line 478 "c-parse.y"
-{ char *name;
+    { char *name;
 		  tree result = pop_init_level (0);
-		  tree type = yyvsp[-5].ttype;
+		  tree type = (yyvsp[(2) - (7)].ttype);
 		  finish_init ();
 
 		  if (pedantic && ! flag_isoc9x)
@@ -1999,138 +2907,186 @@ case 61:
 		    }
 		  else
 		    name = "";
-		  yyval.ttype = result;
+		  (yyval.ttype) = result;
 		  if (TREE_CODE (type) == ARRAY_TYPE && TYPE_SIZE (type) == 0)
 		    {
-		      int failure = complete_array_type (type, yyval.ttype, 1);
+		      int failure = complete_array_type (type, (yyval.ttype), 1);
 		      if (failure)
 			abort ();
 		    }
-		;
-    break;}
-case 63:
+		}
+    break;
+
+  case 64:
+/* Line 1792 of yacc.c  */
 #line 507 "c-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 64:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 65:
+/* Line 1792 of yacc.c  */
 #line 509 "c-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 65:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 66:
+/* Line 1792 of yacc.c  */
 #line 511 "c-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 66:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 67:
+/* Line 1792 of yacc.c  */
 #line 513 "c-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 67:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 68:
+/* Line 1792 of yacc.c  */
 #line 515 "c-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 68:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 69:
+/* Line 1792 of yacc.c  */
 #line 517 "c-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 69:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 70:
+/* Line 1792 of yacc.c  */
 #line 519 "c-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 70:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 71:
+/* Line 1792 of yacc.c  */
 #line 521 "c-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 71:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 72:
+/* Line 1792 of yacc.c  */
 #line 523 "c-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 72:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 73:
+/* Line 1792 of yacc.c  */
 #line 525 "c-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 73:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 74:
+/* Line 1792 of yacc.c  */
 #line 527 "c-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 74:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 75:
+/* Line 1792 of yacc.c  */
 #line 529 "c-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 75:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 76:
+/* Line 1792 of yacc.c  */
 #line 531 "c-parse.y"
-{ yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[-1].ttype));
-		  skip_evaluation += yyvsp[-1].ttype == boolean_false_node; ;
-    break;}
-case 76:
+    { (yyvsp[(1) - (2)].ttype) = truthvalue_conversion (default_conversion ((yyvsp[(1) - (2)].ttype)));
+		  skip_evaluation += (yyvsp[(1) - (2)].ttype) == boolean_false_node; }
+    break;
+
+  case 77:
+/* Line 1792 of yacc.c  */
 #line 534 "c-parse.y"
-{ skip_evaluation -= yyvsp[-3].ttype == boolean_false_node;
-		  yyval.ttype = parser_build_binary_op (TRUTH_ANDIF_EXPR, yyvsp[-3].ttype, yyvsp[0].ttype); ;
-    break;}
-case 77:
+    { skip_evaluation -= (yyvsp[(1) - (4)].ttype) == boolean_false_node;
+		  (yyval.ttype) = parser_build_binary_op (TRUTH_ANDIF_EXPR, (yyvsp[(1) - (4)].ttype), (yyvsp[(4) - (4)].ttype)); }
+    break;
+
+  case 78:
+/* Line 1792 of yacc.c  */
 #line 537 "c-parse.y"
-{ yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[-1].ttype));
-		  skip_evaluation += yyvsp[-1].ttype == boolean_true_node; ;
-    break;}
-case 78:
+    { (yyvsp[(1) - (2)].ttype) = truthvalue_conversion (default_conversion ((yyvsp[(1) - (2)].ttype)));
+		  skip_evaluation += (yyvsp[(1) - (2)].ttype) == boolean_true_node; }
+    break;
+
+  case 79:
+/* Line 1792 of yacc.c  */
 #line 540 "c-parse.y"
-{ skip_evaluation -= yyvsp[-3].ttype == boolean_true_node;
-		  yyval.ttype = parser_build_binary_op (TRUTH_ORIF_EXPR, yyvsp[-3].ttype, yyvsp[0].ttype); ;
-    break;}
-case 79:
+    { skip_evaluation -= (yyvsp[(1) - (4)].ttype) == boolean_true_node;
+		  (yyval.ttype) = parser_build_binary_op (TRUTH_ORIF_EXPR, (yyvsp[(1) - (4)].ttype), (yyvsp[(4) - (4)].ttype)); }
+    break;
+
+  case 80:
+/* Line 1792 of yacc.c  */
 #line 543 "c-parse.y"
-{ yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[-1].ttype));
-		  skip_evaluation += yyvsp[-1].ttype == boolean_false_node; ;
-    break;}
-case 80:
+    { (yyvsp[(1) - (2)].ttype) = truthvalue_conversion (default_conversion ((yyvsp[(1) - (2)].ttype)));
+		  skip_evaluation += (yyvsp[(1) - (2)].ttype) == boolean_false_node; }
+    break;
+
+  case 81:
+/* Line 1792 of yacc.c  */
 #line 546 "c-parse.y"
-{ skip_evaluation += ((yyvsp[-4].ttype == boolean_true_node)
-				      - (yyvsp[-4].ttype == boolean_false_node)); ;
-    break;}
-case 81:
+    { skip_evaluation += (((yyvsp[(1) - (5)].ttype) == boolean_true_node)
+				      - ((yyvsp[(1) - (5)].ttype) == boolean_false_node)); }
+    break;
+
+  case 82:
+/* Line 1792 of yacc.c  */
 #line 549 "c-parse.y"
-{ skip_evaluation -= yyvsp[-6].ttype == boolean_true_node;
-		  yyval.ttype = build_conditional_expr (yyvsp[-6].ttype, yyvsp[-3].ttype, yyvsp[0].ttype); ;
-    break;}
-case 82:
+    { skip_evaluation -= (yyvsp[(1) - (7)].ttype) == boolean_true_node;
+		  (yyval.ttype) = build_conditional_expr ((yyvsp[(1) - (7)].ttype), (yyvsp[(4) - (7)].ttype), (yyvsp[(7) - (7)].ttype)); }
+    break;
+
+  case 83:
+/* Line 1792 of yacc.c  */
 #line 552 "c-parse.y"
-{ if (pedantic)
+    { if (pedantic)
 		    pedwarn ("ANSI C forbids omitting the middle term of a ?: expression");
 		  /* Make sure first operand is calculated only once.  */
-		  yyvsp[0].ttype = save_expr (yyvsp[-1].ttype);
-		  yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[0].ttype));
-		  skip_evaluation += yyvsp[-1].ttype == boolean_true_node; ;
-    break;}
-case 83:
+		  (yyvsp[(2) - (2)].ttype) = save_expr ((yyvsp[(1) - (2)].ttype));
+		  (yyvsp[(1) - (2)].ttype) = truthvalue_conversion (default_conversion ((yyvsp[(2) - (2)].ttype)));
+		  skip_evaluation += (yyvsp[(1) - (2)].ttype) == boolean_true_node; }
+    break;
+
+  case 84:
+/* Line 1792 of yacc.c  */
 #line 559 "c-parse.y"
-{ skip_evaluation -= yyvsp[-4].ttype == boolean_true_node;
-		  yyval.ttype = build_conditional_expr (yyvsp[-4].ttype, yyvsp[-3].ttype, yyvsp[0].ttype); ;
-    break;}
-case 84:
+    { skip_evaluation -= (yyvsp[(1) - (5)].ttype) == boolean_true_node;
+		  (yyval.ttype) = build_conditional_expr ((yyvsp[(1) - (5)].ttype), (yyvsp[(2) - (5)].ttype), (yyvsp[(5) - (5)].ttype)); }
+    break;
+
+  case 85:
+/* Line 1792 of yacc.c  */
 #line 562 "c-parse.y"
-{ char class;
-		  yyval.ttype = build_modify_expr (yyvsp[-2].ttype, NOP_EXPR, yyvsp[0].ttype);
-		  class = TREE_CODE_CLASS (TREE_CODE (yyval.ttype));
+    { char class;
+		  (yyval.ttype) = build_modify_expr ((yyvsp[(1) - (3)].ttype), NOP_EXPR, (yyvsp[(3) - (3)].ttype));
+		  class = TREE_CODE_CLASS (TREE_CODE ((yyval.ttype)));
 		  if (class == 'e' || class == '1'
 		      || class == '2' || class == '<')
-		    C_SET_EXP_ORIGINAL_CODE (yyval.ttype, MODIFY_EXPR);
-		;
-    break;}
-case 85:
+		    C_SET_EXP_ORIGINAL_CODE ((yyval.ttype), MODIFY_EXPR);
+		}
+    break;
+
+  case 86:
+/* Line 1792 of yacc.c  */
 #line 570 "c-parse.y"
-{ char class;
-		  yyval.ttype = build_modify_expr (yyvsp[-2].ttype, yyvsp[-1].code, yyvsp[0].ttype);
+    { char class;
+		  (yyval.ttype) = build_modify_expr ((yyvsp[(1) - (3)].ttype), (yyvsp[(2) - (3)].code), (yyvsp[(3) - (3)].ttype));
 		  /* This inhibits warnings in truthvalue_conversion.  */
-		  class = TREE_CODE_CLASS (TREE_CODE (yyval.ttype));
+		  class = TREE_CODE_CLASS (TREE_CODE ((yyval.ttype)));
 		  if (class == 'e' || class == '1'
 		      || class == '2' || class == '<')
-		    C_SET_EXP_ORIGINAL_CODE (yyval.ttype, ERROR_MARK);
-		;
-    break;}
-case 86:
+		    C_SET_EXP_ORIGINAL_CODE ((yyval.ttype), ERROR_MARK);
+		}
+    break;
+
+  case 87:
+/* Line 1792 of yacc.c  */
 #line 582 "c-parse.y"
-{
-		  yyval.ttype = lastiddecl;
-		  if (!yyval.ttype || yyval.ttype == error_mark_node)
+    {
+		  (yyval.ttype) = lastiddecl;
+		  if (!(yyval.ttype) || (yyval.ttype) == error_mark_node)
 		    {
 		      if (yychar == YYEMPTY)
 			yychar = YYLEX;
@@ -2138,25 +3094,25 @@ case 86:
 			{
 			    {
 			      /* Ordinary implicit function declaration.  */
-			      yyval.ttype = implicitly_declare (yyvsp[0].ttype);
-			      assemble_external (yyval.ttype);
-			      TREE_USED (yyval.ttype) = 1;
+			      (yyval.ttype) = implicitly_declare ((yyvsp[(1) - (1)].ttype));
+			      assemble_external ((yyval.ttype));
+			      TREE_USED ((yyval.ttype)) = 1;
 			    }
 			}
 		      else if (current_function_decl == 0)
 			{
 			  error ("`%s' undeclared here (not in a function)",
-				 IDENTIFIER_POINTER (yyvsp[0].ttype));
-			  yyval.ttype = error_mark_node;
+				 IDENTIFIER_POINTER ((yyvsp[(1) - (1)].ttype)));
+			  (yyval.ttype) = error_mark_node;
 			}
 		      else
 			{
 			    {
-			      if (IDENTIFIER_GLOBAL_VALUE (yyvsp[0].ttype) != error_mark_node
-				  || IDENTIFIER_ERROR_LOCUS (yyvsp[0].ttype) != current_function_decl)
+			      if (IDENTIFIER_GLOBAL_VALUE ((yyvsp[(1) - (1)].ttype)) != error_mark_node
+				  || IDENTIFIER_ERROR_LOCUS ((yyvsp[(1) - (1)].ttype)) != current_function_decl)
 				{
 				  error ("`%s' undeclared (first use in this function)",
-					 IDENTIFIER_POINTER (yyvsp[0].ttype));
+					 IDENTIFIER_POINTER ((yyvsp[(1) - (1)].ttype)));
 
 				  if (! undeclared_variable_notice)
 				    {
@@ -2165,20 +3121,20 @@ case 86:
 				      undeclared_variable_notice = 1;
 				    }
 				}
-			      yyval.ttype = error_mark_node;
+			      (yyval.ttype) = error_mark_node;
 			      /* Prevent repeated error messages.  */
-			      IDENTIFIER_GLOBAL_VALUE (yyvsp[0].ttype) = error_mark_node;
-			      IDENTIFIER_ERROR_LOCUS (yyvsp[0].ttype) = current_function_decl;
+			      IDENTIFIER_GLOBAL_VALUE ((yyvsp[(1) - (1)].ttype)) = error_mark_node;
+			      IDENTIFIER_ERROR_LOCUS ((yyvsp[(1) - (1)].ttype)) = current_function_decl;
 			    }
 			}
 		    }
-		  else if (TREE_TYPE (yyval.ttype) == error_mark_node)
-		    yyval.ttype = error_mark_node;
-		  else if (C_DECL_ANTICIPATED (yyval.ttype))
+		  else if (TREE_TYPE ((yyval.ttype)) == error_mark_node)
+		    (yyval.ttype) = error_mark_node;
+		  else if (C_DECL_ANTICIPATED ((yyval.ttype)))
 		    {
 		      /* The first time we see a build-in function used,
 			 if it has not been declared.  */
-		      C_DECL_ANTICIPATED (yyval.ttype) = 0;
+		      C_DECL_ANTICIPATED ((yyval.ttype)) = 0;
 		      if (yychar == YYEMPTY)
 			yychar = YYLEX;
 		      if (yychar == '(')
@@ -2187,64 +3143,72 @@ case 86:
 			     would ordinarily do, so we don't lose
 			     the actual built in type.
 			     But print a diagnostic for the mismatch.  */
-			    if (TREE_CODE (yyval.ttype) != FUNCTION_DECL)
+			    if (TREE_CODE ((yyval.ttype)) != FUNCTION_DECL)
 			      error ("`%s' implicitly declared as function",
-				     IDENTIFIER_POINTER (DECL_NAME (yyval.ttype)));
-			  else if ((TYPE_MODE (TREE_TYPE (TREE_TYPE (yyval.ttype)))
+				     IDENTIFIER_POINTER (DECL_NAME ((yyval.ttype))));
+			  else if ((TYPE_MODE (TREE_TYPE (TREE_TYPE ((yyval.ttype))))
 				    != TYPE_MODE (integer_type_node))
-				   && (TREE_TYPE (TREE_TYPE (yyval.ttype))
+				   && (TREE_TYPE (TREE_TYPE ((yyval.ttype)))
 				       != void_type_node))
 			    pedwarn ("type mismatch in implicit declaration for built-in function `%s'",
-				     IDENTIFIER_POINTER (DECL_NAME (yyval.ttype)));
+				     IDENTIFIER_POINTER (DECL_NAME ((yyval.ttype))));
 			  /* If it really returns void, change that to int.  */
-			  if (TREE_TYPE (TREE_TYPE (yyval.ttype)) == void_type_node)
-			    TREE_TYPE (yyval.ttype)
+			  if (TREE_TYPE (TREE_TYPE ((yyval.ttype))) == void_type_node)
+			    TREE_TYPE ((yyval.ttype))
 			      = build_function_type (integer_type_node,
-						     TYPE_ARG_TYPES (TREE_TYPE (yyval.ttype)));
+						     TYPE_ARG_TYPES (TREE_TYPE ((yyval.ttype))));
 			}
 		      else
 			pedwarn ("built-in function `%s' used without declaration",
-				 IDENTIFIER_POINTER (DECL_NAME (yyval.ttype)));
+				 IDENTIFIER_POINTER (DECL_NAME ((yyval.ttype))));
 
 		      /* Do what we would ordinarily do when a fn is used.  */
-		      assemble_external (yyval.ttype);
-		      TREE_USED (yyval.ttype) = 1;
+		      assemble_external ((yyval.ttype));
+		      TREE_USED ((yyval.ttype)) = 1;
 		    }
 		  else
 		    {
-		      assemble_external (yyval.ttype);
-		      TREE_USED (yyval.ttype) = 1;
+		      assemble_external ((yyval.ttype));
+		      TREE_USED ((yyval.ttype)) = 1;
 		    }
 
-		  if (TREE_CODE (yyval.ttype) == CONST_DECL)
+		  if (TREE_CODE ((yyval.ttype)) == CONST_DECL)
 		    {
-		      yyval.ttype = DECL_INITIAL (yyval.ttype);
+		      (yyval.ttype) = DECL_INITIAL ((yyval.ttype));
 		      /* This is to prevent an enum whose value is 0
 			 from being considered a null pointer constant.  */
-		      yyval.ttype = build1 (NOP_EXPR, TREE_TYPE (yyval.ttype), yyval.ttype);
-		      TREE_CONSTANT (yyval.ttype) = 1;
+		      (yyval.ttype) = build1 (NOP_EXPR, TREE_TYPE ((yyval.ttype)), (yyval.ttype));
+		      TREE_CONSTANT ((yyval.ttype)) = 1;
 		    }
-		;
-    break;}
-case 88:
+		}
+    break;
+
+  case 89:
+/* Line 1792 of yacc.c  */
 #line 681 "c-parse.y"
-{ yyval.ttype = combine_strings (yyvsp[0].ttype); ;
-    break;}
-case 89:
+    { (yyval.ttype) = combine_strings ((yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 90:
+/* Line 1792 of yacc.c  */
 #line 683 "c-parse.y"
-{ char class = TREE_CODE_CLASS (TREE_CODE (yyvsp[-1].ttype));
+    { char class = TREE_CODE_CLASS (TREE_CODE ((yyvsp[(2) - (3)].ttype)));
 		  if (class == 'e' || class == '1'
 		      || class == '2' || class == '<')
-		    C_SET_EXP_ORIGINAL_CODE (yyvsp[-1].ttype, ERROR_MARK);
-		  yyval.ttype = yyvsp[-1].ttype; ;
-    break;}
-case 90:
+		    C_SET_EXP_ORIGINAL_CODE ((yyvsp[(2) - (3)].ttype), ERROR_MARK);
+		  (yyval.ttype) = (yyvsp[(2) - (3)].ttype); }
+    break;
+
+  case 91:
+/* Line 1792 of yacc.c  */
 #line 689 "c-parse.y"
-{ yyval.ttype = error_mark_node; ;
-    break;}
-case 91:
+    { (yyval.ttype) = error_mark_node; }
+    break;
+
+  case 92:
+/* Line 1792 of yacc.c  */
 #line 691 "c-parse.y"
-{ if (current_function_decl == 0)
+    { if (current_function_decl == 0)
 		    {
 		      error ("braced-group within expression allowed only inside a function");
 		      YYERROR;
@@ -2256,945 +3220,1317 @@ case 91:
 		  keep_next_level ();
 		  push_iterator_stack ();
 		  push_label_level ();
-		  yyval.ttype = expand_start_stmt_expr (); ;
-    break;}
-case 92:
+		  (yyval.ttype) = expand_start_stmt_expr (); }
+    break;
+
+  case 93:
+/* Line 1792 of yacc.c  */
 #line 705 "c-parse.y"
-{ tree rtl_exp;
+    { tree rtl_exp;
 		  if (pedantic)
 		    pedwarn ("ANSI C forbids braced-groups within expressions");
 		  pop_iterator_stack ();
 		  pop_label_level ();
-		  rtl_exp = expand_end_stmt_expr (yyvsp[-2].ttype);
+		  rtl_exp = expand_end_stmt_expr ((yyvsp[(2) - (4)].ttype));
 		  /* The statements have side effects, so the group does.  */
 		  TREE_SIDE_EFFECTS (rtl_exp) = 1;
 
-		  if (TREE_CODE (yyvsp[-1].ttype) == BLOCK)
+		  if (TREE_CODE ((yyvsp[(3) - (4)].ttype)) == BLOCK)
 		    {
 		      /* Make a BIND_EXPR for the BLOCK already made.  */
-		      yyval.ttype = build (BIND_EXPR, TREE_TYPE (rtl_exp),
-				  NULL_TREE, rtl_exp, yyvsp[-1].ttype);
+		      (yyval.ttype) = build (BIND_EXPR, TREE_TYPE (rtl_exp),
+				  NULL_TREE, rtl_exp, (yyvsp[(3) - (4)].ttype));
 		      /* Remove the block from the tree at this point.
 			 It gets put back at the proper place
 			 when the BIND_EXPR is expanded.  */
-		      delete_block (yyvsp[-1].ttype);
+		      delete_block ((yyvsp[(3) - (4)].ttype));
 		    }
 		  else
-		    yyval.ttype = yyvsp[-1].ttype;
-		;
-    break;}
-case 93:
+		    (yyval.ttype) = (yyvsp[(3) - (4)].ttype);
+		}
+    break;
+
+  case 94:
+/* Line 1792 of yacc.c  */
 #line 728 "c-parse.y"
-{ yyval.ttype = build_function_call (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 94:
+    { (yyval.ttype) = build_function_call ((yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 95:
+/* Line 1792 of yacc.c  */
 #line 730 "c-parse.y"
-{ yyval.ttype = build_array_ref (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 95:
+    { (yyval.ttype) = build_array_ref ((yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 96:
+/* Line 1792 of yacc.c  */
 #line 732 "c-parse.y"
-{
-		    yyval.ttype = build_component_ref (yyvsp[-2].ttype, yyvsp[0].ttype);
-		;
-    break;}
-case 96:
+    {
+		    (yyval.ttype) = build_component_ref ((yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype));
+		}
+    break;
+
+  case 97:
+/* Line 1792 of yacc.c  */
 #line 736 "c-parse.y"
-{
-                  tree expr = build_indirect_ref (yyvsp[-2].ttype, "->");
+    {
+                  tree expr = build_indirect_ref ((yyvsp[(1) - (3)].ttype), "->");
 
-                    yyval.ttype = build_component_ref (expr, yyvsp[0].ttype);
-		;
-    break;}
-case 97:
+                    (yyval.ttype) = build_component_ref (expr, (yyvsp[(3) - (3)].ttype));
+		}
+    break;
+
+  case 98:
+/* Line 1792 of yacc.c  */
 #line 742 "c-parse.y"
-{ yyval.ttype = build_unary_op (POSTINCREMENT_EXPR, yyvsp[-1].ttype, 0); ;
-    break;}
-case 98:
+    { (yyval.ttype) = build_unary_op (POSTINCREMENT_EXPR, (yyvsp[(1) - (2)].ttype), 0); }
+    break;
+
+  case 99:
+/* Line 1792 of yacc.c  */
 #line 744 "c-parse.y"
-{ yyval.ttype = build_unary_op (POSTDECREMENT_EXPR, yyvsp[-1].ttype, 0); ;
-    break;}
-case 100:
+    { (yyval.ttype) = build_unary_op (POSTDECREMENT_EXPR, (yyvsp[(1) - (2)].ttype), 0); }
+    break;
+
+  case 101:
+/* Line 1792 of yacc.c  */
 #line 751 "c-parse.y"
-{ yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 103:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 104:
+/* Line 1792 of yacc.c  */
 #line 760 "c-parse.y"
-{ c_mark_varargs ();
+    { c_mark_varargs ();
 		  if (pedantic)
-		    pedwarn ("ANSI C does not permit use of `varargs.h'"); ;
-    break;}
-case 104:
+		    pedwarn ("ANSI C does not permit use of `varargs.h'"); }
+    break;
+
+  case 105:
+/* Line 1792 of yacc.c  */
 #line 770 "c-parse.y"
-{ ;
-    break;}
-case 109:
+    { }
+    break;
+
+  case 110:
+/* Line 1792 of yacc.c  */
 #line 786 "c-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);
+    { current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 110:
+		  resume_momentary ((yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 111:
+/* Line 1792 of yacc.c  */
 #line 791 "c-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);	
+    { current_declspecs = TREE_VALUE (declspec_stack);	
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 111:
+		  resume_momentary ((yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 112:
+/* Line 1792 of yacc.c  */
 #line 796 "c-parse.y"
-{ shadow_tag_warned (yyvsp[-1].ttype, 1);
-		  pedwarn ("empty declaration"); ;
-    break;}
-case 112:
+    { shadow_tag_warned ((yyvsp[(1) - (2)].ttype), 1);
+		  pedwarn ("empty declaration"); }
+    break;
+
+  case 113:
+/* Line 1792 of yacc.c  */
 #line 799 "c-parse.y"
-{ pedwarn ("empty declaration"); ;
-    break;}
-case 113:
+    { pedwarn ("empty declaration"); }
+    break;
+
+  case 114:
+/* Line 1792 of yacc.c  */
 #line 808 "c-parse.y"
-{ ;
-    break;}
-case 118:
+    { }
+    break;
+
+  case 119:
+/* Line 1792 of yacc.c  */
 #line 823 "c-parse.y"
-{ yyval.itype = suspend_momentary ();
+    { (yyval.itype) = suspend_momentary ();
 		  pending_xref_error ();
 		  declspec_stack = tree_cons (prefix_attributes,
 					      current_declspecs,
 					      declspec_stack);
-		  split_specs_attrs (yyvsp[0].ttype,
-				     &current_declspecs, &prefix_attributes); ;
-    break;}
-case 119:
+		  split_specs_attrs ((yyvsp[(0) - (0)].ttype),
+				     &current_declspecs, &prefix_attributes); }
+    break;
+
+  case 120:
+/* Line 1792 of yacc.c  */
 #line 834 "c-parse.y"
-{ prefix_attributes = chainon (prefix_attributes, yyvsp[0].ttype); ;
-    break;}
-case 120:
+    { prefix_attributes = chainon (prefix_attributes, (yyvsp[(0) - (0)].ttype)); }
+    break;
+
+  case 121:
+/* Line 1792 of yacc.c  */
 #line 839 "c-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);
+    { current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 121:
+		  resume_momentary ((yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 122:
+/* Line 1792 of yacc.c  */
 #line 844 "c-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);
+    { current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 122:
+		  resume_momentary ((yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 123:
+/* Line 1792 of yacc.c  */
 #line 849 "c-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);
+    { current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-1].itype); ;
-    break;}
-case 123:
+		  resume_momentary ((yyvsp[(2) - (3)].itype)); }
+    break;
+
+  case 124:
+/* Line 1792 of yacc.c  */
 #line 854 "c-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);
+    { current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-1].itype); ;
-    break;}
-case 124:
+		  resume_momentary ((yyvsp[(2) - (3)].itype)); }
+    break;
+
+  case 125:
+/* Line 1792 of yacc.c  */
 #line 859 "c-parse.y"
-{ shadow_tag (yyvsp[-1].ttype); ;
-    break;}
-case 125:
+    { shadow_tag ((yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 126:
+/* Line 1792 of yacc.c  */
 #line 861 "c-parse.y"
-{ pedwarn ("empty declaration"); ;
-    break;}
-case 126:
+    { pedwarn ("empty declaration"); }
+    break;
+
+  case 127:
+/* Line 1792 of yacc.c  */
 #line 863 "c-parse.y"
-{ pedantic = yyvsp[-1].itype; ;
-    break;}
-case 127:
+    { pedantic = (yyvsp[(1) - (2)].itype); }
+    break;
+
+  case 128:
+/* Line 1792 of yacc.c  */
 #line 873 "c-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 128:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 129:
+/* Line 1792 of yacc.c  */
 #line 875 "c-parse.y"
-{ yyval.ttype = chainon (yyvsp[0].ttype, tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[-2].ttype)); ;
-    break;}
-case 129:
+    { (yyval.ttype) = chainon ((yyvsp[(3) - (3)].ttype), tree_cons (NULL_TREE, (yyvsp[(2) - (3)].ttype), (yyvsp[(1) - (3)].ttype))); }
+    break;
+
+  case 130:
+/* Line 1792 of yacc.c  */
 #line 879 "c-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 130:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 131:
+/* Line 1792 of yacc.c  */
 #line 881 "c-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 131:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 132:
+/* Line 1792 of yacc.c  */
 #line 883 "c-parse.y"
-{ if (extra_warnings)
+    { if (extra_warnings)
 		    warning ("`%s' is not at beginning of declaration",
-			     IDENTIFIER_POINTER (yyvsp[0].ttype));
-		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 132:
+			     IDENTIFIER_POINTER ((yyvsp[(2) - (2)].ttype)));
+		  (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 133:
+/* Line 1792 of yacc.c  */
 #line 888 "c-parse.y"
-{ yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype); ;
-    break;}
-case 133:
+    { (yyval.ttype) = tree_cons ((yyvsp[(2) - (2)].ttype), NULL_TREE, (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 134:
+/* Line 1792 of yacc.c  */
 #line 893 "c-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 134:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 135:
+/* Line 1792 of yacc.c  */
 #line 895 "c-parse.y"
-{ yyval.ttype = chainon (yyvsp[0].ttype, tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[-2].ttype)); ;
-    break;}
-case 135:
+    { (yyval.ttype) = chainon ((yyvsp[(3) - (3)].ttype), tree_cons (NULL_TREE, (yyvsp[(2) - (3)].ttype), (yyvsp[(1) - (3)].ttype))); }
+    break;
+
+  case 136:
+/* Line 1792 of yacc.c  */
 #line 900 "c-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 136:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 137:
+/* Line 1792 of yacc.c  */
 #line 902 "c-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 137:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 138:
+/* Line 1792 of yacc.c  */
 #line 904 "c-parse.y"
-{ if (extra_warnings)
+    { if (extra_warnings)
 		    warning ("`%s' is not at beginning of declaration",
-			     IDENTIFIER_POINTER (yyvsp[0].ttype));
-		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 138:
+			     IDENTIFIER_POINTER ((yyvsp[(2) - (2)].ttype)));
+		  (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 139:
+/* Line 1792 of yacc.c  */
 #line 917 "c-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 139:
+    { (yyval.ttype) = (yyvsp[(1) - (1)].ttype); }
+    break;
+
+  case 140:
+/* Line 1792 of yacc.c  */
 #line 919 "c-parse.y"
-{ yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, NULL_TREE); ;
-    break;}
-case 140:
+    { (yyval.ttype) = tree_cons ((yyvsp[(1) - (1)].ttype), NULL_TREE, NULL_TREE); }
+    break;
+
+  case 141:
+/* Line 1792 of yacc.c  */
 #line 921 "c-parse.y"
-{ yyval.ttype = chainon (yyvsp[0].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 141:
+    { (yyval.ttype) = chainon ((yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 142:
+/* Line 1792 of yacc.c  */
 #line 923 "c-parse.y"
-{ yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype); ;
-    break;}
-case 142:
+    { (yyval.ttype) = tree_cons ((yyvsp[(2) - (2)].ttype), NULL_TREE, (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 143:
+/* Line 1792 of yacc.c  */
 #line 928 "c-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE);
-		  TREE_STATIC (yyval.ttype) = 1; ;
-    break;}
-case 143:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(1) - (1)].ttype), NULL_TREE);
+		  TREE_STATIC ((yyval.ttype)) = 1; }
+    break;
+
+  case 144:
+/* Line 1792 of yacc.c  */
 #line 931 "c-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 144:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(1) - (1)].ttype), NULL_TREE); }
+    break;
+
+  case 145:
+/* Line 1792 of yacc.c  */
 #line 933 "c-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
-		  TREE_STATIC (yyval.ttype) = 1; ;
-    break;}
-case 145:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ttype));
+		  TREE_STATIC ((yyval.ttype)) = 1; }
+    break;
+
+  case 146:
+/* Line 1792 of yacc.c  */
 #line 936 "c-parse.y"
-{ if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
+    { if (extra_warnings && TREE_STATIC ((yyvsp[(1) - (2)].ttype)))
 		    warning ("`%s' is not at beginning of declaration",
-			     IDENTIFIER_POINTER (yyvsp[0].ttype));
-		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
-		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
-    break;}
-case 146:
+			     IDENTIFIER_POINTER ((yyvsp[(2) - (2)].ttype)));
+		  (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ttype));
+		  TREE_STATIC ((yyval.ttype)) = TREE_STATIC ((yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 147:
+/* Line 1792 of yacc.c  */
 #line 950 "c-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 147:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 148:
+/* Line 1792 of yacc.c  */
 #line 952 "c-parse.y"
-{ yyval.ttype = chainon (yyvsp[0].ttype, tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[-2].ttype)); ;
-    break;}
-case 148:
+    { (yyval.ttype) = chainon ((yyvsp[(3) - (3)].ttype), tree_cons (NULL_TREE, (yyvsp[(2) - (3)].ttype), (yyvsp[(1) - (3)].ttype))); }
+    break;
+
+  case 149:
+/* Line 1792 of yacc.c  */
 #line 956 "c-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 149:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 150:
+/* Line 1792 of yacc.c  */
 #line 958 "c-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 152:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 153:
+/* Line 1792 of yacc.c  */
 #line 968 "c-parse.y"
-{ /* For a typedef name, record the meaning, not the name.
+    { /* For a typedef name, record the meaning, not the name.
 		     In case of `foo foo, bar;'.  */
-		  yyval.ttype = lookup_name (yyvsp[0].ttype); ;
-    break;}
-case 153:
+		  (yyval.ttype) = lookup_name ((yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 154:
+/* Line 1792 of yacc.c  */
 #line 972 "c-parse.y"
-{ yyval.ttype = TREE_TYPE (yyvsp[-1].ttype); ;
-    break;}
-case 154:
+    { (yyval.ttype) = TREE_TYPE ((yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 155:
+/* Line 1792 of yacc.c  */
 #line 974 "c-parse.y"
-{ yyval.ttype = groktypename (yyvsp[-1].ttype); ;
-    break;}
-case 162:
+    { (yyval.ttype) = groktypename ((yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 163:
+/* Line 1792 of yacc.c  */
 #line 996 "c-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 163:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 164:
+/* Line 1792 of yacc.c  */
 #line 998 "c-parse.y"
-{ if (TREE_CHAIN (yyvsp[-1].ttype)) yyvsp[-1].ttype = combine_strings (yyvsp[-1].ttype);
-		  yyval.ttype = yyvsp[-1].ttype;
-		;
-    break;}
-case 164:
+    { if (TREE_CHAIN ((yyvsp[(3) - (4)].ttype))) (yyvsp[(3) - (4)].ttype) = combine_strings ((yyvsp[(3) - (4)].ttype));
+		  (yyval.ttype) = (yyvsp[(3) - (4)].ttype);
+		}
+    break;
+
+  case 165:
+/* Line 1792 of yacc.c  */
 #line 1005 "c-parse.y"
-{ yyval.ttype = start_decl (yyvsp[-3].ttype, current_declspecs, 1,
-					  yyvsp[-1].ttype, prefix_attributes);
-		  start_init (yyval.ttype, yyvsp[-2].ttype, global_bindings_p ()); ;
-    break;}
-case 165:
+    { (yyval.ttype) = start_decl ((yyvsp[(1) - (4)].ttype), current_declspecs, 1,
+					  (yyvsp[(3) - (4)].ttype), prefix_attributes);
+		  start_init ((yyval.ttype), (yyvsp[(2) - (4)].ttype), global_bindings_p ()); }
+    break;
+
+  case 166:
+/* Line 1792 of yacc.c  */
 #line 1010 "c-parse.y"
-{ finish_init ();
-		  finish_decl (yyvsp[-1].ttype, yyvsp[0].ttype, yyvsp[-4].ttype); ;
-    break;}
-case 166:
+    { finish_init ();
+		  finish_decl ((yyvsp[(5) - (6)].ttype), (yyvsp[(6) - (6)].ttype), (yyvsp[(2) - (6)].ttype)); }
+    break;
+
+  case 167:
+/* Line 1792 of yacc.c  */
 #line 1013 "c-parse.y"
-{ tree d = start_decl (yyvsp[-2].ttype, current_declspecs, 0,
-				       yyvsp[0].ttype, prefix_attributes);
-		  finish_decl (d, NULL_TREE, yyvsp[-1].ttype); 
-                ;
-    break;}
-case 167:
+    { tree d = start_decl ((yyvsp[(1) - (3)].ttype), current_declspecs, 0,
+				       (yyvsp[(3) - (3)].ttype), prefix_attributes);
+		  finish_decl (d, NULL_TREE, (yyvsp[(2) - (3)].ttype)); 
+                }
+    break;
+
+  case 168:
+/* Line 1792 of yacc.c  */
 #line 1021 "c-parse.y"
-{ yyval.ttype = start_decl (yyvsp[-3].ttype, current_declspecs, 1,
-					  yyvsp[-1].ttype, prefix_attributes);
-		  start_init (yyval.ttype, yyvsp[-2].ttype, global_bindings_p ()); ;
-    break;}
-case 168:
+    { (yyval.ttype) = start_decl ((yyvsp[(1) - (4)].ttype), current_declspecs, 1,
+					  (yyvsp[(3) - (4)].ttype), prefix_attributes);
+		  start_init ((yyval.ttype), (yyvsp[(2) - (4)].ttype), global_bindings_p ()); }
+    break;
+
+  case 169:
+/* Line 1792 of yacc.c  */
 #line 1026 "c-parse.y"
-{ finish_init ();
-		  decl_attributes (yyvsp[-1].ttype, yyvsp[-3].ttype, prefix_attributes);
-		  finish_decl (yyvsp[-1].ttype, yyvsp[0].ttype, yyvsp[-4].ttype); ;
-    break;}
-case 169:
+    { finish_init ();
+		  decl_attributes ((yyvsp[(5) - (6)].ttype), (yyvsp[(3) - (6)].ttype), prefix_attributes);
+		  finish_decl ((yyvsp[(5) - (6)].ttype), (yyvsp[(6) - (6)].ttype), (yyvsp[(2) - (6)].ttype)); }
+    break;
+
+  case 170:
+/* Line 1792 of yacc.c  */
 #line 1030 "c-parse.y"
-{ tree d = start_decl (yyvsp[-2].ttype, current_declspecs, 0,
-				       yyvsp[0].ttype, prefix_attributes);
-		  finish_decl (d, NULL_TREE, yyvsp[-1].ttype); ;
-    break;}
-case 170:
+    { tree d = start_decl ((yyvsp[(1) - (3)].ttype), current_declspecs, 0,
+				       (yyvsp[(3) - (3)].ttype), prefix_attributes);
+		  finish_decl (d, NULL_TREE, (yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 171:
+/* Line 1792 of yacc.c  */
 #line 1038 "c-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 171:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 172:
+/* Line 1792 of yacc.c  */
 #line 1040 "c-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 172:
+    { (yyval.ttype) = (yyvsp[(1) - (1)].ttype); }
+    break;
+
+  case 173:
+/* Line 1792 of yacc.c  */
 #line 1045 "c-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 173:
+    { (yyval.ttype) = (yyvsp[(1) - (1)].ttype); }
+    break;
+
+  case 174:
+/* Line 1792 of yacc.c  */
 #line 1047 "c-parse.y"
-{ yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 174:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 175:
+/* Line 1792 of yacc.c  */
 #line 1052 "c-parse.y"
-{ yyval.ttype = yyvsp[-2].ttype; ;
-    break;}
-case 175:
+    { (yyval.ttype) = (yyvsp[(4) - (6)].ttype); }
+    break;
+
+  case 176:
+/* Line 1792 of yacc.c  */
 #line 1057 "c-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 176:
+    { (yyval.ttype) = (yyvsp[(1) - (1)].ttype); }
+    break;
+
+  case 177:
+/* Line 1792 of yacc.c  */
 #line 1059 "c-parse.y"
-{ yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 177:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 178:
+/* Line 1792 of yacc.c  */
 #line 1064 "c-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 178:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 179:
+/* Line 1792 of yacc.c  */
 #line 1066 "c-parse.y"
-{ yyval.ttype = build_tree_list (yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 179:
+    { (yyval.ttype) = build_tree_list ((yyvsp[(1) - (1)].ttype), NULL_TREE); }
+    break;
+
+  case 180:
+/* Line 1792 of yacc.c  */
 #line 1068 "c-parse.y"
-{ yyval.ttype = build_tree_list (yyvsp[-3].ttype, build_tree_list (NULL_TREE, yyvsp[-1].ttype)); ;
-    break;}
-case 180:
+    { (yyval.ttype) = build_tree_list ((yyvsp[(1) - (4)].ttype), build_tree_list (NULL_TREE, (yyvsp[(3) - (4)].ttype))); }
+    break;
+
+  case 181:
+/* Line 1792 of yacc.c  */
 #line 1070 "c-parse.y"
-{ yyval.ttype = build_tree_list (yyvsp[-5].ttype, tree_cons (NULL_TREE, yyvsp[-3].ttype, yyvsp[-1].ttype)); ;
-    break;}
-case 181:
+    { (yyval.ttype) = build_tree_list ((yyvsp[(1) - (6)].ttype), tree_cons (NULL_TREE, (yyvsp[(3) - (6)].ttype), (yyvsp[(5) - (6)].ttype))); }
+    break;
+
+  case 182:
+/* Line 1792 of yacc.c  */
 #line 1072 "c-parse.y"
-{ yyval.ttype = build_tree_list (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 187:
+    { (yyval.ttype) = build_tree_list ((yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 188:
+/* Line 1792 of yacc.c  */
 #line 1090 "c-parse.y"
-{ really_start_incremental_init (NULL_TREE);
+    { really_start_incremental_init (NULL_TREE);
 		  /* Note that the call to clear_momentary
 		     is in process_init_element.  */
-		  push_momentary (); ;
-    break;}
-case 188:
+		  push_momentary (); }
+    break;
+
+  case 189:
+/* Line 1792 of yacc.c  */
 #line 1095 "c-parse.y"
-{ yyval.ttype = pop_init_level (0);
-		  if (yyval.ttype == error_mark_node
+    { (yyval.ttype) = pop_init_level (0);
+		  if ((yyval.ttype) == error_mark_node
 		      && ! (yychar == STRING || yychar == CONSTANT))
 		    pop_momentary ();
 		  else
-		    pop_momentary_nofree (); ;
-    break;}
-case 189:
+		    pop_momentary_nofree (); }
+    break;
+
+  case 190:
+/* Line 1792 of yacc.c  */
 #line 1103 "c-parse.y"
-{ yyval.ttype = error_mark_node; ;
-    break;}
-case 190:
+    { (yyval.ttype) = error_mark_node; }
+    break;
+
+  case 191:
+/* Line 1792 of yacc.c  */
 #line 1109 "c-parse.y"
-{ if (pedantic)
-		    pedwarn ("ANSI C forbids empty initializer braces"); ;
-    break;}
-case 196:
+    { if (pedantic)
+		    pedwarn ("ANSI C forbids empty initializer braces"); }
+    break;
+
+  case 197:
+/* Line 1792 of yacc.c  */
 #line 1125 "c-parse.y"
-{ set_init_label (yyvsp[-1].ttype); ;
-    break;}
-case 199:
+    { set_init_label ((yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 200:
+/* Line 1792 of yacc.c  */
 #line 1132 "c-parse.y"
-{ push_init_level (0); ;
-    break;}
-case 200:
+    { push_init_level (0); }
+    break;
+
+  case 201:
+/* Line 1792 of yacc.c  */
 #line 1134 "c-parse.y"
-{ process_init_element (pop_init_level (0)); ;
-    break;}
-case 201:
+    { process_init_element (pop_init_level (0)); }
+    break;
+
+  case 202:
+/* Line 1792 of yacc.c  */
 #line 1136 "c-parse.y"
-{ process_init_element (yyvsp[0].ttype); ;
-    break;}
-case 205:
+    { process_init_element ((yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 206:
+/* Line 1792 of yacc.c  */
 #line 1147 "c-parse.y"
-{ set_init_label (yyvsp[0].ttype); ;
-    break;}
-case 206:
+    { set_init_label ((yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 207:
+/* Line 1792 of yacc.c  */
 #line 1152 "c-parse.y"
-{ set_init_index (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 207:
+    { set_init_index ((yyvsp[(2) - (5)].ttype), (yyvsp[(4) - (5)].ttype)); }
+    break;
+
+  case 208:
+/* Line 1792 of yacc.c  */
 #line 1154 "c-parse.y"
-{ set_init_index (yyvsp[-1].ttype, NULL_TREE); ;
-    break;}
-case 208:
+    { set_init_index ((yyvsp[(2) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 209:
+/* Line 1792 of yacc.c  */
 #line 1159 "c-parse.y"
-{ push_c_function_context ();
-		  if (! start_function (current_declspecs, yyvsp[0].ttype,
+    { push_c_function_context ();
+		  if (! start_function (current_declspecs, (yyvsp[(1) - (1)].ttype),
 					prefix_attributes, NULL_TREE, 1))
 		    {
 		      pop_c_function_context ();
 		      YYERROR1;
 		    }
-		  reinit_parse_for_function (); ;
-    break;}
-case 209:
+		  reinit_parse_for_function (); }
+    break;
+
+  case 210:
+/* Line 1792 of yacc.c  */
 #line 1168 "c-parse.y"
-{ store_parm_decls (); ;
-    break;}
-case 210:
+    { store_parm_decls (); }
+    break;
+
+  case 211:
+/* Line 1792 of yacc.c  */
 #line 1176 "c-parse.y"
-{ finish_function (1);
-		  pop_c_function_context (); ;
-    break;}
-case 211:
+    { finish_function (1);
+		  pop_c_function_context (); }
+    break;
+
+  case 212:
+/* Line 1792 of yacc.c  */
 #line 1182 "c-parse.y"
-{ push_c_function_context ();
-		  if (! start_function (current_declspecs, yyvsp[0].ttype,
+    { push_c_function_context ();
+		  if (! start_function (current_declspecs, (yyvsp[(1) - (1)].ttype),
 					prefix_attributes, NULL_TREE, 1))
 		    {
 		      pop_c_function_context ();
 		      YYERROR1;
 		    }
-		  reinit_parse_for_function (); ;
-    break;}
-case 212:
+		  reinit_parse_for_function (); }
+    break;
+
+  case 213:
+/* Line 1792 of yacc.c  */
 #line 1191 "c-parse.y"
-{ store_parm_decls (); ;
-    break;}
-case 213:
+    { store_parm_decls (); }
+    break;
+
+  case 214:
+/* Line 1792 of yacc.c  */
 #line 1199 "c-parse.y"
-{ finish_function (1);
-		  pop_c_function_context (); ;
-    break;}
-case 216:
+    { finish_function (1);
+		  pop_c_function_context (); }
+    break;
+
+  case 217:
+/* Line 1792 of yacc.c  */
 #line 1215 "c-parse.y"
-{ yyval.ttype = yyvsp[-1].ttype; ;
-    break;}
-case 217:
+    { (yyval.ttype) = (yyvsp[(2) - (3)].ttype); }
+    break;
+
+  case 218:
+/* Line 1792 of yacc.c  */
 #line 1217 "c-parse.y"
-{ yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 218:
+    { (yyval.ttype) = build_nt (CALL_EXPR, (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 219:
+/* Line 1792 of yacc.c  */
 #line 1222 "c-parse.y"
-{ yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 219:
+    { (yyval.ttype) = build_nt (ARRAY_REF, (yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 220:
+/* Line 1792 of yacc.c  */
 #line 1224 "c-parse.y"
-{ yyval.ttype = build_nt (ARRAY_REF, yyvsp[-2].ttype, NULL_TREE); ;
-    break;}
-case 220:
+    { (yyval.ttype) = build_nt (ARRAY_REF, (yyvsp[(1) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 221:
+/* Line 1792 of yacc.c  */
 #line 1226 "c-parse.y"
-{ yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 221:
+    { (yyval.ttype) = make_pointer_declarator ((yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 222:
+/* Line 1792 of yacc.c  */
 #line 1233 "c-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 223:
+    { (yyval.ttype) = (yyvsp[(3) - (3)].ttype); }
+    break;
+
+  case 224:
+/* Line 1792 of yacc.c  */
 #line 1244 "c-parse.y"
-{ yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 224:
+    { (yyval.ttype) = build_nt (CALL_EXPR, (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 225:
+/* Line 1792 of yacc.c  */
 #line 1249 "c-parse.y"
-{ yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, NULL_TREE);
+    { (yyval.ttype) = build_nt (ARRAY_REF, (yyvsp[(1) - (4)].ttype), NULL_TREE);
 		  if (! flag_isoc9x)
 		    error ("`[*]' in parameter declaration only allowed in ISO C 9x");
-		;
-    break;}
-case 225:
+		}
+    break;
+
+  case 226:
+/* Line 1792 of yacc.c  */
 #line 1254 "c-parse.y"
-{ yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 226:
+    { (yyval.ttype) = build_nt (ARRAY_REF, (yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 227:
+/* Line 1792 of yacc.c  */
 #line 1256 "c-parse.y"
-{ yyval.ttype = build_nt (ARRAY_REF, yyvsp[-2].ttype, NULL_TREE); ;
-    break;}
-case 227:
+    { (yyval.ttype) = build_nt (ARRAY_REF, (yyvsp[(1) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 228:
+/* Line 1792 of yacc.c  */
 #line 1258 "c-parse.y"
-{ yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 228:
+    { (yyval.ttype) = make_pointer_declarator ((yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 229:
+/* Line 1792 of yacc.c  */
 #line 1265 "c-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 230:
+    { (yyval.ttype) = (yyvsp[(3) - (3)].ttype); }
+    break;
+
+  case 231:
+/* Line 1792 of yacc.c  */
 #line 1274 "c-parse.y"
-{ yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 231:
+    { (yyval.ttype) = build_nt (CALL_EXPR, (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 232:
+/* Line 1792 of yacc.c  */
 #line 1279 "c-parse.y"
-{ yyval.ttype = yyvsp[-1].ttype; ;
-    break;}
-case 232:
+    { (yyval.ttype) = (yyvsp[(2) - (3)].ttype); }
+    break;
+
+  case 233:
+/* Line 1792 of yacc.c  */
 #line 1281 "c-parse.y"
-{ yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 233:
+    { (yyval.ttype) = make_pointer_declarator ((yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 234:
+/* Line 1792 of yacc.c  */
 #line 1283 "c-parse.y"
-{ yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, NULL_TREE);
+    { (yyval.ttype) = build_nt (ARRAY_REF, (yyvsp[(1) - (4)].ttype), NULL_TREE);
 		  if (! flag_isoc9x)
 		    error ("`[*]' in parameter declaration only allowed in ISO C 9x");
-		;
-    break;}
-case 234:
+		}
+    break;
+
+  case 235:
+/* Line 1792 of yacc.c  */
 #line 1288 "c-parse.y"
-{ yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 235:
+    { (yyval.ttype) = build_nt (ARRAY_REF, (yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 236:
+/* Line 1792 of yacc.c  */
 #line 1290 "c-parse.y"
-{ yyval.ttype = build_nt (ARRAY_REF, yyvsp[-2].ttype, NULL_TREE); ;
-    break;}
-case 236:
+    { (yyval.ttype) = build_nt (ARRAY_REF, (yyvsp[(1) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 237:
+/* Line 1792 of yacc.c  */
 #line 1297 "c-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 238:
+    { (yyval.ttype) = (yyvsp[(3) - (3)].ttype); }
+    break;
+
+  case 239:
+/* Line 1792 of yacc.c  */
 #line 1303 "c-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 239:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 240:
+/* Line 1792 of yacc.c  */
 #line 1305 "c-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 240:
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype); }
+    break;
+
+  case 241:
+/* Line 1792 of yacc.c  */
 #line 1310 "c-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 241:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 242:
+/* Line 1792 of yacc.c  */
 #line 1312 "c-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 242:
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype); }
+    break;
+
+  case 243:
+/* Line 1792 of yacc.c  */
 #line 1317 "c-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 243:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 244:
+/* Line 1792 of yacc.c  */
 #line 1319 "c-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 244:
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype); }
+    break;
+
+  case 245:
+/* Line 1792 of yacc.c  */
 #line 1324 "c-parse.y"
-{ yyval.ttype = start_struct (RECORD_TYPE, yyvsp[-1].ttype);
+    { (yyval.ttype) = start_struct (RECORD_TYPE, (yyvsp[(2) - (3)].ttype));
 		  /* Start scope of tag before parsing components.  */
-		;
-    break;}
-case 245:
+		}
+    break;
+
+  case 246:
+/* Line 1792 of yacc.c  */
 #line 1328 "c-parse.y"
-{ yyval.ttype = finish_struct (yyvsp[-3].ttype, yyvsp[-2].ttype, chainon (yyvsp[-6].ttype, yyvsp[0].ttype)); ;
-    break;}
-case 246:
+    { (yyval.ttype) = finish_struct ((yyvsp[(4) - (7)].ttype), (yyvsp[(5) - (7)].ttype), chainon ((yyvsp[(1) - (7)].ttype), (yyvsp[(7) - (7)].ttype))); }
+    break;
+
+  case 247:
+/* Line 1792 of yacc.c  */
 #line 1330 "c-parse.y"
-{ yyval.ttype = finish_struct (start_struct (RECORD_TYPE, NULL_TREE),
-				      yyvsp[-2].ttype, chainon (yyvsp[-4].ttype, yyvsp[0].ttype));
-		;
-    break;}
-case 247:
+    { (yyval.ttype) = finish_struct (start_struct (RECORD_TYPE, NULL_TREE),
+				      (yyvsp[(3) - (5)].ttype), chainon ((yyvsp[(1) - (5)].ttype), (yyvsp[(5) - (5)].ttype)));
+		}
+    break;
+
+  case 248:
+/* Line 1792 of yacc.c  */
 #line 1334 "c-parse.y"
-{ yyval.ttype = xref_tag (RECORD_TYPE, yyvsp[0].ttype); ;
-    break;}
-case 248:
+    { (yyval.ttype) = xref_tag (RECORD_TYPE, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 249:
+/* Line 1792 of yacc.c  */
 #line 1336 "c-parse.y"
-{ yyval.ttype = start_struct (UNION_TYPE, yyvsp[-1].ttype); ;
-    break;}
-case 249:
+    { (yyval.ttype) = start_struct (UNION_TYPE, (yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 250:
+/* Line 1792 of yacc.c  */
 #line 1338 "c-parse.y"
-{ yyval.ttype = finish_struct (yyvsp[-3].ttype, yyvsp[-2].ttype, chainon (yyvsp[-6].ttype, yyvsp[0].ttype)); ;
-    break;}
-case 250:
+    { (yyval.ttype) = finish_struct ((yyvsp[(4) - (7)].ttype), (yyvsp[(5) - (7)].ttype), chainon ((yyvsp[(1) - (7)].ttype), (yyvsp[(7) - (7)].ttype))); }
+    break;
+
+  case 251:
+/* Line 1792 of yacc.c  */
 #line 1340 "c-parse.y"
-{ yyval.ttype = finish_struct (start_struct (UNION_TYPE, NULL_TREE),
-				      yyvsp[-2].ttype, chainon (yyvsp[-4].ttype, yyvsp[0].ttype));
-		;
-    break;}
-case 251:
+    { (yyval.ttype) = finish_struct (start_struct (UNION_TYPE, NULL_TREE),
+				      (yyvsp[(3) - (5)].ttype), chainon ((yyvsp[(1) - (5)].ttype), (yyvsp[(5) - (5)].ttype)));
+		}
+    break;
+
+  case 252:
+/* Line 1792 of yacc.c  */
 #line 1344 "c-parse.y"
-{ yyval.ttype = xref_tag (UNION_TYPE, yyvsp[0].ttype); ;
-    break;}
-case 252:
+    { (yyval.ttype) = xref_tag (UNION_TYPE, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 253:
+/* Line 1792 of yacc.c  */
 #line 1346 "c-parse.y"
-{ yyvsp[0].itype = suspend_momentary ();
-		  yyval.ttype = start_enum (yyvsp[-1].ttype); ;
-    break;}
-case 253:
+    { (yyvsp[(3) - (3)].itype) = suspend_momentary ();
+		  (yyval.ttype) = start_enum ((yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 254:
+/* Line 1792 of yacc.c  */
 #line 1349 "c-parse.y"
-{ yyval.ttype= finish_enum (yyvsp[-4].ttype, nreverse (yyvsp[-3].ttype), chainon (yyvsp[-7].ttype, yyvsp[0].ttype));
-		  resume_momentary (yyvsp[-5].itype); ;
-    break;}
-case 254:
+    { (yyval.ttype)= finish_enum ((yyvsp[(4) - (8)].ttype), nreverse ((yyvsp[(5) - (8)].ttype)), chainon ((yyvsp[(1) - (8)].ttype), (yyvsp[(8) - (8)].ttype)));
+		  resume_momentary ((yyvsp[(3) - (8)].itype)); }
+    break;
+
+  case 255:
+/* Line 1792 of yacc.c  */
 #line 1352 "c-parse.y"
-{ yyvsp[0].itype = suspend_momentary ();
-		  yyval.ttype = start_enum (NULL_TREE); ;
-    break;}
-case 255:
+    { (yyvsp[(2) - (2)].itype) = suspend_momentary ();
+		  (yyval.ttype) = start_enum (NULL_TREE); }
+    break;
+
+  case 256:
+/* Line 1792 of yacc.c  */
 #line 1355 "c-parse.y"
-{ yyval.ttype= finish_enum (yyvsp[-4].ttype, nreverse (yyvsp[-3].ttype), chainon (yyvsp[-6].ttype, yyvsp[0].ttype));
-		  resume_momentary (yyvsp[-5].itype); ;
-    break;}
-case 256:
+    { (yyval.ttype)= finish_enum ((yyvsp[(3) - (7)].ttype), nreverse ((yyvsp[(4) - (7)].ttype)), chainon ((yyvsp[(1) - (7)].ttype), (yyvsp[(7) - (7)].ttype)));
+		  resume_momentary ((yyvsp[(2) - (7)].itype)); }
+    break;
+
+  case 257:
+/* Line 1792 of yacc.c  */
 #line 1358 "c-parse.y"
-{ yyval.ttype = xref_tag (ENUMERAL_TYPE, yyvsp[0].ttype); ;
-    break;}
-case 260:
+    { (yyval.ttype) = xref_tag (ENUMERAL_TYPE, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 261:
+/* Line 1792 of yacc.c  */
 #line 1369 "c-parse.y"
-{ if (pedantic && ! flag_isoc9x)
-		    pedwarn ("comma at end of enumerator list"); ;
-    break;}
-case 261:
+    { if (pedantic && ! flag_isoc9x)
+		    pedwarn ("comma at end of enumerator list"); }
+    break;
+
+  case 262:
+/* Line 1792 of yacc.c  */
 #line 1375 "c-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 262:
+    { (yyval.ttype) = (yyvsp[(1) - (1)].ttype); }
+    break;
+
+  case 263:
+/* Line 1792 of yacc.c  */
 #line 1377 "c-parse.y"
-{ yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype);
-		  pedwarn ("no semicolon at end of struct or union"); ;
-    break;}
-case 263:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype));
+		  pedwarn ("no semicolon at end of struct or union"); }
+    break;
+
+  case 264:
+/* Line 1792 of yacc.c  */
 #line 1382 "c-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 264:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 265:
+/* Line 1792 of yacc.c  */
 #line 1384 "c-parse.y"
-{ yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 265:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (3)].ttype), (yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 266:
+/* Line 1792 of yacc.c  */
 #line 1386 "c-parse.y"
-{ if (pedantic)
-		    pedwarn ("extra semicolon in struct or union specified"); ;
-    break;}
-case 266:
+    { if (pedantic)
+		    pedwarn ("extra semicolon in struct or union specified"); }
+    break;
+
+  case 267:
+/* Line 1792 of yacc.c  */
 #line 1401 "c-parse.y"
-{ yyval.ttype = yyvsp[0].ttype;
+    { (yyval.ttype) = (yyvsp[(3) - (3)].ttype);
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-1].itype); ;
-    break;}
-case 267:
+		  resume_momentary ((yyvsp[(2) - (3)].itype)); }
+    break;
+
+  case 268:
+/* Line 1792 of yacc.c  */
 #line 1407 "c-parse.y"
-{ if (pedantic)
+    { if (pedantic)
 		    pedwarn ("ANSI C forbids member declarations with no members");
-		  shadow_tag(yyvsp[0].ttype);
-		  yyval.ttype = NULL_TREE; ;
-    break;}
-case 268:
+		  shadow_tag((yyvsp[(1) - (1)].ttype));
+		  (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 269:
+/* Line 1792 of yacc.c  */
 #line 1412 "c-parse.y"
-{ yyval.ttype = yyvsp[0].ttype;
+    { (yyval.ttype) = (yyvsp[(3) - (3)].ttype);
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-1].itype); ;
-    break;}
-case 269:
+		  resume_momentary ((yyvsp[(2) - (3)].itype)); }
+    break;
+
+  case 270:
+/* Line 1792 of yacc.c  */
 #line 1418 "c-parse.y"
-{ if (pedantic)
+    { if (pedantic)
 		    pedwarn ("ANSI C forbids member declarations with no members");
-		  shadow_tag(yyvsp[0].ttype);
-		  yyval.ttype = NULL_TREE; ;
-    break;}
-case 270:
+		  shadow_tag((yyvsp[(1) - (1)].ttype));
+		  (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 271:
+/* Line 1792 of yacc.c  */
 #line 1423 "c-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 271:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 272:
+/* Line 1792 of yacc.c  */
 #line 1425 "c-parse.y"
-{ yyval.ttype = yyvsp[0].ttype;
-		  pedantic = yyvsp[-1].itype; ;
-    break;}
-case 273:
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype);
+		  pedantic = (yyvsp[(1) - (2)].itype); }
+    break;
+
+  case 274:
+/* Line 1792 of yacc.c  */
 #line 1432 "c-parse.y"
-{ yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 274:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 275:
+/* Line 1792 of yacc.c  */
 #line 1437 "c-parse.y"
-{ yyval.ttype = grokfield (yyvsp[-3].filename, yyvsp[-2].lineno, yyvsp[-1].ttype, current_declspecs, NULL_TREE);
-		  decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;
-    break;}
-case 275:
+    { (yyval.ttype) = grokfield ((yyvsp[(1) - (4)].filename), (yyvsp[(2) - (4)].lineno), (yyvsp[(3) - (4)].ttype), current_declspecs, NULL_TREE);
+		  decl_attributes ((yyval.ttype), (yyvsp[(4) - (4)].ttype), prefix_attributes); }
+    break;
+
+  case 276:
+/* Line 1792 of yacc.c  */
 #line 1441 "c-parse.y"
-{ yyval.ttype = grokfield (yyvsp[-5].filename, yyvsp[-4].lineno, yyvsp[-3].ttype, current_declspecs, yyvsp[-1].ttype);
-		  decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;
-    break;}
-case 276:
+    { (yyval.ttype) = grokfield ((yyvsp[(1) - (6)].filename), (yyvsp[(2) - (6)].lineno), (yyvsp[(3) - (6)].ttype), current_declspecs, (yyvsp[(5) - (6)].ttype));
+		  decl_attributes ((yyval.ttype), (yyvsp[(6) - (6)].ttype), prefix_attributes); }
+    break;
+
+  case 277:
+/* Line 1792 of yacc.c  */
 #line 1444 "c-parse.y"
-{ yyval.ttype = grokfield (yyvsp[-4].filename, yyvsp[-3].lineno, NULL_TREE, current_declspecs, yyvsp[-1].ttype);
-		  decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;
-    break;}
-case 278:
+    { (yyval.ttype) = grokfield ((yyvsp[(1) - (5)].filename), (yyvsp[(2) - (5)].lineno), NULL_TREE, current_declspecs, (yyvsp[(4) - (5)].ttype));
+		  decl_attributes ((yyval.ttype), (yyvsp[(5) - (5)].ttype), prefix_attributes); }
+    break;
+
+  case 279:
+/* Line 1792 of yacc.c  */
 #line 1456 "c-parse.y"
-{ if (yyvsp[-2].ttype == error_mark_node)
-		    yyval.ttype = yyvsp[-2].ttype;
+    { if ((yyvsp[(1) - (3)].ttype) == error_mark_node)
+		    (yyval.ttype) = (yyvsp[(1) - (3)].ttype);
 		  else
-		    yyval.ttype = chainon (yyvsp[0].ttype, yyvsp[-2].ttype); ;
-    break;}
-case 279:
+		    (yyval.ttype) = chainon ((yyvsp[(3) - (3)].ttype), (yyvsp[(1) - (3)].ttype)); }
+    break;
+
+  case 280:
+/* Line 1792 of yacc.c  */
 #line 1461 "c-parse.y"
-{ yyval.ttype = error_mark_node; ;
-    break;}
-case 280:
+    { (yyval.ttype) = error_mark_node; }
+    break;
+
+  case 281:
+/* Line 1792 of yacc.c  */
 #line 1467 "c-parse.y"
-{ yyval.ttype = build_enumerator (yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 281:
+    { (yyval.ttype) = build_enumerator ((yyvsp[(1) - (1)].ttype), NULL_TREE); }
+    break;
+
+  case 282:
+/* Line 1792 of yacc.c  */
 #line 1469 "c-parse.y"
-{ yyval.ttype = build_enumerator (yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 282:
+    { (yyval.ttype) = build_enumerator ((yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 283:
+/* Line 1792 of yacc.c  */
 #line 1474 "c-parse.y"
-{ yyval.ttype = build_tree_list (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 283:
+    { (yyval.ttype) = build_tree_list ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 284:
+/* Line 1792 of yacc.c  */
 #line 1476 "c-parse.y"
-{ yyval.ttype = build_tree_list (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 284:
+    { (yyval.ttype) = build_tree_list ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 285:
+/* Line 1792 of yacc.c  */
 #line 1481 "c-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 286:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 287:
+/* Line 1792 of yacc.c  */
 #line 1487 "c-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 287:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(1) - (1)].ttype), NULL_TREE); }
+    break;
+
+  case 288:
+/* Line 1792 of yacc.c  */
 #line 1489 "c-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 288:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 289:
+/* Line 1792 of yacc.c  */
 #line 1494 "c-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 289:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 290:
+/* Line 1792 of yacc.c  */
 #line 1496 "c-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 290:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 291:
+/* Line 1792 of yacc.c  */
 #line 1501 "c-parse.y"
-{ yyval.ttype = yyvsp[-1].ttype; ;
-    break;}
-case 291:
+    { (yyval.ttype) = (yyvsp[(2) - (3)].ttype); }
+    break;
+
+  case 292:
+/* Line 1792 of yacc.c  */
 #line 1504 "c-parse.y"
-{ yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 292:
+    { (yyval.ttype) = make_pointer_declarator ((yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 293:
+/* Line 1792 of yacc.c  */
 #line 1506 "c-parse.y"
-{ yyval.ttype = make_pointer_declarator (yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 293:
+    { (yyval.ttype) = make_pointer_declarator ((yyvsp[(2) - (2)].ttype), NULL_TREE); }
+    break;
+
+  case 294:
+/* Line 1792 of yacc.c  */
 #line 1508 "c-parse.y"
-{ yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 294:
+    { (yyval.ttype) = build_nt (CALL_EXPR, (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 295:
+/* Line 1792 of yacc.c  */
 #line 1510 "c-parse.y"
-{ yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 295:
+    { (yyval.ttype) = build_nt (ARRAY_REF, (yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 296:
+/* Line 1792 of yacc.c  */
 #line 1512 "c-parse.y"
-{ yyval.ttype = build_nt (ARRAY_REF, yyvsp[-2].ttype, NULL_TREE); ;
-    break;}
-case 296:
+    { (yyval.ttype) = build_nt (ARRAY_REF, (yyvsp[(1) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 297:
+/* Line 1792 of yacc.c  */
 #line 1514 "c-parse.y"
-{ yyval.ttype = build_nt (CALL_EXPR, NULL_TREE, yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 297:
+    { (yyval.ttype) = build_nt (CALL_EXPR, NULL_TREE, (yyvsp[(2) - (2)].ttype), NULL_TREE); }
+    break;
+
+  case 298:
+/* Line 1792 of yacc.c  */
 #line 1516 "c-parse.y"
-{ yyval.ttype = build_nt (ARRAY_REF, NULL_TREE, yyvsp[-1].ttype); ;
-    break;}
-case 298:
+    { (yyval.ttype) = build_nt (ARRAY_REF, NULL_TREE, (yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 299:
+/* Line 1792 of yacc.c  */
 #line 1518 "c-parse.y"
-{ yyval.ttype = build_nt (ARRAY_REF, NULL_TREE, NULL_TREE); ;
-    break;}
-case 299:
+    { (yyval.ttype) = build_nt (ARRAY_REF, NULL_TREE, NULL_TREE); }
+    break;
+
+  case 300:
+/* Line 1792 of yacc.c  */
 #line 1522 "c-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 300:
+    { (yyval.ttype) = (yyvsp[(3) - (3)].ttype); }
+    break;
+
+  case 301:
+/* Line 1792 of yacc.c  */
 #line 1531 "c-parse.y"
-{
-		  if (pedantic && yyvsp[0].ends_in_label)
+    {
+		  if (pedantic && (yyvsp[(1) - (1)].ends_in_label))
 		    pedwarn ("ANSI C forbids label at end of compound statement");
-		;
-    break;}
-case 302:
+		}
+    break;
+
+  case 303:
+/* Line 1792 of yacc.c  */
 #line 1540 "c-parse.y"
-{ yyval.ends_in_label = yyvsp[0].ends_in_label; ;
-    break;}
-case 303:
+    { (yyval.ends_in_label) = (yyvsp[(2) - (2)].ends_in_label); }
+    break;
+
+  case 304:
+/* Line 1792 of yacc.c  */
 #line 1542 "c-parse.y"
-{ yyval.ends_in_label = 0; ;
-    break;}
-case 307:
+    { (yyval.ends_in_label) = 0; }
+    break;
+
+  case 308:
+/* Line 1792 of yacc.c  */
 #line 1554 "c-parse.y"
-{ emit_line_note (input_filename, lineno);
+    { emit_line_note (input_filename, lineno);
 		  pushlevel (0);
 		  clear_last_expr ();
 		  push_momentary ();
 		  expand_start_bindings (0);
-		;
-    break;}
-case 309:
+		}
+    break;
+
+  case 310:
+/* Line 1792 of yacc.c  */
 #line 1567 "c-parse.y"
-{ if (pedantic)
-		    pedwarn ("ANSI C forbids label declarations"); ;
-    break;}
-case 312:
+    { if (pedantic)
+		    pedwarn ("ANSI C forbids label declarations"); }
+    break;
+
+  case 313:
+/* Line 1792 of yacc.c  */
 #line 1578 "c-parse.y"
-{ tree link;
-		  for (link = yyvsp[-1].ttype; link; link = TREE_CHAIN (link))
+    { tree link;
+		  for (link = (yyvsp[(2) - (3)].ttype); link; link = TREE_CHAIN (link))
 		    {
 		      tree label = shadow_label (TREE_VALUE (link));
 		      C_DECLARED_LABEL_FLAG (label) = 1;
 		      declare_nonlocal_label (label);
 		    }
-		;
-    break;}
-case 313:
+		}
+    break;
+
+  case 314:
+/* Line 1792 of yacc.c  */
 #line 1592 "c-parse.y"
-{;
-    break;}
-case 315:
+    {}
+    break;
+
+  case 316:
+/* Line 1792 of yacc.c  */
 #line 1596 "c-parse.y"
-{ compstmt_count++; ;
-    break;}
-case 316:
+    { compstmt_count++; }
+    break;
+
+  case 317:
+/* Line 1792 of yacc.c  */
 #line 1599 "c-parse.y"
-{ yyval.ttype = convert (void_type_node, integer_zero_node); ;
-    break;}
-case 317:
+    { (yyval.ttype) = convert (void_type_node, integer_zero_node); }
+    break;
+
+  case 318:
+/* Line 1792 of yacc.c  */
 #line 1601 "c-parse.y"
-{ emit_line_note (input_filename, lineno);
+    { emit_line_note (input_filename, lineno);
 		  expand_end_bindings (getdecls (), 1, 0);
-		  yyval.ttype = poplevel (1, 1, 0);
+		  (yyval.ttype) = poplevel (1, 1, 0);
 		  if (yychar == CONSTANT || yychar == STRING)
 		    pop_momentary_nofree ();
 		  else
-		    pop_momentary (); ;
-    break;}
-case 318:
+		    pop_momentary (); }
+    break;
+
+  case 319:
+/* Line 1792 of yacc.c  */
 #line 1609 "c-parse.y"
-{ emit_line_note (input_filename, lineno);
+    { emit_line_note (input_filename, lineno);
 		  expand_end_bindings (getdecls (), kept_level_p (), 0);
-		  yyval.ttype = poplevel (kept_level_p (), 0, 0);
+		  (yyval.ttype) = poplevel (kept_level_p (), 0, 0);
 		  if (yychar == CONSTANT || yychar == STRING)
 		    pop_momentary_nofree ();
 		  else
-		    pop_momentary (); ;
-    break;}
-case 319:
+		    pop_momentary (); }
+    break;
+
+  case 320:
+/* Line 1792 of yacc.c  */
 #line 1617 "c-parse.y"
-{ emit_line_note (input_filename, lineno);
+    { emit_line_note (input_filename, lineno);
 		  expand_end_bindings (getdecls (), kept_level_p (), 0);
-		  yyval.ttype = poplevel (kept_level_p (), 0, 0);
+		  (yyval.ttype) = poplevel (kept_level_p (), 0, 0);
 		  if (yychar == CONSTANT || yychar == STRING)
 		    pop_momentary_nofree ();
 		  else
-		    pop_momentary (); ;
-    break;}
-case 322:
+		    pop_momentary (); }
+    break;
+
+  case 323:
+/* Line 1792 of yacc.c  */
 #line 1637 "c-parse.y"
-{ emit_line_note (yyvsp[-5].filename, yyvsp[-4].lineno);
-		  c_expand_start_cond (truthvalue_conversion (yyvsp[-1].ttype), 0, 
+    { emit_line_note ((yyvsp[(-1) - (4)].filename), (yyvsp[(0) - (4)].lineno));
+		  c_expand_start_cond (truthvalue_conversion ((yyvsp[(3) - (4)].ttype)), 0, 
 				       compstmt_count);
-		  yyval.itype = stmt_count;
-		  if_stmt_file = yyvsp[-5].filename;
-		  if_stmt_line = yyvsp[-4].lineno;
-		  position_after_white_space (); ;
-    break;}
-case 323:
+		  (yyval.itype) = stmt_count;
+		  if_stmt_file = (yyvsp[(-1) - (4)].filename);
+		  if_stmt_line = (yyvsp[(0) - (4)].lineno);
+		  position_after_white_space (); }
+    break;
+
+  case 324:
+/* Line 1792 of yacc.c  */
 #line 1651 "c-parse.y"
-{ stmt_count++;
+    { stmt_count++;
 		  compstmt_count++;
-		  emit_line_note (yyvsp[-2].filename, yyvsp[-1].lineno);
+		  emit_line_note ((yyvsp[(-1) - (1)].filename), (yyvsp[(0) - (1)].lineno));
 		  /* See comment in `while' alternative, above.  */
 		  emit_nop ();
 		  expand_start_loop_continue_elsewhere (1);
-		  position_after_white_space (); ;
-    break;}
-case 324:
+		  position_after_white_space (); }
+    break;
+
+  case 325:
+/* Line 1792 of yacc.c  */
 #line 1659 "c-parse.y"
-{ expand_loop_continue_here (); ;
-    break;}
-case 325:
+    { expand_loop_continue_here (); }
+    break;
+
+  case 326:
+/* Line 1792 of yacc.c  */
 #line 1663 "c-parse.y"
-{ yyval.filename = input_filename; ;
-    break;}
-case 326:
+    { (yyval.filename) = input_filename; }
+    break;
+
+  case 327:
+/* Line 1792 of yacc.c  */
 #line 1667 "c-parse.y"
-{ yyval.lineno = lineno; ;
-    break;}
-case 327:
+    { (yyval.lineno) = lineno; }
+    break;
+
+  case 328:
+/* Line 1792 of yacc.c  */
 #line 1672 "c-parse.y"
-{ ;
-    break;}
-case 328:
+    { }
+    break;
+
+  case 329:
+/* Line 1792 of yacc.c  */
 #line 1677 "c-parse.y"
-{ ;
-    break;}
-case 329:
+    { }
+    break;
+
+  case 330:
+/* Line 1792 of yacc.c  */
 #line 1682 "c-parse.y"
-{ yyval.ends_in_label = yyvsp[0].ends_in_label; ;
-    break;}
-case 330:
+    { (yyval.ends_in_label) = (yyvsp[(3) - (3)].ends_in_label); }
+    break;
+
+  case 331:
+/* Line 1792 of yacc.c  */
 #line 1687 "c-parse.y"
-{ yyval.ends_in_label = 0; ;
-    break;}
-case 331:
+    { (yyval.ends_in_label) = 0; }
+    break;
+
+  case 332:
+/* Line 1792 of yacc.c  */
 #line 1689 "c-parse.y"
-{ yyval.ends_in_label = 1; ;
-    break;}
-case 332:
+    { (yyval.ends_in_label) = 1; }
+    break;
+
+  case 333:
+/* Line 1792 of yacc.c  */
 #line 1695 "c-parse.y"
-{ stmt_count++; ;
-    break;}
-case 334:
+    { stmt_count++; }
+    break;
+
+  case 335:
+/* Line 1792 of yacc.c  */
 #line 1698 "c-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-3].filename, yyvsp[-2].lineno);
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (2)].filename), (yyvsp[(0) - (2)].lineno));
 /* It appears that this should not be done--that a non-lvalue array
    shouldn't get an error if the value isn't used.
    Section 3.2.2.1 says that an array lvalue gets converted to a pointer
@@ -3203,263 +4539,319 @@ case 334:
 #if 0
 		  /* Call default_conversion to get an error
 		     on referring to a register array if pedantic.  */
-		  if (TREE_CODE (TREE_TYPE (yyvsp[-1].ttype)) == ARRAY_TYPE
-		      || TREE_CODE (TREE_TYPE (yyvsp[-1].ttype)) == FUNCTION_TYPE)
-		    yyvsp[-1].ttype = default_conversion (yyvsp[-1].ttype);
+		  if (TREE_CODE (TREE_TYPE ((yyvsp[(1) - (2)].ttype))) == ARRAY_TYPE
+		      || TREE_CODE (TREE_TYPE ((yyvsp[(1) - (2)].ttype))) == FUNCTION_TYPE)
+		    (yyvsp[(1) - (2)].ttype) = default_conversion ((yyvsp[(1) - (2)].ttype));
 #endif
-		  iterator_expand (yyvsp[-1].ttype);
-		  clear_momentary (); ;
-    break;}
-case 335:
+		  iterator_expand ((yyvsp[(1) - (2)].ttype));
+		  clear_momentary (); }
+    break;
+
+  case 336:
+/* Line 1792 of yacc.c  */
 #line 1715 "c-parse.y"
-{ c_expand_start_else ();
-		  yyvsp[-1].itype = stmt_count;
-		  position_after_white_space (); ;
-    break;}
-case 336:
+    { c_expand_start_else ();
+		  (yyvsp[(1) - (2)].itype) = stmt_count;
+		  position_after_white_space (); }
+    break;
+
+  case 337:
+/* Line 1792 of yacc.c  */
 #line 1719 "c-parse.y"
-{ c_expand_end_cond ();
-		  if (extra_warnings && stmt_count == yyvsp[-3].itype)
-		    warning ("empty body in an else-statement"); ;
-    break;}
-case 337:
+    { c_expand_end_cond ();
+		  if (extra_warnings && stmt_count == (yyvsp[(1) - (4)].itype))
+		    warning ("empty body in an else-statement"); }
+    break;
+
+  case 338:
+/* Line 1792 of yacc.c  */
 #line 1723 "c-parse.y"
-{ c_expand_end_cond ();
+    { c_expand_end_cond ();
 		  /* This warning is here instead of in simple_if, because we
 		     do not want a warning if an empty if is followed by an
 		     else statement.  Increment stmt_count so we don't
 		     give a second error if this is a nested `if'.  */
-		  if (extra_warnings && stmt_count++ == yyvsp[0].itype)
+		  if (extra_warnings && stmt_count++ == (yyvsp[(1) - (1)].itype))
 		    warning_with_file_and_line (if_stmt_file, if_stmt_line,
-						"empty body in an if-statement"); ;
-    break;}
-case 338:
+						"empty body in an if-statement"); }
+    break;
+
+  case 339:
+/* Line 1792 of yacc.c  */
 #line 1735 "c-parse.y"
-{ c_expand_end_cond (); ;
-    break;}
-case 339:
+    { c_expand_end_cond (); }
+    break;
+
+  case 340:
+/* Line 1792 of yacc.c  */
 #line 1737 "c-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-2].filename, yyvsp[-1].lineno);
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (1)].filename), (yyvsp[(0) - (1)].lineno));
 		  /* The emit_nop used to come before emit_line_note,
 		     but that made the nop seem like part of the preceding line.
 		     And that was confusing when the preceding line was
 		     inside of an if statement and was not really executed.
 		     I think it ought to work to put the nop after the line number.
 		     We will see.  --rms, July 15, 1991.  */
-		  emit_nop (); ;
-    break;}
-case 340:
+		  emit_nop (); }
+    break;
+
+  case 341:
+/* Line 1792 of yacc.c  */
 #line 1747 "c-parse.y"
-{ /* Don't start the loop till we have succeeded
+    { /* Don't start the loop till we have succeeded
 		     in parsing the end test.  This is to make sure
 		     that we end every loop we start.  */
 		  expand_start_loop (1);
 		  emit_line_note (input_filename, lineno);
 		  expand_exit_loop_if_false (NULL_PTR,
-					     truthvalue_conversion (yyvsp[-1].ttype));
-		  position_after_white_space (); ;
-    break;}
-case 341:
+					     truthvalue_conversion ((yyvsp[(4) - (5)].ttype)));
+		  position_after_white_space (); }
+    break;
+
+  case 342:
+/* Line 1792 of yacc.c  */
 #line 1756 "c-parse.y"
-{ expand_end_loop (); ;
-    break;}
-case 342:
+    { expand_end_loop (); }
+    break;
+
+  case 343:
+/* Line 1792 of yacc.c  */
 #line 1759 "c-parse.y"
-{ emit_line_note (input_filename, lineno);
+    { emit_line_note (input_filename, lineno);
 		  expand_exit_loop_if_false (NULL_PTR,
-					     truthvalue_conversion (yyvsp[-2].ttype));
+					     truthvalue_conversion ((yyvsp[(3) - (5)].ttype)));
 		  expand_end_loop ();
-		  clear_momentary (); ;
-    break;}
-case 343:
+		  clear_momentary (); }
+    break;
+
+  case 344:
+/* Line 1792 of yacc.c  */
 #line 1766 "c-parse.y"
-{ expand_end_loop ();
-		  clear_momentary (); ;
-    break;}
-case 344:
+    { expand_end_loop ();
+		  clear_momentary (); }
+    break;
+
+  case 345:
+/* Line 1792 of yacc.c  */
 #line 1770 "c-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-5].filename, yyvsp[-4].lineno);
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (4)].filename), (yyvsp[(0) - (4)].lineno));
 		  /* See comment in `while' alternative, above.  */
 		  emit_nop ();
-		  if (yyvsp[-1].ttype) c_expand_expr_stmt (yyvsp[-1].ttype);
+		  if ((yyvsp[(3) - (4)].ttype)) c_expand_expr_stmt ((yyvsp[(3) - (4)].ttype));
 		  /* Next step is to call expand_start_loop_continue_elsewhere,
 		     but wait till after we parse the entire for (...).
 		     Otherwise, invalid input might cause us to call that
 		     fn without calling expand_end_loop.  */
-		;
-    break;}
-case 345:
+		}
+    break;
+
+  case 346:
+/* Line 1792 of yacc.c  */
 #line 1782 "c-parse.y"
-{ yyvsp[0].lineno = lineno;
-		  yyval.filename = input_filename; ;
-    break;}
-case 346:
+    { (yyvsp[(7) - (7)].lineno) = lineno;
+		  (yyval.filename) = input_filename; }
+    break;
+
+  case 347:
+/* Line 1792 of yacc.c  */
 #line 1785 "c-parse.y"
-{ 
+    { 
 		  /* Start the loop.  Doing this after parsing
 		     all the expressions ensures we will end the loop.  */
 		  expand_start_loop_continue_elsewhere (1);
 		  /* Emit the end-test, with a line number.  */
-		  emit_line_note (yyvsp[-2].filename, yyvsp[-3].lineno);
-		  if (yyvsp[-4].ttype)
+		  emit_line_note ((yyvsp[(8) - (10)].filename), (yyvsp[(7) - (10)].lineno));
+		  if ((yyvsp[(6) - (10)].ttype))
 		    expand_exit_loop_if_false (NULL_PTR,
-					       truthvalue_conversion (yyvsp[-4].ttype));
+					       truthvalue_conversion ((yyvsp[(6) - (10)].ttype)));
 		  /* Don't let the tree nodes for $9 be discarded by
 		     clear_momentary during the parsing of the next stmt.  */
 		  push_momentary ();
-		  yyvsp[-3].lineno = lineno;
-		  yyvsp[-2].filename = input_filename;
-		  position_after_white_space (); ;
-    break;}
-case 347:
+		  (yyvsp[(7) - (10)].lineno) = lineno;
+		  (yyvsp[(8) - (10)].filename) = input_filename;
+		  position_after_white_space (); }
+    break;
+
+  case 348:
+/* Line 1792 of yacc.c  */
 #line 1801 "c-parse.y"
-{ /* Emit the increment expression, with a line number.  */
-		  emit_line_note (yyvsp[-4].filename, yyvsp[-5].lineno);
+    { /* Emit the increment expression, with a line number.  */
+		  emit_line_note ((yyvsp[(8) - (12)].filename), (yyvsp[(7) - (12)].lineno));
 		  expand_loop_continue_here ();
-		  if (yyvsp[-3].ttype)
-		    c_expand_expr_stmt (yyvsp[-3].ttype);
+		  if ((yyvsp[(9) - (12)].ttype))
+		    c_expand_expr_stmt ((yyvsp[(9) - (12)].ttype));
 		  if (yychar == CONSTANT || yychar == STRING)
 		    pop_momentary_nofree ();
 		  else
 		    pop_momentary ();
-		  expand_end_loop (); ;
-    break;}
-case 348:
+		  expand_end_loop (); }
+    break;
+
+  case 349:
+/* Line 1792 of yacc.c  */
 #line 1812 "c-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-5].filename, yyvsp[-4].lineno);
-		  c_expand_start_case (yyvsp[-1].ttype);
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (4)].filename), (yyvsp[(0) - (4)].lineno));
+		  c_expand_start_case ((yyvsp[(3) - (4)].ttype));
 		  /* Don't let the tree nodes for $3 be discarded by
 		     clear_momentary during the parsing of the next stmt.  */
 		  push_momentary ();
-		  position_after_white_space (); ;
-    break;}
-case 349:
+		  position_after_white_space (); }
+    break;
+
+  case 350:
+/* Line 1792 of yacc.c  */
 #line 1820 "c-parse.y"
-{ expand_end_case (yyvsp[-3].ttype);
+    { expand_end_case ((yyvsp[(3) - (6)].ttype));
 		  if (yychar == CONSTANT || yychar == STRING)
 		    pop_momentary_nofree ();
 		  else
-		    pop_momentary (); ;
-    break;}
-case 350:
+		    pop_momentary (); }
+    break;
+
+  case 351:
+/* Line 1792 of yacc.c  */
 #line 1826 "c-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-3].filename, yyvsp[-2].lineno);
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (2)].filename), (yyvsp[(0) - (2)].lineno));
 		  if ( ! expand_exit_something ())
-		    error ("break statement not within loop or switch"); ;
-    break;}
-case 351:
+		    error ("break statement not within loop or switch"); }
+    break;
+
+  case 352:
+/* Line 1792 of yacc.c  */
 #line 1831 "c-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-3].filename, yyvsp[-2].lineno);
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (2)].filename), (yyvsp[(0) - (2)].lineno));
 		  if (! expand_continue_loop (NULL_PTR))
-		    error ("continue statement not within a loop"); ;
-    break;}
-case 352:
+		    error ("continue statement not within a loop"); }
+    break;
+
+  case 353:
+/* Line 1792 of yacc.c  */
 #line 1836 "c-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-3].filename, yyvsp[-2].lineno);
-		  c_expand_return (NULL_TREE); ;
-    break;}
-case 353:
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (2)].filename), (yyvsp[(0) - (2)].lineno));
+		  c_expand_return (NULL_TREE); }
+    break;
+
+  case 354:
+/* Line 1792 of yacc.c  */
 #line 1840 "c-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-4].filename, yyvsp[-3].lineno);
-		  c_expand_return (yyvsp[-1].ttype); ;
-    break;}
-case 354:
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (3)].filename), (yyvsp[(0) - (3)].lineno));
+		  c_expand_return ((yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 355:
+/* Line 1792 of yacc.c  */
 #line 1844 "c-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-7].filename, yyvsp[-6].lineno);
-		  STRIP_NOPS (yyvsp[-2].ttype);
-		  if ((TREE_CODE (yyvsp[-2].ttype) == ADDR_EXPR
-		       && TREE_CODE (TREE_OPERAND (yyvsp[-2].ttype, 0)) == STRING_CST)
-		      || TREE_CODE (yyvsp[-2].ttype) == STRING_CST)
-		    expand_asm (yyvsp[-2].ttype);
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (6)].filename), (yyvsp[(0) - (6)].lineno));
+		  STRIP_NOPS ((yyvsp[(4) - (6)].ttype));
+		  if ((TREE_CODE ((yyvsp[(4) - (6)].ttype)) == ADDR_EXPR
+		       && TREE_CODE (TREE_OPERAND ((yyvsp[(4) - (6)].ttype), 0)) == STRING_CST)
+		      || TREE_CODE ((yyvsp[(4) - (6)].ttype)) == STRING_CST)
+		    expand_asm ((yyvsp[(4) - (6)].ttype));
 		  else
-		    error ("argument of `asm' is not a constant string"); ;
-    break;}
-case 355:
+		    error ("argument of `asm' is not a constant string"); }
+    break;
+
+  case 356:
+/* Line 1792 of yacc.c  */
 #line 1855 "c-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-9].filename, yyvsp[-8].lineno);
-		  c_expand_asm_operands (yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE, NULL_TREE,
-					 yyvsp[-6].ttype == ridpointers[(int)RID_VOLATILE],
-					 input_filename, lineno); ;
-    break;}
-case 356:
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (8)].filename), (yyvsp[(0) - (8)].lineno));
+		  c_expand_asm_operands ((yyvsp[(4) - (8)].ttype), (yyvsp[(6) - (8)].ttype), NULL_TREE, NULL_TREE,
+					 (yyvsp[(2) - (8)].ttype) == ridpointers[(int)RID_VOLATILE],
+					 input_filename, lineno); }
+    break;
+
+  case 357:
+/* Line 1792 of yacc.c  */
 #line 1862 "c-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-11].filename, yyvsp[-10].lineno);
-		  c_expand_asm_operands (yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE,
-					 yyvsp[-8].ttype == ridpointers[(int)RID_VOLATILE],
-					 input_filename, lineno); ;
-    break;}
-case 357:
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (10)].filename), (yyvsp[(0) - (10)].lineno));
+		  c_expand_asm_operands ((yyvsp[(4) - (10)].ttype), (yyvsp[(6) - (10)].ttype), (yyvsp[(8) - (10)].ttype), NULL_TREE,
+					 (yyvsp[(2) - (10)].ttype) == ridpointers[(int)RID_VOLATILE],
+					 input_filename, lineno); }
+    break;
+
+  case 358:
+/* Line 1792 of yacc.c  */
 #line 1870 "c-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-13].filename, yyvsp[-12].lineno);
-		  c_expand_asm_operands (yyvsp[-8].ttype, yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype,
-					 yyvsp[-10].ttype == ridpointers[(int)RID_VOLATILE],
-					 input_filename, lineno); ;
-    break;}
-case 358:
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (12)].filename), (yyvsp[(0) - (12)].lineno));
+		  c_expand_asm_operands ((yyvsp[(4) - (12)].ttype), (yyvsp[(6) - (12)].ttype), (yyvsp[(8) - (12)].ttype), (yyvsp[(10) - (12)].ttype),
+					 (yyvsp[(2) - (12)].ttype) == ridpointers[(int)RID_VOLATILE],
+					 input_filename, lineno); }
+    break;
+
+  case 359:
+/* Line 1792 of yacc.c  */
 #line 1876 "c-parse.y"
-{ tree decl;
+    { tree decl;
 		  stmt_count++;
-		  emit_line_note (yyvsp[-4].filename, yyvsp[-3].lineno);
-		  decl = lookup_label (yyvsp[-1].ttype);
+		  emit_line_note ((yyvsp[(-1) - (3)].filename), (yyvsp[(0) - (3)].lineno));
+		  decl = lookup_label ((yyvsp[(2) - (3)].ttype));
 		  if (decl != 0)
 		    {
 		      TREE_USED (decl) = 1;
 		      expand_goto (decl);
 		    }
-		;
-    break;}
-case 359:
+		}
+    break;
+
+  case 360:
+/* Line 1792 of yacc.c  */
 #line 1887 "c-parse.y"
-{ if (pedantic)
+    { if (pedantic)
 		    pedwarn ("ANSI C forbids `goto *expr;'");
 		  stmt_count++;
-		  emit_line_note (yyvsp[-5].filename, yyvsp[-4].lineno);
-		  expand_computed_goto (convert (ptr_type_node, yyvsp[-1].ttype)); ;
-    break;}
-case 362:
+		  emit_line_note ((yyvsp[(-1) - (4)].filename), (yyvsp[(0) - (4)].lineno));
+		  expand_computed_goto (convert (ptr_type_node, (yyvsp[(3) - (4)].ttype))); }
+    break;
+
+  case 363:
+/* Line 1792 of yacc.c  */
 #line 1902 "c-parse.y"
-{
+    {
 	    /* The value returned by this action is  */
 	    /*      1 if everything is OK */ 
 	    /*      0 in case of error or already bound iterator */
 
-	    yyval.itype = 0;
-	    if (TREE_CODE (yyvsp[-1].ttype) != VAR_DECL)
+	    (yyval.itype) = 0;
+	    if (TREE_CODE ((yyvsp[(3) - (4)].ttype)) != VAR_DECL)
 	      error ("invalid `for (ITERATOR)' syntax");
-	    else if (! ITERATOR_P (yyvsp[-1].ttype))
+	    else if (! ITERATOR_P ((yyvsp[(3) - (4)].ttype)))
 	      error ("`%s' is not an iterator",
-		     IDENTIFIER_POINTER (DECL_NAME (yyvsp[-1].ttype)));
-	    else if (ITERATOR_BOUND_P (yyvsp[-1].ttype))
+		     IDENTIFIER_POINTER (DECL_NAME ((yyvsp[(3) - (4)].ttype))));
+	    else if (ITERATOR_BOUND_P ((yyvsp[(3) - (4)].ttype)))
 	      error ("`for (%s)' inside expansion of same iterator",
-		     IDENTIFIER_POINTER (DECL_NAME (yyvsp[-1].ttype)));
+		     IDENTIFIER_POINTER (DECL_NAME ((yyvsp[(3) - (4)].ttype))));
 	    else
 	      {
-		yyval.itype = 1;
-		iterator_for_loop_start (yyvsp[-1].ttype);
+		(yyval.itype) = 1;
+		iterator_for_loop_start ((yyvsp[(3) - (4)].ttype));
 	      }
-	  ;
-    break;}
-case 363:
+	  }
+    break;
+
+  case 364:
+/* Line 1792 of yacc.c  */
 #line 1923 "c-parse.y"
-{
-	    if (yyvsp[-1].itype)
-	      iterator_for_loop_end (yyvsp[-3].ttype);
-	  ;
-    break;}
-case 364:
+    {
+	    if ((yyvsp[(5) - (6)].itype))
+	      iterator_for_loop_end ((yyvsp[(3) - (6)].ttype));
+	  }
+    break;
+
+  case 365:
+/* Line 1792 of yacc.c  */
 #line 1958 "c-parse.y"
-{ register tree value = check_case_value (yyvsp[-1].ttype);
+    { register tree value = check_case_value ((yyvsp[(2) - (3)].ttype));
 		  register tree label
 		    = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);
 
@@ -3488,12 +4880,14 @@ case 364:
 		      else if (success == 5)
 			error ("case label within scope of cleanup or variable array");
 		    }
-		  position_after_white_space (); ;
-    break;}
-case 365:
+		  position_after_white_space (); }
+    break;
+
+  case 366:
+/* Line 1792 of yacc.c  */
 #line 1989 "c-parse.y"
-{ register tree value1 = check_case_value (yyvsp[-3].ttype);
-		  register tree value2 = check_case_value (yyvsp[-1].ttype);
+    { register tree value1 = check_case_value ((yyvsp[(2) - (5)].ttype));
+		  register tree value2 = check_case_value ((yyvsp[(4) - (5)].ttype));
 		  register tree label
 		    = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);
 
@@ -3521,11 +4915,13 @@ case 365:
 		      else if (success == 5)
 			error ("case label within scope of cleanup or variable array");
 		    }
-		  position_after_white_space (); ;
-    break;}
-case 366:
+		  position_after_white_space (); }
+    break;
+
+  case 367:
+/* Line 1792 of yacc.c  */
 #line 2020 "c-parse.y"
-{
+    {
 		  tree duplicate;
 		  register tree label
 		    = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);
@@ -3538,90 +4934,122 @@ case 366:
 		      error ("multiple default labels in one switch");
 		      error_with_decl (duplicate, "this is the first default label");
 		    }
-		  position_after_white_space (); ;
-    break;}
-case 367:
+		  position_after_white_space (); }
+    break;
+
+  case 368:
+/* Line 1792 of yacc.c  */
 #line 2035 "c-parse.y"
-{ tree label = define_label (input_filename, lineno, yyvsp[-2].ttype);
+    { tree label = define_label (input_filename, lineno, (yyvsp[(1) - (3)].ttype));
 		  stmt_count++;
 		  emit_nop ();
 		  if (label)
 		    {
 		      expand_label (label);
-		      decl_attributes (label, yyvsp[0].ttype, NULL_TREE);
+		      decl_attributes (label, (yyvsp[(3) - (3)].ttype), NULL_TREE);
 		    }
-		  position_after_white_space (); ;
-    break;}
-case 368:
+		  position_after_white_space (); }
+    break;
+
+  case 369:
+/* Line 1792 of yacc.c  */
 #line 2050 "c-parse.y"
-{ emit_line_note (input_filename, lineno);
-		  yyval.ttype = NULL_TREE; ;
-    break;}
-case 369:
+    { emit_line_note (input_filename, lineno);
+		  (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 370:
+/* Line 1792 of yacc.c  */
 #line 2053 "c-parse.y"
-{ emit_line_note (input_filename, lineno); ;
-    break;}
-case 370:
+    { emit_line_note (input_filename, lineno); }
+    break;
+
+  case 371:
+/* Line 1792 of yacc.c  */
 #line 2058 "c-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 372:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 373:
+/* Line 1792 of yacc.c  */
 #line 2065 "c-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 375:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 376:
+/* Line 1792 of yacc.c  */
 #line 2072 "c-parse.y"
-{ yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 376:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 377:
+/* Line 1792 of yacc.c  */
 #line 2077 "c-parse.y"
-{ yyval.ttype = build_tree_list (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 377:
+    { (yyval.ttype) = build_tree_list ((yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 378:
+/* Line 1792 of yacc.c  */
 #line 2082 "c-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, combine_strings (yyvsp[0].ttype), NULL_TREE); ;
-    break;}
-case 378:
+    { (yyval.ttype) = tree_cons (NULL_TREE, combine_strings ((yyvsp[(1) - (1)].ttype)), NULL_TREE); }
+    break;
+
+  case 379:
+/* Line 1792 of yacc.c  */
 #line 2084 "c-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, combine_strings (yyvsp[0].ttype), yyvsp[-2].ttype); ;
-    break;}
-case 379:
+    { (yyval.ttype) = tree_cons (NULL_TREE, combine_strings ((yyvsp[(3) - (3)].ttype)), (yyvsp[(1) - (3)].ttype)); }
+    break;
+
+  case 380:
+/* Line 1792 of yacc.c  */
 #line 2090 "c-parse.y"
-{ pushlevel (0);
+    { pushlevel (0);
 		  clear_parm_order ();
-		  declare_parm_level (0); ;
-    break;}
-case 380:
+		  declare_parm_level (0); }
+    break;
+
+  case 381:
+/* Line 1792 of yacc.c  */
 #line 2094 "c-parse.y"
-{ yyval.ttype = yyvsp[0].ttype;
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype);
 		  parmlist_tags_warning ();
-		  poplevel (0, 0, 0); ;
-    break;}
-case 382:
+		  poplevel (0, 0, 0); }
+    break;
+
+  case 383:
+/* Line 1792 of yacc.c  */
 #line 2102 "c-parse.y"
-{ tree parm;
+    { tree parm;
 		  if (pedantic)
 		    pedwarn ("ANSI C forbids forward parameter declarations");
 		  /* Mark the forward decls as such.  */
 		  for (parm = getdecls (); parm; parm = TREE_CHAIN (parm))
 		    TREE_ASM_WRITTEN (parm) = 1;
-		  clear_parm_order (); ;
-    break;}
-case 383:
+		  clear_parm_order (); }
+    break;
+
+  case 384:
+/* Line 1792 of yacc.c  */
 #line 2110 "c-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 384:
+    { (yyval.ttype) = (yyvsp[(4) - (4)].ttype); }
+    break;
+
+  case 385:
+/* Line 1792 of yacc.c  */
 #line 2112 "c-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, NULL_TREE, NULL_TREE); ;
-    break;}
-case 385:
+    { (yyval.ttype) = tree_cons (NULL_TREE, NULL_TREE, NULL_TREE); }
+    break;
+
+  case 386:
+/* Line 1792 of yacc.c  */
 #line 2118 "c-parse.y"
-{ yyval.ttype = get_parm_info (0); ;
-    break;}
-case 386:
+    { (yyval.ttype) = get_parm_info (0); }
+    break;
+
+  case 387:
+/* Line 1792 of yacc.c  */
 #line 2120 "c-parse.y"
-{ yyval.ttype = get_parm_info (0);
+    { (yyval.ttype) = get_parm_info (0);
 		  /* Gcc used to allow this as an extension.  However, it does
 		     not work for all targets, and thus has been disabled.
 		     Also, since func (...) and func () are indistinguishable,
@@ -3629,317 +5057,388 @@ case 386:
 		     tries to verify that BUILT_IN_NEXT_ARG is being used
 		     correctly.  */
 		  error ("ANSI C requires a named argument before `...'");
-		;
-    break;}
-case 387:
+		}
+    break;
+
+  case 388:
+/* Line 1792 of yacc.c  */
 #line 2130 "c-parse.y"
-{ yyval.ttype = get_parm_info (1); ;
-    break;}
-case 388:
+    { (yyval.ttype) = get_parm_info (1); }
+    break;
+
+  case 389:
+/* Line 1792 of yacc.c  */
 #line 2132 "c-parse.y"
-{ yyval.ttype = get_parm_info (0); ;
-    break;}
-case 389:
+    { (yyval.ttype) = get_parm_info (0); }
+    break;
+
+  case 390:
+/* Line 1792 of yacc.c  */
 #line 2137 "c-parse.y"
-{ push_parm_decl (yyvsp[0].ttype); ;
-    break;}
-case 390:
+    { push_parm_decl ((yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 391:
+/* Line 1792 of yacc.c  */
 #line 2139 "c-parse.y"
-{ push_parm_decl (yyvsp[0].ttype); ;
-    break;}
-case 391:
+    { push_parm_decl ((yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 392:
+/* Line 1792 of yacc.c  */
 #line 2146 "c-parse.y"
-{ yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
-							 yyvsp[-1].ttype),
+    { (yyval.ttype) = build_tree_list (build_tree_list (current_declspecs,
+							 (yyvsp[(3) - (4)].ttype)),
 					build_tree_list (prefix_attributes,
-							 yyvsp[0].ttype));
+							 (yyvsp[(4) - (4)].ttype)));
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 392:
+		  resume_momentary ((yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 393:
+/* Line 1792 of yacc.c  */
 #line 2155 "c-parse.y"
-{ yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
-							 yyvsp[-1].ttype),
+    { (yyval.ttype) = build_tree_list (build_tree_list (current_declspecs,
+							 (yyvsp[(3) - (4)].ttype)),
 					build_tree_list (prefix_attributes,
-							 yyvsp[0].ttype)); 
+							 (yyvsp[(4) - (4)].ttype))); 
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 393:
+		  resume_momentary ((yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 394:
+/* Line 1792 of yacc.c  */
 #line 2164 "c-parse.y"
-{ yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
-							 yyvsp[-1].ttype),
+    { (yyval.ttype) = build_tree_list (build_tree_list (current_declspecs,
+							 (yyvsp[(3) - (4)].ttype)),
 					build_tree_list (prefix_attributes,
-							 yyvsp[0].ttype));
+							 (yyvsp[(4) - (4)].ttype)));
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 394:
+		  resume_momentary ((yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 395:
+/* Line 1792 of yacc.c  */
 #line 2173 "c-parse.y"
-{ yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
-							 yyvsp[-1].ttype),
+    { (yyval.ttype) = build_tree_list (build_tree_list (current_declspecs,
+							 (yyvsp[(3) - (4)].ttype)),
 					build_tree_list (prefix_attributes,
-							 yyvsp[0].ttype));
+							 (yyvsp[(4) - (4)].ttype)));
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype);  ;
-    break;}
-case 395:
+		  resume_momentary ((yyvsp[(2) - (4)].itype));  }
+    break;
+
+  case 396:
+/* Line 1792 of yacc.c  */
 #line 2183 "c-parse.y"
-{ yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
-							 yyvsp[-1].ttype),
+    { (yyval.ttype) = build_tree_list (build_tree_list (current_declspecs,
+							 (yyvsp[(3) - (4)].ttype)),
 					build_tree_list (prefix_attributes,
-							 yyvsp[0].ttype));
+							 (yyvsp[(4) - (4)].ttype)));
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype);  ;
-    break;}
-case 396:
+		  resume_momentary ((yyvsp[(2) - (4)].itype));  }
+    break;
+
+  case 397:
+/* Line 1792 of yacc.c  */
 #line 2197 "c-parse.y"
-{ pushlevel (0);
+    { pushlevel (0);
 		  clear_parm_order ();
-		  declare_parm_level (1); ;
-    break;}
-case 397:
+		  declare_parm_level (1); }
+    break;
+
+  case 398:
+/* Line 1792 of yacc.c  */
 #line 2201 "c-parse.y"
-{ yyval.ttype = yyvsp[0].ttype;
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype);
 		  parmlist_tags_warning ();
-		  poplevel (0, 0, 0); ;
-    break;}
-case 399:
+		  poplevel (0, 0, 0); }
+    break;
+
+  case 400:
+/* Line 1792 of yacc.c  */
 #line 2209 "c-parse.y"
-{ tree t;
-		  for (t = yyvsp[-1].ttype; t; t = TREE_CHAIN (t))
+    { tree t;
+		  for (t = (yyvsp[(1) - (2)].ttype); t; t = TREE_CHAIN (t))
 		    if (TREE_VALUE (t) == NULL_TREE)
 		      error ("`...' in old-style identifier list");
-		  yyval.ttype = tree_cons (NULL_TREE, NULL_TREE, yyvsp[-1].ttype); ;
-    break;}
-case 400:
+		  (yyval.ttype) = tree_cons (NULL_TREE, NULL_TREE, (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 401:
+/* Line 1792 of yacc.c  */
 #line 2219 "c-parse.y"
-{ yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;
-    break;}
-case 401:
+    { (yyval.ttype) = build_tree_list (NULL_TREE, (yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 402:
+/* Line 1792 of yacc.c  */
 #line 2221 "c-parse.y"
-{ yyval.ttype = chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;
-    break;}
-case 402:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (3)].ttype), build_tree_list (NULL_TREE, (yyvsp[(3) - (3)].ttype))); }
+    break;
+
+  case 403:
+/* Line 1792 of yacc.c  */
 #line 2227 "c-parse.y"
-{ yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;
-    break;}
-case 403:
+    { (yyval.ttype) = build_tree_list (NULL_TREE, (yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 404:
+/* Line 1792 of yacc.c  */
 #line 2229 "c-parse.y"
-{ yyval.ttype = chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;
-    break;}
-case 404:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (3)].ttype), build_tree_list (NULL_TREE, (yyvsp[(3) - (3)].ttype))); }
+    break;
+
+  case 405:
+/* Line 1792 of yacc.c  */
 #line 2234 "c-parse.y"
-{ yyval.itype = pedantic;
-		  pedantic = 0; ;
-    break;}
-}
-   /* the action file gets copied in in place of this dollarsign */
-#line 498 "/usr/lib/bison.simple"
-
-  yyvsp -= yylen;
-  yyssp -= yylen;
-#ifdef YYLSP_NEEDED
-  yylsp -= yylen;
-#endif
+    { (yyval.itype) = pedantic;
+		  pedantic = 0; }
+    break;
 
-#if YYDEBUG != 0
-  if (yydebug)
-    {
-      short *ssp1 = yyss - 1;
-      fprintf (stderr, "state stack now");
-      while (ssp1 != yyssp)
-	fprintf (stderr, " %d", *++ssp1);
-      fprintf (stderr, "\n");
+
+/* Line 1792 of yacc.c  */
+#line 5212 "c-parse.c"
+      default: break;
     }
-#endif
+  /* User semantic actions sometimes alter yychar, and that requires
+     that yytoken be updated with the new translation.  We take the
+     approach of translating immediately before every use of yytoken.
+     One alternative is translating here after every semantic action,
+     but that translation would be missed if the semantic action invokes
+     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
+     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
+     incorrect destructor might then be invoked immediately.  In the
+     case of YYERROR or YYBACKUP, subsequent parser actions might lead
+     to an incorrect destructor call or verbose syntax error message
+     before the lookahead is translated.  */
+  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
+
+  YYPOPSTACK (yylen);
+  yylen = 0;
+  YY_STACK_PRINT (yyss, yyssp);
 
   *++yyvsp = yyval;
 
-#ifdef YYLSP_NEEDED
-  yylsp++;
-  if (yylen == 0)
-    {
-      yylsp->first_line = yylloc.first_line;
-      yylsp->first_column = yylloc.first_column;
-      yylsp->last_line = (yylsp-1)->last_line;
-      yylsp->last_column = (yylsp-1)->last_column;
-      yylsp->text = 0;
-    }
-  else
-    {
-      yylsp->last_line = (yylsp+yylen-1)->last_line;
-      yylsp->last_column = (yylsp+yylen-1)->last_column;
-    }
-#endif
-
-  /* Now "shift" the result of the reduction.
-     Determine what state that goes to,
-     based on the state we popped back to
-     and the rule number reduced by.  */
+  /* Now `shift' the result of the reduction.  Determine what state
+     that goes to, based on the state we popped back to and the rule
+     number reduced by.  */
 
   yyn = yyr1[yyn];
 
-  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
-  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
+  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
+  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
     yystate = yytable[yystate];
   else
-    yystate = yydefgoto[yyn - YYNTBASE];
+    yystate = yydefgoto[yyn - YYNTOKENS];
 
   goto yynewstate;
 
-yyerrlab:   /* here on detecting error */
 
-  if (! yyerrstatus)
-    /* If not already recovering from an error, report this error.  */
+/*------------------------------------.
+| yyerrlab -- here on detecting error |
+`------------------------------------*/
+yyerrlab:
+  /* Make sure we have latest lookahead translation.  See comments at
+     user semantic actions for why this is necessary.  */
+  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);
+
+  /* If not already recovering from an error, report this error.  */
+  if (!yyerrstatus)
     {
       ++yynerrs;
+#if ! YYERROR_VERBOSE
+      yyerror (YY_("syntax error"));
+#else
+# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
+                                        yyssp, yytoken)
+      {
+        char const *yymsgp = YY_("syntax error");
+        int yysyntax_error_status;
+        yysyntax_error_status = YYSYNTAX_ERROR;
+        if (yysyntax_error_status == 0)
+          yymsgp = yymsg;
+        else if (yysyntax_error_status == 1)
+          {
+            if (yymsg != yymsgbuf)
+              YYSTACK_FREE (yymsg);
+            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
+            if (!yymsg)
+              {
+                yymsg = yymsgbuf;
+                yymsg_alloc = sizeof yymsgbuf;
+                yysyntax_error_status = 2;
+              }
+            else
+              {
+                yysyntax_error_status = YYSYNTAX_ERROR;
+                yymsgp = yymsg;
+              }
+          }
+        yyerror (yymsgp);
+        if (yysyntax_error_status == 2)
+          goto yyexhaustedlab;
+      }
+# undef YYSYNTAX_ERROR
+#endif
+    }
+
 
-#ifdef YYERROR_VERBOSE
-      yyn = yypact[yystate];
 
-      if (yyn > YYFLAG && yyn < YYLAST)
+  if (yyerrstatus == 3)
+    {
+      /* If just tried and failed to reuse lookahead token after an
+	 error, discard it.  */
+
+      if (yychar <= YYEOF)
 	{
-	  int size = 0;
-	  char *msg;
-	  int x, count;
-
-	  count = 0;
-	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
-	  for (x = (yyn < 0 ? -yyn : 0);
-	       x < (sizeof(yytname) / sizeof(char *)); x++)
-	    if (yycheck[x + yyn] == x)
-	      size += strlen(yytname[x]) + 15, count++;
-	  msg = (char *) malloc(size + 15);
-	  if (msg != 0)
-	    {
-	      strcpy(msg, "parse error");
-
-	      if (count < 5)
-		{
-		  count = 0;
-		  for (x = (yyn < 0 ? -yyn : 0);
-		       x < (sizeof(yytname) / sizeof(char *)); x++)
-		    if (yycheck[x + yyn] == x)
-		      {
-			strcat(msg, count == 0 ? ", expecting `" : " or `");
-			strcat(msg, yytname[x]);
-			strcat(msg, "'");
-			count++;
-		      }
-		}
-	      yyerror(msg);
-	      free(msg);
-	    }
-	  else
-	    yyerror ("parse error; also virtual memory exceeded");
+	  /* Return failure if at end of input.  */
+	  if (yychar == YYEOF)
+	    YYABORT;
 	}
       else
-#endif /* YYERROR_VERBOSE */
-	yyerror("parse error");
+	{
+	  yydestruct ("Error: discarding",
+		      yytoken, &yylval);
+	  yychar = YYEMPTY;
+	}
     }
 
+  /* Else will try to reuse lookahead token after shifting the error
+     token.  */
   goto yyerrlab1;
-yyerrlab1:   /* here on error raised explicitly by an action */
 
-  if (yyerrstatus == 3)
+
+/*---------------------------------------------------.
+| yyerrorlab -- error raised explicitly by YYERROR.  |
+`---------------------------------------------------*/
+yyerrorlab:
+
+  /* Pacify compilers like GCC when the user code never invokes
+     YYERROR and the label yyerrorlab therefore never appears in user
+     code.  */
+  if (/*CONSTCOND*/ 0)
+     goto yyerrorlab;
+
+  /* Do not reclaim the symbols of the rule which action triggered
+     this YYERROR.  */
+  YYPOPSTACK (yylen);
+  yylen = 0;
+  YY_STACK_PRINT (yyss, yyssp);
+  yystate = *yyssp;
+  goto yyerrlab1;
+
+
+/*-------------------------------------------------------------.
+| yyerrlab1 -- common code for both syntax error and YYERROR.  |
+`-------------------------------------------------------------*/
+yyerrlab1:
+  yyerrstatus = 3;	/* Each real token shifted decrements this.  */
+
+  for (;;)
     {
-      /* if just tried and failed to reuse lookahead token after an error, discard it.  */
+      yyn = yypact[yystate];
+      if (!yypact_value_is_default (yyn))
+	{
+	  yyn += YYTERROR;
+	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
+	    {
+	      yyn = yytable[yyn];
+	      if (0 < yyn)
+		break;
+	    }
+	}
 
-      /* return failure if at end of input */
-      if (yychar == YYEOF)
+      /* Pop the current state because it cannot handle the error token.  */
+      if (yyssp == yyss)
 	YYABORT;
 
-#if YYDEBUG != 0
-      if (yydebug)
-	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
-#endif
 
-      yychar = YYEMPTY;
+      yydestruct ("Error: popping",
+		  yystos[yystate], yyvsp);
+      YYPOPSTACK (1);
+      yystate = *yyssp;
+      YY_STACK_PRINT (yyss, yyssp);
     }
 
-  /* Else will try to reuse lookahead token
-     after shifting the error token.  */
-
-  yyerrstatus = 3;		/* Each real token shifted decrements this */
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  *++yyvsp = yylval;
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
 
-  goto yyerrhandle;
 
-yyerrdefault:  /* current state does not do anything special for the error token. */
+  /* Shift the error token.  */
+  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);
 
-#if 0
-  /* This is wrong; only states that explicitly want error tokens
-     should shift them.  */
-  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
-  if (yyn) goto yydefault;
-#endif
+  yystate = yyn;
+  goto yynewstate;
 
-yyerrpop:   /* pop the current state because it cannot handle the error token */
 
-  if (yyssp == yyss) YYABORT;
-  yyvsp--;
-  yystate = *--yyssp;
-#ifdef YYLSP_NEEDED
-  yylsp--;
+/*-------------------------------------.
+| yyacceptlab -- YYACCEPT comes here.  |
+`-------------------------------------*/
+yyacceptlab:
+  yyresult = 0;
+  goto yyreturn;
+
+/*-----------------------------------.
+| yyabortlab -- YYABORT comes here.  |
+`-----------------------------------*/
+yyabortlab:
+  yyresult = 1;
+  goto yyreturn;
+
+#if !defined yyoverflow || YYERROR_VERBOSE
+/*-------------------------------------------------.
+| yyexhaustedlab -- memory exhaustion comes here.  |
+`-------------------------------------------------*/
+yyexhaustedlab:
+  yyerror (YY_("memory exhausted"));
+  yyresult = 2;
+  /* Fall through.  */
 #endif
 
-#if YYDEBUG != 0
-  if (yydebug)
+yyreturn:
+  if (yychar != YYEMPTY)
     {
-      short *ssp1 = yyss - 1;
-      fprintf (stderr, "Error: state stack now");
-      while (ssp1 != yyssp)
-	fprintf (stderr, " %d", *++ssp1);
-      fprintf (stderr, "\n");
+      /* Make sure we have latest lookahead translation.  See comments at
+         user semantic actions for why this is necessary.  */
+      yytoken = YYTRANSLATE (yychar);
+      yydestruct ("Cleanup: discarding lookahead",
+                  yytoken, &yylval);
     }
-#endif
-
-yyerrhandle:
-
-  yyn = yypact[yystate];
-  if (yyn == YYFLAG)
-    goto yyerrdefault;
-
-  yyn += YYTERROR;
-  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
-    goto yyerrdefault;
-
-  yyn = yytable[yyn];
-  if (yyn < 0)
+  /* Do not reclaim the symbols of the rule which action triggered
+     this YYABORT or YYACCEPT.  */
+  YYPOPSTACK (yylen);
+  YY_STACK_PRINT (yyss, yyssp);
+  while (yyssp != yyss)
     {
-      if (yyn == YYFLAG)
-	goto yyerrpop;
-      yyn = -yyn;
-      goto yyreduce;
+      yydestruct ("Cleanup: popping",
+		  yystos[*yyssp], yyvsp);
+      YYPOPSTACK (1);
     }
-  else if (yyn == 0)
-    goto yyerrpop;
-
-  if (yyn == YYFINAL)
-    YYACCEPT;
-
-#if YYDEBUG != 0
-  if (yydebug)
-    fprintf(stderr, "Shifting error token, ");
+#ifndef yyoverflow
+  if (yyss != yyssa)
+    YYSTACK_FREE (yyss);
 #endif
-
-  *++yyvsp = yylval;
-#ifdef YYLSP_NEEDED
-  *++yylsp = yylloc;
+#if YYERROR_VERBOSE
+  if (yymsg != yymsgbuf)
+    YYSTACK_FREE (yymsg);
 #endif
-
-  yystate = yyn;
-  goto yynewstate;
+  /* Make sure YYID is used.  */
+  return YYID (yyresult);
 }
+
+
+/* Line 2055 of yacc.c  */
 #line 2238 "c-parse.y"
 
diff --git a/gcc/c-parse.gperf b/gcc/c-parse.gperf
index 888eee9ebe1..25d93bf1f9e 100644
--- a/gcc/c-parse.gperf
+++ b/gcc/c-parse.gperf
@@ -72,7 +72,7 @@ oneway, TYPE_QUAL, RID_ONEWAY
 out, TYPE_QUAL, RID_OUT
 register, SCSPEC, RID_REGISTER
 restrict, TYPE_QUAL, RID_RESTRICT
-return, RETURN, NORID
+return, RETURN_KEYWORD, NORID
 short, TYPESPEC, RID_SHORT
 signed, TYPESPEC, RID_SIGNED
 sizeof, SIZEOF, NORID
diff --git a/gcc/c-parse.h b/gcc/c-parse.h
index 21b3d0caf6b..f7734439f5e 100644
--- a/gcc/c-parse.h
+++ b/gcc/c-parse.h
@@ -1,64 +1,144 @@
-typedef union {long itype; tree ttype; enum tree_code code;
-	char *filename; int lineno; int ends_in_label; } YYSTYPE;
-#define	IDENTIFIER	258
-#define	TYPENAME	259
-#define	SCSPEC	260
-#define	TYPESPEC	261
-#define	TYPE_QUAL	262
-#define	CONSTANT	263
-#define	STRING	264
-#define	ELLIPSIS	265
-#define	SIZEOF	266
-#define	ENUM	267
-#define	STRUCT	268
-#define	UNION	269
-#define	IF	270
-#define	ELSE	271
-#define	WHILE	272
-#define	DO	273
-#define	FOR	274
-#define	SWITCH	275
-#define	CASE	276
-#define	DEFAULT	277
-#define	BREAK	278
-#define	CONTINUE	279
-#define	RETURN	280
-#define	GOTO	281
-#define	ASM_KEYWORD	282
-#define	TYPEOF	283
-#define	ALIGNOF	284
-#define	ATTRIBUTE	285
-#define	EXTENSION	286
-#define	LABEL	287
-#define	REALPART	288
-#define	IMAGPART	289
-#define	ASSIGN	290
-#define	OROR	291
-#define	ANDAND	292
-#define	EQCOMPARE	293
-#define	ARITHCOMPARE	294
-#define	LSHIFT	295
-#define	RSHIFT	296
-#define	UNARY	297
-#define	PLUSPLUS	298
-#define	MINUSMINUS	299
-#define	HYPERUNARY	300
-#define	POINTSAT	301
-#define	INTERFACE	302
-#define	IMPLEMENTATION	303
-#define	END	304
-#define	SELECTOR	305
-#define	DEFS	306
-#define	ENCODE	307
-#define	CLASSNAME	308
-#define	PUBLIC	309
-#define	PRIVATE	310
-#define	PROTECTED	311
-#define	PROTOCOL	312
-#define	OBJECTNAME	313
-#define	CLASS	314
-#define	ALIAS	315
-#define	OBJC_STRING	316
+/* A Bison parser, made by GNU Bison 2.7.  */
 
+/* Bison interface for Yacc-like parsers in C
+   
+      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.
+   
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+   
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+   
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+/* As a special exception, you may create a larger work that contains
+   part or all of the Bison parser skeleton and distribute that work
+   under terms of your choice, so long as that work isn't itself a
+   parser generator using the skeleton or a modified version thereof
+   as a parser skeleton.  Alternatively, if you modify or redistribute
+   the parser skeleton itself, you may (at your option) remove this
+   special exception, which will cause the skeleton and the resulting
+   Bison output files to be licensed under the GNU General Public
+   License without this special exception.
+   
+   This special exception was added by the Free Software Foundation in
+   version 2.2 of Bison.  */
+
+#ifndef YY_YY_C_PARSE_H_INCLUDED
+# define YY_YY_C_PARSE_H_INCLUDED
+/* Enabling traces.  */
+#ifndef YYDEBUG
+# define YYDEBUG 0
+#endif
+#if YYDEBUG
+extern int yydebug;
+#endif
+
+/* Tokens.  */
+#ifndef YYTOKENTYPE
+# define YYTOKENTYPE
+   /* Put the tokens into the symbol table, so that GDB and other debuggers
+      know about them.  */
+   enum yytokentype {
+     IDENTIFIER = 258,
+     TYPENAME = 259,
+     SCSPEC = 260,
+     TYPESPEC = 261,
+     TYPE_QUAL = 262,
+     CONSTANT = 263,
+     STRING = 264,
+     ELLIPSIS = 265,
+     SIZEOF = 266,
+     ENUM = 267,
+     STRUCT = 268,
+     UNION = 269,
+     IF = 270,
+     ELSE = 271,
+     WHILE = 272,
+     DO = 273,
+     FOR = 274,
+     SWITCH = 275,
+     CASE = 276,
+     DEFAULT = 277,
+     BREAK = 278,
+     CONTINUE = 279,
+     RETURN_KEYWORD = 280,
+     GOTO = 281,
+     ASM_KEYWORD = 282,
+     TYPEOF = 283,
+     ALIGNOF = 284,
+     ATTRIBUTE = 285,
+     EXTENSION = 286,
+     LABEL = 287,
+     REALPART = 288,
+     IMAGPART = 289,
+     ASSIGN = 290,
+     OROR = 291,
+     ANDAND = 292,
+     EQCOMPARE = 293,
+     ARITHCOMPARE = 294,
+     RSHIFT = 295,
+     LSHIFT = 296,
+     MINUSMINUS = 297,
+     PLUSPLUS = 298,
+     UNARY = 299,
+     HYPERUNARY = 300,
+     POINTSAT = 301,
+     INTERFACE = 302,
+     IMPLEMENTATION = 303,
+     END = 304,
+     SELECTOR = 305,
+     DEFS = 306,
+     ENCODE = 307,
+     CLASSNAME = 308,
+     PUBLIC = 309,
+     PRIVATE = 310,
+     PROTECTED = 311,
+     PROTOCOL = 312,
+     OBJECTNAME = 313,
+     CLASS = 314,
+     ALIAS = 315,
+     OBJC_STRING = 316
+   };
+#endif
+
+
+#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
+typedef union YYSTYPE
+{
+/* Line 2058 of yacc.c  */
+#line 87 "c-parse.y"
+long itype; tree ttype; enum tree_code code;
+	char *filename; int lineno; int ends_in_label; 
+
+/* Line 2058 of yacc.c  */
+#line 122 "c-parse.h"
+} YYSTYPE;
+# define YYSTYPE_IS_TRIVIAL 1
+# define yystype YYSTYPE /* obsolescent; will be withdrawn */
+# define YYSTYPE_IS_DECLARED 1
+#endif
 
 extern YYSTYPE yylval;
+
+#ifdef YYPARSE_PARAM
+#if defined __STDC__ || defined __cplusplus
+int yyparse (void *YYPARSE_PARAM);
+#else
+int yyparse ();
+#endif
+#else /* ! YYPARSE_PARAM */
+#if defined __STDC__ || defined __cplusplus
+int yyparse (void);
+#else
+int yyparse ();
+#endif
+#endif /* ! YYPARSE_PARAM */
+
+#endif /* !YY_YY_C_PARSE_H_INCLUDED  */
diff --git a/gcc/c-parse.in b/gcc/c-parse.in
index 6757c4d464a..c34c20fa586 100644
--- a/gcc/c-parse.in
+++ b/gcc/c-parse.in
@@ -28,7 +28,7 @@ Boston, MA 02111-1307, USA.  */
    written by AT&T, but I have never seen it.  */
 
 ifobjc
-%expect 66
+/* was %expect 66; newer bison expect 72 */
 end ifobjc
 ifc
 %expect 51
@@ -134,7 +134,7 @@ end ifc
 /* the reserved words */
 /* SCO include files test "ASM", so use something else. */
 %token SIZEOF ENUM STRUCT UNION IF ELSE WHILE DO FOR SWITCH CASE DEFAULT
-%token BREAK CONTINUE RETURN GOTO ASM_KEYWORD TYPEOF ALIGNOF
+%token BREAK CONTINUE RETURN_KEYWORD GOTO ASM_KEYWORD TYPEOF ALIGNOF
 %token ATTRIBUTE EXTENSION LABEL
 %token REALPART IMAGPART
 
@@ -1496,7 +1496,7 @@ enum_head:
 
 structsp:
 	  struct_head identifier '{'
-		{ $$ = start_struct (RECORD_TYPE, $2);
+		{ $<ttype>$ = start_struct (RECORD_TYPE, $2);
 		  /* Start scope of tag before parsing components.  */
 		}
 	  component_decl_list '}' maybe_attribute 
@@ -1508,7 +1508,7 @@ structsp:
 	| struct_head identifier
 		{ $$ = xref_tag (RECORD_TYPE, $2); }
 	| union_head identifier '{'
-		{ $$ = start_struct (UNION_TYPE, $2); }
+		{ $<ttype>$ = start_struct (UNION_TYPE, $2); }
 	  component_decl_list '}' maybe_attribute
 		{ $$ = finish_struct ($<ttype>4, $5, chainon ($1, $7)); }
 	| union_head '{' component_decl_list '}' maybe_attribute
@@ -1519,13 +1519,13 @@ structsp:
 		{ $$ = xref_tag (UNION_TYPE, $2); }
 	| enum_head identifier '{'
 		{ $<itype>3 = suspend_momentary ();
-		  $$ = start_enum ($2); }
+		  $<ttype>$ = start_enum ($2); }
 	  enumlist maybecomma_warn '}' maybe_attribute
 		{ $$= finish_enum ($<ttype>4, nreverse ($5), chainon ($1, $8));
 		  resume_momentary ($<itype>3); }
 	| enum_head '{'
 		{ $<itype>2 = suspend_momentary ();
-		  $$ = start_enum (NULL_TREE); }
+		  $<ttype>$ = start_enum (NULL_TREE); }
 	  enumlist maybecomma_warn '}' maybe_attribute
 		{ $$= finish_enum ($<ttype>3, nreverse ($4), chainon ($1, $7));
 		  resume_momentary ($<itype>2); }
@@ -2027,11 +2027,11 @@ stmt:
 		  emit_line_note ($<filename>-1, $<lineno>0);
 		  if (! expand_continue_loop (NULL_PTR))
 		    error ("continue statement not within a loop"); }
-	| RETURN ';'
+	| RETURN_KEYWORD ';'
 		{ stmt_count++;
 		  emit_line_note ($<filename>-1, $<lineno>0);
 		  c_expand_return (NULL_TREE); }
-	| RETURN expr ';'
+	| RETURN_KEYWORD expr ';'
 		{ stmt_count++;
 		  emit_line_note ($<filename>-1, $<lineno>0);
 		  c_expand_return ($2); }
@@ -2953,7 +2953,7 @@ reservedwords:
 	| DEFAULT { $$ = get_identifier (token_buffer); }
 	| BREAK { $$ = get_identifier (token_buffer); }
 	| CONTINUE { $$ = get_identifier (token_buffer); }
-	| RETURN  { $$ = get_identifier (token_buffer); }
+	| RETURN_KEYWORD  { $$ = get_identifier (token_buffer); }
 	| GOTO { $$ = get_identifier (token_buffer); }
 	| ASM_KEYWORD { $$ = get_identifier (token_buffer); }
         | SIZEOF { $$ = get_identifier (token_buffer); }
diff --git a/gcc/c-parse.y b/gcc/c-parse.y
index bb69dfed313..34471ba5d14 100644
--- a/gcc/c-parse.y
+++ b/gcc/c-parse.y
@@ -122,7 +122,7 @@ char *language_string = "GNU C";
 /* the reserved words */
 /* SCO include files test "ASM", so use something else. */
 %token SIZEOF ENUM STRUCT UNION IF ELSE WHILE DO FOR SWITCH CASE DEFAULT
-%token BREAK CONTINUE RETURN GOTO ASM_KEYWORD TYPEOF ALIGNOF
+%token BREAK CONTINUE RETURN_KEYWORD GOTO ASM_KEYWORD TYPEOF ALIGNOF
 %token ATTRIBUTE EXTENSION LABEL
 %token REALPART IMAGPART
 
@@ -1321,7 +1321,7 @@ enum_head:
 
 structsp:
 	  struct_head identifier '{'
-		{ $$ = start_struct (RECORD_TYPE, $2);
+		{ $<ttype>$ = start_struct (RECORD_TYPE, $2);
 		  /* Start scope of tag before parsing components.  */
 		}
 	  component_decl_list '}' maybe_attribute 
@@ -1333,7 +1333,7 @@ structsp:
 	| struct_head identifier
 		{ $$ = xref_tag (RECORD_TYPE, $2); }
 	| union_head identifier '{'
-		{ $$ = start_struct (UNION_TYPE, $2); }
+		{ $<ttype>$ = start_struct (UNION_TYPE, $2); }
 	  component_decl_list '}' maybe_attribute
 		{ $$ = finish_struct ($<ttype>4, $5, chainon ($1, $7)); }
 	| union_head '{' component_decl_list '}' maybe_attribute
@@ -1344,13 +1344,13 @@ structsp:
 		{ $$ = xref_tag (UNION_TYPE, $2); }
 	| enum_head identifier '{'
 		{ $<itype>3 = suspend_momentary ();
-		  $$ = start_enum ($2); }
+		  $<ttype>$ = start_enum ($2); }
 	  enumlist maybecomma_warn '}' maybe_attribute
 		{ $$= finish_enum ($<ttype>4, nreverse ($5), chainon ($1, $8));
 		  resume_momentary ($<itype>3); }
 	| enum_head '{'
 		{ $<itype>2 = suspend_momentary ();
-		  $$ = start_enum (NULL_TREE); }
+		  $<ttype>$ = start_enum (NULL_TREE); }
 	  enumlist maybecomma_warn '}' maybe_attribute
 		{ $$= finish_enum ($<ttype>3, nreverse ($4), chainon ($1, $7));
 		  resume_momentary ($<itype>2); }
@@ -1832,11 +1832,11 @@ stmt:
 		  emit_line_note ($<filename>-1, $<lineno>0);
 		  if (! expand_continue_loop (NULL_PTR))
 		    error ("continue statement not within a loop"); }
-	| RETURN ';'
+	| RETURN_KEYWORD ';'
 		{ stmt_count++;
 		  emit_line_note ($<filename>-1, $<lineno>0);
 		  c_expand_return (NULL_TREE); }
-	| RETURN expr ';'
+	| RETURN_KEYWORD expr ';'
 		{ stmt_count++;
 		  emit_line_note ($<filename>-1, $<lineno>0);
 		  c_expand_return ($2); }
diff --git a/gcc/cp/hash.h b/gcc/cp/hash.h
index 3c6199630c1..8051e0a5b6c 100644
--- a/gcc/cp/hash.h
+++ b/gcc/cp/hash.h
@@ -1,63 +1,99 @@
-/* C code produced by gperf version 2.7.1 (19981006 egcs) */
-/* Command-line: gperf -L C -F , 0, 0 -p -j1 -g -o -t -N is_reserved_word -k1,4,7,$ ../../../gcc/cp/gxx.gperf  */
+/* C code produced by gperf version 3.1 */
+/* Command-line: gperf -L C -F ', 0, 0' -p -j1 -g -o -t -N is_reserved_word -k'1,4,7,$' ../../../gcc/cp/gxx.gperf  */
+
+#if !((' ' == 32) && ('!' == 33) && ('"' == 34) && ('#' == 35) \
+      && ('%' == 37) && ('&' == 38) && ('\'' == 39) && ('(' == 40) \
+      && (')' == 41) && ('*' == 42) && ('+' == 43) && (',' == 44) \
+      && ('-' == 45) && ('.' == 46) && ('/' == 47) && ('0' == 48) \
+      && ('1' == 49) && ('2' == 50) && ('3' == 51) && ('4' == 52) \
+      && ('5' == 53) && ('6' == 54) && ('7' == 55) && ('8' == 56) \
+      && ('9' == 57) && (':' == 58) && (';' == 59) && ('<' == 60) \
+      && ('=' == 61) && ('>' == 62) && ('?' == 63) && ('A' == 65) \
+      && ('B' == 66) && ('C' == 67) && ('D' == 68) && ('E' == 69) \
+      && ('F' == 70) && ('G' == 71) && ('H' == 72) && ('I' == 73) \
+      && ('J' == 74) && ('K' == 75) && ('L' == 76) && ('M' == 77) \
+      && ('N' == 78) && ('O' == 79) && ('P' == 80) && ('Q' == 81) \
+      && ('R' == 82) && ('S' == 83) && ('T' == 84) && ('U' == 85) \
+      && ('V' == 86) && ('W' == 87) && ('X' == 88) && ('Y' == 89) \
+      && ('Z' == 90) && ('[' == 91) && ('\\' == 92) && (']' == 93) \
+      && ('^' == 94) && ('_' == 95) && ('a' == 97) && ('b' == 98) \
+      && ('c' == 99) && ('d' == 100) && ('e' == 101) && ('f' == 102) \
+      && ('g' == 103) && ('h' == 104) && ('i' == 105) && ('j' == 106) \
+      && ('k' == 107) && ('l' == 108) && ('m' == 109) && ('n' == 110) \
+      && ('o' == 111) && ('p' == 112) && ('q' == 113) && ('r' == 114) \
+      && ('s' == 115) && ('t' == 116) && ('u' == 117) && ('v' == 118) \
+      && ('w' == 119) && ('x' == 120) && ('y' == 121) && ('z' == 122) \
+      && ('{' == 123) && ('|' == 124) && ('}' == 125) && ('~' == 126))
+/* The character set is not based on ISO-646.  */
+error "gperf generated tables don't work with this execution character set. Please report a bug to <bug-gperf@gnu.org>."
+#endif
+
+#line 1 "../../../gcc/cp/gxx.gperf"
+
 /* Command-line: gperf -L KR-C -F ', 0, 0' -p -j1 -g -o -t -N is_reserved_word -k1,4,$,7 gplus.gperf  */
+#line 4 "../../../gcc/cp/gxx.gperf"
 struct resword { const char *name; short token; enum rid rid;};
 
 #define TOTAL_KEYWORDS 106
 #define MIN_WORD_LENGTH 2
 #define MAX_WORD_LENGTH 16
 #define MIN_HASH_VALUE 4
-#define MAX_HASH_VALUE 250
-/* maximum key range = 247, duplicates = 0 */
+#define MAX_HASH_VALUE 163
+/* maximum key range = 160, duplicates = 0 */
 
 #ifdef __GNUC__
 __inline
+#else
+#ifdef __cplusplus
+inline
+#endif
 #endif
 static unsigned int
 hash (str, len)
      register const char *str;
-     register unsigned int len;
+     register size_t len;
 {
   static unsigned char asso_values[] =
     {
-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
-      251, 251, 251, 251, 251,   0, 251,  64,  93,   3,
-        0,   0,  74,  35,   0,  26, 251,   2,  31,  65,
-       23,  76,   7,  19,  45,  37,   6,  64,  12,  38,
-       14,   4, 251, 251, 251, 251, 251, 251, 251, 251,
-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
-      251, 251, 251, 251, 251, 251, 251, 251, 251, 251,
-      251, 251, 251, 251, 251, 251
+      164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
+      164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
+      164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
+      164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
+      164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
+      164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
+      164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
+      164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
+      164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
+      164, 164, 164, 164, 164,   0, 164,  44,  58,  15,
+       55,   0,  24,  23,  25,   2, 164,   4,  26,  75,
+       36,  11,  40,  74,  14,  23,   1,  45,  45,  90,
+       50,  50, 164, 164, 164, 164, 164, 164, 164, 164,
+      164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
+      164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
+      164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
+      164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
+      164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
+      164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
+      164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
+      164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
+      164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
+      164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
+      164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
+      164, 164, 164, 164, 164, 164, 164, 164, 164, 164,
+      164, 164, 164, 164, 164, 164
     };
-  register int hval = len;
+  register unsigned int hval = len;
 
   switch (hval)
     {
       default:
-      case 7:
         hval += asso_values[(unsigned char)str[6]];
+      /*FALLTHROUGH*/
       case 6:
       case 5:
       case 4:
         hval += asso_values[(unsigned char)str[3]];
+      /*FALLTHROUGH*/
       case 3:
       case 2:
       case 1:
@@ -67,165 +103,263 @@ hash (str, len)
   return hval + asso_values[(unsigned char)str[len - 1]];
 }
 
-#ifdef __GNUC__
-__inline
-#endif
 struct resword *
 is_reserved_word (str, len)
      register const char *str;
-     register unsigned int len;
+     register size_t len;
 {
   static struct resword wordlist[] =
     {
       {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
+#line 57 "../../../gcc/cp/gxx.gperf"
       {"else", ELSE, NORID,},
+#line 97 "../../../gcc/cp/gxx.gperf"
+      {"true", CXX_TRUE, NORID,},
+#line 69 "../../../gcc/cp/gxx.gperf"
+      {"int", TYPESPEC, RID_INT,},
       {"", 0, 0},
-      {"delete", DELETE, NORID,},
-      {"case", CASE, NORID,},
+#line 24 "../../../gcc/cp/gxx.gperf"
       {"__real__", REALPART, NORID},
       {"", 0, 0},
-      {"true", CXX_TRUE, NORID,},
-      {"catch", CATCH, NORID,},
-      {"typeid", TYPEID, NORID,},
-      {"try", TRY, NORID,},
-      {"", 0, 0}, {"", 0, 0},
-      {"void", TYPESPEC, RID_VOID,},
-      {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-      {"private", VISSPEC, RID_PRIVATE,},
-      {"template", TEMPLATE, RID_TEMPLATE,},
-      {"protected", VISSPEC, RID_PROTECTED,},
-      {"extern", SCSPEC, RID_EXTERN,},
-      {"", 0, 0}, {"", 0, 0},
-      {"not", '!', NORID,},
+#line 68 "../../../gcc/cp/gxx.gperf"
+      {"inline", SCSPEC, RID_INLINE,},
       {"", 0, 0},
-      {"__signed", TYPESPEC, RID_SIGNED},
-      {"int", TYPESPEC, RID_INT,},
+#line 29 "../../../gcc/cp/gxx.gperf"
       {"__signed__", TYPESPEC, RID_SIGNED},
-      {"__real", REALPART, NORID},
       {"", 0, 0},
-      {"xor_eq", ASSIGN, NORID,},
-      {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
+#line 10 "../../../gcc/cp/gxx.gperf"
       {"__attribute", ATTRIBUTE, NORID},
-      {"__asm__", ASM_KEYWORD, NORID},
+      {"", 0, 0},
+#line 11 "../../../gcc/cp/gxx.gperf"
       {"__attribute__", ATTRIBUTE, NORID},
-      {"compl", '~', NORID,},
-      {"public", VISSPEC, RID_PUBLIC,},
-      {"not_eq", EQCOMPARE, NORID,},
-      {"switch", SWITCH, NORID,},
-      {"__extension__", EXTENSION, NORID},
+      {"", 0, 0},
+#line 60 "../../../gcc/cp/gxx.gperf"
+      {"export", SCSPEC, RID_EXPORT,},
+#line 44 "../../../gcc/cp/gxx.gperf"
+      {"case", CASE, NORID,},
+#line 14 "../../../gcc/cp/gxx.gperf"
+      {"__const", CV_QUALIFIER, RID_CONST},
+#line 15 "../../../gcc/cp/gxx.gperf"
+      {"__const__", CV_QUALIFIER, RID_CONST},
+#line 33 "../../../gcc/cp/gxx.gperf"
+      {"__volatile", CV_QUALIFIER, RID_VOLATILE},
+      {"", 0, 0},
+#line 34 "../../../gcc/cp/gxx.gperf"
+      {"__volatile__", CV_QUALIFIER, RID_VOLATILE},
+#line 25 "../../../gcc/cp/gxx.gperf"
+      {"__restrict", CV_QUALIFIER, RID_RESTRICT},
+#line 26 "../../../gcc/cp/gxx.gperf"
+      {"__restrict__", CV_QUALIFIER, RID_RESTRICT},
+#line 77 "../../../gcc/cp/gxx.gperf"
+      {"or", OROR, NORID,},
+#line 67 "../../../gcc/cp/gxx.gperf"
+      {"if", IF, NORID,},
+      {"", 0, 0},
+#line 9 "../../../gcc/cp/gxx.gperf"
+      {"__asm__", ASM_KEYWORD, NORID},
+#line 102 "../../../gcc/cp/gxx.gperf"
+      {"typeof", TYPEOF, NORID,},
+#line 23 "../../../gcc/cp/gxx.gperf"
+      {"__real", REALPART, NORID},
+      {"", 0, 0}, {"", 0, 0},
+#line 30 "../../../gcc/cp/gxx.gperf"
+      {"__sigof__", SIGOF, NORID		/* Extension */,},
+#line 91 "../../../gcc/cp/gxx.gperf"
+      {"static_cast", STATIC_CAST, NORID,},
+#line 59 "../../../gcc/cp/gxx.gperf"
+      {"explicit", SCSPEC, RID_EXPLICIT,},
+#line 82 "../../../gcc/cp/gxx.gperf"
+      {"register", SCSPEC, RID_REGISTER,},
+#line 35 "../../../gcc/cp/gxx.gperf"
+      {"__wchar_t", TYPESPEC, RID_WCHAR  /* Unique to ANSI C++ */,},
+#line 74 "../../../gcc/cp/gxx.gperf"
+      {"not", '!', NORID,},
+#line 64 "../../../gcc/cp/gxx.gperf"
+      {"for", FOR, NORID,},
+#line 61 "../../../gcc/cp/gxx.gperf"
+      {"extern", SCSPEC, RID_EXTERN,},
+#line 85 "../../../gcc/cp/gxx.gperf"
+      {"short", TYPESPEC, RID_SHORT,},
+#line 49 "../../../gcc/cp/gxx.gperf"
       {"const", CV_QUALIFIER, RID_CONST,},
+#line 90 "../../../gcc/cp/gxx.gperf"
       {"static", SCSPEC, RID_STATIC,},
       {"", 0, 0},
-      {"__inline", SCSPEC, RID_INLINE},
+#line 46 "../../../gcc/cp/gxx.gperf"
+      {"char", TYPESPEC, RID_CHAR,},
+#line 13 "../../../gcc/cp/gxx.gperf"
+      {"__complex__", TYPESPEC, RID_COMPLEX},
+#line 66 "../../../gcc/cp/gxx.gperf"
+      {"goto", GOTO, NORID,},
+#line 94 "../../../gcc/cp/gxx.gperf"
+      {"template", TEMPLATE, RID_TEMPLATE,},
+#line 95 "../../../gcc/cp/gxx.gperf"
+      {"this", THIS, NORID,},
+#line 62 "../../../gcc/cp/gxx.gperf"
+      {"false", CXX_FALSE, NORID,},
+#line 89 "../../../gcc/cp/gxx.gperf"
+      {"sizeof", SIZEOF, NORID,},
+#line 98 "../../../gcc/cp/gxx.gperf"
+      {"try", TRY, NORID,},
+#line 93 "../../../gcc/cp/gxx.gperf"
+      {"switch", SWITCH, NORID,},
+#line 99 "../../../gcc/cp/gxx.gperf"
+      {"typedef", SCSPEC, RID_TYPEDEF,},
       {"", 0, 0},
-      {"__inline__", SCSPEC, RID_INLINE},
-      {"__restrict__", CV_QUALIFIER, RID_RESTRICT},
-      {"inline", SCSPEC, RID_INLINE,},
+#line 76 "../../../gcc/cp/gxx.gperf"
+      {"operator", OPERATOR, NORID,},
+#line 27 "../../../gcc/cp/gxx.gperf"
+      {"__signature__", AGGR, RID_SIGNATURE	/* Extension */,},
+#line 45 "../../../gcc/cp/gxx.gperf"
+      {"catch", CATCH, NORID,},
+#line 53 "../../../gcc/cp/gxx.gperf"
+      {"delete", DELETE, NORID,},
+#line 101 "../../../gcc/cp/gxx.gperf"
+      {"typeid", TYPEID, NORID,},
+#line 88 "../../../gcc/cp/gxx.gperf"
+      {"sigof", SIGOF, NORID		/* Extension */,},
+#line 50 "../../../gcc/cp/gxx.gperf"
       {"const_cast", CONST_CAST, NORID,},
-      {"static_cast", STATIC_CAST, NORID,},
-      {"__restrict", CV_QUALIFIER, RID_RESTRICT},
+#line 28 "../../../gcc/cp/gxx.gperf"
+      {"__signed", TYPESPEC, RID_SIGNED},
+#line 47 "../../../gcc/cp/gxx.gperf"
+      {"class", AGGR, RID_CLASS,},
+#line 110 "../../../gcc/cp/gxx.gperf"
       {"xor", '^', NORID,},
-      {"__wchar_t", TYPESPEC, RID_WCHAR  /* Unique to ANSI C++ */,},
-      {"new", NEW, NORID,},
+#line 54 "../../../gcc/cp/gxx.gperf"
+      {"do", DO, NORID,},
+#line 51 "../../../gcc/cp/gxx.gperf"
+      {"continue", CONTINUE, NORID,},
+#line 39 "../../../gcc/cp/gxx.gperf"
+      {"auto", SCSPEC, RID_AUTO,},
+#line 32 "../../../gcc/cp/gxx.gperf"
+      {"__typeof__", TYPEOF, NORID},
+      {"", 0, 0},
+#line 7 "../../../gcc/cp/gxx.gperf"
       {"__alignof__", ALIGNOF, NORID},
-      {"signed", TYPESPEC, RID_SIGNED,},
-      {"and", ANDAND, NORID,},
-      {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-      {"explicit", SCSPEC, RID_EXPLICIT,},
+#line 63 "../../../gcc/cp/gxx.gperf"
+      {"float", TYPESPEC, RID_FLOAT,},
+#line 92 "../../../gcc/cp/gxx.gperf"
+      {"struct", AGGR, RID_RECORD,},
+#line 70 "../../../gcc/cp/gxx.gperf"
+      {"long", TYPESPEC, RID_LONG,},
+#line 22 "../../../gcc/cp/gxx.gperf"
+      {"__null", CONSTANT, RID_NULL},
       {"", 0, 0},
+#line 21 "../../../gcc/cp/gxx.gperf"
+      {"__label__", LABEL, NORID},
+#line 19 "../../../gcc/cp/gxx.gperf"
+      {"__inline", SCSPEC, RID_INLINE},
+#line 83 "../../../gcc/cp/gxx.gperf"
+      {"reinterpret_cast", REINTERPRET_CAST, NORID,},
+#line 20 "../../../gcc/cp/gxx.gperf"
+      {"__inline__", SCSPEC, RID_INLINE},
+#line 18 "../../../gcc/cp/gxx.gperf"
       {"__imag__", IMAGPART, NORID},
-      {"while", WHILE, NORID,},
-      {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-      {"do", DO, NORID,},
+#line 100 "../../../gcc/cp/gxx.gperf"
       {"typename", TYPENAME_KEYWORD, NORID,},
+#line 65 "../../../gcc/cp/gxx.gperf"
       {"friend", SCSPEC, RID_FRIEND,},
-      {"continue", CONTINUE, NORID,},
-      {"class", AGGR, RID_CLASS,},
-      {"default", DEFAULT, NORID,},
-      {"this", THIS, NORID,},
-      {"dynamic_cast", DYNAMIC_CAST, NORID,},
-      {"typeof", TYPEOF, NORID,},
-      {"virtual", SCSPEC, RID_VIRTUAL,},
-      {"export", SCSPEC, RID_EXPORT,},
-      {"and_eq", ASSIGN, NORID,},
-      {"__typeof__", TYPEOF, NORID},
-      {"__const__", CV_QUALIFIER, RID_CONST},
-      {"__volatile", CV_QUALIFIER, RID_VOLATILE},
-      {"short", TYPESPEC, RID_SHORT,},
-      {"__volatile__", CV_QUALIFIER, RID_VOLATILE},
-      {"__const", CV_QUALIFIER, RID_CONST},
+#line 48 "../../../gcc/cp/gxx.gperf"
+      {"compl", '~', NORID,},
+#line 81 "../../../gcc/cp/gxx.gperf"
+      {"public", VISSPEC, RID_PUBLIC,},
+#line 41 "../../../gcc/cp/gxx.gperf"
+      {"bitor", '|', NORID,},
+#line 72 "../../../gcc/cp/gxx.gperf"
       {"namespace", NAMESPACE, NORID,},
-      {"char", TYPESPEC, RID_CHAR,},
-      {"unsigned", TYPESPEC, RID_UNSIGNED,},
-      {"double", TYPESPEC, RID_DOUBLE,},
+#line 78 "../../../gcc/cp/gxx.gperf"
       {"or_eq", ASSIGN, NORID,},
-      {"__null", CONSTANT, RID_NULL},
-      {"if", IF, NORID,},
-      {"__signature__", AGGR, RID_SIGNATURE	/* Extension */,},
-      {"__label__", LABEL, NORID},
-      {"long", TYPESPEC, RID_LONG,},
-      {"__imag", IMAGPART, NORID},
-      {"__asm", ASM_KEYWORD, NORID},
       {"", 0, 0},
-      {"__sigof__", SIGOF, NORID		/* Extension */,},
-      {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-      {"struct", AGGR, RID_RECORD,},
-      {"", 0, 0},
-      {"volatile", CV_QUALIFIER, RID_VOLATILE,},
-      {"false", CXX_FALSE, NORID,},
-      {"sizeof", SIZEOF, NORID,},
-      {"__complex__", TYPESPEC, RID_COMPLEX},
-      {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-      {"for", FOR, NORID,},
-      {"or", OROR, NORID,},
-      {"register", SCSPEC, RID_REGISTER,},
-      {"throw", THROW, NORID,},
+#line 79 "../../../gcc/cp/gxx.gperf"
+      {"private", VISSPEC, RID_PRIVATE,},
+#line 31 "../../../gcc/cp/gxx.gperf"
+      {"__typeof", TYPEOF, NORID},
       {"", 0, 0},
-      {"using", USING, NORID,},
-      {"", 0, 0}, {"", 0, 0},
+#line 6 "../../../gcc/cp/gxx.gperf"
+      {"__alignof", ALIGNOF, NORID},
+#line 12 "../../../gcc/cp/gxx.gperf"
       {"__complex", TYPESPEC, RID_COMPLEX},
+#line 103 "../../../gcc/cp/gxx.gperf"
+      {"union", AGGR, RID_UNION,},
       {"", 0, 0},
-      {"asm", ASM_KEYWORD, NORID,},
-      {"signature", AGGR, RID_SIGNATURE	/* Extension */,},
-      {"enum", ENUM, NORID,},
-      {"reinterpret_cast", REINTERPRET_CAST, NORID,},
-      {"mutable", SCSPEC, RID_MUTABLE,},
-      {"__alignof", ALIGNOF, NORID},
+#line 16 "../../../gcc/cp/gxx.gperf"
+      {"__extension__", EXTENSION, NORID},
+      {"", 0, 0},
+#line 84 "../../../gcc/cp/gxx.gperf"
       {"return", RETURN_KEYWORD, NORID,},
-      {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
+#line 37 "../../../gcc/cp/gxx.gperf"
+      {"and", ANDAND, NORID,},
+#line 8 "../../../gcc/cp/gxx.gperf"
+      {"__asm", ASM_KEYWORD, NORID},
+#line 17 "../../../gcc/cp/gxx.gperf"
+      {"__imag", IMAGPART, NORID},
+#line 106 "../../../gcc/cp/gxx.gperf"
+      {"virtual", SCSPEC, RID_VIRTUAL,},
+#line 80 "../../../gcc/cp/gxx.gperf"
+      {"protected", VISSPEC, RID_PROTECTED,},
+#line 96 "../../../gcc/cp/gxx.gperf"
+      {"throw", THROW, NORID,},
+#line 52 "../../../gcc/cp/gxx.gperf"
+      {"default", DEFAULT, NORID,},
+#line 105 "../../../gcc/cp/gxx.gperf"
+      {"using", USING, NORID,},
+#line 104 "../../../gcc/cp/gxx.gperf"
+      {"unsigned", TYPESPEC, RID_UNSIGNED,},
+#line 43 "../../../gcc/cp/gxx.gperf"
+      {"break", BREAK, NORID,},
       {"", 0, 0},
-      {"float", TYPESPEC, RID_FLOAT,},
-      {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
+#line 86 "../../../gcc/cp/gxx.gperf"
+      {"signature", AGGR, RID_SIGNATURE	/* Extension */,},
+#line 42 "../../../gcc/cp/gxx.gperf"
       {"bool", TYPESPEC, RID_BOOL,},
       {"", 0, 0},
-      {"typedef", SCSPEC, RID_TYPEDEF,},
-      {"__typeof", TYPEOF, NORID},
-      {"bitand", '&', NORID,},
-      {"break", BREAK, NORID,},
+#line 75 "../../../gcc/cp/gxx.gperf"
+      {"not_eq", EQCOMPARE, NORID,},
+      {"", 0, 0}, {"", 0, 0},
+#line 55 "../../../gcc/cp/gxx.gperf"
+      {"double", TYPESPEC, RID_DOUBLE,},
+#line 87 "../../../gcc/cp/gxx.gperf"
+      {"signed", TYPESPEC, RID_SIGNED,},
+#line 109 "../../../gcc/cp/gxx.gperf"
+      {"while", WHILE, NORID,},
+#line 36 "../../../gcc/cp/gxx.gperf"
+      {"asm", ASM_KEYWORD, NORID,},
+#line 108 "../../../gcc/cp/gxx.gperf"
+      {"volatile", CV_QUALIFIER, RID_VOLATILE,},
+#line 38 "../../../gcc/cp/gxx.gperf"
+      {"and_eq", ASSIGN, NORID,},
+      {"", 0, 0},
+#line 71 "../../../gcc/cp/gxx.gperf"
+      {"mutable", SCSPEC, RID_MUTABLE,},
+#line 56 "../../../gcc/cp/gxx.gperf"
+      {"dynamic_cast", DYNAMIC_CAST, NORID,},
+      {"", 0, 0},
+#line 73 "../../../gcc/cp/gxx.gperf"
+      {"new", NEW, NORID,},
+#line 111 "../../../gcc/cp/gxx.gperf"
+      {"xor_eq", ASSIGN, NORID,},
+      {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
+      {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
+      {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
+      {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
+      {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
       {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-      {"union", AGGR, RID_UNION,},
-      {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-      {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
+#line 58 "../../../gcc/cp/gxx.gperf"
+      {"enum", ENUM, NORID,},
       {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-      {"goto", GOTO, NORID,},
-      {"sigof", SIGOF, NORID		/* Extension */,},
-      {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-      {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-      {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-      {"bitor", '|', NORID,},
-      {"auto", SCSPEC, RID_AUTO,},
-      {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-      {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-      {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
-      {"", 0, 0}, {"", 0, 0},
-      {"operator", OPERATOR, NORID,}
+#line 107 "../../../gcc/cp/gxx.gperf"
+      {"void", TYPESPEC, RID_VOID,},
+      {"", 0, 0}, {"", 0, 0}, {"", 0, 0},
+#line 40 "../../../gcc/cp/gxx.gperf"
+      {"bitand", '&', NORID,}
     };
 
   if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
     {
-      register int key = hash (str, len);
+      register unsigned int key = hash (str, len);
 
-      if (key <= MAX_HASH_VALUE && key >= 0)
+      if (key <= MAX_HASH_VALUE)
         {
           register const char *s = wordlist[key].name;
 
diff --git a/gcc/cp/lex.c b/gcc/cp/lex.c
index d9f2262f69d..c02fec67924 100644
--- a/gcc/cp/lex.c
+++ b/gcc/cp/lex.c
@@ -53,6 +53,10 @@ Boston, MA 02111-1307, USA.  */
 extern struct obstack permanent_obstack;
 extern struct obstack *current_obstack, *saveable_obstack;
 
+#ifndef YYEMPTY
+#define YYEMPTY         (-2)
+#endif
+
 extern void yyprint PROTO((FILE *, int, YYSTYPE));
 
 static tree get_time_identifier PROTO((const char *));
@@ -151,7 +155,7 @@ YYLTYPE yylloc;			/*  location data for the lookahead	*/
 
 
 /* the declaration found for the last IDENTIFIER token read in.
-   yylex must look this up to detect typedefs, which get token type TYPENAME,
+   yylex must look this up to detect typedefs, which get token type TYPENAME_ID,
    so it is left around in case the identifier is not a typedef but is
    used in a context which makes it a reference to a variable.  */
 tree lastiddecl;
@@ -906,7 +910,7 @@ yyprint (file, yychar, yylval)
   switch (yychar)
     {
     case IDENTIFIER:
-    case TYPENAME:
+    case TYPENAME_ID:
     case TYPESPEC:
     case PTYPENAME:
     case IDENTIFIER_DEFN:
@@ -2049,7 +2053,7 @@ check_for_missing_semicolon (type)
   if ((yychar > 255
        && yychar != SCSPEC
        && yychar != IDENTIFIER
-       && yychar != TYPENAME
+       && yychar != TYPENAME_ID
        && yychar != CV_QUALIFIER
        && yychar != SELFNAME)
       || end_of_file)
@@ -2791,7 +2795,7 @@ identifier_type (decl)
   if (t && t == decl)
     return SELFNAME;
 
-  return TYPENAME;
+  return TYPENAME_ID;
 }
 
 void
@@ -5001,7 +5005,7 @@ handle_generic_pragma (token)
       switch (token)
 	{
 	case IDENTIFIER:
-	case TYPENAME:
+	case TYPENAME_ID:
         case STRING:
         case CONSTANT:
 	  handle_pragma_token (token_buffer, yylval.ttype);
diff --git a/gcc/cp/parse.c b/gcc/cp/parse.c
index 1cf09d729d5..70f0b9c3569 100644
--- a/gcc/cp/parse.c
+++ b/gcc/cp/parse.c
@@ -1,96 +1,68 @@
+/* A Bison parser, made by GNU Bison 2.7.  */
 
-/*  A Bison parser, made from parse.y
- by  GNU Bison version 1.25
-  */
+/* Bison implementation for Yacc-like parsers in C
+   
+      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.
+   
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+   
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+   
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+/* As a special exception, you may create a larger work that contains
+   part or all of the Bison parser skeleton and distribute that work
+   under terms of your choice, so long as that work isn't itself a
+   parser generator using the skeleton or a modified version thereof
+   as a parser skeleton.  Alternatively, if you modify or redistribute
+   the parser skeleton itself, you may (at your option) remove this
+   special exception, which will cause the skeleton and the resulting
+   Bison output files to be licensed under the GNU General Public
+   License without this special exception.
+   
+   This special exception was added by the Free Software Foundation in
+   version 2.2 of Bison.  */
+
+/* C LALR(1) parser skeleton written by Richard Stallman, by
+   simplifying the original so-called "semantic" parser.  */
+
+/* All symbols defined below should begin with yy or YY, to avoid
+   infringing on user name space.  This should be done even for local
+   variables, as they might otherwise be expanded by user macros.
+   There are some unavoidable exceptions within include files to
+   define necessary library symbols; they are noted "INFRINGES ON
+   USER NAME SPACE" below.  */
+
+/* Identify Bison output.  */
+#define YYBISON 1
+
+/* Bison version.  */
+#define YYBISON_VERSION "2.7"
+
+/* Skeleton name.  */
+#define YYSKELETON_NAME "yacc.c"
+
+/* Pure parsers.  */
+#define YYPURE 0
+
+/* Push parsers.  */
+#define YYPUSH 0
+
+/* Pull parsers.  */
+#define YYPULL 1
 
-#define YYBISON 1  /* Identify Bison output.  */
-
-#define	IDENTIFIER	258
-#define	TYPENAME	259
-#define	SELFNAME	260
-#define	PFUNCNAME	261
-#define	SCSPEC	262
-#define	TYPESPEC	263
-#define	CV_QUALIFIER	264
-#define	CONSTANT	265
-#define	STRING	266
-#define	ELLIPSIS	267
-#define	SIZEOF	268
-#define	ENUM	269
-#define	IF	270
-#define	ELSE	271
-#define	WHILE	272
-#define	DO	273
-#define	FOR	274
-#define	SWITCH	275
-#define	CASE	276
-#define	DEFAULT	277
-#define	BREAK	278
-#define	CONTINUE	279
-#define	RETURN_KEYWORD	280
-#define	GOTO	281
-#define	ASM_KEYWORD	282
-#define	TYPEOF	283
-#define	ALIGNOF	284
-#define	SIGOF	285
-#define	ATTRIBUTE	286
-#define	EXTENSION	287
-#define	LABEL	288
-#define	REALPART	289
-#define	IMAGPART	290
-#define	AGGR	291
-#define	VISSPEC	292
-#define	DELETE	293
-#define	NEW	294
-#define	THIS	295
-#define	OPERATOR	296
-#define	CXX_TRUE	297
-#define	CXX_FALSE	298
-#define	NAMESPACE	299
-#define	TYPENAME_KEYWORD	300
-#define	USING	301
-#define	LEFT_RIGHT	302
-#define	TEMPLATE	303
-#define	TYPEID	304
-#define	DYNAMIC_CAST	305
-#define	STATIC_CAST	306
-#define	REINTERPRET_CAST	307
-#define	CONST_CAST	308
-#define	SCOPE	309
-#define	EMPTY	310
-#define	PTYPENAME	311
-#define	NSNAME	312
-#define	THROW	313
-#define	ASSIGN	314
-#define	OROR	315
-#define	ANDAND	316
-#define	MIN_MAX	317
-#define	EQCOMPARE	318
-#define	ARITHCOMPARE	319
-#define	LSHIFT	320
-#define	RSHIFT	321
-#define	POINTSAT_STAR	322
-#define	DOT_STAR	323
-#define	UNARY	324
-#define	PLUSPLUS	325
-#define	MINUSMINUS	326
-#define	HYPERUNARY	327
-#define	PAREN_STAR_PAREN	328
-#define	POINTSAT	329
-#define	TRY	330
-#define	CATCH	331
-#define	PRE_PARSED_FUNCTION_DECL	332
-#define	EXTERN_LANG_STRING	333
-#define	ALL	334
-#define	PRE_PARSED_CLASS_DECL	335
-#define	DEFARG	336
-#define	DEFARG_MARKER	337
-#define	TYPENAME_DEFN	338
-#define	IDENTIFIER_DEFN	339
-#define	PTYPENAME_DEFN	340
-#define	END_OF_LINE	341
-#define	END_OF_SAVED_INPUT	342
 
+
+
+/* Copy the first part of user declarations.  */
+/* Line 371 of yacc.c  */
 #line 29 "parse.y"
 
 /* Cause the `yydebug' variable to be defined.  */
@@ -153,8 +125,167 @@ empty_parms ()
 }
 
 
+/* Line 371 of yacc.c  */
+#line 130 "parse.c"
+
+# ifndef YY_NULL
+#  if defined __cplusplus && 201103L <= __cplusplus
+#   define YY_NULL nullptr
+#  else
+#   define YY_NULL 0
+#  endif
+# endif
+
+/* Enabling verbose error messages.  */
+#ifdef YYERROR_VERBOSE
+# undef YYERROR_VERBOSE
+# define YYERROR_VERBOSE 1
+#else
+# define YYERROR_VERBOSE 0
+#endif
+
+/* In a future release of Bison, this section will be replaced
+   by #include "parse.h".  */
+#ifndef YY_YY_PARSE_H_INCLUDED
+# define YY_YY_PARSE_H_INCLUDED
+/* Enabling traces.  */
+#ifndef YYDEBUG
+# define YYDEBUG 0
+#endif
+#if YYDEBUG
+extern int yydebug;
+#endif
+
+/* Tokens.  */
+#ifndef YYTOKENTYPE
+# define YYTOKENTYPE
+   /* Put the tokens into the symbol table, so that GDB and other debuggers
+      know about them.  */
+   enum yytokentype {
+     IDENTIFIER = 258,
+     TYPENAME_ID = 259,
+     SELFNAME = 260,
+     PFUNCNAME = 261,
+     SCSPEC = 262,
+     TYPESPEC = 263,
+     CV_QUALIFIER = 264,
+     CONSTANT = 265,
+     STRING = 266,
+     ELLIPSIS = 267,
+     SIZEOF = 268,
+     ENUM = 269,
+     IF = 270,
+     ELSE = 271,
+     WHILE = 272,
+     DO = 273,
+     FOR = 274,
+     SWITCH = 275,
+     CASE = 276,
+     DEFAULT = 277,
+     BREAK = 278,
+     CONTINUE = 279,
+     RETURN_KEYWORD = 280,
+     GOTO = 281,
+     ASM_KEYWORD = 282,
+     TYPEOF = 283,
+     ALIGNOF = 284,
+     SIGOF = 285,
+     ATTRIBUTE = 286,
+     EXTENSION = 287,
+     LABEL = 288,
+     REALPART = 289,
+     IMAGPART = 290,
+     AGGR = 291,
+     VISSPEC = 292,
+     DELETE = 293,
+     NEW = 294,
+     THIS = 295,
+     OPERATOR = 296,
+     CXX_TRUE = 297,
+     CXX_FALSE = 298,
+     NAMESPACE = 299,
+     TYPENAME_KEYWORD = 300,
+     USING = 301,
+     LEFT_RIGHT = 302,
+     TEMPLATE = 303,
+     TYPEID = 304,
+     DYNAMIC_CAST = 305,
+     STATIC_CAST = 306,
+     REINTERPRET_CAST = 307,
+     CONST_CAST = 308,
+     SCOPE = 309,
+     EMPTY = 310,
+     NSNAME = 311,
+     PTYPENAME = 312,
+     THROW = 313,
+     ASSIGN = 314,
+     OROR = 315,
+     ANDAND = 316,
+     MIN_MAX = 317,
+     EQCOMPARE = 318,
+     ARITHCOMPARE = 319,
+     RSHIFT = 320,
+     LSHIFT = 321,
+     DOT_STAR = 322,
+     POINTSAT_STAR = 323,
+     MINUSMINUS = 324,
+     PLUSPLUS = 325,
+     UNARY = 326,
+     HYPERUNARY = 327,
+     PAREN_STAR_PAREN = 328,
+     POINTSAT = 329,
+     CATCH = 330,
+     TRY = 331,
+     PRE_PARSED_FUNCTION_DECL = 332,
+     EXTERN_LANG_STRING = 333,
+     ALL = 334,
+     PRE_PARSED_CLASS_DECL = 335,
+     DEFARG = 336,
+     DEFARG_MARKER = 337,
+     TYPENAME_DEFN = 338,
+     IDENTIFIER_DEFN = 339,
+     PTYPENAME_DEFN = 340,
+     END_OF_LINE = 341,
+     END_OF_SAVED_INPUT = 342
+   };
+#endif
+
+
+#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
+typedef union YYSTYPE
+{
+/* Line 387 of yacc.c  */
 #line 93 "parse.y"
-typedef union {long itype; tree ttype; char *strtype; enum tree_code code; flagged_type_tree ftype; } YYSTYPE;
+long itype; tree ttype; char *strtype; enum tree_code code; flagged_type_tree ftype; 
+
+/* Line 387 of yacc.c  */
+#line 263 "parse.c"
+} YYSTYPE;
+# define YYSTYPE_IS_TRIVIAL 1
+# define yystype YYSTYPE /* obsolescent; will be withdrawn */
+# define YYSTYPE_IS_DECLARED 1
+#endif
+
+extern YYSTYPE yylval;
+
+#ifdef YYPARSE_PARAM
+#if defined __STDC__ || defined __cplusplus
+int yyparse (void *YYPARSE_PARAM);
+#else
+int yyparse ();
+#endif
+#else /* ! YYPARSE_PARAM */
+#if defined __STDC__ || defined __cplusplus
+int yyparse (void);
+#else
+int yyparse ();
+#endif
+#endif /* ! YYPARSE_PARAM */
+
+#endif /* !YY_YY_PARSE_H_INCLUDED  */
+
+/* Copy the second part of user declarations.  */
+/* Line 390 of yacc.c  */
 #line 287 "parse.y"
 
 /* List of types and structure classes of the current declaration.  */
@@ -206,4728 +337,5739 @@ parse_decl(declarator, specs_attrs, attributes, initialized, decl)
 		      attributes, prefix_attributes);
   return sm;
 }
-#include <stdio.h>
 
-#ifndef __cplusplus
-#ifndef __STDC__
-#define const
+/* Line 390 of yacc.c  */
+#line 343 "parse.c"
+
+#ifdef short
+# undef short
+#endif
+
+#ifdef YYTYPE_UINT8
+typedef YYTYPE_UINT8 yytype_uint8;
+#else
+typedef unsigned char yytype_uint8;
 #endif
+
+#ifdef YYTYPE_INT8
+typedef YYTYPE_INT8 yytype_int8;
+#elif (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+typedef signed char yytype_int8;
+#else
+typedef short int yytype_int8;
 #endif
 
+#ifdef YYTYPE_UINT16
+typedef YYTYPE_UINT16 yytype_uint16;
+#else
+typedef unsigned short int yytype_uint16;
+#endif
 
+#ifdef YYTYPE_INT16
+typedef YYTYPE_INT16 yytype_int16;
+#else
+typedef short int yytype_int16;
+#endif
 
-#define	YYFINAL		1668
-#define	YYFLAG		-32768
-#define	YYNTBASE	112
-
-#define YYTRANSLATE(x) ((unsigned)(x) <= 342 ? yytranslate[x] : 400)
-
-static const char yytranslate[] = {     0,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,   110,     2,     2,     2,    82,    70,     2,    93,
-   108,    80,    78,    59,    79,    92,    81,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,    62,    60,    74,
-    64,    75,    65,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-    94,     2,   111,    69,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,    58,    68,   109,    88,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
-     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
-    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
-    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
-    56,    57,    61,    63,    66,    67,    71,    72,    73,    76,
-    77,    83,    84,    85,    86,    87,    89,    90,    91,    95,
-    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
-   106,   107
-};
+#ifndef YYSIZE_T
+# ifdef __SIZE_TYPE__
+#  define YYSIZE_T __SIZE_TYPE__
+# elif defined size_t
+#  define YYSIZE_T size_t
+# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYSIZE_T size_t
+# else
+#  define YYSIZE_T unsigned int
+# endif
+#endif
 
-#if YYDEBUG != 0
-static const short yyprhs[] = {     0,
-     0,     1,     3,     4,     7,    10,    12,    13,    14,    15,
-    17,    19,    20,    23,    26,    28,    30,    36,    41,    47,
-    52,    53,    60,    61,    67,    69,    72,    74,    77,    78,
-    85,    88,    92,    96,   100,   104,   109,   110,   116,   119,
-   123,   125,   127,   130,   133,   135,   138,   139,   145,   149,
-   151,   155,   157,   158,   161,   164,   168,   170,   174,   176,
-   180,   182,   186,   189,   192,   195,   197,   199,   205,   210,
-   213,   216,   220,   224,   227,   230,   234,   238,   241,   244,
-   247,   250,   253,   255,   257,   259,   260,   262,   265,   266,
-   268,   273,   277,   281,   282,   291,   297,   298,   308,   315,
-   316,   325,   331,   332,   342,   349,   352,   355,   357,   360,
-   362,   369,   374,   381,   386,   389,   391,   394,   397,   399,
-   402,   404,   407,   410,   415,   418,   422,   423,   424,   426,
-   430,   433,   437,   439,   444,   447,   452,   455,   460,   463,
-   465,   467,   469,   471,   473,   475,   477,   479,   481,   483,
-   485,   486,   493,   494,   501,   502,   508,   509,   515,   516,
-   524,   525,   533,   534,   541,   542,   549,   550,   551,   557,
-   563,   565,   567,   573,   579,   580,   582,   584,   585,   587,
-   589,   593,   595,   597,   599,   601,   603,   605,   607,   609,
-   611,   613,   615,   619,   621,   625,   626,   628,   630,   631,
-   639,   641,   643,   647,   652,   656,   657,   661,   663,   667,
-   671,   675,   679,   681,   683,   685,   688,   691,   694,   697,
-   700,   703,   706,   711,   714,   719,   722,   726,   730,   735,
-   741,   748,   755,   763,   766,   771,   777,   780,   783,   785,
-   786,   791,   796,   800,   802,   806,   809,   813,   818,   820,
-   823,   829,   831,   835,   839,   843,   847,   851,   855,   859,
-   863,   867,   871,   875,   879,   883,   887,   891,   895,   899,
-   903,   907,   913,   917,   921,   923,   926,   930,   934,   936,
-   938,   940,   942,   944,   945,   951,   957,   963,   969,   975,
-   977,   979,   981,   983,   986,   988,   991,   994,   998,  1003,
-  1008,  1010,  1012,  1014,  1018,  1020,  1022,  1024,  1026,  1030,
-  1034,  1038,  1039,  1044,  1049,  1052,  1057,  1060,  1065,  1068,
-  1071,  1073,  1078,  1080,  1088,  1096,  1104,  1112,  1117,  1122,
-  1125,  1128,  1131,  1133,  1138,  1141,  1144,  1150,  1154,  1157,
-  1160,  1166,  1170,  1176,  1180,  1185,  1192,  1195,  1197,  1200,
-  1202,  1205,  1207,  1209,  1211,  1214,  1215,  1218,  1221,  1225,
-  1229,  1233,  1236,  1239,  1242,  1244,  1246,  1248,  1251,  1254,
-  1257,  1260,  1262,  1264,  1266,  1268,  1271,  1274,  1278,  1282,
-  1286,  1291,  1293,  1296,  1299,  1302,  1304,  1306,  1308,  1311,
-  1314,  1317,  1319,  1321,  1324,  1327,  1331,  1333,  1336,  1338,
-  1340,  1342,  1347,  1352,  1357,  1362,  1364,  1366,  1368,  1370,
-  1374,  1376,  1380,  1382,  1386,  1387,  1392,  1393,  1400,  1404,
-  1405,  1410,  1412,  1416,  1420,  1421,  1426,  1430,  1431,  1433,
-  1435,  1438,  1445,  1447,  1451,  1452,  1454,  1459,  1466,  1471,
-  1473,  1475,  1477,  1479,  1481,  1485,  1486,  1489,  1491,  1494,
-  1498,  1503,  1505,  1507,  1511,  1516,  1520,  1526,  1528,  1533,
-  1537,  1541,  1542,  1546,  1550,  1554,  1555,  1558,  1561,  1562,
-  1570,  1575,  1576,  1583,  1587,  1590,  1593,  1596,  1597,  1598,
-  1599,  1610,  1612,  1613,  1615,  1616,  1618,  1620,  1623,  1626,
-  1629,  1632,  1635,  1638,  1641,  1644,  1647,  1651,  1656,  1660,
-  1663,  1667,  1669,  1670,  1674,  1677,  1680,  1682,  1684,  1685,
-  1688,  1692,  1694,  1699,  1701,  1705,  1707,  1709,  1714,  1719,
-  1722,  1725,  1729,  1733,  1734,  1736,  1740,  1743,  1746,  1748,
-  1751,  1754,  1757,  1760,  1763,  1766,  1769,  1771,  1774,  1777,
-  1781,  1784,  1787,  1792,  1797,  1800,  1802,  1808,  1813,  1815,
-  1816,  1818,  1822,  1823,  1825,  1829,  1831,  1833,  1835,  1837,
-  1842,  1847,  1852,  1857,  1862,  1866,  1871,  1876,  1881,  1886,
-  1890,  1892,  1896,  1898,  1902,  1905,  1907,  1915,  1916,  1919,
-  1921,  1924,  1925,  1928,  1933,  1938,  1941,  1946,  1948,  1951,
-  1955,  1959,  1962,  1965,  1969,  1971,  1976,  1981,  1985,  1989,
-  1992,  1994,  1996,  1999,  2001,  2003,  2006,  2009,  2011,  2014,
-  2018,  2022,  2025,  2028,  2032,  2034,  2038,  2042,  2045,  2048,
-  2052,  2054,  2059,  2063,  2068,  2072,  2074,  2077,  2080,  2083,
-  2086,  2089,  2091,  2094,  2099,  2104,  2107,  2109,  2111,  2113,
-  2115,  2118,  2123,  2126,  2129,  2132,  2135,  2137,  2140,  2143,
-  2146,  2149,  2153,  2155,  2158,  2162,  2167,  2170,  2173,  2176,
-  2179,  2182,  2185,  2190,  2193,  2195,  2198,  2201,  2205,  2207,
-  2211,  2214,  2218,  2221,  2224,  2228,  2230,  2234,  2239,  2241,
-  2244,  2248,  2251,  2254,  2256,  2260,  2263,  2266,  2268,  2271,
-  2275,  2277,  2281,  2283,  2290,  2295,  2300,  2304,  2310,  2314,
-  2318,  2322,  2325,  2327,  2329,  2332,  2335,  2338,  2339,  2341,
-  2343,  2346,  2350,  2352,  2355,  2356,  2360,  2361,  2362,  2368,
-  2370,  2371,  2374,  2376,  2378,  2380,  2383,  2384,  2389,  2391,
-  2392,  2393,  2399,  2400,  2401,  2409,  2410,  2411,  2412,  2413,
-  2426,  2427,  2428,  2436,  2437,  2443,  2444,  2452,  2453,  2458,
-  2461,  2464,  2467,  2471,  2478,  2487,  2498,  2511,  2516,  2520,
-  2523,  2526,  2528,  2530,  2532,  2534,  2536,  2537,  2538,  2545,
-  2546,  2547,  2553,  2555,  2558,  2559,  2560,  2566,  2568,  2570,
-  2574,  2578,  2581,  2584,  2587,  2590,  2593,  2595,  2598,  2599,
-  2601,  2602,  2604,  2606,  2607,  2609,  2611,  2615,  2620,  2622,
-  2626,  2627,  2629,  2631,  2633,  2636,  2639,  2642,  2644,  2647,
-  2650,  2651,  2655,  2657,  2659,  2661,  2664,  2667,  2670,  2675,
-  2678,  2681,  2684,  2687,  2690,  2693,  2695,  2698,  2700,  2703,
-  2705,  2707,  2708,  2709,  2711,  2712,  2717,  2720,  2722,  2724,
-  2728,  2729,  2733,  2737,  2741,  2743,  2746,  2749,  2752,  2755,
-  2758,  2761,  2764,  2767,  2770,  2773,  2776,  2779,  2782,  2785,
-  2788,  2791,  2794,  2797,  2800,  2803,  2806,  2809,  2812,  2816,
-  2819,  2822,  2825,  2828,  2832,  2835,  2838,  2843,  2848,  2852
-};
+#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)
+
+#ifndef YY_
+# if defined YYENABLE_NLS && YYENABLE_NLS
+#  if ENABLE_NLS
+#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
+#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
+#  endif
+# endif
+# ifndef YY_
+#  define YY_(Msgid) Msgid
+# endif
+#endif
 
-static const short yyrhs[] = {    -1,
-   113,     0,     0,   114,   120,     0,   113,   120,     0,   113,
-     0,     0,     0,     0,    32,     0,    27,     0,     0,   121,
-   122,     0,   148,   147,     0,   144,     0,   141,     0,   119,
-    93,   219,   108,    60,     0,   133,    58,   115,   109,     0,
-   133,   116,   148,   117,   147,     0,   133,   116,   144,   117,
-     0,     0,    44,   163,    58,   123,   115,   109,     0,     0,
-    44,    58,   124,   115,   109,     0,   125,     0,   127,    60,
-     0,   129,     0,   118,   122,     0,     0,    44,   163,    64,
-   126,   132,    60,     0,    46,   313,     0,    46,   327,   313,
-     0,    46,   327,   209,     0,    46,   131,   163,     0,    46,
-   327,   163,     0,    46,   327,   131,   163,     0,     0,    46,
-    44,   130,   132,    60,     0,    57,    54,     0,   131,    57,
-    54,     0,   209,     0,   313,     0,   327,   313,     0,   327,
-   209,     0,    98,     0,   133,    98,     0,     0,    48,    74,
-   135,   136,    75,     0,    48,    74,    75,     0,   140,     0,
-   136,    59,   140,     0,   163,     0,     0,   269,   137,     0,
-    45,   137,     0,   134,   269,   137,     0,   138,     0,   138,
-    64,   225,     0,   391,     0,   391,    64,   204,     0,   139,
-     0,   139,    64,   184,     0,   134,   142,     0,   134,     1,
-     0,   148,   147,     0,   143,     0,   141,     0,   133,   116,
-   148,   117,   147,     0,   133,   116,   143,   117,     0,   118,
-   142,     0,   236,    60,     0,   229,   235,    60,     0,   226,
-   234,    60,     0,   261,    60,     0,   236,    60,     0,   229,
-   235,    60,     0,   226,   234,    60,     0,   229,    60,     0,
-   166,    60,     0,   226,    60,     0,     1,    60,     0,     1,
-   109,     0,    60,     0,   220,     0,   159,     0,     0,   158,
-     0,   158,    60,     0,     0,   107,     0,   154,   146,   145,
-   338,     0,   154,   146,   362,     0,   154,   146,     1,     0,
-     0,   318,     5,    93,   150,   382,   108,   298,   394,     0,
-   318,     5,    47,   298,   394,     0,     0,   327,   318,     5,
-    93,   151,   382,   108,   298,   394,     0,   327,   318,     5,
-    47,   298,   394,     0,     0,   318,   179,    93,   152,   382,
-   108,   298,   394,     0,   318,   179,    47,   298,   394,     0,
-     0,   327,   318,   179,    93,   153,   382,   108,   298,   394,
-     0,   327,   318,   179,    47,   298,   394,     0,   226,   223,
-     0,   229,   310,     0,   310,     0,   229,   149,     0,   149,
-     0,     5,    93,   382,   108,   298,   394,     0,     5,    47,
-   298,   394,     0,   179,    93,   382,   108,   298,   394,     0,
-   179,    47,   298,   394,     0,   229,   155,     0,   155,     0,
-   226,   223,     0,   229,   310,     0,   310,     0,   229,   149,
-     0,   149,     0,    25,     3,     0,   157,   253,     0,   157,
-    93,   196,   108,     0,   157,    47,     0,    62,   160,   161,
-     0,     0,     0,   162,     0,   161,    59,   162,     0,   161,
-     1,     0,    93,   196,   108,     0,    47,     0,   164,    93,
-   196,   108,     0,   164,    47,     0,   306,    93,   196,   108,
-     0,   306,    47,     0,   320,    93,   196,   108,     0,   320,
-    47,     0,     3,     0,     4,     0,     5,     0,    56,     0,
-    57,     0,     3,     0,    56,     0,    57,     0,   104,     0,
-   103,     0,   105,     0,     0,    48,   175,   232,    60,   167,
-   176,     0,     0,    48,   175,   226,   223,   168,   176,     0,
-     0,    48,   175,   310,   169,   176,     0,     0,    48,   175,
-   149,   170,   176,     0,     0,     7,    48,   175,   232,    60,
-   171,   176,     0,     0,     7,    48,   175,   226,   223,   172,
-   176,     0,     0,     7,    48,   175,   310,   173,   176,     0,
-     0,     7,    48,   175,   149,   174,   176,     0,     0,     0,
-    56,    74,   182,   181,   180,     0,     4,    74,   182,   181,
-   180,     0,   179,     0,   177,     0,   163,    74,   182,    75,
-   180,     0,     5,    74,   182,   181,   180,     0,     0,    75,
-     0,    77,     0,     0,   183,     0,   184,     0,   183,    59,
-   184,     0,   225,     0,    56,     0,   204,     0,    79,     0,
-    78,     0,    86,     0,    87,     0,   110,     0,   195,     0,
-   204,     0,    47,     0,    93,   186,   108,     0,    47,     0,
-    93,   190,   108,     0,     0,   190,     0,     1,     0,     0,
-   372,   223,   237,   246,    64,   191,   254,     0,   186,     0,
-   109,     0,   335,   333,   109,     0,   335,   333,     1,   109,
-     0,   335,     1,   109,     0,     0,    58,   194,   192,     0,
-   347,     0,   204,    59,   204,     0,   204,    59,     1,     0,
-   195,    59,   204,     0,   195,    59,     1,     0,   204,     0,
-   195,     0,   214,     0,   118,   203,     0,    80,   203,     0,
-    70,   203,     0,    88,   203,     0,   185,   203,     0,    67,
-   163,     0,    13,   197,     0,    13,    93,   225,   108,     0,
-    29,   197,     0,    29,    93,   225,   108,     0,   216,   297,
-     0,   216,   297,   201,     0,   216,   200,   297,     0,   216,
-   200,   297,   201,     0,   216,    93,   199,   225,   198,     0,
-   216,    93,   199,   225,   198,   201,     0,   216,   200,    93,
-   199,   225,   198,     0,   216,   200,    93,   199,   225,   198,
-   201,     0,   217,   203,     0,   217,    94,   111,   203,     0,
-   217,    94,   186,   111,   203,     0,    34,   203,     0,    35,
-   203,     0,   108,     0,     0,    93,   199,   196,   108,     0,
-    58,   199,   196,   109,     0,    93,   196,   108,     0,    47,
-     0,    93,   232,   108,     0,    64,   254,     0,    93,   225,
-   108,     0,   202,    93,   225,   108,     0,   197,     0,   202,
-   197,     0,   202,    58,   255,   267,   109,     0,   203,     0,
-   204,    83,   204,     0,   204,    84,   204,     0,   204,    78,
-   204,     0,   204,    79,   204,     0,   204,    80,   204,     0,
-   204,    81,   204,     0,   204,    82,   204,     0,   204,    76,
-   204,     0,   204,    77,   204,     0,   204,    73,   204,     0,
-   204,    74,   204,     0,   204,    75,   204,     0,   204,    72,
-   204,     0,   204,    71,   204,     0,   204,    70,   204,     0,
-   204,    68,   204,     0,   204,    69,   204,     0,   204,    67,
-   204,     0,   204,    66,   204,     0,   204,    65,   377,    62,
-   204,     0,   204,    64,   204,     0,   204,    63,   204,     0,
-    61,     0,    61,   204,     0,    88,   392,   163,     0,    88,
-   392,   177,     0,   207,     0,   399,     0,     3,     0,    56,
-     0,    57,     0,     0,     6,    74,   206,   182,   181,     0,
-   399,    74,   206,   182,   181,     0,    48,   163,    74,   182,
-   181,     0,    48,     6,    74,   182,   181,     0,    48,   399,
-    74,   182,   181,     0,   205,     0,     4,     0,     5,     0,
-   211,     0,   247,   211,     0,   205,     0,    80,   210,     0,
-    70,   210,     0,    93,   210,   108,     0,     3,    74,   182,
-   181,     0,    57,    74,   183,   181,     0,   312,     0,   205,
-     0,   212,     0,    93,   210,   108,     0,   205,     0,    10,
-     0,   218,     0,   219,     0,    93,   186,   108,     0,    93,
-   210,   108,     0,    93,     1,   108,     0,     0,    93,   215,
-   339,   108,     0,   205,    93,   196,   108,     0,   205,    47,
-     0,   214,    93,   196,   108,     0,   214,    47,     0,   214,
-    94,   186,   111,     0,   214,    86,     0,   214,    87,     0,
-    40,     0,     9,    93,   196,   108,     0,   316,     0,    50,
-    74,   225,    75,    93,   186,   108,     0,    51,    74,   225,
-    75,    93,   186,   108,     0,    52,    74,   225,    75,    93,
-   186,   108,     0,    53,    74,   225,    75,    93,   186,   108,
-     0,    49,    93,   186,   108,     0,    49,    93,   225,   108,
-     0,   327,     3,     0,   327,   207,     0,   327,   399,     0,
-   315,     0,   315,    93,   196,   108,     0,   315,    47,     0,
-   221,   208,     0,   221,   208,    93,   196,   108,     0,   221,
-   208,    47,     0,   221,   209,     0,   221,   315,     0,   221,
-   209,    93,   196,   108,     0,   221,   209,    47,     0,   221,
-   315,    93,   196,   108,     0,   221,   315,    47,     0,   221,
-    88,     8,    47,     0,   221,     8,    54,    88,     8,    47,
-     0,   221,     1,     0,    39,     0,   327,    39,     0,    38,
-     0,   327,   217,     0,    42,     0,    43,     0,    11,     0,
-   219,    11,     0,     0,   214,    92,     0,   214,    91,     0,
-   232,   234,    60,     0,   226,   234,    60,     0,   229,   235,
-    60,     0,   226,    60,     0,   229,    60,     0,   118,   222,
-     0,   304,     0,   310,     0,    47,     0,   224,    47,     0,
-   230,   331,     0,   299,   331,     0,   232,   331,     0,   230,
-     0,   299,     0,   230,     0,   227,     0,   229,   232,     0,
-   232,   228,     0,   232,   231,   228,     0,   229,   232,   228,
-     0,   229,   232,   231,     0,   229,   232,   231,   228,     0,
-     7,     0,   228,   233,     0,   228,     7,     0,   228,   247,
-     0,   247,     0,   299,     0,     7,     0,   229,     9,     0,
-   229,     7,     0,   229,   247,     0,   247,     0,   232,     0,
-   299,   232,     0,   232,   231,     0,   299,   232,   231,     0,
-   233,     0,   231,   233,     0,   261,     0,     8,     0,   307,
-     0,    28,    93,   186,   108,     0,    28,    93,   225,   108,
-     0,    30,    93,   186,   108,     0,    30,    93,   225,   108,
-     0,     8,     0,     9,     0,   261,     0,   242,     0,   234,
-    59,   238,     0,   243,     0,   235,    59,   238,     0,   244,
-     0,   236,    59,   238,     0,     0,   119,    93,   219,   108,
-     0,     0,   223,   237,   246,    64,   239,   254,     0,   223,
-   237,   246,     0,     0,   246,    64,   241,   254,     0,   246,
-     0,   223,   237,   240,     0,   310,   237,   240,     0,     0,
-   310,   237,   245,   240,     0,   149,   237,   246,     0,     0,
-   247,     0,   248,     0,   247,   248,     0,    31,    93,    93,
-   249,   108,   108,     0,   250,     0,   249,    59,   250,     0,
-     0,   251,     0,   251,    93,     3,   108,     0,   251,    93,
-     3,    59,   196,   108,     0,   251,    93,   196,   108,     0,
-   163,     0,     7,     0,     8,     0,     9,     0,   163,     0,
-   252,    59,   163,     0,     0,    64,   254,     0,   204,     0,
-    58,   109,     0,    58,   255,   109,     0,    58,   255,    59,
-   109,     0,     1,     0,   254,     0,   255,    59,   254,     0,
-    94,   204,   111,   254,     0,   163,    62,   254,     0,   255,
-    59,   163,    62,   254,     0,    97,     0,   256,   146,   145,
-   338,     0,   256,   146,   362,     0,   256,   146,     1,     0,
-     0,   258,   257,   147,     0,   102,   204,   107,     0,   102,
-     1,   107,     0,     0,   260,   259,     0,   260,     1,     0,
-     0,    14,   163,    58,   262,   295,   268,   109,     0,    14,
-   163,    58,   109,     0,     0,    14,    58,   263,   295,   268,
-   109,     0,    14,    58,   109,     0,    14,   163,     0,    14,
-   325,     0,    45,   320,     0,     0,     0,     0,   276,    58,
-   264,   282,   109,   246,   265,   260,   266,   258,     0,   276,
-     0,     0,    59,     0,     0,    59,     0,    36,     0,   269,
-     7,     0,   269,     8,     0,   269,     9,     0,   269,    36,
-     0,   269,   247,     0,   269,   163,     0,   269,   165,     0,
-   270,    58,     0,   270,    62,     0,   269,   318,   163,     0,
-   269,   327,   318,   163,     0,   269,   327,   163,     0,   269,
-   178,     0,   269,   318,   178,     0,   270,     0,     0,   271,
-   274,   277,     0,   272,   277,     0,   269,    58,     0,   275,
-     0,   273,     0,     0,    62,   392,     0,    62,   392,   278,
-     0,   279,     0,   278,    59,   392,   279,     0,   280,     0,
-   281,   392,   280,     0,   320,     0,   306,     0,    30,    93,
-   186,   108,     0,    30,    93,   225,   108,     0,    37,   392,
-     0,     7,   392,     0,   281,    37,   392,     0,   281,     7,
-   392,     0,     0,   284,     0,   282,   283,   284,     0,   282,
-   283,     0,    37,    62,     0,   285,     0,   284,   285,     0,
-   286,    60,     0,   286,   109,     0,   156,    62,     0,   156,
-    95,     0,   156,    25,     0,   156,    58,     0,    60,     0,
-   118,   285,     0,   134,   285,     0,   134,   226,    60,     0,
-   226,   287,     0,   229,   288,     0,   310,   237,   246,   253,
-     0,   149,   237,   246,   253,     0,    62,   204,     0,     1,
-     0,   229,   155,   237,   246,   253,     0,   155,   237,   246,
-   253,     0,   127,     0,     0,   289,     0,   287,    59,   290,
-     0,     0,   292,     0,   288,    59,   294,     0,   291,     0,
-   292,     0,   293,     0,   294,     0,   304,   237,   246,   253,
-     0,     4,    62,   204,   246,     0,   310,   237,   246,   253,
-     0,   149,   237,   246,   253,     0,     3,    62,   204,   246,
-     0,    62,   204,   246,     0,   304,   237,   246,   253,     0,
-     4,    62,   204,   246,     0,   310,   237,   246,   253,     0,
-     3,    62,   204,   246,     0,    62,   204,   246,     0,   296,
-     0,   295,    59,   296,     0,   163,     0,   163,    64,   204,
-     0,   372,   328,     0,   372,     0,    93,   199,   225,   198,
-    94,   186,   111,     0,     0,   298,     9,     0,     9,     0,
-   299,     9,     0,     0,   300,   186,     0,   300,    93,   196,
-   108,     0,   300,    93,   382,   108,     0,   300,    47,     0,
-   300,    93,     1,   108,     0,   304,     0,   247,   304,     0,
-    80,   299,   303,     0,    70,   299,   303,     0,    80,   303,
-     0,    70,   303,     0,   326,   298,   303,     0,   305,     0,
-   305,   302,   298,   394,     0,   305,    94,   301,   111,     0,
-   305,    94,   111,     0,    93,   303,   108,     0,   318,   317,
-     0,   317,     0,   317,     0,   327,   317,     0,   306,     0,
-   308,     0,   327,   308,     0,   318,   317,     0,   310,     0,
-   247,   310,     0,    80,   299,   309,     0,    70,   299,   309,
-     0,    80,   309,     0,    70,   309,     0,   326,   298,   309,
-     0,   213,     0,    80,   299,   309,     0,    70,   299,   309,
-     0,    80,   311,     0,    70,   311,     0,   326,   298,   309,
-     0,   312,     0,   213,   302,   298,   394,     0,    93,   311,
-   108,     0,   213,    94,   301,   111,     0,   213,    94,   111,
-     0,   314,     0,   318,   212,     0,   318,   209,     0,   318,
-   208,     0,   318,   205,     0,   318,   208,     0,   314,     0,
-   327,   314,     0,   232,    93,   196,   108,     0,   232,    93,
-   210,   108,     0,   232,   224,     0,     4,     0,     5,     0,
-   177,     0,   319,     0,   318,   319,     0,   318,    48,   324,
-    54,     0,     4,    54,     0,     5,    54,     0,    57,    54,
-     0,   177,    54,     0,   321,     0,   327,   321,     0,   322,
-   163,     0,   322,   177,     0,   322,   324,     0,   322,    48,
-   324,     0,   323,     0,   322,   323,     0,   322,   324,    54,
-     0,   322,    48,   324,    54,     0,     4,    54,     0,     5,
-    54,     0,   177,    54,     0,    56,    54,     0,     3,    54,
-     0,    57,    54,     0,   163,    74,   182,   181,     0,   327,
-   317,     0,   308,     0,   327,   308,     0,   318,    80,     0,
-   327,   318,    80,     0,    54,     0,    80,   298,   328,     0,
-    80,   298,     0,    70,   298,   328,     0,    70,   298,     0,
-   326,   298,     0,   326,   298,   328,     0,   329,     0,    94,
-   186,   111,     0,   329,    94,   301,   111,     0,   331,     0,
-   247,   331,     0,    80,   299,   330,     0,    80,   330,     0,
-    80,   299,     0,    80,     0,    70,   299,   330,     0,    70,
-   330,     0,    70,   299,     0,    70,     0,   326,   298,     0,
-   326,   298,   330,     0,   332,     0,    93,   330,   108,     0,
-    90,     0,   332,    93,   382,   108,   298,   394,     0,   332,
-    47,   298,   394,     0,   332,    94,   301,   111,     0,   332,
-    94,   111,     0,    93,   383,   108,   298,   394,     0,   202,
-   298,   394,     0,   224,   298,   394,     0,    94,   301,   111,
-     0,    94,   111,     0,   346,     0,   334,     0,   333,   346,
-     0,   333,   334,     0,     1,    60,     0,     0,   336,     0,
-   337,     0,   336,   337,     0,    33,   252,    60,     0,   339,
-     0,     1,   339,     0,     0,    58,   340,   192,     0,     0,
-     0,    15,   342,   188,   343,   344,     0,   339,     0,     0,
-   345,   347,     0,   339,     0,   347,     0,   222,     0,   186,
-    60,     0,     0,   341,    16,   348,   344,     0,   341,     0,
-     0,     0,    17,   349,   188,   350,   193,     0,     0,     0,
-    18,   351,   344,    17,   352,   187,    60,     0,     0,     0,
-     0,     0,    19,   353,    93,   375,   354,   189,    60,   355,
-   377,   108,   356,   193,     0,     0,     0,    20,   357,    93,
-   190,   108,   358,   344,     0,     0,    21,   204,    62,   359,
-   346,     0,     0,    21,   204,    12,   204,    62,   360,   346,
-     0,     0,    22,    62,   361,   346,     0,    23,    60,     0,
-    24,    60,     0,    25,    60,     0,    25,   186,    60,     0,
-   119,   376,    93,   219,   108,    60,     0,   119,   376,    93,
-   219,    62,   378,   108,    60,     0,   119,   376,    93,   219,
-    62,   378,    62,   378,   108,    60,     0,   119,   376,    93,
-   219,    62,   378,    62,   378,    62,   381,   108,    60,     0,
-    26,    80,   186,    60,     0,    26,   163,    60,     0,   374,
-   346,     0,   374,   109,     0,    60,     0,   365,     0,   129,
-     0,   128,     0,   125,     0,     0,     0,    95,   363,   145,
-   339,   364,   368,     0,     0,     0,    95,   366,   339,   367,
-   368,     0,   369,     0,   368,   369,     0,     0,     0,    96,
-   370,   373,   371,   339,     0,   230,     0,   299,     0,    93,
-    12,   108,     0,    93,   391,   108,     0,     3,    62,     0,
-    56,    62,     0,     4,    62,     0,     5,    62,     0,   377,
-    60,     0,   222,     0,    58,   192,     0,     0,     9,     0,
-     0,   186,     0,     1,     0,     0,   379,     0,   380,     0,
-   379,    59,   380,     0,    11,    93,   186,   108,     0,    11,
-     0,   381,    59,    11,     0,     0,   383,     0,   225,     0,
-   387,     0,   388,    12,     0,   387,    12,     0,   225,    12,
-     0,    12,     0,   387,    62,     0,   225,    62,     0,     0,
-    64,   385,   386,     0,   101,     0,   254,     0,   389,     0,
-   391,   384,     0,   388,   390,     0,   388,   393,     0,   388,
-   393,    64,   254,     0,   387,    59,     0,   225,    59,     0,
-   227,   223,     0,   230,   223,     0,   232,   223,     0,   227,
-   331,     0,   227,     0,   229,   310,     0,   391,     0,   391,
-   384,     0,   389,     0,   225,     0,     0,     0,   310,     0,
-     0,    61,    93,   396,   108,     0,    61,    47,     0,   225,
-     0,   395,     0,   396,    59,   395,     0,     0,    80,   298,
-   397,     0,    70,   298,   397,     0,   326,   298,   397,     0,
-    41,     0,   398,    80,     0,   398,    81,     0,   398,    82,
-     0,   398,    78,     0,   398,    79,     0,   398,    70,     0,
-   398,    68,     0,   398,    69,     0,   398,    88,     0,   398,
-    59,     0,   398,    73,     0,   398,    74,     0,   398,    75,
-     0,   398,    72,     0,   398,    63,     0,   398,    64,     0,
-   398,    76,     0,   398,    77,     0,   398,    86,     0,   398,
-    87,     0,   398,    67,     0,   398,    66,     0,   398,   110,
-     0,   398,    65,    62,     0,   398,    71,     0,   398,    91,
-     0,   398,    83,     0,   398,    47,     0,   398,    94,   111,
-     0,   398,    39,     0,   398,    38,     0,   398,    39,    94,
-   111,     0,   398,    38,    94,   111,     0,   398,   372,   397,
-     0,   398,     1,     0
-};
+/* Suppress unused-variable warnings by "using" E.  */
+#if ! defined lint || defined __GNUC__
+# define YYUSE(E) ((void) (E))
+#else
+# define YYUSE(E) /* empty */
+#endif
 
+/* Identity function, used to suppress warnings about constant conditions.  */
+#ifndef lint
+# define YYID(N) (N)
+#else
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static int
+YYID (int yyi)
+#else
+static int
+YYID (yyi)
+    int yyi;
+#endif
+{
+  return yyi;
+}
 #endif
 
-#if YYDEBUG != 0
-static const short yyrline[] = { 0,
-   340,   342,   350,   353,   354,   358,   360,   363,   368,   372,
-   378,   382,   385,   389,   392,   394,   396,   399,   401,   404,
-   407,   409,   411,   413,   415,   416,   418,   419,   423,   426,
-   435,   438,   440,   444,   447,   449,   453,   456,   468,   475,
-   483,   485,   486,   488,   492,   495,   501,   504,   506,   511,
-   514,   518,   521,   524,   527,   531,   536,   546,   548,   550,
-   552,   554,   567,   570,   574,   577,   579,   581,   584,   587,
-   591,   593,   595,   597,   602,   604,   606,   608,   610,   611,
-   618,   619,   620,   623,   626,   630,   632,   633,   636,   638,
-   641,   644,   650,   654,   657,   659,   663,   665,   667,   671,
-   673,   675,   679,   681,   683,   689,   693,   696,   699,   702,
-   707,   710,   712,   714,   720,   732,   735,   740,   745,   748,
-   753,   758,   767,   770,   772,   776,   789,   809,   812,   814,
-   815,   818,   825,   831,   833,   835,   837,   839,   842,   847,
-   849,   850,   851,   852,   855,   857,   858,   861,   863,   864,
-   867,   872,   872,   876,   876,   879,   879,   882,   882,   886,
-   886,   891,   891,   894,   894,   897,   899,   902,   909,   913,
-   916,   919,   921,   925,   931,   940,   942,   950,   953,   956,
-   959,   963,   966,   968,   971,   974,   976,   978,   980,   984,
-   987,   990,   995,   999,  1004,  1008,  1011,  1012,  1016,  1035,
-  1042,  1045,  1047,  1048,  1049,  1052,  1056,  1057,  1061,  1065,
-  1068,  1070,  1074,  1077,  1080,  1084,  1087,  1089,  1091,  1093,
-  1096,  1100,  1102,  1105,  1107,  1113,  1116,  1119,  1122,  1134,
-  1139,  1143,  1147,  1152,  1154,  1158,  1162,  1164,  1173,  1177,
-  1180,  1183,  1188,  1191,  1193,  1201,  1214,  1219,  1225,  1227,
-  1229,  1242,  1245,  1247,  1249,  1251,  1253,  1255,  1257,  1259,
-  1261,  1263,  1265,  1267,  1269,  1271,  1273,  1275,  1277,  1279,
-  1281,  1283,  1285,  1289,  1291,  1293,  1310,  1313,  1315,  1316,
-  1317,  1318,  1319,  1322,  1334,  1337,  1341,  1344,  1346,  1351,
-  1353,  1354,  1357,  1359,  1367,  1369,  1371,  1373,  1377,  1380,
-  1384,  1388,  1389,  1390,  1394,  1402,  1403,  1404,  1418,  1420,
-  1423,  1425,  1436,  1441,  1443,  1445,  1447,  1449,  1451,  1453,
-  1456,  1458,  1475,  1476,  1480,  1484,  1488,  1492,  1494,  1498,
-  1500,  1502,  1510,  1512,  1514,  1516,  1520,  1522,  1524,  1526,
-  1531,  1533,  1535,  1537,  1540,  1542,  1544,  1588,  1591,  1595,
-  1598,  1602,  1605,  1610,  1612,  1616,  1629,  1632,  1639,  1646,
-  1651,  1653,  1658,  1660,  1667,  1669,  1673,  1677,  1683,  1687,
-  1690,  1694,  1697,  1707,  1709,  1712,  1716,  1719,  1722,  1725,
-  1728,  1734,  1740,  1742,  1747,  1749,  1767,  1770,  1772,  1775,
-  1781,  1783,  1793,  1797,  1800,  1803,  1808,  1811,  1819,  1821,
-  1823,  1825,  1828,  1831,  1846,  1865,  1868,  1870,  1873,  1875,
-  1879,  1881,  1885,  1887,  1891,  1894,  1898,  1904,  1905,  1917,
-  1924,  1927,  1933,  1937,  1942,  1948,  1949,  1957,  1960,  1964,
-  1967,  1971,  1976,  1979,  1983,  1986,  1988,  1990,  1992,  1999,
-  2001,  2002,  2003,  2007,  2010,  2014,  2017,  2023,  2025,  2028,
-  2031,  2034,  2040,  2043,  2046,  2048,  2050,  2054,  2060,  2068,
-  2075,  2079,  2081,  2086,  2089,  2092,  2094,  2096,  2100,  2105,
-  2112,  2116,  2120,  2127,  2131,  2134,  2137,  2143,  2145,  2157,
-  2161,  2166,  2188,  2190,  2193,  2195,  2200,  2202,  2204,  2206,
-  2208,  2210,  2214,  2222,  2225,  2227,  2231,  2238,  2244,  2250,
-  2256,  2266,  2272,  2276,  2283,  2311,  2321,  2327,  2330,  2333,
-  2335,  2339,  2341,  2345,  2350,  2356,  2359,  2360,  2381,  2404,
-  2406,  2410,  2421,  2435,  2436,  2437,  2438,  2441,  2456,  2461,
-  2467,  2469,  2474,  2476,  2478,  2480,  2482,  2484,  2487,  2497,
-  2504,  2529,  2535,  2538,  2541,  2543,  2554,  2559,  2562,  2567,
-  2570,  2577,  2587,  2590,  2597,  2607,  2609,  2612,  2614,  2617,
-  2624,  2632,  2639,  2645,  2651,  2659,  2663,  2668,  2672,  2675,
-  2684,  2686,  2690,  2693,  2698,  2702,  2708,  2719,  2722,  2726,
-  2730,  2738,  2743,  2749,  2752,  2754,  2756,  2762,  2764,  2773,
-  2776,  2778,  2780,  2782,  2786,  2789,  2792,  2794,  2796,  2798,
-  2802,  2805,  2816,  2826,  2828,  2829,  2833,  2841,  2843,  2851,
-  2854,  2856,  2858,  2860,  2864,  2867,  2870,  2872,  2874,  2876,
-  2880,  2883,  2886,  2888,  2890,  2892,  2894,  2901,  2905,  2910,
-  2914,  2919,  2921,  2925,  2928,  2930,  2933,  2935,  2936,  2939,
-  2941,  2943,  2949,  2960,  2966,  2972,  2986,  2988,  2992,  3006,
-  3008,  3010,  3014,  3020,  3033,  3035,  3039,  3052,  3058,  3060,
-  3061,  3062,  3070,  3075,  3084,  3085,  3089,  3092,  3098,  3104,
-  3107,  3109,  3111,  3113,  3117,  3121,  3125,  3128,  3132,  3134,
-  3143,  3146,  3148,  3150,  3152,  3154,  3156,  3158,  3160,  3164,
-  3168,  3172,  3176,  3177,  3179,  3181,  3183,  3185,  3187,  3189,
-  3191,  3193,  3201,  3203,  3204,  3205,  3208,  3214,  3216,  3221,
-  3223,  3226,  3240,  3243,  3246,  3250,  3253,  3260,  3262,  3265,
-  3267,  3269,  3272,  3275,  3278,  3281,  3283,  3286,  3290,  3292,
-  3298,  3300,  3301,  3303,  3308,  3310,  3312,  3314,  3316,  3319,
-  3320,  3322,  3325,  3326,  3329,  3329,  3332,  3332,  3335,  3335,
-  3337,  3339,  3341,  3343,  3349,  3355,  3358,  3361,  3367,  3369,
-  3371,  3375,  3377,  3378,  3379,  3381,  3384,  3391,  3397,  3403,
-  3407,  3409,  3412,  3414,  3417,  3421,  3423,  3426,  3428,  3431,
-  3448,  3454,  3462,  3464,  3466,  3470,  3473,  3474,  3482,  3486,
-  3490,  3493,  3494,  3500,  3503,  3506,  3508,  3512,  3517,  3520,
-  3530,  3535,  3536,  3543,  3546,  3549,  3551,  3554,  3556,  3566,
-  3580,  3584,  3587,  3589,  3593,  3597,  3600,  3603,  3605,  3609,
-  3611,  3618,  3625,  3628,  3632,  3636,  3640,  3646,  3650,  3655,
-  3657,  3660,  3665,  3671,  3682,  3685,  3687,  3691,  3696,  3698,
-  3705,  3708,  3710,  3712,  3718,  3723,  3726,  3728,  3730,  3732,
-  3734,  3736,  3738,  3740,  3742,  3744,  3746,  3748,  3750,  3752,
-  3754,  3756,  3758,  3760,  3762,  3764,  3766,  3768,  3770,  3772,
-  3774,  3776,  3778,  3780,  3782,  3784,  3786,  3788,  3791,  3793
+#if ! defined yyoverflow || YYERROR_VERBOSE
+
+/* The parser invokes alloca or malloc; define the necessary symbols.  */
+
+# ifdef YYSTACK_USE_ALLOCA
+#  if YYSTACK_USE_ALLOCA
+#   ifdef __GNUC__
+#    define YYSTACK_ALLOC __builtin_alloca
+#   elif defined __BUILTIN_VA_ARG_INCR
+#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
+#   elif defined _AIX
+#    define YYSTACK_ALLOC __alloca
+#   elif defined _MSC_VER
+#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
+#    define alloca _alloca
+#   else
+#    define YYSTACK_ALLOC alloca
+#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
+#     ifndef EXIT_SUCCESS
+#      define EXIT_SUCCESS 0
+#     endif
+#    endif
+#   endif
+#  endif
+# endif
+
+# ifdef YYSTACK_ALLOC
+   /* Pacify GCC's `empty if-body' warning.  */
+#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
+#  ifndef YYSTACK_ALLOC_MAXIMUM
+    /* The OS might guarantee only one guard page at the bottom of the stack,
+       and a page size can be as small as 4096 bytes.  So we cannot safely
+       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
+       to allow for a few compiler-allocated temporary stack slots.  */
+#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
+#  endif
+# else
+#  define YYSTACK_ALLOC YYMALLOC
+#  define YYSTACK_FREE YYFREE
+#  ifndef YYSTACK_ALLOC_MAXIMUM
+#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
+#  endif
+#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
+       && ! ((defined YYMALLOC || defined malloc) \
+	     && (defined YYFREE || defined free)))
+#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+#   ifndef EXIT_SUCCESS
+#    define EXIT_SUCCESS 0
+#   endif
+#  endif
+#  ifndef YYMALLOC
+#   define YYMALLOC malloc
+#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
+#   endif
+#  endif
+#  ifndef YYFREE
+#   define YYFREE free
+#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+void free (void *); /* INFRINGES ON USER NAME SPACE */
+#   endif
+#  endif
+# endif
+#endif /* ! defined yyoverflow || YYERROR_VERBOSE */
+
+
+#if (! defined yyoverflow \
+     && (! defined __cplusplus \
+	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
+
+/* A type that is properly aligned for any stack member.  */
+union yyalloc
+{
+  yytype_int16 yyss_alloc;
+  YYSTYPE yyvs_alloc;
 };
+
+/* The size of the maximum gap between one aligned stack and the next.  */
+# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)
+
+/* The size of an array large to enough to hold all stacks, each with
+   N elements.  */
+# define YYSTACK_BYTES(N) \
+     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
+      + YYSTACK_GAP_MAXIMUM)
+
+# define YYCOPY_NEEDED 1
+
+/* Relocate STACK from its old location to the new one.  The
+   local variables YYSIZE and YYSTACKSIZE give the old and new number of
+   elements in the stack, and YYPTR gives the new location of the
+   stack.  Advance YYPTR to a properly aligned location for the next
+   stack.  */
+# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
+    do									\
+      {									\
+	YYSIZE_T yynewbytes;						\
+	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
+	Stack = &yyptr->Stack_alloc;					\
+	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
+	yyptr += yynewbytes / sizeof (*yyptr);				\
+      }									\
+    while (YYID (0))
+
 #endif
 
+#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
+/* Copy COUNT objects from SRC to DST.  The source and destination do
+   not overlap.  */
+# ifndef YYCOPY
+#  if defined __GNUC__ && 1 < __GNUC__
+#   define YYCOPY(Dst, Src, Count) \
+      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
+#  else
+#   define YYCOPY(Dst, Src, Count)              \
+      do                                        \
+        {                                       \
+          YYSIZE_T yyi;                         \
+          for (yyi = 0; yyi < (Count); yyi++)   \
+            (Dst)[yyi] = (Src)[yyi];            \
+        }                                       \
+      while (YYID (0))
+#  endif
+# endif
+#endif /* !YYCOPY_NEEDED */
+
+/* YYFINAL -- State number of the termination state.  */
+#define YYFINAL  4
+/* YYLAST -- Last index in YYTABLE.  */
+#define YYLAST   12569
+
+/* YYNTOKENS -- Number of terminals.  */
+#define YYNTOKENS  112
+/* YYNNTS -- Number of nonterminals.  */
+#define YYNNTS  289
+/* YYNRULES -- Number of rules.  */
+#define YYNRULES  881
+/* YYNRULES -- Number of states.  */
+#define YYNSTATES  1667
+
+/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
+#define YYUNDEFTOK  2
+#define YYMAXUTOK   342
+
+#define YYTRANSLATE(YYX)						\
+  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
+
+/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
+static const yytype_uint8 yytranslate[] =
+{
+       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,   110,     2,     2,     2,    82,    70,     2,
+      92,   108,    80,    78,    59,    79,    91,    81,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,    62,    60,
+      73,    63,    74,    65,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,    93,     2,   111,    69,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,    58,    68,   109,    85,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
+       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
+      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
+      55,    56,    57,    61,    64,    66,    67,    71,    72,    75,
+      76,    77,    83,    84,    86,    87,    88,    89,    90,    94,
+      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
+     105,   106,   107
+};
 
-#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)
-
-static const char * const yytname[] = {   "$","error","$undefined.","IDENTIFIER",
-"TYPENAME","SELFNAME","PFUNCNAME","SCSPEC","TYPESPEC","CV_QUALIFIER","CONSTANT",
-"STRING","ELLIPSIS","SIZEOF","ENUM","IF","ELSE","WHILE","DO","FOR","SWITCH",
-"CASE","DEFAULT","BREAK","CONTINUE","RETURN_KEYWORD","GOTO","ASM_KEYWORD","TYPEOF",
-"ALIGNOF","SIGOF","ATTRIBUTE","EXTENSION","LABEL","REALPART","IMAGPART","AGGR",
-"VISSPEC","DELETE","NEW","THIS","OPERATOR","CXX_TRUE","CXX_FALSE","NAMESPACE",
-"TYPENAME_KEYWORD","USING","LEFT_RIGHT","TEMPLATE","TYPEID","DYNAMIC_CAST","STATIC_CAST",
-"REINTERPRET_CAST","CONST_CAST","SCOPE","EMPTY","PTYPENAME","NSNAME","'{'","','",
-"';'","THROW","':'","ASSIGN","'='","'?'","OROR","ANDAND","'|'","'^'","'&'","MIN_MAX",
-"EQCOMPARE","ARITHCOMPARE","'<'","'>'","LSHIFT","RSHIFT","'+'","'-'","'*'","'/'",
-"'%'","POINTSAT_STAR","DOT_STAR","UNARY","PLUSPLUS","MINUSMINUS","'~'","HYPERUNARY",
-"PAREN_STAR_PAREN","POINTSAT","'.'","'('","'['","TRY","CATCH","PRE_PARSED_FUNCTION_DECL",
-"EXTERN_LANG_STRING","ALL","PRE_PARSED_CLASS_DECL","DEFARG","DEFARG_MARKER",
-"TYPENAME_DEFN","IDENTIFIER_DEFN","PTYPENAME_DEFN","END_OF_LINE","END_OF_SAVED_INPUT",
-"')'","'}'","'!'","']'","program","extdefs","@1","extdefs_opt",".hush_warning",
-".warning_ok","extension","asm_keyword","lang_extdef","@2","extdef","@3","@4",
-"namespace_alias","@5","using_decl","namespace_using_decl","using_directive",
-"@6","namespace_qualifier","any_id","extern_lang_string","template_header","@7",
-"template_parm_list","maybe_identifier","template_type_parm","template_template_parm",
-"template_parm","template_def","template_extdef","template_datadef","datadef",
-"ctor_initializer_opt","maybe_return_init","eat_saved_input","fndef","constructor_declarator",
-"@8","@9","@10","@11","fn.def1","component_constructor_declarator","fn.def2",
-"return_id","return_init","base_init",".set_base_init","member_init_list","member_init",
-"identifier","notype_identifier","identifier_defn","explicit_instantiation",
-"@12","@13","@14","@15","@16","@17","@18","@19","begin_explicit_instantiation",
-"end_explicit_instantiation","template_type","apparent_template_type","self_template_type",
-".finish_template_type","template_close_bracket","template_arg_list_opt","template_arg_list",
-"template_arg","unop","expr","paren_expr_or_null","paren_cond_or_null","xcond",
-"condition","@20","compstmtend","already_scoped_stmt","@21","nontrivial_exprlist",
-"nonnull_exprlist","unary_expr",".finish_new_placement",".begin_new_placement",
-"new_placement","new_initializer","regcast_or_absdcl","cast_expr","expr_no_commas",
-"notype_unqualified_id","do_id","template_id","object_template_id","unqualified_id",
-"expr_or_declarator_intern","expr_or_declarator","notype_template_declarator",
-"direct_notype_declarator","primary","@22","new","delete","boolean.literal",
-"string","nodecls","object","decl","declarator","fcast_or_absdcl","type_id",
-"typed_declspecs","typed_declspecs1","reserved_declspecs","declmods","typed_typespecs",
-"reserved_typespecquals","typespec","typespecqual_reserved","initdecls","notype_initdecls",
-"nomods_initdecls","maybeasm","initdcl","@23","initdcl0_innards","@24","initdcl0",
-"notype_initdcl0","nomods_initdcl0","@25","maybe_attribute","attributes","attribute",
-"attribute_list","attrib","any_word","identifiers_or_typenames","maybe_init",
-"init","initlist","fn.defpen","pending_inline","pending_inlines","defarg_again",
-"pending_defargs","structsp","@26","@27","@28","@29","@30","maybecomma","maybecomma_warn",
-"aggr","named_class_head_sans_basetype","named_class_head_sans_basetype_defn",
-"named_complex_class_head_sans_basetype","named_class_head","@31","unnamed_class_head",
-"class_head","maybe_base_class_list","base_class_list","base_class","base_class.1",
-"base_class_access_list","opt.component_decl_list","access_specifier","component_decl_list",
-"component_decl","component_decl_1","components","notype_components","component_declarator0",
-"component_declarator","after_type_component_declarator0","notype_component_declarator0",
-"after_type_component_declarator","notype_component_declarator","enumlist","enumerator",
-"new_type_id","cv_qualifiers","nonempty_cv_qualifiers","suspend_mom","nonmomentary_expr",
-"maybe_parmlist","after_type_declarator_intern","after_type_declarator","direct_after_type_declarator",
-"nonnested_type","complete_type_name","nested_type","notype_declarator_intern",
-"notype_declarator","complex_notype_declarator","complex_direct_notype_declarator",
-"qualified_id","notype_qualified_id","overqualified_id","functional_cast","type_name",
-"nested_name_specifier","nested_name_specifier_1","typename_sub","typename_sub0",
-"typename_sub1","typename_sub2","explicit_template_type","complex_type_name",
-"ptr_to_mem","global_scope","new_declarator","direct_new_declarator","absdcl_intern",
-"absdcl","direct_abstract_declarator","stmts","errstmt","maybe_label_decls",
-"label_decls","label_decl","compstmt_or_error","compstmt","@32","simple_if",
-"@33","@34","implicitly_scoped_stmt","@35","stmt","simple_stmt","@36","@37",
-"@38","@39","@40","@41","@42","@43","@44","@45","@46","@47","@48","@49","function_try_block",
-"@50","@51","try_block","@52","@53","handler_seq","handler","@54","@55","type_specifier_seq",
-"handler_args","label_colon","for.init.statement","maybe_cv_qualifier","xexpr",
-"asm_operands","nonnull_asm_operands","asm_operand","asm_clobbers","parmlist",
-"complex_parmlist","defarg","@56","defarg1","parms","parms_comma","named_parm",
-"full_parm","parm","see_typename","bad_parm","exception_specification_opt","ansi_raise_identifier",
-"ansi_raise_identifiers","conversion_declarator","operator","operator_name", NULL
+#if YYDEBUG
+/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
+   YYRHS.  */
+static const yytype_uint16 yyprhs[] =
+{
+       0,     0,     3,     4,     6,     7,    10,    13,    15,    16,
+      17,    18,    20,    22,    23,    26,    29,    31,    33,    39,
+      44,    50,    55,    56,    63,    64,    70,    72,    75,    77,
+      80,    81,    88,    91,    95,    99,   103,   107,   112,   113,
+     119,   122,   126,   128,   130,   133,   136,   138,   141,   142,
+     148,   152,   154,   158,   160,   161,   164,   167,   171,   173,
+     177,   179,   183,   185,   189,   192,   195,   198,   200,   202,
+     208,   213,   216,   219,   223,   227,   230,   233,   237,   241,
+     244,   247,   250,   253,   256,   258,   260,   262,   263,   265,
+     268,   269,   271,   276,   280,   284,   285,   294,   300,   301,
+     311,   318,   319,   328,   334,   335,   345,   352,   355,   358,
+     360,   363,   365,   372,   377,   384,   389,   392,   394,   397,
+     400,   402,   405,   407,   410,   413,   418,   421,   425,   426,
+     427,   429,   433,   436,   440,   442,   447,   450,   455,   458,
+     463,   466,   468,   470,   472,   474,   476,   478,   480,   482,
+     484,   486,   488,   489,   496,   497,   504,   505,   511,   512,
+     518,   519,   527,   528,   536,   537,   544,   545,   552,   553,
+     554,   560,   566,   568,   570,   576,   582,   583,   585,   587,
+     588,   590,   592,   596,   598,   600,   602,   604,   606,   608,
+     610,   612,   614,   616,   618,   622,   624,   628,   629,   631,
+     633,   634,   642,   644,   646,   650,   655,   659,   660,   664,
+     666,   670,   674,   678,   682,   684,   686,   688,   691,   694,
+     697,   700,   703,   706,   709,   714,   717,   722,   725,   729,
+     733,   738,   744,   751,   758,   766,   769,   774,   780,   783,
+     786,   788,   789,   794,   799,   803,   805,   809,   812,   816,
+     821,   823,   826,   832,   834,   838,   842,   846,   850,   854,
+     858,   862,   866,   870,   874,   878,   882,   886,   890,   894,
+     898,   902,   906,   910,   916,   920,   924,   926,   929,   933,
+     937,   939,   941,   943,   945,   947,   948,   954,   960,   966,
+     972,   978,   980,   982,   984,   986,   989,   991,   994,   997,
+    1001,  1006,  1011,  1013,  1015,  1017,  1021,  1023,  1025,  1027,
+    1029,  1033,  1037,  1041,  1042,  1047,  1052,  1055,  1060,  1063,
+    1068,  1071,  1074,  1076,  1081,  1083,  1091,  1099,  1107,  1115,
+    1120,  1125,  1128,  1131,  1134,  1136,  1141,  1144,  1147,  1153,
+    1157,  1160,  1163,  1169,  1173,  1179,  1183,  1188,  1195,  1198,
+    1200,  1203,  1205,  1208,  1210,  1212,  1214,  1217,  1218,  1221,
+    1224,  1228,  1232,  1236,  1239,  1242,  1245,  1247,  1249,  1251,
+    1254,  1257,  1260,  1263,  1265,  1267,  1269,  1271,  1274,  1277,
+    1281,  1285,  1289,  1294,  1296,  1299,  1302,  1305,  1307,  1309,
+    1311,  1314,  1317,  1320,  1322,  1324,  1327,  1330,  1334,  1336,
+    1339,  1341,  1343,  1345,  1350,  1355,  1360,  1365,  1367,  1369,
+    1371,  1373,  1377,  1379,  1383,  1385,  1389,  1390,  1395,  1396,
+    1403,  1407,  1408,  1413,  1415,  1419,  1423,  1424,  1429,  1433,
+    1434,  1436,  1438,  1441,  1448,  1450,  1454,  1455,  1457,  1462,
+    1469,  1474,  1476,  1478,  1480,  1482,  1484,  1488,  1489,  1492,
+    1494,  1497,  1501,  1506,  1508,  1510,  1514,  1519,  1523,  1529,
+    1531,  1536,  1540,  1544,  1545,  1549,  1553,  1557,  1558,  1561,
+    1564,  1565,  1573,  1578,  1579,  1586,  1590,  1593,  1596,  1599,
+    1600,  1601,  1602,  1613,  1615,  1616,  1618,  1619,  1621,  1623,
+    1626,  1629,  1632,  1635,  1638,  1641,  1644,  1647,  1650,  1654,
+    1659,  1663,  1666,  1670,  1672,  1673,  1677,  1680,  1683,  1685,
+    1687,  1688,  1691,  1695,  1697,  1702,  1704,  1708,  1710,  1712,
+    1717,  1722,  1725,  1728,  1732,  1736,  1737,  1739,  1743,  1746,
+    1749,  1751,  1754,  1757,  1760,  1763,  1766,  1769,  1772,  1774,
+    1777,  1780,  1784,  1787,  1790,  1795,  1800,  1803,  1805,  1811,
+    1816,  1818,  1819,  1821,  1825,  1826,  1828,  1832,  1834,  1836,
+    1838,  1840,  1845,  1850,  1855,  1860,  1865,  1869,  1874,  1879,
+    1884,  1889,  1893,  1895,  1899,  1901,  1905,  1908,  1910,  1918,
+    1919,  1922,  1924,  1927,  1928,  1931,  1936,  1941,  1944,  1949,
+    1951,  1954,  1958,  1962,  1965,  1968,  1972,  1974,  1979,  1984,
+    1988,  1992,  1995,  1997,  1999,  2002,  2004,  2006,  2009,  2012,
+    2014,  2017,  2021,  2025,  2028,  2031,  2035,  2037,  2041,  2045,
+    2048,  2051,  2055,  2057,  2062,  2066,  2071,  2075,  2077,  2080,
+    2083,  2086,  2089,  2092,  2094,  2097,  2102,  2107,  2110,  2112,
+    2114,  2116,  2118,  2121,  2126,  2129,  2132,  2135,  2138,  2140,
+    2143,  2146,  2149,  2152,  2156,  2158,  2161,  2165,  2170,  2173,
+    2176,  2179,  2182,  2185,  2188,  2193,  2196,  2198,  2201,  2204,
+    2208,  2210,  2214,  2217,  2221,  2224,  2227,  2231,  2233,  2237,
+    2242,  2244,  2247,  2251,  2254,  2257,  2259,  2263,  2266,  2269,
+    2271,  2274,  2278,  2280,  2284,  2286,  2293,  2298,  2303,  2307,
+    2313,  2317,  2321,  2325,  2328,  2330,  2332,  2335,  2338,  2341,
+    2342,  2344,  2346,  2349,  2353,  2355,  2358,  2359,  2363,  2364,
+    2365,  2371,  2373,  2374,  2377,  2379,  2381,  2383,  2386,  2387,
+    2392,  2394,  2395,  2396,  2402,  2403,  2404,  2412,  2413,  2414,
+    2415,  2416,  2429,  2430,  2431,  2439,  2440,  2446,  2447,  2455,
+    2456,  2461,  2464,  2467,  2470,  2474,  2481,  2490,  2501,  2514,
+    2519,  2523,  2526,  2529,  2531,  2533,  2535,  2537,  2539,  2540,
+    2541,  2548,  2549,  2550,  2556,  2558,  2561,  2562,  2563,  2569,
+    2571,  2573,  2577,  2581,  2584,  2587,  2590,  2593,  2596,  2598,
+    2601,  2602,  2604,  2605,  2607,  2609,  2610,  2612,  2614,  2618,
+    2623,  2625,  2629,  2630,  2632,  2634,  2636,  2639,  2642,  2645,
+    2647,  2650,  2653,  2654,  2658,  2660,  2662,  2664,  2667,  2670,
+    2673,  2678,  2681,  2684,  2687,  2690,  2693,  2696,  2698,  2701,
+    2703,  2706,  2708,  2710,  2711,  2712,  2714,  2715,  2720,  2723,
+    2725,  2727,  2731,  2732,  2736,  2740,  2744,  2746,  2749,  2752,
+    2755,  2758,  2761,  2764,  2767,  2770,  2773,  2776,  2779,  2782,
+    2785,  2788,  2791,  2794,  2797,  2800,  2803,  2806,  2809,  2812,
+    2815,  2819,  2822,  2825,  2828,  2831,  2835,  2838,  2841,  2846,
+    2851,  2855
 };
-#endif
 
-static const short yyr1[] = {     0,
-   112,   112,   114,   113,   113,   115,   115,   116,   117,   118,
-   119,   121,   120,   122,   122,   122,   122,   122,   122,   122,
-   123,   122,   124,   122,   122,   122,   122,   122,   126,   125,
-   127,   127,   127,   128,   128,   128,   130,   129,   131,   131,
-   132,   132,   132,   132,   133,   133,   135,   134,   134,   136,
-   136,   137,   137,   138,   138,   139,   140,   140,   140,   140,
-   140,   140,   141,   141,   142,   142,   142,   142,   142,   142,
-   143,   143,   143,   143,   144,   144,   144,   144,   144,   144,
-   144,   144,   144,   145,   145,   146,   146,   146,   147,   147,
-   148,   148,   148,   150,   149,   149,   151,   149,   149,   152,
-   149,   149,   153,   149,   149,   154,   154,   154,   154,   154,
-   155,   155,   155,   155,   156,   156,   156,   156,   156,   156,
-   156,   157,   158,   158,   158,   159,   160,   161,   161,   161,
-   161,   162,   162,   162,   162,   162,   162,   162,   162,   163,
-   163,   163,   163,   163,   164,   164,   164,   165,   165,   165,
-   167,   166,   168,   166,   169,   166,   170,   166,   171,   166,
-   172,   166,   173,   166,   174,   166,   175,   176,   177,   177,
-   177,   178,   178,   179,   180,   181,   181,   182,   182,   183,
-   183,   184,   184,   184,   185,   185,   185,   185,   185,   186,
-   186,   187,   187,   188,   188,   189,   189,   189,   191,   190,
-   190,   192,   192,   192,   192,   194,   193,   193,   195,   195,
-   195,   195,   196,   196,   197,   197,   197,   197,   197,   197,
-   197,   197,   197,   197,   197,   197,   197,   197,   197,   197,
-   197,   197,   197,   197,   197,   197,   197,   197,   198,   199,
-   200,   200,   201,   201,   201,   201,   202,   202,   203,   203,
-   203,   204,   204,   204,   204,   204,   204,   204,   204,   204,
-   204,   204,   204,   204,   204,   204,   204,   204,   204,   204,
-   204,   204,   204,   204,   204,   204,   205,   205,   205,   205,
-   205,   205,   205,   206,   207,   207,   208,   208,   208,   209,
-   209,   209,   210,   210,   211,   211,   211,   211,   212,   212,
-   213,   213,   213,   213,   214,   214,   214,   214,   214,   214,
-   214,   215,   214,   214,   214,   214,   214,   214,   214,   214,
-   214,   214,   214,   214,   214,   214,   214,   214,   214,   214,
-   214,   214,   214,   214,   214,   214,   214,   214,   214,   214,
-   214,   214,   214,   214,   214,   214,   214,   216,   216,   217,
-   217,   218,   218,   219,   219,   220,   221,   221,   222,   222,
-   222,   222,   222,   222,   223,   223,   224,   224,   225,   225,
-   225,   225,   225,   226,   226,   227,   227,   227,   227,   227,
-   227,   228,   228,   228,   228,   228,   229,   229,   229,   229,
-   229,   229,   230,   230,   230,   230,   231,   231,   232,   232,
-   232,   232,   232,   232,   232,   233,   233,   233,   234,   234,
-   235,   235,   236,   236,   237,   237,   239,   238,   238,   241,
-   240,   240,   242,   243,   245,   244,   244,   246,   246,   247,
-   247,   248,   249,   249,   250,   250,   250,   250,   250,   251,
-   251,   251,   251,   252,   252,   253,   253,   254,   254,   254,
-   254,   254,   255,   255,   255,   255,   255,   256,   257,   257,
-   257,   258,   258,   259,   259,   260,   260,   260,   262,   261,
-   261,   263,   261,   261,   261,   261,   261,   264,   265,   266,
-   261,   261,   267,   267,   268,   268,   269,   269,   269,   269,
-   269,   269,   270,   271,   271,   271,   272,   272,   272,   272,
-   272,   273,   274,   273,   273,   275,   276,   276,   277,   277,
-   277,   278,   278,   279,   279,   280,   280,   280,   280,   281,
-   281,   281,   281,   282,   282,   282,   282,   283,   284,   284,
-   285,   285,   285,   285,   285,   285,   285,   285,   285,   285,
-   286,   286,   286,   286,   286,   286,   286,   286,   286,   287,
-   287,   287,   288,   288,   288,   289,   289,   290,   290,   291,
-   291,   292,   292,   292,   292,   293,   293,   294,   294,   294,
-   295,   295,   296,   296,   297,   297,   297,   298,   298,   299,
-   299,   300,   301,   302,   302,   302,   302,   303,   303,   304,
-   304,   304,   304,   304,   304,   305,   305,   305,   305,   305,
-   305,   306,   306,   307,   307,   307,   308,   309,   309,   310,
-   310,   310,   310,   310,   310,   311,   311,   311,   311,   311,
-   311,   312,   312,   312,   312,   312,   312,   313,   313,   314,
-   314,   315,   315,   316,   316,   316,   317,   317,   317,   318,
-   318,   318,   319,   319,   319,   319,   320,   320,   321,   321,
-   321,   321,   322,   322,   322,   322,   323,   323,   323,   323,
-   323,   323,   324,   325,   325,   325,   326,   326,   327,   328,
-   328,   328,   328,   328,   328,   328,   329,   329,   330,   330,
-   331,   331,   331,   331,   331,   331,   331,   331,   331,   331,
-   331,   332,   332,   332,   332,   332,   332,   332,   332,   332,
-   332,   332,   333,   333,   333,   333,   334,   335,   335,   336,
-   336,   337,   338,   338,   340,   339,   342,   343,   341,   344,
-   345,   344,   346,   346,   347,   347,   348,   347,   347,   349,
-   350,   347,   351,   352,   347,   353,   354,   355,   356,   347,
-   357,   358,   347,   359,   347,   360,   347,   361,   347,   347,
-   347,   347,   347,   347,   347,   347,   347,   347,   347,   347,
-   347,   347,   347,   347,   347,   347,   363,   364,   362,   366,
-   367,   365,   368,   368,   370,   371,   369,   372,   372,   373,
-   373,   374,   374,   374,   374,   375,   375,   375,   376,   376,
-   377,   377,   377,   378,   378,   379,   379,   380,   381,   381,
-   382,   382,   382,   383,   383,   383,   383,   383,   383,   383,
-   385,   384,   386,   386,   387,   387,   387,   387,   387,   388,
-   388,   389,   389,   389,   389,   389,   389,   390,   390,   391,
-   391,   392,   393,   393,   394,   394,   394,   395,   396,   396,
-   397,   397,   397,   397,   398,   399,   399,   399,   399,   399,
-   399,   399,   399,   399,   399,   399,   399,   399,   399,   399,
-   399,   399,   399,   399,   399,   399,   399,   399,   399,   399,
-   399,   399,   399,   399,   399,   399,   399,   399,   399,   399
+/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
+static const yytype_int16 yyrhs[] =
+{
+     113,     0,    -1,    -1,   114,    -1,    -1,   115,   121,    -1,
+     114,   121,    -1,   114,    -1,    -1,    -1,    -1,    32,    -1,
+      27,    -1,    -1,   122,   123,    -1,   149,   148,    -1,   145,
+      -1,   142,    -1,   120,    92,   220,   108,    60,    -1,   134,
+      58,   116,   109,    -1,   134,   117,   149,   118,   148,    -1,
+     134,   117,   145,   118,    -1,    -1,    44,   164,    58,   124,
+     116,   109,    -1,    -1,    44,    58,   125,   116,   109,    -1,
+     126,    -1,   128,    60,    -1,   130,    -1,   119,   123,    -1,
+      -1,    44,   164,    63,   127,   133,    60,    -1,    46,   314,
+      -1,    46,   328,   314,    -1,    46,   328,   210,    -1,    46,
+     132,   164,    -1,    46,   328,   164,    -1,    46,   328,   132,
+     164,    -1,    -1,    46,    44,   131,   133,    60,    -1,    56,
+      54,    -1,   132,    56,    54,    -1,   210,    -1,   314,    -1,
+     328,   314,    -1,   328,   210,    -1,    98,    -1,   134,    98,
+      -1,    -1,    48,    73,   136,   137,    74,    -1,    48,    73,
+      74,    -1,   141,    -1,   137,    59,   141,    -1,   164,    -1,
+      -1,   270,   138,    -1,    45,   138,    -1,   135,   270,   138,
+      -1,   139,    -1,   139,    63,   226,    -1,   392,    -1,   392,
+      63,   205,    -1,   140,    -1,   140,    63,   185,    -1,   135,
+     143,    -1,   135,     1,    -1,   149,   148,    -1,   144,    -1,
+     142,    -1,   134,   117,   149,   118,   148,    -1,   134,   117,
+     144,   118,    -1,   119,   143,    -1,   237,    60,    -1,   230,
+     236,    60,    -1,   227,   235,    60,    -1,   262,    60,    -1,
+     237,    60,    -1,   230,   236,    60,    -1,   227,   235,    60,
+      -1,   230,    60,    -1,   167,    60,    -1,   227,    60,    -1,
+       1,    60,    -1,     1,   109,    -1,    60,    -1,   221,    -1,
+     160,    -1,    -1,   159,    -1,   159,    60,    -1,    -1,   107,
+      -1,   155,   147,   146,   339,    -1,   155,   147,   363,    -1,
+     155,   147,     1,    -1,    -1,   319,     5,    92,   151,   383,
+     108,   299,   395,    -1,   319,     5,    47,   299,   395,    -1,
+      -1,   328,   319,     5,    92,   152,   383,   108,   299,   395,
+      -1,   328,   319,     5,    47,   299,   395,    -1,    -1,   319,
+     180,    92,   153,   383,   108,   299,   395,    -1,   319,   180,
+      47,   299,   395,    -1,    -1,   328,   319,   180,    92,   154,
+     383,   108,   299,   395,    -1,   328,   319,   180,    47,   299,
+     395,    -1,   227,   224,    -1,   230,   311,    -1,   311,    -1,
+     230,   150,    -1,   150,    -1,     5,    92,   383,   108,   299,
+     395,    -1,     5,    47,   299,   395,    -1,   180,    92,   383,
+     108,   299,   395,    -1,   180,    47,   299,   395,    -1,   230,
+     156,    -1,   156,    -1,   227,   224,    -1,   230,   311,    -1,
+     311,    -1,   230,   150,    -1,   150,    -1,    25,     3,    -1,
+     158,   254,    -1,   158,    92,   197,   108,    -1,   158,    47,
+      -1,    62,   161,   162,    -1,    -1,    -1,   163,    -1,   162,
+      59,   163,    -1,   162,     1,    -1,    92,   197,   108,    -1,
+      47,    -1,   165,    92,   197,   108,    -1,   165,    47,    -1,
+     307,    92,   197,   108,    -1,   307,    47,    -1,   321,    92,
+     197,   108,    -1,   321,    47,    -1,     3,    -1,     4,    -1,
+       5,    -1,    57,    -1,    56,    -1,     3,    -1,    57,    -1,
+      56,    -1,   104,    -1,   103,    -1,   105,    -1,    -1,    48,
+     176,   233,    60,   168,   177,    -1,    -1,    48,   176,   227,
+     224,   169,   177,    -1,    -1,    48,   176,   311,   170,   177,
+      -1,    -1,    48,   176,   150,   171,   177,    -1,    -1,     7,
+      48,   176,   233,    60,   172,   177,    -1,    -1,     7,    48,
+     176,   227,   224,   173,   177,    -1,    -1,     7,    48,   176,
+     311,   174,   177,    -1,    -1,     7,    48,   176,   150,   175,
+     177,    -1,    -1,    -1,    57,    73,   183,   182,   181,    -1,
+       4,    73,   183,   182,   181,    -1,   180,    -1,   178,    -1,
+     164,    73,   183,    74,   181,    -1,     5,    73,   183,   182,
+     181,    -1,    -1,    74,    -1,    76,    -1,    -1,   184,    -1,
+     185,    -1,   184,    59,   185,    -1,   226,    -1,    57,    -1,
+     205,    -1,    79,    -1,    78,    -1,    87,    -1,    86,    -1,
+     110,    -1,   196,    -1,   205,    -1,    47,    -1,    92,   187,
+     108,    -1,    47,    -1,    92,   191,   108,    -1,    -1,   191,
+      -1,     1,    -1,    -1,   373,   224,   238,   247,    63,   192,
+     255,    -1,   187,    -1,   109,    -1,   336,   334,   109,    -1,
+     336,   334,     1,   109,    -1,   336,     1,   109,    -1,    -1,
+      58,   195,   193,    -1,   348,    -1,   205,    59,   205,    -1,
+     205,    59,     1,    -1,   196,    59,   205,    -1,   196,    59,
+       1,    -1,   205,    -1,   196,    -1,   215,    -1,   119,   204,
+      -1,    80,   204,    -1,    70,   204,    -1,    85,   204,    -1,
+     186,   204,    -1,    67,   164,    -1,    13,   198,    -1,    13,
+      92,   226,   108,    -1,    29,   198,    -1,    29,    92,   226,
+     108,    -1,   217,   298,    -1,   217,   298,   202,    -1,   217,
+     201,   298,    -1,   217,   201,   298,   202,    -1,   217,    92,
+     200,   226,   199,    -1,   217,    92,   200,   226,   199,   202,
+      -1,   217,   201,    92,   200,   226,   199,    -1,   217,   201,
+      92,   200,   226,   199,   202,    -1,   218,   204,    -1,   218,
+      93,   111,   204,    -1,   218,    93,   187,   111,   204,    -1,
+      34,   204,    -1,    35,   204,    -1,   108,    -1,    -1,    92,
+     200,   197,   108,    -1,    58,   200,   197,   109,    -1,    92,
+     197,   108,    -1,    47,    -1,    92,   233,   108,    -1,    63,
+     255,    -1,    92,   226,   108,    -1,   203,    92,   226,   108,
+      -1,   198,    -1,   203,   198,    -1,   203,    58,   256,   268,
+     109,    -1,   204,    -1,   205,    84,   205,    -1,   205,    83,
+     205,    -1,   205,    78,   205,    -1,   205,    79,   205,    -1,
+     205,    80,   205,    -1,   205,    81,   205,    -1,   205,    82,
+     205,    -1,   205,    77,   205,    -1,   205,    76,   205,    -1,
+     205,    75,   205,    -1,   205,    73,   205,    -1,   205,    74,
+     205,    -1,   205,    72,   205,    -1,   205,    71,   205,    -1,
+     205,    70,   205,    -1,   205,    68,   205,    -1,   205,    69,
+     205,    -1,   205,    67,   205,    -1,   205,    66,   205,    -1,
+     205,    65,   378,    62,   205,    -1,   205,    63,   205,    -1,
+     205,    64,   205,    -1,    61,    -1,    61,   205,    -1,    85,
+     393,   164,    -1,    85,   393,   178,    -1,   208,    -1,   400,
+      -1,     3,    -1,    57,    -1,    56,    -1,    -1,     6,    73,
+     207,   183,   182,    -1,   400,    73,   207,   183,   182,    -1,
+      48,   164,    73,   183,   182,    -1,    48,     6,    73,   183,
+     182,    -1,    48,   400,    73,   183,   182,    -1,   206,    -1,
+       4,    -1,     5,    -1,   212,    -1,   248,   212,    -1,   206,
+      -1,    80,   211,    -1,    70,   211,    -1,    92,   211,   108,
+      -1,     3,    73,   183,   182,    -1,    56,    73,   184,   182,
+      -1,   313,    -1,   206,    -1,   213,    -1,    92,   211,   108,
+      -1,   206,    -1,    10,    -1,   219,    -1,   220,    -1,    92,
+     187,   108,    -1,    92,   211,   108,    -1,    92,     1,   108,
+      -1,    -1,    92,   216,   340,   108,    -1,   206,    92,   197,
+     108,    -1,   206,    47,    -1,   215,    92,   197,   108,    -1,
+     215,    47,    -1,   215,    93,   187,   111,    -1,   215,    87,
+      -1,   215,    86,    -1,    40,    -1,     9,    92,   197,   108,
+      -1,   317,    -1,    50,    73,   226,    74,    92,   187,   108,
+      -1,    51,    73,   226,    74,    92,   187,   108,    -1,    52,
+      73,   226,    74,    92,   187,   108,    -1,    53,    73,   226,
+      74,    92,   187,   108,    -1,    49,    92,   187,   108,    -1,
+      49,    92,   226,   108,    -1,   328,     3,    -1,   328,   208,
+      -1,   328,   400,    -1,   316,    -1,   316,    92,   197,   108,
+      -1,   316,    47,    -1,   222,   209,    -1,   222,   209,    92,
+     197,   108,    -1,   222,   209,    47,    -1,   222,   210,    -1,
+     222,   316,    -1,   222,   210,    92,   197,   108,    -1,   222,
+     210,    47,    -1,   222,   316,    92,   197,   108,    -1,   222,
+     316,    47,    -1,   222,    85,     8,    47,    -1,   222,     8,
+      54,    85,     8,    47,    -1,   222,     1,    -1,    39,    -1,
+     328,    39,    -1,    38,    -1,   328,   218,    -1,    42,    -1,
+      43,    -1,    11,    -1,   220,    11,    -1,    -1,   215,    91,
+      -1,   215,    94,    -1,   233,   235,    60,    -1,   227,   235,
+      60,    -1,   230,   236,    60,    -1,   227,    60,    -1,   230,
+      60,    -1,   119,   223,    -1,   305,    -1,   311,    -1,    47,
+      -1,   225,    47,    -1,   231,   332,    -1,   300,   332,    -1,
+     233,   332,    -1,   231,    -1,   300,    -1,   231,    -1,   228,
+      -1,   230,   233,    -1,   233,   229,    -1,   233,   232,   229,
+      -1,   230,   233,   229,    -1,   230,   233,   232,    -1,   230,
+     233,   232,   229,    -1,     7,    -1,   229,   234,    -1,   229,
+       7,    -1,   229,   248,    -1,   248,    -1,   300,    -1,     7,
+      -1,   230,     9,    -1,   230,     7,    -1,   230,   248,    -1,
+     248,    -1,   233,    -1,   300,   233,    -1,   233,   232,    -1,
+     300,   233,   232,    -1,   234,    -1,   232,   234,    -1,   262,
+      -1,     8,    -1,   308,    -1,    28,    92,   187,   108,    -1,
+      28,    92,   226,   108,    -1,    30,    92,   187,   108,    -1,
+      30,    92,   226,   108,    -1,     8,    -1,     9,    -1,   262,
+      -1,   243,    -1,   235,    59,   239,    -1,   244,    -1,   236,
+      59,   239,    -1,   245,    -1,   237,    59,   239,    -1,    -1,
+     120,    92,   220,   108,    -1,    -1,   224,   238,   247,    63,
+     240,   255,    -1,   224,   238,   247,    -1,    -1,   247,    63,
+     242,   255,    -1,   247,    -1,   224,   238,   241,    -1,   311,
+     238,   241,    -1,    -1,   311,   238,   246,   241,    -1,   150,
+     238,   247,    -1,    -1,   248,    -1,   249,    -1,   248,   249,
+      -1,    31,    92,    92,   250,   108,   108,    -1,   251,    -1,
+     250,    59,   251,    -1,    -1,   252,    -1,   252,    92,     3,
+     108,    -1,   252,    92,     3,    59,   197,   108,    -1,   252,
+      92,   197,   108,    -1,   164,    -1,     7,    -1,     8,    -1,
+       9,    -1,   164,    -1,   253,    59,   164,    -1,    -1,    63,
+     255,    -1,   205,    -1,    58,   109,    -1,    58,   256,   109,
+      -1,    58,   256,    59,   109,    -1,     1,    -1,   255,    -1,
+     256,    59,   255,    -1,    93,   205,   111,   255,    -1,   164,
+      62,   255,    -1,   256,    59,   164,    62,   255,    -1,    97,
+      -1,   257,   147,   146,   339,    -1,   257,   147,   363,    -1,
+     257,   147,     1,    -1,    -1,   259,   258,   148,    -1,   102,
+     205,   107,    -1,   102,     1,   107,    -1,    -1,   261,   260,
+      -1,   261,     1,    -1,    -1,    14,   164,    58,   263,   296,
+     269,   109,    -1,    14,   164,    58,   109,    -1,    -1,    14,
+      58,   264,   296,   269,   109,    -1,    14,    58,   109,    -1,
+      14,   164,    -1,    14,   326,    -1,    45,   321,    -1,    -1,
+      -1,    -1,   277,    58,   265,   283,   109,   247,   266,   261,
+     267,   259,    -1,   277,    -1,    -1,    59,    -1,    -1,    59,
+      -1,    36,    -1,   270,     7,    -1,   270,     8,    -1,   270,
+       9,    -1,   270,    36,    -1,   270,   248,    -1,   270,   164,
+      -1,   270,   166,    -1,   271,    58,    -1,   271,    62,    -1,
+     270,   319,   164,    -1,   270,   328,   319,   164,    -1,   270,
+     328,   164,    -1,   270,   179,    -1,   270,   319,   179,    -1,
+     271,    -1,    -1,   272,   275,   278,    -1,   273,   278,    -1,
+     270,    58,    -1,   276,    -1,   274,    -1,    -1,    62,   393,
+      -1,    62,   393,   279,    -1,   280,    -1,   279,    59,   393,
+     280,    -1,   281,    -1,   282,   393,   281,    -1,   321,    -1,
+     307,    -1,    30,    92,   187,   108,    -1,    30,    92,   226,
+     108,    -1,    37,   393,    -1,     7,   393,    -1,   282,    37,
+     393,    -1,   282,     7,   393,    -1,    -1,   285,    -1,   283,
+     284,   285,    -1,   283,   284,    -1,    37,    62,    -1,   286,
+      -1,   285,   286,    -1,   287,    60,    -1,   287,   109,    -1,
+     157,    62,    -1,   157,    96,    -1,   157,    25,    -1,   157,
+      58,    -1,    60,    -1,   119,   286,    -1,   135,   286,    -1,
+     135,   227,    60,    -1,   227,   288,    -1,   230,   289,    -1,
+     311,   238,   247,   254,    -1,   150,   238,   247,   254,    -1,
+      62,   205,    -1,     1,    -1,   230,   156,   238,   247,   254,
+      -1,   156,   238,   247,   254,    -1,   128,    -1,    -1,   290,
+      -1,   288,    59,   291,    -1,    -1,   293,    -1,   289,    59,
+     295,    -1,   292,    -1,   293,    -1,   294,    -1,   295,    -1,
+     305,   238,   247,   254,    -1,     4,    62,   205,   247,    -1,
+     311,   238,   247,   254,    -1,   150,   238,   247,   254,    -1,
+       3,    62,   205,   247,    -1,    62,   205,   247,    -1,   305,
+     238,   247,   254,    -1,     4,    62,   205,   247,    -1,   311,
+     238,   247,   254,    -1,     3,    62,   205,   247,    -1,    62,
+     205,   247,    -1,   297,    -1,   296,    59,   297,    -1,   164,
+      -1,   164,    63,   205,    -1,   373,   329,    -1,   373,    -1,
+      92,   200,   226,   199,    93,   187,   111,    -1,    -1,   299,
+       9,    -1,     9,    -1,   300,     9,    -1,    -1,   301,   187,
+      -1,   301,    92,   197,   108,    -1,   301,    92,   383,   108,
+      -1,   301,    47,    -1,   301,    92,     1,   108,    -1,   305,
+      -1,   248,   305,    -1,    80,   300,   304,    -1,    70,   300,
+     304,    -1,    80,   304,    -1,    70,   304,    -1,   327,   299,
+     304,    -1,   306,    -1,   306,   303,   299,   395,    -1,   306,
+      93,   302,   111,    -1,   306,    93,   111,    -1,    92,   304,
+     108,    -1,   319,   318,    -1,   318,    -1,   318,    -1,   328,
+     318,    -1,   307,    -1,   309,    -1,   328,   309,    -1,   319,
+     318,    -1,   311,    -1,   248,   311,    -1,    80,   300,   310,
+      -1,    70,   300,   310,    -1,    80,   310,    -1,    70,   310,
+      -1,   327,   299,   310,    -1,   214,    -1,    80,   300,   310,
+      -1,    70,   300,   310,    -1,    80,   312,    -1,    70,   312,
+      -1,   327,   299,   310,    -1,   313,    -1,   214,   303,   299,
+     395,    -1,    92,   312,   108,    -1,   214,    93,   302,   111,
+      -1,   214,    93,   111,    -1,   315,    -1,   319,   213,    -1,
+     319,   210,    -1,   319,   209,    -1,   319,   206,    -1,   319,
+     209,    -1,   315,    -1,   328,   315,    -1,   233,    92,   197,
+     108,    -1,   233,    92,   211,   108,    -1,   233,   225,    -1,
+       4,    -1,     5,    -1,   178,    -1,   320,    -1,   319,   320,
+      -1,   319,    48,   325,    54,    -1,     4,    54,    -1,     5,
+      54,    -1,    56,    54,    -1,   178,    54,    -1,   322,    -1,
+     328,   322,    -1,   323,   164,    -1,   323,   178,    -1,   323,
+     325,    -1,   323,    48,   325,    -1,   324,    -1,   323,   324,
+      -1,   323,   325,    54,    -1,   323,    48,   325,    54,    -1,
+       4,    54,    -1,     5,    54,    -1,   178,    54,    -1,    57,
+      54,    -1,     3,    54,    -1,    56,    54,    -1,   164,    73,
+     183,   182,    -1,   328,   318,    -1,   309,    -1,   328,   309,
+      -1,   319,    80,    -1,   328,   319,    80,    -1,    54,    -1,
+      80,   299,   329,    -1,    80,   299,    -1,    70,   299,   329,
+      -1,    70,   299,    -1,   327,   299,    -1,   327,   299,   329,
+      -1,   330,    -1,    93,   187,   111,    -1,   330,    93,   302,
+     111,    -1,   332,    -1,   248,   332,    -1,    80,   300,   331,
+      -1,    80,   331,    -1,    80,   300,    -1,    80,    -1,    70,
+     300,   331,    -1,    70,   331,    -1,    70,   300,    -1,    70,
+      -1,   327,   299,    -1,   327,   299,   331,    -1,   333,    -1,
+      92,   331,   108,    -1,    90,    -1,   333,    92,   383,   108,
+     299,   395,    -1,   333,    47,   299,   395,    -1,   333,    93,
+     302,   111,    -1,   333,    93,   111,    -1,    92,   384,   108,
+     299,   395,    -1,   203,   299,   395,    -1,   225,   299,   395,
+      -1,    93,   302,   111,    -1,    93,   111,    -1,   347,    -1,
+     335,    -1,   334,   347,    -1,   334,   335,    -1,     1,    60,
+      -1,    -1,   337,    -1,   338,    -1,   337,   338,    -1,    33,
+     253,    60,    -1,   340,    -1,     1,   340,    -1,    -1,    58,
+     341,   193,    -1,    -1,    -1,    15,   343,   189,   344,   345,
+      -1,   340,    -1,    -1,   346,   348,    -1,   340,    -1,   348,
+      -1,   223,    -1,   187,    60,    -1,    -1,   342,    16,   349,
+     345,    -1,   342,    -1,    -1,    -1,    17,   350,   189,   351,
+     194,    -1,    -1,    -1,    18,   352,   345,    17,   353,   188,
+      60,    -1,    -1,    -1,    -1,    -1,    19,   354,    92,   376,
+     355,   190,    60,   356,   378,   108,   357,   194,    -1,    -1,
+      -1,    20,   358,    92,   191,   108,   359,   345,    -1,    -1,
+      21,   205,    62,   360,   347,    -1,    -1,    21,   205,    12,
+     205,    62,   361,   347,    -1,    -1,    22,    62,   362,   347,
+      -1,    23,    60,    -1,    24,    60,    -1,    25,    60,    -1,
+      25,   187,    60,    -1,   120,   377,    92,   220,   108,    60,
+      -1,   120,   377,    92,   220,    62,   379,   108,    60,    -1,
+     120,   377,    92,   220,    62,   379,    62,   379,   108,    60,
+      -1,   120,   377,    92,   220,    62,   379,    62,   379,    62,
+     382,   108,    60,    -1,    26,    80,   187,    60,    -1,    26,
+     164,    60,    -1,   375,   347,    -1,   375,   109,    -1,    60,
+      -1,   366,    -1,   130,    -1,   129,    -1,   126,    -1,    -1,
+      -1,    96,   364,   146,   340,   365,   369,    -1,    -1,    -1,
+      96,   367,   340,   368,   369,    -1,   370,    -1,   369,   370,
+      -1,    -1,    -1,    95,   371,   374,   372,   340,    -1,   231,
+      -1,   300,    -1,    92,    12,   108,    -1,    92,   392,   108,
+      -1,     3,    62,    -1,    57,    62,    -1,     4,    62,    -1,
+       5,    62,    -1,   378,    60,    -1,   223,    -1,    58,   193,
+      -1,    -1,     9,    -1,    -1,   187,    -1,     1,    -1,    -1,
+     380,    -1,   381,    -1,   380,    59,   381,    -1,    11,    92,
+     187,   108,    -1,    11,    -1,   382,    59,    11,    -1,    -1,
+     384,    -1,   226,    -1,   388,    -1,   389,    12,    -1,   388,
+      12,    -1,   226,    12,    -1,    12,    -1,   388,    62,    -1,
+     226,    62,    -1,    -1,    63,   386,   387,    -1,   101,    -1,
+     255,    -1,   390,    -1,   392,   385,    -1,   389,   391,    -1,
+     389,   394,    -1,   389,   394,    63,   255,    -1,   388,    59,
+      -1,   226,    59,    -1,   228,   224,    -1,   231,   224,    -1,
+     233,   224,    -1,   228,   332,    -1,   228,    -1,   230,   311,
+      -1,   392,    -1,   392,   385,    -1,   390,    -1,   226,    -1,
+      -1,    -1,   311,    -1,    -1,    61,    92,   397,   108,    -1,
+      61,    47,    -1,   226,    -1,   396,    -1,   397,    59,   396,
+      -1,    -1,    80,   299,   398,    -1,    70,   299,   398,    -1,
+     327,   299,   398,    -1,    41,    -1,   399,    80,    -1,   399,
+      81,    -1,   399,    82,    -1,   399,    78,    -1,   399,    79,
+      -1,   399,    70,    -1,   399,    68,    -1,   399,    69,    -1,
+     399,    85,    -1,   399,    59,    -1,   399,    75,    -1,   399,
+      73,    -1,   399,    74,    -1,   399,    72,    -1,   399,    64,
+      -1,   399,    63,    -1,   399,    77,    -1,   399,    76,    -1,
+     399,    87,    -1,   399,    86,    -1,   399,    67,    -1,   399,
+      66,    -1,   399,   110,    -1,   399,    65,    62,    -1,   399,
+      71,    -1,   399,    94,    -1,   399,    84,    -1,   399,    47,
+      -1,   399,    93,   111,    -1,   399,    39,    -1,   399,    38,
+      -1,   399,    39,    93,   111,    -1,   399,    38,    93,   111,
+      -1,   399,   373,   398,    -1,   399,     1,    -1
 };
 
-static const short yyr2[] = {     0,
-     0,     1,     0,     2,     2,     1,     0,     0,     0,     1,
-     1,     0,     2,     2,     1,     1,     5,     4,     5,     4,
-     0,     6,     0,     5,     1,     2,     1,     2,     0,     6,
-     2,     3,     3,     3,     3,     4,     0,     5,     2,     3,
-     1,     1,     2,     2,     1,     2,     0,     5,     3,     1,
-     3,     1,     0,     2,     2,     3,     1,     3,     1,     3,
-     1,     3,     2,     2,     2,     1,     1,     5,     4,     2,
-     2,     3,     3,     2,     2,     3,     3,     2,     2,     2,
-     2,     2,     1,     1,     1,     0,     1,     2,     0,     1,
-     4,     3,     3,     0,     8,     5,     0,     9,     6,     0,
-     8,     5,     0,     9,     6,     2,     2,     1,     2,     1,
-     6,     4,     6,     4,     2,     1,     2,     2,     1,     2,
-     1,     2,     2,     4,     2,     3,     0,     0,     1,     3,
-     2,     3,     1,     4,     2,     4,     2,     4,     2,     1,
-     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
-     0,     6,     0,     6,     0,     5,     0,     5,     0,     7,
-     0,     7,     0,     6,     0,     6,     0,     0,     5,     5,
-     1,     1,     5,     5,     0,     1,     1,     0,     1,     1,
-     3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
-     1,     1,     3,     1,     3,     0,     1,     1,     0,     7,
-     1,     1,     3,     4,     3,     0,     3,     1,     3,     3,
-     3,     3,     1,     1,     1,     2,     2,     2,     2,     2,
-     2,     2,     4,     2,     4,     2,     3,     3,     4,     5,
-     6,     6,     7,     2,     4,     5,     2,     2,     1,     0,
-     4,     4,     3,     1,     3,     2,     3,     4,     1,     2,
-     5,     1,     3,     3,     3,     3,     3,     3,     3,     3,
-     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
-     3,     5,     3,     3,     1,     2,     3,     3,     1,     1,
-     1,     1,     1,     0,     5,     5,     5,     5,     5,     1,
-     1,     1,     1,     2,     1,     2,     2,     3,     4,     4,
-     1,     1,     1,     3,     1,     1,     1,     1,     3,     3,
-     3,     0,     4,     4,     2,     4,     2,     4,     2,     2,
-     1,     4,     1,     7,     7,     7,     7,     4,     4,     2,
-     2,     2,     1,     4,     2,     2,     5,     3,     2,     2,
-     5,     3,     5,     3,     4,     6,     2,     1,     2,     1,
-     2,     1,     1,     1,     2,     0,     2,     2,     3,     3,
-     3,     2,     2,     2,     1,     1,     1,     2,     2,     2,
-     2,     1,     1,     1,     1,     2,     2,     3,     3,     3,
-     4,     1,     2,     2,     2,     1,     1,     1,     2,     2,
-     2,     1,     1,     2,     2,     3,     1,     2,     1,     1,
-     1,     4,     4,     4,     4,     1,     1,     1,     1,     3,
-     1,     3,     1,     3,     0,     4,     0,     6,     3,     0,
-     4,     1,     3,     3,     0,     4,     3,     0,     1,     1,
-     2,     6,     1,     3,     0,     1,     4,     6,     4,     1,
-     1,     1,     1,     1,     3,     0,     2,     1,     2,     3,
-     4,     1,     1,     3,     4,     3,     5,     1,     4,     3,
-     3,     0,     3,     3,     3,     0,     2,     2,     0,     7,
-     4,     0,     6,     3,     2,     2,     2,     0,     0,     0,
-    10,     1,     0,     1,     0,     1,     1,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     3,     4,     3,     2,
-     3,     1,     0,     3,     2,     2,     1,     1,     0,     2,
-     3,     1,     4,     1,     3,     1,     1,     4,     4,     2,
-     2,     3,     3,     0,     1,     3,     2,     2,     1,     2,
-     2,     2,     2,     2,     2,     2,     1,     2,     2,     3,
-     2,     2,     4,     4,     2,     1,     5,     4,     1,     0,
-     1,     3,     0,     1,     3,     1,     1,     1,     1,     4,
-     4,     4,     4,     4,     3,     4,     4,     4,     4,     3,
-     1,     3,     1,     3,     2,     1,     7,     0,     2,     1,
-     2,     0,     2,     4,     4,     2,     4,     1,     2,     3,
-     3,     2,     2,     3,     1,     4,     4,     3,     3,     2,
-     1,     1,     2,     1,     1,     2,     2,     1,     2,     3,
-     3,     2,     2,     3,     1,     3,     3,     2,     2,     3,
-     1,     4,     3,     4,     3,     1,     2,     2,     2,     2,
-     2,     1,     2,     4,     4,     2,     1,     1,     1,     1,
-     2,     4,     2,     2,     2,     2,     1,     2,     2,     2,
-     2,     3,     1,     2,     3,     4,     2,     2,     2,     2,
-     2,     2,     4,     2,     1,     2,     2,     3,     1,     3,
-     2,     3,     2,     2,     3,     1,     3,     4,     1,     2,
-     3,     2,     2,     1,     3,     2,     2,     1,     2,     3,
-     1,     3,     1,     6,     4,     4,     3,     5,     3,     3,
-     3,     2,     1,     1,     2,     2,     2,     0,     1,     1,
-     2,     3,     1,     2,     0,     3,     0,     0,     5,     1,
-     0,     2,     1,     1,     1,     2,     0,     4,     1,     0,
-     0,     5,     0,     0,     7,     0,     0,     0,     0,    12,
-     0,     0,     7,     0,     5,     0,     7,     0,     4,     2,
-     2,     2,     3,     6,     8,    10,    12,     4,     3,     2,
-     2,     1,     1,     1,     1,     1,     0,     0,     6,     0,
-     0,     5,     1,     2,     0,     0,     5,     1,     1,     3,
-     3,     2,     2,     2,     2,     2,     1,     2,     0,     1,
-     0,     1,     1,     0,     1,     1,     3,     4,     1,     3,
-     0,     1,     1,     1,     2,     2,     2,     1,     2,     2,
-     0,     3,     1,     1,     1,     2,     2,     2,     4,     2,
-     2,     2,     2,     2,     2,     1,     2,     1,     2,     1,
-     1,     0,     0,     1,     0,     4,     2,     1,     1,     3,
-     0,     3,     3,     3,     1,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     3,     2,
-     2,     2,     2,     3,     2,     2,     4,     4,     3,     2
+/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
+static const yytype_uint16 yyrline[] =
+{
+       0,   340,   340,   342,   351,   351,   354,   359,   360,   364,
+     369,   373,   379,   383,   383,   390,   392,   394,   396,   399,
+     401,   404,   408,   407,   412,   411,   415,   416,   418,   419,
+     425,   424,   436,   438,   440,   445,   447,   449,   455,   454,
+     469,   475,   484,   485,   486,   488,   493,   495,   503,   502,
+     506,   512,   514,   519,   522,   525,   527,   532,   544,   546,
+     548,   550,   552,   554,   568,   570,   575,   577,   579,   581,
+     584,   587,   592,   593,   595,   597,   603,   604,   606,   608,
+     610,   611,   618,   619,   620,   624,   626,   630,   632,   633,
+     636,   638,   642,   644,   650,   656,   655,   659,   664,   663,
+     667,   672,   671,   675,   680,   679,   683,   690,   693,   696,
+     699,   702,   708,   710,   712,   714,   721,   732,   735,   740,
+     745,   748,   753,   759,   768,   770,   772,   777,   791,   811,
+     812,   814,   815,   819,   825,   831,   833,   835,   837,   839,
+     842,   848,   849,   850,   851,   852,   856,   857,   858,   862,
+     863,   864,   869,   868,   873,   872,   877,   876,   880,   879,
+     883,   882,   888,   886,   892,   891,   895,   894,   900,   903,
+     910,   913,   916,   920,   921,   926,   932,   941,   942,   952,
+     953,   957,   959,   964,   966,   968,   972,   974,   976,   978,
+     980,   985,   987,   991,   995,  1000,  1004,  1010,  1011,  1012,
+    1018,  1017,  1042,  1046,  1047,  1048,  1049,  1054,  1053,  1057,
+    1062,  1065,  1068,  1070,  1075,  1077,  1081,  1084,  1087,  1089,
+    1091,  1093,  1096,  1100,  1102,  1105,  1107,  1113,  1116,  1119,
+    1122,  1134,  1139,  1143,  1147,  1152,  1154,  1158,  1162,  1164,
+    1174,  1178,  1181,  1183,  1189,  1191,  1193,  1201,  1215,  1219,
+    1226,  1227,  1229,  1243,  1245,  1247,  1249,  1251,  1253,  1255,
+    1257,  1259,  1261,  1263,  1265,  1267,  1269,  1271,  1273,  1275,
+    1277,  1279,  1281,  1283,  1285,  1289,  1291,  1293,  1311,  1313,
+    1315,  1316,  1317,  1318,  1319,  1323,  1335,  1337,  1342,  1344,
+    1346,  1352,  1353,  1354,  1358,  1359,  1368,  1369,  1371,  1373,
+    1378,  1380,  1385,  1388,  1389,  1390,  1395,  1402,  1403,  1404,
+    1418,  1420,  1423,  1426,  1425,  1441,  1443,  1445,  1447,  1449,
+    1451,  1453,  1456,  1458,  1475,  1476,  1480,  1484,  1488,  1492,
+    1494,  1498,  1500,  1502,  1510,  1512,  1514,  1516,  1520,  1522,
+    1524,  1526,  1531,  1533,  1535,  1537,  1540,  1542,  1544,  1589,
+    1591,  1596,  1598,  1603,  1605,  1611,  1612,  1618,  1630,  1632,
+    1640,  1646,  1651,  1653,  1658,  1660,  1668,  1669,  1674,  1677,
+    1684,  1687,  1690,  1694,  1697,  1708,  1709,  1713,  1716,  1719,
+    1722,  1725,  1728,  1735,  1740,  1742,  1747,  1749,  1768,  1770,
+    1772,  1775,  1781,  1783,  1794,  1797,  1800,  1803,  1809,  1811,
+    1820,  1821,  1823,  1825,  1828,  1831,  1846,  1866,  1868,  1870,
+    1874,  1875,  1880,  1881,  1886,  1887,  1893,  1894,  1900,  1899,
+    1905,  1919,  1918,  1927,  1934,  1938,  1944,  1943,  1949,  1959,
+    1960,  1965,  1967,  1972,  1977,  1979,  1985,  1986,  1988,  1990,
+    1992,  2000,  2001,  2002,  2003,  2008,  2010,  2015,  2017,  2024,
+    2025,  2028,  2031,  2034,  2041,  2043,  2046,  2048,  2050,  2055,
+    2061,  2068,  2075,  2079,  2081,  2087,  2089,  2093,  2094,  2096,
+    2102,  2101,  2112,  2117,  2116,  2127,  2131,  2134,  2137,  2144,
+    2146,  2157,  2143,  2166,  2188,  2190,  2193,  2195,  2201,  2202,
+    2204,  2206,  2208,  2210,  2215,  2223,  2225,  2227,  2232,  2238,
+    2244,  2250,  2256,  2267,  2273,  2272,  2283,  2312,  2322,  2327,
+    2331,  2333,  2335,  2340,  2341,  2346,  2350,  2357,  2359,  2360,
+    2381,  2405,  2406,  2410,  2421,  2435,  2436,  2437,  2438,  2442,
+    2457,  2461,  2468,  2469,  2474,  2476,  2478,  2480,  2482,  2484,
+    2487,  2497,  2508,  2529,  2535,  2538,  2541,  2543,  2554,  2559,
+    2562,  2569,  2570,  2577,  2589,  2590,  2597,  2608,  2609,  2613,
+    2614,  2618,  2624,  2633,  2639,  2645,  2651,  2660,  2663,  2669,
+    2672,  2675,  2685,  2686,  2691,  2693,  2699,  2702,  2708,  2720,
+    2722,  2727,  2730,  2740,  2744,  2750,  2752,  2754,  2756,  2763,
+    2764,  2774,  2776,  2778,  2780,  2782,  2786,  2790,  2792,  2794,
+    2796,  2798,  2802,  2806,  2816,  2827,  2828,  2829,  2834,  2842,
+    2843,  2852,  2854,  2856,  2858,  2860,  2864,  2868,  2870,  2872,
+    2874,  2876,  2880,  2884,  2886,  2888,  2890,  2892,  2894,  2902,
+    2905,  2911,  2914,  2920,  2921,  2926,  2928,  2930,  2934,  2935,
+    2936,  2940,  2941,  2943,  2950,  2960,  2966,  2972,  2987,  2988,
+    2993,  3006,  3008,  3010,  3015,  3020,  3033,  3035,  3040,  3052,
+    3058,  3060,  3061,  3062,  3071,  3076,  3084,  3085,  3090,  3092,
+    3099,  3105,  3107,  3109,  3111,  3113,  3117,  3121,  3126,  3128,
+    3133,  3134,  3144,  3146,  3148,  3150,  3152,  3154,  3156,  3158,
+    3160,  3164,  3168,  3173,  3176,  3177,  3179,  3181,  3183,  3185,
+    3187,  3189,  3191,  3193,  3202,  3203,  3204,  3205,  3209,  3214,
+    3216,  3222,  3223,  3227,  3241,  3243,  3248,  3247,  3255,  3260,
+    3254,  3266,  3267,  3267,  3273,  3275,  3279,  3281,  3284,  3283,
+    3290,  3293,  3298,  3292,  3302,  3304,  3301,  3311,  3313,  3315,
+    3317,  3310,  3321,  3323,  3320,  3327,  3326,  3330,  3329,  3333,
+    3332,  3335,  3337,  3339,  3341,  3343,  3349,  3355,  3358,  3361,
+    3367,  3369,  3371,  3375,  3377,  3378,  3379,  3381,  3386,  3392,
+    3385,  3405,  3407,  3404,  3413,  3414,  3419,  3421,  3418,  3427,
+    3428,  3432,  3448,  3455,  3462,  3464,  3466,  3471,  3473,  3474,
+    3484,  3486,  3492,  3493,  3494,  3502,  3503,  3507,  3508,  3513,
+    3518,  3520,  3532,  3535,  3536,  3544,  3546,  3549,  3551,  3554,
+    3556,  3566,  3582,  3581,  3588,  3589,  3594,  3597,  3600,  3603,
+    3605,  3610,  3611,  3621,  3625,  3628,  3632,  3636,  3640,  3647,
+    3650,  3656,  3657,  3661,  3666,  3671,  3683,  3685,  3687,  3692,
+    3697,  3698,  3706,  3708,  3710,  3712,  3719,  3724,  3726,  3728,
+    3730,  3732,  3734,  3736,  3738,  3740,  3742,  3744,  3746,  3748,
+    3750,  3752,  3754,  3756,  3758,  3760,  3762,  3764,  3766,  3768,
+    3770,  3772,  3774,  3776,  3778,  3780,  3782,  3784,  3786,  3788,
+    3791,  3793
 };
+#endif
 
-static const short yydefact[] = {     3,
-    12,    12,     5,     0,     4,     0,   281,   637,   638,     0,
-   388,   400,   580,     0,    11,     0,     0,     0,    10,   487,
-   845,     0,     0,     0,   167,   669,   282,   283,    83,     0,
-     0,   832,     0,    45,     0,     0,    13,    25,     0,    27,
-     8,     0,    16,    15,    89,   110,    86,     0,   639,   171,
-   302,   279,   303,   615,     0,   375,     0,   374,   393,     0,
-   413,   392,   430,   399,     0,   502,   503,   509,   508,   507,
-   482,   387,   604,   401,   605,   108,   301,   626,   602,     0,
-   640,   578,     0,     0,   280,    81,    82,   178,   643,   178,
-   644,   178,   284,   167,   140,   141,   142,   143,   144,   472,
-   475,     0,   665,     0,   476,     0,     0,     0,     0,   141,
-   142,   143,   144,    23,     0,     0,     0,     0,     0,     0,
-     0,   477,   647,     0,   653,     0,     0,     0,    37,     0,
-     0,    31,     0,     0,    47,     0,   178,   645,     0,     0,
-     0,   613,   608,     0,     0,     0,   612,     0,     0,     0,
-     0,   302,     0,   293,   582,     0,     0,   301,   578,    28,
-     0,    26,     3,    46,     0,    64,   388,     0,     0,     8,
-    67,    63,    66,    89,     0,     0,     0,   399,    90,    14,
-     0,   428,     0,     0,   446,    87,    79,   646,   582,     0,
-   578,    80,     0,     0,     0,   106,     0,   409,   365,   595,
-   366,   601,     0,   578,   390,   389,    78,   109,   376,     0,
-   411,   391,   107,   382,   406,   407,   377,   395,   397,   386,
-   408,     0,    75,   431,   488,   489,   490,   491,   506,   149,
-   148,   150,   493,   494,   172,   500,   492,     0,     0,   495,
-   496,   509,   832,   505,   478,   581,   394,     0,   425,   638,
-     0,   667,   171,   630,   631,   627,   607,   641,     0,   606,
-   603,     0,   880,   876,   875,   873,   855,   860,   861,     0,
-   867,   866,   852,   853,   851,   870,   859,   856,   857,   858,
-   862,   863,   849,   850,   846,   847,   848,   872,   864,   865,
-   854,   871,     0,   868,   778,   393,   779,   841,   284,   281,
-   580,   306,   354,     0,     0,     0,     0,   350,   348,   321,
-   352,   353,     0,     0,     0,     0,     0,   282,   283,   275,
-     0,     0,   186,   185,     0,   187,   188,     0,     0,   189,
-     0,     0,   179,   180,     0,   249,     0,   252,   184,   305,
-   215,     0,     0,   307,   308,     0,   182,   372,   393,   373,
-   632,   333,   323,     0,     0,     0,     0,   178,     0,   474,
-     0,   469,     0,   666,   664,     0,   190,   191,     0,     0,
-     0,   435,     3,    21,    29,   661,   657,   658,   660,   662,
-   659,   140,   141,   142,     0,   143,   144,   649,   650,   654,
-   651,   648,     0,   291,   292,   290,   629,   628,    33,    32,
-    49,     0,   157,     0,     0,   393,   155,     0,     0,   609,
-   611,     0,   610,   141,   142,   277,   278,   297,     0,   619,
-   296,     0,   618,     0,   304,   282,   283,     0,     0,     0,
-   295,   294,   623,     0,     0,    12,     0,   167,     9,     9,
-    70,     0,    65,     0,     0,    71,    74,     0,   427,   429,
-   122,    93,   127,   767,     0,    85,    84,    92,   125,     0,
-     0,   123,    88,   625,     0,     0,   586,     0,   835,     0,
-     0,   593,   588,     0,   592,     0,     0,     0,     0,     0,
-   578,   428,     0,    77,   582,   578,   600,     0,   379,   380,
-     0,    76,   428,   384,   383,   385,   378,   398,   415,   414,
-   178,   497,   501,   499,     0,   504,   510,     0,   396,   428,
-   578,    94,     0,     0,     0,     0,   578,   100,   579,   614,
-   638,   668,   171,     0,     0,   869,   874,   395,   578,   578,
-     0,   578,   879,   178,     0,     0,     0,   222,     0,     0,
-   224,   237,   238,     0,     0,     0,     0,     0,   276,   221,
-   218,   217,   219,     0,     0,     0,     0,     0,   305,     0,
-     0,     0,   216,   176,   177,   299,     0,   220,     0,     0,
-   250,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,   315,     0,   317,   319,   320,   358,   357,
-     0,     0,   240,   240,     0,   226,   576,     0,   234,   355,
-   347,     0,     0,   832,   336,   339,   340,     0,     0,   367,
-   688,   684,   693,     0,   582,   578,   578,   578,   369,   691,
-     0,   636,   371,     0,     0,   370,   335,     0,   330,   349,
-   331,   351,   633,     0,   332,   175,   175,     0,   165,     0,
-   393,   163,   573,   485,   571,   471,     0,     0,   402,     0,
-     0,   403,   404,   405,   441,   442,   443,   440,     0,   433,
-   436,     0,     3,     0,   652,   178,   655,     0,    41,    42,
-     0,    53,     0,     0,    57,    61,    50,   831,   826,     0,
-   372,   393,    53,   373,   830,    59,   168,   153,   151,   168,
-   175,   300,   617,   616,   304,     0,   620,     0,    18,    20,
-    89,     9,     9,    73,    72,     0,   128,   356,     0,   715,
-    91,   713,   452,     0,   448,   447,   214,     0,   213,   583,
-   624,     0,   808,     0,   803,   393,     0,   802,   804,   833,
-   815,     0,     0,   622,   589,   591,   590,     0,     0,     0,
-     0,     0,     0,   578,   599,     0,   423,   422,   410,   598,
-     0,   835,   594,   381,   412,   424,   428,     0,   498,   637,
-   638,   832,     0,   832,   639,   511,   512,   514,   832,   517,
-   516,     0,   546,   638,     0,   537,     0,     0,   549,     0,
-   121,   116,     0,   171,   550,   553,     0,     0,   529,     0,
-   119,   426,   835,   801,   178,   178,   642,   178,   835,   801,
-   578,    97,   578,   103,   878,   877,   841,   841,   841,     0,
-     0,     0,     0,   636,     0,     0,     0,     0,   393,     0,
-     0,     0,   311,     0,   309,   310,     0,   247,   181,   281,
-   637,   638,   282,   283,     0,     0,   453,   483,     0,   274,
-   273,   793,   792,     0,   271,   270,   268,   269,   267,   266,
-   265,   262,   263,   264,   260,   261,   255,   256,   257,   258,
-   259,   253,   254,     0,     0,     0,     0,     0,   240,   228,
-   244,     0,     0,   227,   578,   578,     0,   578,   575,   676,
-     0,     0,     0,     0,     0,   338,     0,   342,     0,   344,
-     0,     0,   687,   686,   679,   683,   682,   831,   392,     0,
-     0,   702,     0,     0,   835,   368,   835,   689,   578,   801,
-   582,   688,   684,     0,     0,   578,     0,   392,     0,     0,
-     0,     0,   170,   174,   285,   168,   161,   159,   168,     0,
-   486,     0,   485,   212,   211,   210,   209,   435,     0,     0,
-    24,     0,     0,   656,     0,    38,    44,    43,    55,    52,
-    53,     0,    48,     0,     0,   688,   684,     0,   822,   578,
-   825,   827,     0,   823,   824,    54,   493,     0,   158,   168,
-   168,   156,   169,   298,    17,    19,    69,    89,   416,   145,
-   133,   146,   147,     0,   126,   129,     0,     0,     0,     0,
-   714,   708,   449,     0,   124,   587,   584,   807,   821,   810,
-     0,   585,   806,   820,   809,   805,   834,   817,   828,   818,
-   811,   816,   837,     0,     0,     0,     0,   420,   597,   596,
-   419,   175,   521,     0,   520,   832,   832,   832,     0,   578,
-   801,   545,   538,   550,   539,   428,   428,   535,   536,   533,
-   534,   578,   801,   281,   637,     0,   415,   117,   541,   551,
-   556,   557,   415,   415,     0,     0,   415,   115,   542,   554,
-   415,     0,   428,     0,   530,   531,   532,   428,    96,     0,
-     0,     0,     0,   102,     0,   835,   801,   835,   801,   843,
-   842,   844,   286,   322,   223,   225,   328,   329,     0,     0,
-     0,     0,   310,   313,     0,     0,     0,     0,   248,     0,
-   314,   316,   318,     0,     0,     0,     0,   229,   246,     0,
-     0,   673,   671,     0,   674,   582,   235,     0,     0,   178,
-   345,     0,     0,     0,   680,   685,   681,   692,   578,   701,
-   699,   700,   690,   835,     0,   697,     0,     0,   634,   635,
-   688,   684,     0,     0,   334,   166,   168,   168,   164,   574,
-   572,   473,     0,   434,   432,   281,     0,    22,    30,   663,
-    56,    51,    58,    62,     0,   687,   683,   688,   684,     0,
-   392,   602,     0,   578,   689,    60,   154,   152,    68,     0,
-   131,     0,   135,     0,   137,     0,   139,     0,   768,     0,
-   202,   716,     0,   709,   710,     0,   450,   688,   684,     0,
-   305,     0,   632,   829,     0,     0,   838,   839,     0,     0,
-     0,     0,     0,     0,   417,   173,     0,     0,     0,   523,
-   522,   515,   835,     0,   540,   446,   446,   835,     0,     0,
-     0,   428,   428,     0,   428,   428,     0,   428,     0,   528,
-   479,     0,   446,   578,   288,   287,   289,   578,    99,     0,
-   105,     0,     0,     0,     0,     0,     0,   456,     0,   454,
-   251,   272,   242,   241,   239,   230,     0,   243,   245,   672,
-   670,   677,   675,     0,   236,     0,     0,   337,   341,   343,
-   835,   695,   578,   696,   162,   160,   470,     0,   437,   439,
-     0,   687,   683,   688,   684,     0,   578,   607,   689,   132,
-   130,     0,     0,     0,     0,   444,     0,     0,   281,   637,
-   638,   717,   730,   733,   736,   741,     0,     0,     0,     0,
-     0,     0,     0,     0,   282,   762,   770,     0,   789,   766,
-   765,   764,     0,   725,     0,     0,   393,     0,   704,   723,
-   729,   703,   724,   763,     0,   711,   451,     0,   635,   819,
-   813,   814,   812,     0,   836,   421,     0,   518,   519,   513,
-   112,   578,   544,   548,   114,   578,   428,   428,   565,   446,
-   281,   637,     0,   552,   558,   559,   415,   415,   446,   446,
-     0,   446,   555,   466,   543,   835,   835,   578,   578,     0,
-     0,     0,     0,   455,     0,     0,   231,   232,   678,   346,
-   287,   698,   835,     0,   687,   683,     0,   689,   134,   136,
-   138,   775,   769,   773,     0,   712,   707,   205,   782,   784,
-   785,     0,     0,   721,     0,     0,     0,   748,   750,   751,
-   752,     0,     0,     0,     0,     0,     0,     0,   783,     0,
-   364,   790,     0,   726,   362,   415,     0,   363,     0,   415,
-     0,     0,     0,   203,   706,   705,   727,   761,   760,   310,
-   840,   418,   835,   835,   564,   561,   563,     0,     0,   428,
-   428,   428,   560,   562,   547,     0,    95,   101,   835,   835,
-   324,   325,   326,   327,   457,     0,   233,   694,   438,   688,
-   684,     0,     0,     0,   774,   445,   194,     0,   718,   731,
-   720,     0,     0,     0,     0,     0,   744,     0,   753,     0,
-   759,    39,   144,    34,   144,     0,    35,   771,     0,   360,
-   361,     0,     0,     0,   359,   204,   721,   111,   113,   428,
-   428,   570,   446,   446,   468,     0,   467,   462,    98,   104,
-   577,   392,     0,   776,   201,     0,   393,     0,   721,     0,
-   734,   722,   708,   787,   737,     0,     0,     0,     0,   749,
-   758,    40,    36,     0,     0,   728,   569,   567,   566,   568,
-     0,     0,   481,     0,     0,     0,   195,   415,   719,   206,
-   732,   208,     0,   788,     0,   786,   742,   746,   745,   772,
-   794,     0,   465,   464,   458,    86,    89,   780,   781,   777,
-   428,   708,   192,     0,     0,   198,     0,   197,   721,     0,
-     0,     0,   795,   796,   754,     0,   463,     0,   207,     0,
-   735,   738,   743,   747,     0,   794,     0,     0,   461,     0,
-   460,   199,   193,     0,     0,     0,   755,   797,   459,     0,
-     0,   798,     0,     0,   200,   739,   799,     0,   756,     0,
-     0,     0,   740,   800,   757,     0,     0,     0
+#if YYDEBUG || YYERROR_VERBOSE || 0
+/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
+   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
+static const char *const yytname[] =
+{
+  "$end", "error", "$undefined", "IDENTIFIER", "TYPENAME_ID", "SELFNAME",
+  "PFUNCNAME", "SCSPEC", "TYPESPEC", "CV_QUALIFIER", "CONSTANT", "STRING",
+  "ELLIPSIS", "SIZEOF", "ENUM", "IF", "ELSE", "WHILE", "DO", "FOR",
+  "SWITCH", "CASE", "DEFAULT", "BREAK", "CONTINUE", "RETURN_KEYWORD",
+  "GOTO", "ASM_KEYWORD", "TYPEOF", "ALIGNOF", "SIGOF", "ATTRIBUTE",
+  "EXTENSION", "LABEL", "REALPART", "IMAGPART", "AGGR", "VISSPEC",
+  "DELETE", "NEW", "THIS", "OPERATOR", "CXX_TRUE", "CXX_FALSE",
+  "NAMESPACE", "TYPENAME_KEYWORD", "USING", "LEFT_RIGHT", "TEMPLATE",
+  "TYPEID", "DYNAMIC_CAST", "STATIC_CAST", "REINTERPRET_CAST",
+  "CONST_CAST", "SCOPE", "EMPTY", "NSNAME", "PTYPENAME", "'{'", "','",
+  "';'", "THROW", "':'", "'='", "ASSIGN", "'?'", "OROR", "ANDAND", "'|'",
+  "'^'", "'&'", "MIN_MAX", "EQCOMPARE", "'<'", "'>'", "ARITHCOMPARE",
+  "RSHIFT", "LSHIFT", "'+'", "'-'", "'*'", "'/'", "'%'", "DOT_STAR",
+  "POINTSAT_STAR", "'~'", "MINUSMINUS", "PLUSPLUS", "UNARY", "HYPERUNARY",
+  "PAREN_STAR_PAREN", "'.'", "'('", "'['", "POINTSAT", "CATCH", "TRY",
+  "PRE_PARSED_FUNCTION_DECL", "EXTERN_LANG_STRING", "ALL",
+  "PRE_PARSED_CLASS_DECL", "DEFARG", "DEFARG_MARKER", "TYPENAME_DEFN",
+  "IDENTIFIER_DEFN", "PTYPENAME_DEFN", "END_OF_LINE", "END_OF_SAVED_INPUT",
+  "')'", "'}'", "'!'", "']'", "$accept", "program", "extdefs", "@1",
+  "extdefs_opt", ".hush_warning", ".warning_ok", "extension",
+  "asm_keyword", "lang_extdef", "$@2", "extdef", "$@3", "$@4",
+  "namespace_alias", "$@5", "using_decl", "namespace_using_decl",
+  "using_directive", "$@6", "namespace_qualifier", "any_id",
+  "extern_lang_string", "template_header", "$@7", "template_parm_list",
+  "maybe_identifier", "template_type_parm", "template_template_parm",
+  "template_parm", "template_def", "template_extdef", "template_datadef",
+  "datadef", "ctor_initializer_opt", "maybe_return_init",
+  "eat_saved_input", "fndef", "constructor_declarator", "@8", "@9", "@10",
+  "@11", "fn.def1", "component_constructor_declarator", "fn.def2",
+  "return_id", "return_init", "base_init", ".set_base_init",
+  "member_init_list", "member_init", "identifier", "notype_identifier",
+  "identifier_defn", "explicit_instantiation", "$@12", "$@13", "$@14",
+  "$@15", "$@16", "$@17", "$@18", "$@19", "begin_explicit_instantiation",
+  "end_explicit_instantiation", "template_type", "apparent_template_type",
+  "self_template_type", ".finish_template_type", "template_close_bracket",
+  "template_arg_list_opt", "template_arg_list", "template_arg", "unop",
+  "expr", "paren_expr_or_null", "paren_cond_or_null", "xcond", "condition",
+  "@20", "compstmtend", "already_scoped_stmt", "@21",
+  "nontrivial_exprlist", "nonnull_exprlist", "unary_expr",
+  ".finish_new_placement", ".begin_new_placement", "new_placement",
+  "new_initializer", "regcast_or_absdcl", "cast_expr", "expr_no_commas",
+  "notype_unqualified_id", "do_id", "template_id", "object_template_id",
+  "unqualified_id", "expr_or_declarator_intern", "expr_or_declarator",
+  "notype_template_declarator", "direct_notype_declarator", "primary",
+  "@22", "new", "delete", "boolean.literal", "string", "nodecls", "object",
+  "decl", "declarator", "fcast_or_absdcl", "type_id", "typed_declspecs",
+  "typed_declspecs1", "reserved_declspecs", "declmods", "typed_typespecs",
+  "reserved_typespecquals", "typespec", "typespecqual_reserved",
+  "initdecls", "notype_initdecls", "nomods_initdecls", "maybeasm",
+  "initdcl", "@23", "initdcl0_innards", "@24", "initdcl0",
+  "notype_initdcl0", "nomods_initdcl0", "$@25", "maybe_attribute",
+  "attributes", "attribute", "attribute_list", "attrib", "any_word",
+  "identifiers_or_typenames", "maybe_init", "init", "initlist",
+  "fn.defpen", "pending_inline", "pending_inlines", "defarg_again",
+  "pending_defargs", "structsp", "@26", "@27", "$@28", "@29", "$@30",
+  "maybecomma", "maybecomma_warn", "aggr",
+  "named_class_head_sans_basetype", "named_class_head_sans_basetype_defn",
+  "named_complex_class_head_sans_basetype", "named_class_head", "@31",
+  "unnamed_class_head", "class_head", "maybe_base_class_list",
+  "base_class_list", "base_class", "base_class.1",
+  "base_class_access_list", "opt.component_decl_list", "access_specifier",
+  "component_decl_list", "component_decl", "component_decl_1",
+  "components", "notype_components", "component_declarator0",
+  "component_declarator", "after_type_component_declarator0",
+  "notype_component_declarator0", "after_type_component_declarator",
+  "notype_component_declarator", "enumlist", "enumerator", "new_type_id",
+  "cv_qualifiers", "nonempty_cv_qualifiers", "suspend_mom",
+  "nonmomentary_expr", "maybe_parmlist", "after_type_declarator_intern",
+  "after_type_declarator", "direct_after_type_declarator",
+  "nonnested_type", "complete_type_name", "nested_type",
+  "notype_declarator_intern", "notype_declarator",
+  "complex_notype_declarator", "complex_direct_notype_declarator",
+  "qualified_id", "notype_qualified_id", "overqualified_id",
+  "functional_cast", "type_name", "nested_name_specifier",
+  "nested_name_specifier_1", "typename_sub", "typename_sub0",
+  "typename_sub1", "typename_sub2", "explicit_template_type",
+  "complex_type_name", "ptr_to_mem", "global_scope", "new_declarator",
+  "direct_new_declarator", "absdcl_intern", "absdcl",
+  "direct_abstract_declarator", "stmts", "errstmt", "maybe_label_decls",
+  "label_decls", "label_decl", "compstmt_or_error", "compstmt", "@32",
+  "simple_if", "@33", "$@34", "implicitly_scoped_stmt", "@35", "stmt",
+  "simple_stmt", "$@36", "@37", "$@38", "@39", "$@40", "@41", "$@42",
+  "$@43", "$@44", "$@45", "@46", "$@47", "$@48", "$@49",
+  "function_try_block", "$@50", "$@51", "try_block", "@52", "$@53",
+  "handler_seq", "handler", "@54", "$@55", "type_specifier_seq",
+  "handler_args", "label_colon", "for.init.statement",
+  "maybe_cv_qualifier", "xexpr", "asm_operands", "nonnull_asm_operands",
+  "asm_operand", "asm_clobbers", "parmlist", "complex_parmlist", "defarg",
+  "$@56", "defarg1", "parms", "parms_comma", "named_parm", "full_parm",
+  "parm", "see_typename", "bad_parm", "exception_specification_opt",
+  "ansi_raise_identifier", "ansi_raise_identifiers",
+  "conversion_declarator", "operator", "operator_name", YY_NULL
 };
+#endif
 
-static const short yydefgoto[] = {  1666,
-   436,     2,   437,   165,   710,   331,   181,     3,     4,    37,
-   673,   373,  1340,   674,   789,  1341,  1342,   393,  1447,   678,
-    41,   790,   402,   684,   959,   685,   686,   687,    43,   172,
-   173,    44,   455,   184,   180,    45,    46,   804,  1087,   810,
-  1089,    47,   792,   793,   185,   186,   456,   717,   995,   996,
-   653,   997,   234,    48,   981,   980,   700,   697,  1158,  1157,
-   939,   936,   136,   979,    49,   236,    50,   933,   566,   332,
-   333,   334,   335,  1343,  1615,  1509,  1617,  1556,  1650,  1202,
-  1591,  1612,   367,   925,   336,  1276,   877,   605,   884,   337,
-   338,   368,   340,   358,    52,   255,   679,   418,   154,    53,
-    54,   341,   561,   342,   343,   344,   345,   457,   346,  1344,
-   499,   627,   347,  1345,    56,   217,   690,   348,   218,   539,
-   219,   197,   210,    60,   482,   500,  1367,   757,  1224,   198,
-   211,    61,   510,   758,    62,    63,   669,   670,   671,  1317,
-   462,   847,   848,  1606,  1607,  1583,  1547,  1486,    64,   657,
-   361,   508,  1394,  1548,  1108,   942,    65,    66,    67,    68,
-    69,   242,    70,    71,   244,   776,   777,   778,   779,   797,
-  1074,   798,   799,   800,  1059,  1069,  1060,  1384,  1061,  1062,
-  1385,  1386,   654,   655,   606,   915,   350,   465,   466,   191,
-   480,   473,   200,    73,    74,    75,   142,   143,   157,    77,
-   132,   351,   352,   353,    79,   354,    81,   781,   123,   124,
-   125,   515,   105,    82,   355,   889,   890,   910,   905,   630,
-  1348,  1349,  1203,  1204,  1205,   721,  1350,  1002,  1351,  1432,
-  1559,  1512,  1513,  1352,  1353,  1537,  1433,  1560,  1434,  1593,
-  1435,  1595,  1644,  1660,  1436,  1619,  1569,  1620,  1518,   458,
-   718,  1315,  1354,  1450,  1574,  1423,  1424,  1504,  1586,  1558,
-  1554,  1355,  1565,  1453,   854,  1622,  1623,  1624,  1658,   737,
-   911,  1022,  1216,  1363,   739,   740,   741,  1018,   742,   148,
-  1020,   744,  1218,  1219,   533,    84,    85
+# ifdef YYPRINT
+/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
+   token YYLEX-NUM.  */
+static const yytype_uint16 yytoknum[] =
+{
+       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
+     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
+     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
+     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
+     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
+     305,   306,   307,   308,   309,   310,   311,   312,   123,    44,
+      59,   313,    58,    61,   314,    63,   315,   316,   124,    94,
+      38,   317,   318,    60,    62,   319,   320,   321,    43,    45,
+      42,    47,    37,   322,   323,   126,   324,   325,   326,   327,
+     328,    46,    40,    91,   329,   330,   331,   332,   333,   334,
+     335,   336,   337,   338,   339,   340,   341,   342,    41,   125,
+      33,    93
 };
+# endif
 
-static const short yypact[] = {   108,
-   127,-32768,-32768,  6638,-32768,    55,    57,    72,   240,    62,
-   142,-32768,-32768,   625,-32768,   150,   208,   211,-32768,-32768,
--32768,   756,   883,  1366,   130,-32768,   188,   338,-32768,  2656,
-  2656,-32768,   422,-32768,  6638,   223,-32768,-32768,   279,-32768,
-    98,  4351,-32768,-32768,   268,   823,   365,   293,   423,-32768,
--32768,-32768,-32768,   123,  3083,-32768,  6545,-32768,  2122,   781,
--32768,   465,-32768,-32768,  2046,   404,-32768,   436,-32768,-32768,
-   474,  4127,-32768,-32768,-32768,  1037,-32768,-32768,-32768,  2040,
--32768,-32768,   431,  3562,   460,-32768,-32768, 10933,-32768, 10933,
--32768, 10933,-32768,-32768,-32768,    72,   240,   188,   503,   458,
-   523,   423,-32768,   621,-32768,   431, 11019, 11019,   491,-32768,
--32768,-32768,-32768,-32768,   330,   541,   579,   772,   794,   552,
-   558,-32768,-32768,   897,-32768,   618,    72,   240,-32768,   188,
-   503,-32768,  1941,  1787,   556, 12117, 10933,-32768, 10933,  6884,
-  4421,-32768,-32768,  2343,   606,  4421,-32768,   764,  4782,  4782,
-   422,   508,   551,-32768,   555,  1198,   577,   589,-32768,-32768,
-   676,-32768,   591,-32768,  4576,-32768,-32768,   130,  3913,   613,
--32768,-32768,-32768,   268,  1640, 12172,   868,   655,-32768,-32768,
-   628,   465,   745,   137,   283,   695,-32768,-32768,   653,   187,
--32768,-32768,  5207,  5207,  6890,  1037,   903,-32768,-32768,   242,
--32768,-32768,  3275,-32768,-32768,-32768,-32768,-32768,  2122,   909,
--32768,   465,  1037,-32768,-32768,-32768,  2314,  2122,-32768,   465,
--32768,  1640,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
--32768,-32768,   703,-32768,   423,-32768,   465,  1413,  1023,-32768,
--32768,   436,-32768,-32768,-32768,-32768,  1086,   431,-32768,   526,
-   777,-32768,   316,-32768,-32768,-32768,-32768,-32768,  5793,-32768,
--32768,   251,-32768,   704,   709,-32768,-32768,-32768,-32768,   760,
--32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
--32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
--32768,-32768,   714,-32768,-32768,  1086,  4127,   578,-32768,-32768,
-   736,-32768,-32768, 11627, 11713, 11799, 11799,-32768,-32768,-32768,
--32768,-32768,   738,   763,   773,   804,   824,  1205,   503, 11105,
-  1446, 11799,-32768,-32768, 11799,-32768,-32768, 11799,  8717,-32768,
- 11799,   328,   844,-32768, 11799,-32768, 11191,-32768, 12355,   367,
-  1836,  3337, 11277,-32768,   894,  2675,-32768,  2485,  3147,  5599,
--32768,   368,-32768,  2011,  2176,   328,   328, 10933, 12117,-32768,
-  1446,   800,  1446,-32768,-32768,   816,   871, 12288,   848,   849,
-   872,  1718,   591,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
--32768,   541,   579,   772,  1446,   794,   552,   920,   558,-32768,
-   955,-32768,  1549,    72,   240,-32768,-32768,-32768,-32768,-32768,
--32768, 12226,-32768,  1640,  5776,  1791,-32768,   328,   817,-32768,
--32768,   466,-32768,   932,   941,-32768,-32768,-32768,  4421,-32768,
--32768,  4421,-32768,   913,-32768,-32768,-32768,  1198,  1198,  1198,
--32768,-32768,-32768,  5793,    95,   914,   925,-32768,-32768,-32768,
--32768, 12117,-32768,   931,   937,-32768,-32768,   676,-32768,   465,
--32768,-32768,-32768,-32768,   111,-32768,-32768,-32768,-32768,  9269,
- 11105,-32768,-32768,-32768, 11105,   935,-32768,  5148,   113,  7300,
-  5886,-32768,-32768,  5886,-32768,  6144,  6144,  6890,  7304,   943,
--32768,   465,  1640,-32768,   946,-32768,-32768,  6312,  2314,  2122,
-  1640,-32768,   465,-32768,-32768,   465,  2314,-32768,  1016,-32768,
- 10933,   703,-32768,-32768,  1413,-32768,   944,  5002,  1086,   465,
--32768,-32768,   986,   988,  1013,   995,-32768,-32768,-32768,-32768,
-   731,-32768,   427,   967,   970,-32768,-32768,  1086,-32768,-32768,
-   647,-32768,-32768, 10933, 11105,   736,  8717,-32768,   500,  8717,
--32768,-32768,-32768, 11019,  6398,  6398,  6398,  6398, 12333,-32768,
--32768,-32768,-32768,   974, 11369, 11369,  8717,   976,    49,   978,
-  1032,   984,-32768,-32768,-32768,-32768, 10933,-32768,  8808,  8717,
--32768, 11105, 11105,  7914, 11105, 11105, 11105, 11105, 11105, 11105,
- 11105, 11105, 11105, 11105, 11105, 11105, 11105, 11105, 11105, 11105,
- 11105, 11105, 11105,-32768, 11105,-32768,-32768,-32768,-32768,-32768,
- 11105, 11105,-32768,-32768,  2929,   285,   662,  9810,-32768,-32768,
--32768,  1044,   777,  1094,   509,   515,   522,  2194,   606,-32768,
-  1931,  1931,-32768,  6174,   993,  1024,  1059,-32768,-32768,   313,
- 10308,  1046,-32768,   805,   431,-32768,-32768, 11105,-32768,-32768,
--32768,-32768,-32768,   192,   460,-32768,-32768,   328,-32768,  1640,
-  1850,-32768,  1045,  1057,-32768,-32768,  1446,   920,-32768,  9542,
-  9633,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    58,-32768,
-  1026,  1029,   591,  1549,  1071, 10933,-32768,  1081,-32768,-32768,
-  1787,  1616,  1106,   406,  1079,  1082,-32768,-32768,  2205, 12172,
-  2205,  4040,  2046, 11935,-32768,  1083,-32768,-32768,-32768,-32768,
--32768,-32768,-32768,-32768,  1050,  1051,-32768,  1092,-32768,-32768,
-   268,-32768,-32768,-32768,-32768,    99,  1218,  1103,  1032,-32768,
--32768,-32768,-32768,  5532, 12333,-32768,   871,  1060, 12288,-32768,
--32768,  1061,-32768,  1067,   496,  4877,  1073,-32768,    75,  7833,
-  1118,  1120,   525,-32768,-32768,-32768,-32768,  5886,  5886,  6444,
-  6444,  7304,   805,-32768,-32768,  6312,-32768,  1124,-32768,-32768,
-  1056,   113,-32768,  2314,-32768,-32768,   465,  1114,-32768,   579,
-   772,-32768,  1098,-32768,   558,  1134,-32768,-32768,   524,-32768,
--32768,  1482,-32768,   896,   928,-32768, 11105, 11867,-32768, 11867,
-   122,   122,   315,   557,  6631, 11990,    93,  5893,-32768,    69,
-   122,-32768,   113,  4217, 10933, 10933,-32768, 10933,   113,  4217,
--32768,-32768,-32768,-32768,-32768,-32768,   637,   637,   637,   328,
-  1087,  1089, 10584,  1059,  1095,  1097,  1099,  1125,  5395,  1133,
-  1135,  1138,-32768,  1111,-32768,-32768,  1117,-32768,-32768,  1153,
-   733,   734,   432,   171, 11105,  1165,-32768,  1171,  1127, 12333,
- 12333,-32768,-32768,  1178, 12373, 12390,  6994,  3455,  3620,  4256,
-  3132,  1790,  1790,  1790,  2527,  2527,  1322,  1322,   707,   707,
-   707,-32768,-32768,  1139,  1141,  1132, 11105, 11019,-32768,   285,
--32768,  9269, 11105,-32768,-32768,-32768, 11105,-32768,-32768,  1152,
- 11799,  1142,  1162,  1185,  1216,-32768, 11105,-32768, 11105,-32768,
- 11105,  1948,  3403,-32768,-32768,  3403,-32768,   156,  1948,  1144,
-  1158,-32768,  1159,  6398,   113,-32768,   113,  4475,-32768,  4217,
-  1166,  4662,  4662,  8438,  1161, 11191,  1168,  3753,  3684,  2176,
-  1107,  1175,-32768,-32768,-32768,-32768,-32768,-32768,-32768, 11105,
-  1446,  1164,  1057,-32768, 12333,-32768, 12333,  1718,  1177, 11455,
--32768,  1181,  1234,-32768,   328,-32768,-32768,-32768,-32768,-32768,
-  1576, 12226,-32768,  6398, 10933,  3002,  3002,  5308,-32768,-32768,
--32768,-32768,  3275,-32768,-32768,-32768,  1239, 11105,-32768,-32768,
--32768,-32768,-32768,-32768,-32768,-32768,-32768,   268,-32768,   541,
--32768,   794,   552, 11105,  1237,-32768,   641,   652,   661,  1032,
--32768,    83,-32768,    32,-32768,-32768,-32768,-32768,-32768,-32768,
- 10400,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1120,  1233,
--32768,-32768,-32768,  6398,   968,   968,  1732,-32768,-32768,-32768,
-  1235,-32768,-32768, 11019,-32768,-32768,-32768,-32768,  1475,-32768,
-  4217, 12333,-32768,  2422,-32768,   465,   465,-32768,-32768,-32768,
--32768,-32768,  4217,   451,   789, 11105,  1016,-32768,  1242,-32768,
--32768,-32768,   215,   226,  2040,   606,   396,   122,  1245,-32768,
-   459,  1244,   465,  7092,-32768,-32768,-32768,   465,-32768,  1199,
-   328,   328,   328,-32768,  1200,   113,  4217,   113,  4217,-32768,
--32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1217,  1223,
-  1229,  1230,  1050,-32768, 12221,  9269,  8902,  1215,-32768, 11105,
--32768,-32768,-32768,  1219,  1224,  1225,  6398,-32768,-32768,  1227,
-   190,   861,   861,  1214,   861,-32768,-32768, 11799,  1319, 10933,
--32768,  1228,  1231,  1232,-32768,-32768,-32768,-32768,-32768,-32768,
--32768,-32768,-32768,   113,  1238,-32768,  1226,  3753,-32768,-32768,
-  3264,  3264,  5989,  3811,-32768,-32768,-32768,-32768,-32768, 12333,
--32768,-32768,  1236,-32768,-32768,   153,  1240,-32768,-32768,-32768,
--32768,-32768,-32768,-32768,  5660,  3422,  3422,  4112,  4112,  5308,
-  5772,    54,  3275,-32768,  4229, 12355,-32768,-32768,-32768,  1246,
--32768,  1218,-32768, 11105,-32768, 11105,-32768, 11105,-32768,  1446,
--32768,-32768,  8345,  1308,-32768,  8993,-32768, 10492, 10492,  8532,
-   182,  1247,   250,-32768,  9269,  9084,-32768,-32768,   155,  2164,
-  2164,  1688,  1688,  9269,-32768,-32768,  1251,  1254,   944,-32768,
--32768,-32768,   113,  1256,-32768,  1279,  1279,   113,  1257, 11105,
- 11105,  7597,   465,  6764,   465,   465,  1129,   465,  7497,-32768,
--32768,  7702,  1279,-32768,-32768,  1296,-32768,-32768,-32768,  1266,
--32768,  1270, 11105, 11105, 11105, 11105,  9269,-32768,  1291,-32768,
--32768, 12333,-32768,-32768,-32768,   471,  1225,-32768,-32768,-32768,
--32768,-32768,-32768,  1268,-32768,  1334,   328,-32768,-32768,-32768,
-   113,-32768,-32768,-32768,-32768,-32768,-32768, 11105,-32768,-32768,
-  5772,  3422,  3422,  4771,  4771,  7427,-32768,   277,  4229,-32768,
--32768,  1274,  1275,  1277,  1290,-32768,   952,   161,  1329,   810,
-   819,-32768,-32768,-32768,-32768,-32768, 11105,  1330,  1335,  1336,
- 10670,   262,  1446,   415,   583,-32768,-32768, 10761,  1385,-32768,
--32768,-32768,  1349,-32768,  7537, 12058,  6768,  8235,-32768,-32768,
-  1403,-32768,-32768,-32768,  9919,-32768,-32768,  1321,  1381,-32768,
--32768,-32768,-32768,  6398,-32768,-32768,  9269,-32768,-32768,-32768,
--32768,-32768,-32768,-32768,-32768,-32768,  7597,  7597,-32768,  1279,
-   594,   905, 11105,-32768,-32768,-32768,  1016,  1016,  1279,  1279,
-   731,  1279,-32768,-32768,-32768,   113,   113,-32768,-32768,  1323,
-  1324,  1325,  1340,-32768,  9269, 11105,-32768,   471,-32768,-32768,
--32768,-32768,   113,  1344,  4799,  4799,   805,  6024,-32768,-32768,
--32768,-32768,  1290,-32768,  1446,-32768,-32768,-32768,-32768,-32768,
--32768,   665,   665,  1032,  1337,  1345,  7997,-32768,-32768,-32768,
--32768,  1367, 11105,  1377,  1378,  1390,  1569,  1583,-32768,  1032,
--32768,-32768,  1360,-32768,-32768,  1016,   958,-32768,   994,  1016,
- 10847,  1014,   176,-32768,-32768,-32768,-32768,-32768,-32768,   336,
--32768,-32768,   113,   113,-32768,-32768,-32768, 11105, 11105,  7597,
-   465,   465,-32768,-32768,-32768,  8103,-32768,-32768,   113,   113,
--32768,-32768,-32768,-32768,-32768,  1347,-32768,-32768,-32768,  7801,
-  7801,  6295,  2286,  1369,-32768,-32768,-32768, 11019,-32768,-32768,
--32768,  1442, 10215,  8626, 11019, 11105,-32768, 10027,-32768,  1400,
--32768,-32768,  1409,-32768,  1390,  1569,-32768,-32768,   676,-32768,
--32768, 11541, 11541,  9178,-32768,-32768,  1032,-32768,-32768,  7597,
-  7597,-32768,  1279,  1279,-32768,  9724,-32768,-32768,-32768,-32768,
--32768,  2286,  5469,-32768,-32768,  1357,   410,  1640,  1032, 10121,
--32768,-32768,    83,-32768,-32768,  1406,  1363, 12311, 10027,-32768,
--32768,-32768,-32768,  1290,    81,-32768,-32768,-32768,-32768,-32768,
-  1365, 12243,  1376,  1373,  1382,  1032,-32768,  1016,-32768,-32768,
--32768,-32768,   673,-32768,  9360,-32768,-32768,-32768,-32768,  1290,
-  1466,  1436,-32768,-32768,-32768,   365,   268,-32768,-32768,-32768,
-   465,    83,-32768, 11105,  1437,-32768,  1439,-32768,  1032, 10027,
-  1414,   667,  1449,-32768,-32768,   186,-32768,  1451,-32768,  1405,
--32768,-32768,-32768,-32768, 11105,  1466,  1463,  1466,-32768,   111,
--32768,-32768,-32768,  9451,  1417,   685,-32768,-32768,-32768,  9269,
-  1425,-32768,  1529,  1481,-32768,-32768,-32768,   179,-32768, 10121,
-  1533,  1485,-32768,-32768,-32768,  1546,  1548,-32768
+/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
+static const yytype_uint16 yyr1[] =
+{
+       0,   112,   113,   113,   115,   114,   114,   116,   116,   117,
+     118,   119,   120,   122,   121,   123,   123,   123,   123,   123,
+     123,   123,   124,   123,   125,   123,   123,   123,   123,   123,
+     127,   126,   128,   128,   128,   129,   129,   129,   131,   130,
+     132,   132,   133,   133,   133,   133,   134,   134,   136,   135,
+     135,   137,   137,   138,   138,   139,   139,   140,   141,   141,
+     141,   141,   141,   141,   142,   142,   143,   143,   143,   143,
+     143,   143,   144,   144,   144,   144,   145,   145,   145,   145,
+     145,   145,   145,   145,   145,   146,   146,   147,   147,   147,
+     148,   148,   149,   149,   149,   151,   150,   150,   152,   150,
+     150,   153,   150,   150,   154,   150,   150,   155,   155,   155,
+     155,   155,   156,   156,   156,   156,   157,   157,   157,   157,
+     157,   157,   157,   158,   159,   159,   159,   160,   161,   162,
+     162,   162,   162,   163,   163,   163,   163,   163,   163,   163,
+     163,   164,   164,   164,   164,   164,   165,   165,   165,   166,
+     166,   166,   168,   167,   169,   167,   170,   167,   171,   167,
+     172,   167,   173,   167,   174,   167,   175,   167,   176,   177,
+     178,   178,   178,   179,   179,   180,   181,   182,   182,   183,
+     183,   184,   184,   185,   185,   185,   186,   186,   186,   186,
+     186,   187,   187,   188,   188,   189,   189,   190,   190,   190,
+     192,   191,   191,   193,   193,   193,   193,   195,   194,   194,
+     196,   196,   196,   196,   197,   197,   198,   198,   198,   198,
+     198,   198,   198,   198,   198,   198,   198,   198,   198,   198,
+     198,   198,   198,   198,   198,   198,   198,   198,   198,   198,
+     199,   200,   201,   201,   202,   202,   202,   202,   203,   203,
+     204,   204,   204,   205,   205,   205,   205,   205,   205,   205,
+     205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
+     205,   205,   205,   205,   205,   205,   205,   205,   206,   206,
+     206,   206,   206,   206,   206,   207,   208,   208,   209,   209,
+     209,   210,   210,   210,   211,   211,   212,   212,   212,   212,
+     213,   213,   214,   214,   214,   214,   215,   215,   215,   215,
+     215,   215,   215,   216,   215,   215,   215,   215,   215,   215,
+     215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
+     215,   215,   215,   215,   215,   215,   215,   215,   215,   215,
+     215,   215,   215,   215,   215,   215,   215,   215,   215,   217,
+     217,   218,   218,   219,   219,   220,   220,   221,   222,   222,
+     223,   223,   223,   223,   223,   223,   224,   224,   225,   225,
+     226,   226,   226,   226,   226,   227,   227,   228,   228,   228,
+     228,   228,   228,   229,   229,   229,   229,   229,   230,   230,
+     230,   230,   230,   230,   231,   231,   231,   231,   232,   232,
+     233,   233,   233,   233,   233,   233,   233,   234,   234,   234,
+     235,   235,   236,   236,   237,   237,   238,   238,   240,   239,
+     239,   242,   241,   241,   243,   244,   246,   245,   245,   247,
+     247,   248,   248,   249,   250,   250,   251,   251,   251,   251,
+     251,   252,   252,   252,   252,   253,   253,   254,   254,   255,
+     255,   255,   255,   255,   256,   256,   256,   256,   256,   257,
+     258,   258,   258,   259,   259,   260,   260,   261,   261,   261,
+     263,   262,   262,   264,   262,   262,   262,   262,   262,   265,
+     266,   267,   262,   262,   268,   268,   269,   269,   270,   270,
+     270,   270,   270,   270,   271,   272,   272,   272,   273,   273,
+     273,   273,   273,   274,   275,   274,   274,   276,   277,   277,
+     278,   278,   278,   279,   279,   280,   280,   281,   281,   281,
+     281,   282,   282,   282,   282,   283,   283,   283,   283,   284,
+     285,   285,   286,   286,   286,   286,   286,   286,   286,   286,
+     286,   286,   287,   287,   287,   287,   287,   287,   287,   287,
+     287,   288,   288,   288,   289,   289,   289,   290,   290,   291,
+     291,   292,   292,   293,   293,   293,   293,   294,   294,   295,
+     295,   295,   296,   296,   297,   297,   298,   298,   298,   299,
+     299,   300,   300,   301,   302,   303,   303,   303,   303,   304,
+     304,   305,   305,   305,   305,   305,   305,   306,   306,   306,
+     306,   306,   306,   307,   307,   308,   308,   308,   309,   310,
+     310,   311,   311,   311,   311,   311,   311,   312,   312,   312,
+     312,   312,   312,   313,   313,   313,   313,   313,   313,   314,
+     314,   315,   315,   316,   316,   317,   317,   317,   318,   318,
+     318,   319,   319,   319,   320,   320,   320,   320,   321,   321,
+     322,   322,   322,   322,   323,   323,   323,   323,   324,   324,
+     324,   324,   324,   324,   325,   326,   326,   326,   327,   327,
+     328,   329,   329,   329,   329,   329,   329,   329,   330,   330,
+     331,   331,   332,   332,   332,   332,   332,   332,   332,   332,
+     332,   332,   332,   333,   333,   333,   333,   333,   333,   333,
+     333,   333,   333,   333,   334,   334,   334,   334,   335,   336,
+     336,   337,   337,   338,   339,   339,   341,   340,   343,   344,
+     342,   345,   346,   345,   347,   347,   348,   348,   349,   348,
+     348,   350,   351,   348,   352,   353,   348,   354,   355,   356,
+     357,   348,   358,   359,   348,   360,   348,   361,   348,   362,
+     348,   348,   348,   348,   348,   348,   348,   348,   348,   348,
+     348,   348,   348,   348,   348,   348,   348,   348,   364,   365,
+     363,   367,   368,   366,   369,   369,   371,   372,   370,   373,
+     373,   374,   374,   375,   375,   375,   375,   376,   376,   376,
+     377,   377,   378,   378,   378,   379,   379,   380,   380,   381,
+     382,   382,   383,   383,   383,   384,   384,   384,   384,   384,
+     384,   384,   386,   385,   387,   387,   388,   388,   388,   388,
+     388,   389,   389,   390,   390,   390,   390,   390,   390,   391,
+     391,   392,   392,   393,   394,   394,   395,   395,   395,   396,
+     397,   397,   398,   398,   398,   398,   399,   400,   400,   400,
+     400,   400,   400,   400,   400,   400,   400,   400,   400,   400,
+     400,   400,   400,   400,   400,   400,   400,   400,   400,   400,
+     400,   400,   400,   400,   400,   400,   400,   400,   400,   400,
+     400,   400
 };
 
-static const short yypgoto[] = {-32768,
-  1558,-32768,  -301,  1393,  -385,    29,     8,  1562,-32768,  1531,
--32768,-32768,   265,-32768,   376,-32768,   382,-32768,   121,   901,
-    37,    31,-32768,-32768,  -632,-32768,-32768,   608,    39,  1402,
-  1136,  1427,  -703,   -24,  -172,     6,   116,-32768,-32768,-32768,
--32768,-32768,   799,-32768,-32768,-32768,-32768,-32768,-32768,   412,
-   687,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
--32768,-32768,  1502,  -668,  6906,  1364,    79,  -587,  -311,   -67,
-  1469,  -518,-32768,  1604,-32768,   181,-32768, -1404,-32768, -1267,
-   -45,-32768,  2063,  1435,  -283,   341,  -553,-32768,  -856,  6731,
-  1649,  1869,  4947,  1331,  -325,   -99,   -92,  1646,  -129,   -51,
-   246,-32768,-32768,-32768,  -339,-32768,  -153,-32768,-32768, -1273,
-   -52,  -345,  6249,    40,  1515,  -124,   146,   347,  -191,    -4,
-  -128,  -174,  -167,    -2,   174,    85,-32768,  -365,-32768,-32768,
--32768,-32768,-32768,   274,  1342,   -57,-32768,   681,-32768,-32768,
- -1179,  -211,   907,-32768,-32768,-32768,-32768,-32768,    10,-32768,
--32768,-32768,-32768,-32768,-32768,   693,  -366,-32768,-32768,-32768,
--32768,-32768,-32768,-32768,  1396,-32768,   418,   611,-32768,-32768,
--32768,   581,  -751,-32768,-32768,-32768,-32768,-32768,-32768,   862,
--32768,   408,  1004,   722,  1062,  2110,   109,    22,  -471,  1465,
-  3545,   353,-32768,  -494,-32768,    12,   291,   438,  -143,   740,
-   -84,  5317,  1320,-32768,  6267,  2755,  1981,   -12,  -106,-32768,
-  1550,   -65,-32768,  5689,  3720,  -372,-32768,  2404,  -165,-32768,
--32768,   327,-32768,-32768,   472,    43,  -335,-32768,-32768,-32768,
--32768, -1459,-32768, -1246, -1436,-32768,-32768,-32768,-32768,-32768,
--32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    51,
--32768,-32768,-32768,-32768,-32768,   106, -1361,-32768,-32768,   -56,
--32768,-32768,-32768,-32768, -1447,    48,-32768,    50,-32768,  -685,
-  -361,   672,-32768,-32768,-32768,-32768,  -392,-32768,  -383,  -180,
--32768,   998,   322,-32768,   169,-32768,  -234
+/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
+static const yytype_uint8 yyr2[] =
+{
+       0,     2,     0,     1,     0,     2,     2,     1,     0,     0,
+       0,     1,     1,     0,     2,     2,     1,     1,     5,     4,
+       5,     4,     0,     6,     0,     5,     1,     2,     1,     2,
+       0,     6,     2,     3,     3,     3,     3,     4,     0,     5,
+       2,     3,     1,     1,     2,     2,     1,     2,     0,     5,
+       3,     1,     3,     1,     0,     2,     2,     3,     1,     3,
+       1,     3,     1,     3,     2,     2,     2,     1,     1,     5,
+       4,     2,     2,     3,     3,     2,     2,     3,     3,     2,
+       2,     2,     2,     2,     1,     1,     1,     0,     1,     2,
+       0,     1,     4,     3,     3,     0,     8,     5,     0,     9,
+       6,     0,     8,     5,     0,     9,     6,     2,     2,     1,
+       2,     1,     6,     4,     6,     4,     2,     1,     2,     2,
+       1,     2,     1,     2,     2,     4,     2,     3,     0,     0,
+       1,     3,     2,     3,     1,     4,     2,     4,     2,     4,
+       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     0,     6,     0,     6,     0,     5,     0,     5,
+       0,     7,     0,     7,     0,     6,     0,     6,     0,     0,
+       5,     5,     1,     1,     5,     5,     0,     1,     1,     0,
+       1,     1,     3,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     1,     1,     3,     1,     3,     0,     1,     1,
+       0,     7,     1,     1,     3,     4,     3,     0,     3,     1,
+       3,     3,     3,     3,     1,     1,     1,     2,     2,     2,
+       2,     2,     2,     2,     4,     2,     4,     2,     3,     3,
+       4,     5,     6,     6,     7,     2,     4,     5,     2,     2,
+       1,     0,     4,     4,     3,     1,     3,     2,     3,     4,
+       1,     2,     5,     1,     3,     3,     3,     3,     3,     3,
+       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
+       3,     3,     3,     5,     3,     3,     1,     2,     3,     3,
+       1,     1,     1,     1,     1,     0,     5,     5,     5,     5,
+       5,     1,     1,     1,     1,     2,     1,     2,     2,     3,
+       4,     4,     1,     1,     1,     3,     1,     1,     1,     1,
+       3,     3,     3,     0,     4,     4,     2,     4,     2,     4,
+       2,     2,     1,     4,     1,     7,     7,     7,     7,     4,
+       4,     2,     2,     2,     1,     4,     2,     2,     5,     3,
+       2,     2,     5,     3,     5,     3,     4,     6,     2,     1,
+       2,     1,     2,     1,     1,     1,     2,     0,     2,     2,
+       3,     3,     3,     2,     2,     2,     1,     1,     1,     2,
+       2,     2,     2,     1,     1,     1,     1,     2,     2,     3,
+       3,     3,     4,     1,     2,     2,     2,     1,     1,     1,
+       2,     2,     2,     1,     1,     2,     2,     3,     1,     2,
+       1,     1,     1,     4,     4,     4,     4,     1,     1,     1,
+       1,     3,     1,     3,     1,     3,     0,     4,     0,     6,
+       3,     0,     4,     1,     3,     3,     0,     4,     3,     0,
+       1,     1,     2,     6,     1,     3,     0,     1,     4,     6,
+       4,     1,     1,     1,     1,     1,     3,     0,     2,     1,
+       2,     3,     4,     1,     1,     3,     4,     3,     5,     1,
+       4,     3,     3,     0,     3,     3,     3,     0,     2,     2,
+       0,     7,     4,     0,     6,     3,     2,     2,     2,     0,
+       0,     0,    10,     1,     0,     1,     0,     1,     1,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     3,     4,
+       3,     2,     3,     1,     0,     3,     2,     2,     1,     1,
+       0,     2,     3,     1,     4,     1,     3,     1,     1,     4,
+       4,     2,     2,     3,     3,     0,     1,     3,     2,     2,
+       1,     2,     2,     2,     2,     2,     2,     2,     1,     2,
+       2,     3,     2,     2,     4,     4,     2,     1,     5,     4,
+       1,     0,     1,     3,     0,     1,     3,     1,     1,     1,
+       1,     4,     4,     4,     4,     4,     3,     4,     4,     4,
+       4,     3,     1,     3,     1,     3,     2,     1,     7,     0,
+       2,     1,     2,     0,     2,     4,     4,     2,     4,     1,
+       2,     3,     3,     2,     2,     3,     1,     4,     4,     3,
+       3,     2,     1,     1,     2,     1,     1,     2,     2,     1,
+       2,     3,     3,     2,     2,     3,     1,     3,     3,     2,
+       2,     3,     1,     4,     3,     4,     3,     1,     2,     2,
+       2,     2,     2,     1,     2,     4,     4,     2,     1,     1,
+       1,     1,     2,     4,     2,     2,     2,     2,     1,     2,
+       2,     2,     2,     3,     1,     2,     3,     4,     2,     2,
+       2,     2,     2,     2,     4,     2,     1,     2,     2,     3,
+       1,     3,     2,     3,     2,     2,     3,     1,     3,     4,
+       1,     2,     3,     2,     2,     1,     3,     2,     2,     1,
+       2,     3,     1,     3,     1,     6,     4,     4,     3,     5,
+       3,     3,     3,     2,     1,     1,     2,     2,     2,     0,
+       1,     1,     2,     3,     1,     2,     0,     3,     0,     0,
+       5,     1,     0,     2,     1,     1,     1,     2,     0,     4,
+       1,     0,     0,     5,     0,     0,     7,     0,     0,     0,
+       0,    12,     0,     0,     7,     0,     5,     0,     7,     0,
+       4,     2,     2,     2,     3,     6,     8,    10,    12,     4,
+       3,     2,     2,     1,     1,     1,     1,     1,     0,     0,
+       6,     0,     0,     5,     1,     2,     0,     0,     5,     1,
+       1,     3,     3,     2,     2,     2,     2,     2,     1,     2,
+       0,     1,     0,     1,     1,     0,     1,     1,     3,     4,
+       1,     3,     0,     1,     1,     1,     2,     2,     2,     1,
+       2,     2,     0,     3,     1,     1,     1,     2,     2,     2,
+       4,     2,     2,     2,     2,     2,     2,     1,     2,     1,
+       2,     1,     1,     0,     0,     1,     0,     4,     2,     1,
+       1,     3,     0,     3,     3,     3,     1,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       3,     2,     2,     2,     2,     3,     2,     2,     4,     4,
+       3,     2
 };
 
+/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
+   Performed when YYTABLE doesn't specify something else to do.  Zero
+   means the default is an error.  */
+static const yytype_uint16 yydefact[] =
+{
+       4,     0,    13,    13,     1,     6,     0,     5,     0,   282,
+     638,   639,     0,   389,   401,   581,     0,    12,     0,     0,
+       0,    11,   488,   846,     0,     0,     0,   168,   670,   284,
+     283,    84,     0,     0,   833,     0,    46,     0,     0,    14,
+      26,     0,    28,     9,     0,    17,    16,    90,   111,    87,
+       0,   640,   172,   303,   280,   304,   616,     0,   376,     0,
+     375,   394,     0,   414,   393,   431,   400,     0,   503,   504,
+     510,   509,   508,   483,   388,   605,   402,   606,   109,   302,
+     627,   603,     0,   641,   579,     0,     0,   281,    82,    83,
+     179,   644,   179,   645,   179,   285,   168,   141,   142,   143,
+     145,   144,   473,   476,     0,   666,     0,   477,     0,     0,
+       0,     0,   142,   143,   145,   144,    24,     0,     0,     0,
+       0,     0,     0,     0,   478,   648,     0,   654,     0,     0,
+       0,    38,     0,     0,    32,     0,     0,    48,     0,   646,
+       0,   179,     0,     0,   614,   609,     0,     0,     0,   613,
+       0,     0,     0,     0,   303,     0,   294,   583,     0,     0,
+     302,   579,    29,     0,    27,     4,    47,     0,    65,   389,
+       0,     0,     9,    68,    64,    67,    90,     0,     0,     0,
+     400,    91,    15,     0,   429,     0,     0,   447,    88,    80,
+     647,   583,     0,   579,    81,     0,     0,     0,   107,     0,
+     410,   366,   596,   367,   602,     0,   579,   391,   390,    79,
+     110,   377,     0,   412,   392,   108,   383,   407,   408,   378,
+     396,   398,   387,   409,     0,    76,   432,   489,   490,   491,
+     492,   507,   150,   149,   151,   494,   495,   173,   501,   493,
+       0,     0,   496,   497,   510,   833,   506,   479,   582,   395,
+       0,   426,   639,     0,   668,   172,   631,   632,   628,   608,
+     642,     0,   607,   604,     0,   881,   877,   876,   874,   856,
+     862,   861,     0,   868,   867,   853,   854,   852,   871,   860,
+     858,   859,   857,   864,   863,   850,   851,   847,   848,   849,
+     873,   855,   866,   865,     0,   872,   869,   779,   394,   780,
+     842,   285,   282,   581,   307,   355,     0,     0,     0,     0,
+     351,   349,   322,   353,   354,     0,     0,     0,     0,     0,
+     284,   283,   276,     0,     0,   187,   186,     0,     0,   189,
+     188,     0,   190,     0,     0,   180,   181,     0,   250,     0,
+     253,   185,   306,   216,     0,     0,   308,   309,     0,   183,
+     373,   394,   374,   633,   334,   324,     0,     0,     0,     0,
+     179,     0,   475,     0,   470,     0,   667,   665,     0,   191,
+     192,     0,     0,     0,   436,     4,    22,    30,   662,   658,
+     659,   663,   661,   660,   141,   142,   143,     0,   145,   144,
+     650,   651,   655,   652,   649,     0,   292,   293,   291,   630,
+     629,    34,    33,    50,     0,   158,     0,     0,   394,   156,
+       0,     0,   610,   612,     0,   611,   142,   143,   278,   279,
+     298,     0,   620,   297,     0,   619,     0,   305,   284,   283,
+       0,     0,     0,   296,   295,   624,     0,     0,    13,     0,
+     168,    10,    10,    71,     0,    66,     0,     0,    72,    75,
+       0,   428,   430,   123,    94,   128,   768,     0,    86,    85,
+      93,   126,     0,     0,   124,    89,   626,     0,     0,   587,
+       0,   836,     0,     0,   594,   589,     0,   593,     0,     0,
+       0,     0,     0,   579,   429,     0,    78,   583,   579,   601,
+       0,   380,   381,     0,    77,   429,   385,   384,   386,   379,
+     399,   416,   415,   179,   498,   502,   500,     0,   505,   511,
+       0,   397,   429,   579,    95,     0,     0,     0,     0,   579,
+     101,   580,   615,   639,   669,   172,     0,     0,   870,   875,
+     396,   579,   579,     0,   579,   880,   179,     0,     0,     0,
+     223,     0,     0,   225,   238,   239,     0,     0,     0,     0,
+       0,   277,   222,   219,   218,   220,     0,     0,     0,     0,
+       0,   306,     0,     0,     0,   217,   177,   178,   300,     0,
+     221,     0,     0,   251,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   316,     0,   318,   321,
+     320,   358,     0,     0,   359,   241,   241,     0,   227,   577,
+       0,   235,   356,   348,     0,     0,   833,   337,   340,   341,
+       0,     0,   368,   689,   685,   694,     0,   583,   579,   579,
+     579,   370,   692,     0,   637,   372,     0,     0,   371,   336,
+       0,   331,   350,   332,   352,   634,     0,   333,   176,   176,
+       0,   166,     0,   394,   164,   574,   486,   572,   472,     0,
+       0,   403,     0,     0,   404,   405,   406,   442,   443,   444,
+     441,     0,   434,   437,     0,     4,     0,   653,   179,   656,
+       0,    42,    43,     0,    54,     0,     0,    58,    62,    51,
+     832,   827,     0,   373,   394,    54,   374,   831,    60,   169,
+     154,   152,   169,   301,   176,   618,   617,   305,     0,   621,
+       0,    19,    21,    90,    10,    10,    74,    73,     0,   129,
+     357,     0,   716,    92,   714,   453,     0,   449,   448,   215,
+       0,   214,   584,   625,     0,   809,     0,   804,   394,     0,
+     803,   805,   834,   816,     0,     0,   623,   590,   592,   591,
+       0,     0,     0,     0,     0,     0,   579,   600,     0,   424,
+     423,   411,   599,     0,   836,   595,   382,   413,   425,   429,
+       0,   499,   638,   639,   833,     0,   833,   640,   512,   513,
+     515,   833,   518,   517,     0,   547,   639,     0,   538,     0,
+       0,   550,     0,   122,   117,     0,   172,   551,   554,     0,
+       0,   530,     0,   120,   427,   836,   802,   179,   179,   643,
+     179,   836,   802,   579,    98,   579,   104,   879,   878,   842,
+     842,   842,     0,     0,     0,     0,   637,     0,     0,     0,
+       0,   394,     0,     0,     0,   312,     0,   310,   311,     0,
+     248,   182,   282,   638,   639,   284,   283,     0,     0,   454,
+     484,     0,   274,   275,   794,   793,     0,   272,   271,   269,
+     270,   268,   267,   266,   264,   265,   263,   262,   261,   256,
+     257,   258,   259,   260,   255,   254,     0,     0,     0,     0,
+       0,   241,   229,   245,     0,     0,   228,   579,   579,     0,
+     579,   576,   677,     0,     0,     0,     0,     0,   339,     0,
+     343,     0,   345,     0,     0,   688,   687,   680,   684,   683,
+     832,   393,     0,     0,   703,     0,     0,   836,   369,   836,
+     690,   579,   802,   583,   689,   685,     0,     0,   579,     0,
+     393,     0,     0,     0,     0,   171,   175,   286,   169,   162,
+     160,   169,     0,   487,     0,   486,   213,   212,   211,   210,
+     436,     0,     0,    25,     0,     0,   657,     0,    39,    45,
+      44,    56,    53,    54,     0,    49,     0,     0,   689,   685,
+       0,   823,   579,   826,   828,     0,   824,   825,    55,   494,
+       0,   159,   169,   169,   157,   170,   299,    18,    20,    70,
+      90,   417,   146,   134,   148,   147,     0,   127,   130,     0,
+       0,     0,     0,   715,   709,   450,     0,   125,   588,   585,
+     808,   822,   811,     0,   586,   807,   821,   810,   806,   835,
+     818,   829,   819,   812,   817,   838,     0,     0,     0,     0,
+     421,   598,   597,   420,   176,   522,     0,   521,   833,   833,
+     833,     0,   579,   802,   546,   539,   551,   540,   429,   429,
+     536,   537,   534,   535,   579,   802,   282,   638,     0,   416,
+     118,   542,   552,   557,   558,   416,   416,     0,     0,   416,
+     116,   543,   555,   416,     0,   429,     0,   531,   532,   533,
+     429,    97,     0,     0,     0,     0,   103,     0,   836,   802,
+     836,   802,   844,   843,   845,   287,   323,   224,   226,   329,
+     330,     0,     0,     0,     0,   311,   314,     0,     0,     0,
+       0,   249,     0,   315,   317,   319,     0,     0,     0,     0,
+     230,   247,     0,     0,   674,   672,     0,   675,   583,   236,
+       0,     0,   179,   346,     0,     0,     0,   681,   686,   682,
+     693,   579,   702,   700,   701,   691,   836,     0,   698,     0,
+       0,   635,   636,   689,   685,     0,     0,   335,   167,   169,
+     169,   165,   575,   573,   474,     0,   435,   433,   282,     0,
+      23,    31,   664,    57,    52,    59,    63,     0,   688,   684,
+     689,   685,     0,   393,   603,     0,   579,   690,    61,   155,
+     153,    69,     0,     0,   136,     0,   138,     0,   140,     0,
+     769,     0,   203,   717,     0,   710,   711,     0,   451,   689,
+     685,     0,   306,     0,   633,   830,     0,     0,   839,   840,
+       0,     0,     0,     0,     0,     0,   418,   174,     0,     0,
+       0,   524,   523,   516,   836,     0,   541,   447,   447,   836,
+       0,     0,     0,   429,   429,     0,   429,   429,     0,   429,
+       0,   529,   480,     0,   447,   579,   289,   288,   290,   579,
+     100,     0,   106,     0,     0,     0,     0,     0,     0,   457,
+       0,   455,   252,   273,   243,   242,   240,   231,     0,   244,
+     246,   673,   671,   678,   676,     0,   237,     0,     0,   338,
+     342,   344,   836,   696,   579,   697,   163,   161,   471,     0,
+     438,   440,     0,   688,   684,   689,   685,     0,   579,   608,
+     690,   133,   131,     0,     0,     0,     0,   445,     0,     0,
+     282,   638,   639,   718,   731,   734,   737,   742,     0,     0,
+       0,     0,     0,     0,     0,     0,   283,   763,   771,     0,
+     790,   767,   766,   765,     0,   726,     0,     0,   394,     0,
+     705,   724,   730,   704,   725,   764,     0,   712,   452,     0,
+     636,   820,   814,   815,   813,     0,   837,   422,     0,   519,
+     520,   514,   113,   579,   545,   549,   115,   579,   429,   429,
+     566,   447,   282,   638,     0,   553,   559,   560,   416,   416,
+     447,   447,     0,   447,   556,   467,   544,   836,   836,   579,
+     579,     0,     0,     0,     0,   456,     0,     0,   232,   233,
+     679,   347,   288,   699,   836,     0,   688,   684,     0,   690,
+     135,   137,   139,   776,   770,   774,     0,   713,   708,   206,
+     783,   785,   786,     0,     0,   722,     0,     0,     0,   749,
+     751,   752,   753,     0,     0,     0,     0,     0,     0,     0,
+     784,     0,   365,   791,     0,   727,   363,   416,     0,   364,
+       0,   416,     0,     0,     0,   204,   707,   706,   728,   762,
+     761,   311,   841,   419,   836,   836,   565,   562,   564,     0,
+       0,   429,   429,   429,   561,   563,   548,     0,    96,   102,
+     836,   836,   325,   326,   327,   328,   458,     0,   234,   695,
+     439,   689,   685,     0,     0,     0,   775,   446,   195,     0,
+     719,   732,   721,     0,     0,     0,     0,     0,   745,     0,
+     754,     0,   760,    40,   145,    35,   145,     0,    36,   772,
+       0,   361,   362,     0,     0,     0,   360,   205,   722,   112,
+     114,   429,   429,   571,   447,   447,   469,     0,   468,   463,
+      99,   105,   578,   393,     0,   777,   202,     0,   394,     0,
+     722,     0,   735,   723,   709,   788,   738,     0,     0,     0,
+       0,   750,   759,    41,    37,     0,     0,   729,   570,   568,
+     567,   569,     0,     0,   482,     0,     0,     0,   196,   416,
+     720,   207,   733,   209,     0,   789,     0,   787,   743,   747,
+     746,   773,   795,     0,   466,   465,   459,    87,    90,   781,
+     782,   778,   429,   709,   193,     0,     0,   199,     0,   198,
+     722,     0,     0,     0,   796,   797,   755,     0,   464,     0,
+     208,     0,   736,   739,   744,   748,     0,   795,     0,     0,
+     462,     0,   461,   200,   194,     0,     0,     0,   756,   798,
+     460,     0,     0,   799,     0,     0,   201,   740,   800,     0,
+     757,     0,     0,     0,   741,   801,   758
+};
 
-#define	YYLAST		12474
-
-
-static const short yytable[] = {    59,
-   444,   443,   196,   632,   224,   420,   423,   435,   445,   695,
-   122,    36,   780,   761,  1000,   642,   516,   490,   696,   392,
-   538,   541,   356,  1118,   357,   103,   432,   298,   256,   641,
-    59,   982,    35,   397,    42,   693,  1043,    59,  1045,   177,
-   398,   399,    36,    55,   646,   647,  1075,   174,   839,   400,
-   878,   178,   209,   571,   711,   509,  1373,  1374,   391,   934,
-   976,  1505,   507,    35,  1451,    42,  1566,   247,   221,   408,
-   169,   672,    42,  1395,    55,   190,  1562,  1576,   170,   296,
-   171,   175,   224,   349,   489,   349,  1013,   349,   495,   498,
-  1206,   610,   256,   497,   260,   594,   701,   702,   224,  1589,
-  -601,  1466,   349,   349,   528,   610,   738,    -1,  1469,   610,
-  1567,   719,    72,   983,    86,  1200,   948,   364,  1080,   722,
-   645,   519,   196,  1592,  1085,    89,    -2,   766,  1076,  1072,
-    88,   406,   349,  1014,   349,    93,  1015,   452,   141,   146,
-  1207,   595,  1601,    72,   802,    90,  -601,  -601,    15,    57,
-    72,   256,  -415,   913,   224,   163,  -295,   528,   253,  1633,
-    59,  -601,   224,    87,    59,   949,   177,  1008,   720,  -582,
-   440,   209,   208,   743,   174,   404,   190,  1077,   178,   224,
-    57,  -415,   629,   633,   636,  -415,  1639,   176,  1602,    94,
-  1618,  1201,   297,   824,  -356,   164,  1651,   169,   453,    42,
-  1477,  1073,   708,   135,    55,   170,   989,   171,   175,  1483,
-  1484,  1298,  1485,  1364,  1009,  -582,   189,  1010,   221,   182,
-  1427,   190,   998,  1592,   138,   837,   221,   221,  -302,   308,
-  -415,   454,  -144,   467,  1145,  1427,   620,  1661,  1505,  -365,
-  1564,    15,   107,  -356,    72,    26,   615,   453,   726,   249,
-  -366,   403,    15,   616,     8,   521,   221,   419,   422,   260,
-  1299,   137,  1365,   838,    95,   110,   111,  1156,    38,  1428,
-  1159,  1570,  -365,    72,  -302,  -302,  -365,    72,   155,   468,
-   454,   405,   823,  -366,  1536,   607,  1662,  -366,  -582,  -295,
-   648,   208,   247,    91,   716,  1594,  -626,  1279,   363,    38,
-   108,   471,   474,   109,   642,   221,   130,   131,   680,  -365,
-    57,  1187,  1188,    92,   176,   161,   961,   112,   113,   675,
-  -366,   147,  1599,  -600,   349,  1117,   987,   988,  1171,   459,
-   522,   881,   420,   423,  -582,   485,   935,   296,   162,  1048,
-   523,  1443,  -626,  -626,  1629,   247,   460,   695,   882,   432,
-    58,   698,   187,   349,   651,  1234,  1019,  -626,   221,   919,
-   495,   498,   517,  1579,  1580,   764,   260,  1239,   495,  -600,
-  -600,   952,  1049,  1634,   179,   461,  1050,   883,   516,    39,
-   498,    58,  -304,  1001,  -600,    40,   493,   374,    58,   183,
-   632,   138,   224,   375,   155,   155,   155,   692,   650,   498,
-   209,  1260,   564,  1262,   565,   920,   921,   199,   518,  1051,
-    39,   139,   224,   594,   637,   221,    40,   215,   216,  1407,
-  -120,   224,    15,    14,     7,   127,   128,    10,  -304,  -304,
-   295,   411,   683,   768,     8,     9,   413,    59,   224,   177,
-   155,    76,   738,  -298,  1226,    20,  1174,   713,   738,  1147,
-   297,   178,    18,  -120,    23,   449,   620,  -120,   129,   595,
-   638,   240,    21,   736,   962,   241,   820,    72,    26,   127,
-   128,  1446,    76,   813,   649,    26,   188,    27,    28,    76,
-   963,   175,    58,  -118,   147,    15,   130,   131,  1295,  1296,
-  -120,   149,   201,  -143,   213,    18,   349,   243,   221,   221,
-  1075,   150,   823,    59,   405,   137,   221,  1008,  1093,    32,
-   694,    58,  1240,   363,   151,    58,  -118,   881,   221,   814,
-  -118,   130,   131,   971,    88,   629,   633,   199,   636,   349,
-  1037,   245,   349,   299,   882,   349,   788,   221,   986,   349,
-   829,   829,   829,   829,   780,   522,   620,   795,   607,   520,
-    72,  1497,   349,  -118,  1009,   896,   138,  1010,   738,  -831,
-  1038,   898,   349,   883,  1406,   349,   360,   759,   900,   695,
-   633,  1023,   511,   407,   199,   765,   694,   410,   696,    91,
-   362,   127,   128,   372,   748,   749,   794,   176,   957,   680,
-   642,  1033,   823,  1035,   376,   693,   958,   937,  1039,    92,
-   296,   897,    76,  1052,   641,   380,    76,   899,   955,   127,
-   128,   381,   201,   213,   901,  -295,    72,  1024,   512,   692,
-   116,   117,   118,   791,     8,     9,   736,    95,    96,    97,
-   401,    26,   377,   130,   131,   495,   969,   528,   974,   975,
-   127,   128,   571,  1170,  1449,   519,   260,   529,   189,  1053,
-   127,   128,    90,   796,  1284,  1478,   137,   530,   425,   201,
-   221,   130,   131,   633,  1199,   127,   128,    88,   363,   122,
-  1119,   349,   767,   119,   120,   392,   130,   131,    26,   738,
-    98,    99,   100,   975,   433,   209,   303,  1193,   295,   247,
-    26,   738,   130,   131,   363,   645,  -621,   998,  1195,    -7,
-   101,   221,   130,   131,   999,    58,   529,  1197,   115,   703,
-   164,  1507,   704,   297,   447,    26,   530,   130,   131,  1613,
-   448,   155,   155,   155,   707,   738,   252,   738,  1636,   903,
-   906,   885,   694,  1194,   780,   692,  1135,  1081,  1082,   694,
-  1083,   886,  1058,  1135,  1196,   221,  1653,   451,   691,  1280,
-  1281,   233,  1283,  1198,   463,   887,   199,  1508,    95,   110,
-   111,   411,  1135,   464,   413,  1614,    95,   414,   415,  1255,
-  1256,  1257,   158,   221,  1637,   824,   501,   811,   520,    95,
-   110,   111,   513,    59,    91,    59,    89,    91,    58,   592,
-   593,   209,  1654,    59,  -141,  -142,   652,   524,   432,   692,
-   349,   349,   525,   349,    92,   692,    90,    92,     8,     9,
-   388,   112,   113,   114,   691,  1189,   788,    21,   788,    98,
-   113,   526,   745,   812,   527,   378,   788,   795,   535,  1044,
-   544,   745,   112,   113,   416,   199,   545,   795,   221,   222,
-   223,   201,    89,   199,   224,    92,   546,   379,   694,    15,
-  1241,   224,   363,  -415,    58,  1229,  1230,  1231,  1025,  1026,
-   130,   131,    90,    89,   127,   128,   794,   137,   794,   519,
-   224,  1430,    91,   349,   794,   567,   794,   547,  1121,    76,
-  1431,  -415,  -415,    90,   252,   116,   117,   118,   158,   158,
-   158,   564,    92,   565,  1268,  1270,    72,   548,    72,   382,
-   383,   384,   567,   791,   610,   791,    72,   410,   656,   829,
-  1057,  1067,   694,   791,    26,   692,   130,   131,   694,   736,
-   201,   256,  1640,   659,   502,   504,   222,   446,   201,   660,
-   885,   127,   128,   796,   158,   796,    26,   514,   119,   120,
-   886,   260,  1040,   796,   385,   801,   116,   770,   771,    91,
-   772,   295,   386,   387,   887,   662,   663,   692,    89,   829,
-   349,   483,   484,   692,  1046,  1047,  1479,   491,   492,    92,
-   691,     8,     9,   773,  1078,  1411,   246,   691,    90,   664,
-   774,    26,  1135,   130,   131,  1090,  1091,  1092,  1041,   483,
-   714,  1058,   683,   676,  1270,   491,   715,    26,    18,   119,
-   120,   824,   199,  1360,  1362,    90,   736,   550,   677,  1135,
-  1425,  1426,  1366,   256,    92,  1135,   483,  1530,   432,   829,
-   705,    26,    -6,   130,   131,    95,    96,    97,   694,   349,
-   903,   906,   694,   709,   420,   423,   692,  1220,   703,   704,
-  1031,   199,    15,   199,   199,   731,   707,  1221,   692,   658,
-   755,   432,   491,  1531,  -578,  1404,   760,  -578,   668,   805,
-  1222,   806,  1287,    15,   420,   423,   807,  -415,   808,    59,
-   694,   658,   483,  1535,  1176,  1177,   694,   815,    98,    99,
-   816,   833,   692,   835,   692,   836,   691,   201,   199,   720,
-   224,   838,   916,   215,   216,  -415,  -415,   893,  1511,    14,
-  -415,   895,   788,   912,  -578,   916,  -578,  -578,   940,  -578,
-     8,     9,   829,   795,  1528,   941,   914,   224,   950,   694,
-  -578,    20,  -578,   224,   954,   349,   201,   972,   201,   201,
-    23,   256,   127,  1391,    58,  1135,    58,   951,  -578,  -578,
-   956,    20,   964,   253,    58,   965,   978,  1063,   692,   694,
-   691,   985,   794,  -578,   363,  1472,   691,  -298,   984,  1057,
-   695,   694,   130,   131,   453,   224,  1029,  1005,  1006,  1585,
-  1457,   432,  1462,   201,  1007,   692,   363,  1017,  1459,   999,
-  1012,  -830,    72,  1021,   130,   131,   522,  1028,  1032,   791,
-  1034,   769,  1036,  1495,  1094,   694,  1095,   694,  1347,  1099,
-   300,  1511,  1096,    10,  1097,   736,  1098,  1100,   522,  1101,
-  1339,   824,  1102,   155,  -140,   158,   158,   158,  1103,   796,
-   990,   770,   771,  1511,  1104,   801,  1106,   801,    18,  1107,
-  1243,  1338,  1064,  1071,  1109,   801,  1245,  1246,    21,  1110,
-  1243,  1248,  1113,   224,  1246,  1126,  1111,    59,  1112,  1129,
-  1610,  1138,  1128,   426,   427,   846,   155,   147,  1130,   903,
-   906,   694,  1131,  -183,   991,  1139,   691,   428,  1149,  1140,
-   691,    26,  1162,   992,   993,  1150,  1146,   429,   137,  -183,
-   788,  -183,  1155,  1511,  1165,    32,  1302,  1303,   694,  1168,
-   430,   795,  1456,  1169,  1456,  1192,  1215,   -52,  1225,   894,
-  1244,   692,   -52,  1249,   722,  1250,  1254,  1258,   691,  1263,
-   994,    72,   501,   -52,   691,  1264,  1302,  1303,   694,  1236,
-  1237,  1265,  1266,  1271,  1282,   523,  1286,  1273,  1025,  1026,
-   794,  1274,  1275,  1347,  1278,  1288,  1294,  1135,  1289,  1290,
-  1200,   209,   460,  1347,  1297,  1293,  1251,  1300,  1346,  -663,
-  1347,  1253,  1405,  1310,  1359,  1339,   221,   691,  1368,   829,
-    72,  1369,  1339,  1372,  1376,   528,  1338,   791,   960,   127,
-   128,   140,   140,  1398,   156,  1575,  1338,  1399,  1409,   977,
-  1410,  1419,  1420,  1338,  1421,  1422,  1135,   691,   420,   423,
-  1429,  1438,  -304,  1452,  1439,  1440,  1063,   796,   212,   691,
-   220,   589,   590,   591,   592,   593,   237,  -304,  1454,   129,
-   846,  -304,  1415,  1416,   694,    95,    96,    97,  1467,    26,
-    58,   130,   131,   155,   155,   155,  1519,  -304,  1470,  1514,
-  1491,  1492,  1493,   691,  1627,   691,  1521,  1515,  1655,  -304,
-  -304,   375,  -304,  1522,  -304,   224,    72,  1494,    95,   110,
-   111,  1499,  1529,   155,   155,   155,    72,  1551,  1561,  1571,
-   363,  1553,  1572,    72,  1587,  1596,   411,   413,    98,    99,
-  1597,  1603,  1605,  -304,  -304,   520,  1621,   116,   770,   771,
-  1608,  1064,   140,  1346,   116,   770,   771,   140,  -304,  1609,
-   156,   156,   156,  1346,   224,  1625,  1631,   692,  1632,   691,
-  1346,   112,   113,  1557,   773,  1588,  1635,  1638,  1347,  1347,
-  1557,   801,  1643,  1347,  1642,  1379,  1380,   212,  1389,  1390,
-  1339,  1392,  1647,   450,  1652,  1339,   691,   745,    26,   349,
-   119,   120,  1656,   745,   470,   470,   479,   119,   120,  1657,
-  1659,  1338,  1338,  1664,  1665,  1667,  1338,  1668,   692,    58,
-   220,   300,   394,   395,    10,  1347,   691,     1,   496,   220,
-  1481,  1482,   442,     5,  1347,   160,   221,  1339,  1526,  1172,
-   441,    95,   110,   111,   953,   745,  1339,   712,    95,   110,
-   111,  1626,   225,   226,   227,    95,   110,   111,  1338,    21,
-  1557,   439,   703,   704,  1068,   359,  1387,  1338,    58,   707,
-   140,   503,    26,  1311,    27,   319,    18,   409,  1415,  1416,
-   694,   228,   410,  1510,  1663,  1347,   297,  1408,   382,   383,
-   384,    72,    72,   297,   112,  1523,    72,  1339,  1164,   534,
-  1004,   112,   113,   493,   668,  1163,    32,   506,   112,  1525,
-   748,   749,     7,     8,     9,    10,  1370,   960,  1338,  1232,
-  1475,  1476,   691,   745,  1252,  1347,  1393,  1070,  1346,  1346,
-   943,   694,  1161,  1346,   486,   617,   880,  1339,    72,    26,
-   156,   386,   387,   390,  1465,  1356,  1641,    72,   153,  1600,
-    21,  1388,  1649,  1646,    58,  1471,  1388,  1648,  1338,   801,
-  1214,     8,     9,    26,    58,    27,    28,   199,     0,   199,
-     0,    58,     0,   297,     0,  1346,   155,   158,     0,   193,
-   366,   370,     0,     0,  1346,     0,     0,     0,    18,   194,
-    95,   110,   111,     0,   665,   666,   667,    32,    72,     0,
-     0,     0,   195,     0,     0,     8,     9,     0,     0,     0,
-   519,    26,     0,   130,   131,     0,   212,   220,     0,     0,
-   158,     0,     0,  1542,  1543,  1544,     0,  1220,     0,  1030,
-   140,  1611,    18,   140,     0,  1346,     0,  1221,    72,   156,
-   156,   156,     0,   112,   113,   140,     0,   155,   155,   155,
-  1222,     0,   201,  1460,   201,    26,     0,   130,   131,   300,
-   394,   395,    10,  1269,     0,   421,   424,   214,   215,   216,
-  1079,  1220,     0,     0,    14,  1346,  1084,     0,     0,     0,
-     0,  1221,   470,  1577,  1578,   470,     0,   479,   479,   479,
-     0,    18,     0,   450,  1222,     0,    20,    21,     0,   470,
-   496,   220,     0,     0,   450,    23,     0,     0,   496,     0,
-   153,     0,    27,   319,     0,     0,     0,     0,   691,     0,
-   699,   450,     0,     0,   295,   745,   214,   215,   216,    58,
-    58,   295,     0,    14,    58,   585,   586,   587,   588,   589,
-   590,   591,   592,   593,    32,     0,     0,     0,   156,     0,
-    18,   156,   596,     0,  1628,    20,  1316,     0,     0,     0,
-     0,     0,  1269,     0,    23,   728,   156,   156,   156,   691,
-     0,     0,   734,     0,   745,     0,    58,     0,     0,   938,
-   199,   156,  1141,     0,  1142,    58,   689,   158,   158,   158,
-     0,   597,   598,     0,     0,     0,   599,   600,   601,   602,
-     0,     0,   558,     0,   127,   128,     0,     0,     0,    13,
-     0,   295,     0,   300,   394,   395,    10,   158,   158,   158,
-     0,   127,   128,     0,   542,   543,   339,     0,   339,     0,
-   339,    18,   902,   902,     0,   909,    58,     0,     0,   821,
-   551,     0,   928,   552,   560,     0,   553,   620,    18,   563,
-     0,    21,   689,   568,    26,     0,   130,   131,   251,     0,
-     0,   609,   220,     0,   620,   201,    27,   319,     0,     0,
-   621,    26,     0,   130,   131,   339,    58,   339,     0,     0,
-   622,     0,     0,   300,     8,     9,    10,   621,  1444,  1445,
-   623,     0,     0,   624,   625,     0,     0,   622,    32,   874,
-     0,   212,     0,   220,   237,   875,     0,   623,     0,     0,
-   624,   625,     7,     8,   250,    10,     0,     0,    95,    96,
-    97,    21,   225,   226,   227,     0,     0,     0,   251,     0,
-   258,     0,     0,     0,     0,     0,    27,   319,   730,     0,
-     0,     0,   932,     0,   421,   706,    18,   220,     0,     0,
-    21,   228,     0,  1259,   258,  1261,     0,   251,     0,   470,
-   470,   479,   479,   479,     0,    27,    28,   470,    32,    26,
-     0,    98,    99,   229,     0,   496,     0,     0,   450,     0,
-     0,  1506,     0,   258,     0,     0,     0,     0,     0,   252,
-     0,     0,   421,   424,   258,     0,     0,    32,   214,   215,
-   216,     0,     0,  1524,  1527,    14,     0,   212,   689,     0,
-   558,  1292,     0,   558,     0,   689,     0,   826,   230,   231,
-   232,     0,    18,     0,     0,     0,     0,    20,     0,     0,
-   558,     0,     0,     0,   156,     0,    23,     8,     9,     0,
-     0,     0,    13,   558,     0,     0,     0,   853,   639,     8,
-     9,    10,   560,   258,     0,   560,     0,     0,   549,     0,
-     0,   259,     0,     0,    18,     0,   300,   127,   128,    10,
-   158,   421,   834,   551,   552,   876,     0,     7,     8,     9,
-    10,   892,  1573,   308,   640,   560,    21,    26,   258,   130,
-   131,     0,     0,     0,     0,     0,   339,     0,     0,    26,
-  1371,   130,   131,  1220,    21,  1375,     0,     0,     0,     0,
-     0,   251,   258,  1221,   902,    21,     0,   902,     0,    27,
-   319,   620,     0,     0,   689,     0,  1222,     0,    26,   902,
-    27,    28,     0,  1148,  1148,   928,     0,     0,   434,     0,
-     0,   158,   158,   158,   966,     0,   927,     0,     0,     0,
-     0,    32,     0,     0,   967,     0,     0,     0,  1412,     8,
-     9,     0,    32,     0,   623,     0,     0,   968,   625,     0,
-   469,     0,   237,     0,     0,     0,     0,  1175,  1175,  1181,
-     0,  1114,  1115,   488,     0,     0,    18,  1120,   689,     0,
-   494,   215,   216,     0,   689,     0,     0,    14,   725,   729,
-     0,  1132,   620,  1133,   258,  1134,   729,     0,     0,    26,
-     0,   130,   131,     0,    18,     7,   127,   128,    10,    20,
-     0,     0,  1181,     0,     0,  1500,     0,     0,    23,     0,
-     0,     0,     0,     0,     0,  1501,  1223,  1223,  1223,   339,
-     0,     0,     0,     0,     0,   623,     0,     0,  1502,   625,
-     0,     0,     0,    21,  1167,     0,     0,   450,   450,     0,
-   251,     0,   258,  1487,  1488,     0,   421,   706,    27,    28,
-     0,     0,   339,   729,     0,     0,     0,     0,     0,     0,
-  1498,     0,     0,     0,   450,     0,     0,     0,     0,   450,
-     0,     0,   252,     0,  1054,  1055,     9,    10,  1190,     0,
-    32,     0,     0,     0,   689,   339,     0,   725,   689,     0,
-   850,   851,     0,   855,   856,   857,   858,   859,   860,   861,
-   862,   863,   864,   865,   866,   867,   868,   869,   870,   871,
-   872,   873,    21,   729,     0,     0,     0,     0,   927,   729,
-  1538,  1539,     0,     0,     0,    26,   689,    27,    28,     0,
-     0,  1235,   689,  1056,     0,   258,  1549,  1550,   127,   128,
-  1124,   193,  1148,  1148,   928,     0,     0,     0,     0,   729,
-     0,   194,     0,     0,     0,     0,   729,     0,     0,    32,
-     0,   258,     0,     0,   195,     0,     0,  1175,  1175,  1301,
-  1301,  1181,     0,   727,     0,   689,  1175,   558,   945,   947,
-   727,   620,     0,     0,     0,     0,     0,     0,    26,  1127,
-   130,   131,     0,     0,   339,     0,     0,     0,     0,  1301,
-  1301,  1181,     0,     0,   621,   689,     0,     0,     0,     0,
-     0,  1223,  1223,  1223,   622,     0,     0,   689,   421,   834,
-   551,   552,     0,     0,   623,     0,     0,   624,   625,     0,
-     0,     0,     0,   450,   450,     0,   450,   450,     0,   450,
-   756,     0,   725,     0,     0,   762,     0,   727,   258,     0,
-     0,   689,     0,   689,   587,   588,   589,   590,   591,   592,
-   593,     0,     0,   153,   258,     0,     0,     0,     0,     0,
-   803,     0,     0,     0,     0,     0,   809,     0,  1312,     0,
-  1313,     0,  1314,     0,     0,     0,     0,  1227,   817,   818,
-     0,   819,     0,  1175,  1175,  1301,  1301,  1181,     0,     0,
-  1175,     0,     0,     0,     0,  1042,  1212,   727,     7,   127,
-   128,    10,     0,   727,    13,     0,     0,   689,     0,     0,
-     0,     0,     0,   339,   339,   611,   339,   300,   394,   395,
-    10,     0,   612,     0,     0,     0,    18,   212,   220,     0,
-     0,   729,     0,   727,   689,     0,    21,     0,     0,     0,
-   727,     0,     0,     0,     0,     0,     0,     0,     0,    26,
-     0,    27,    28,  1105,     0,    21,     0,     0,   450,   450,
-     0,     0,   613,     0,   689,    30,     0,     0,    26,     0,
-    27,   319,  1414,   258,     0,    31,   917,   918,     0,     0,
-     0,   917,     0,    32,     0,   729,   729,     0,    33,     0,
-   725,   729,     0,     0,     0,     0,  1503,  1503,    80,  1503,
-     0,     0,   614,     0,     0,   729,     0,   729,   104,   729,
-     0,     0,     0,     0,     0,     0,  1285,     0,   133,     0,
-     0,     0,     0,     0,   144,   144,     0,   144,     0,    80,
-     0,     0,     0,     0,     0,     0,    80,   421,   706,     0,
-     0,     0,   479,     0,     0,     0,     0,     0,  1160,   203,
-     0,    80,     0,   558,     0,     0,     0,     0,   729,   238,
-   689,   450,   450,   450,   421,   424,   104,     0,     0,     0,
-     0,     0,     0,   339,     0,     0,     0,   262,   104,     0,
-     0,  1503,  1503,  1552,     0,     0,  1186,     0,     0,     0,
-     0,     0,     0,     0,   421,  1358,   551,   552,     0,     0,
-   104,     0,   729,  1027,     0,     0,  1400,  1401,  1402,  1403,
-     0,     0,     0,   479,   479,   479,     0,     0,     0,   729,
-     0,   450,   450,     0,     0,   727,     0,     0,   133,     0,
-    80,     0,     0,     0,   144,   144,     0,     0,     0,   412,
-   144,     0,     0,   144,   144,   144,     0,     0,     0,   258,
-     0,   258,     0,     0,     0,     0,     0,     0,     0,    80,
-  1086,     0,  1088,    80,  1242,     0,     0,     0,     0,   203,
-    80,     0,     8,     9,  1442,     0,    12,    13,     0,   727,
-   727,     0,    14,     0,     0,   727,     0,   203,   203,   203,
-   421,   706,   450,   258,     0,     0,    16,     0,    17,   727,
-     0,   727,     0,   727,    20,     0,     0,     0,     0,     0,
-     0,     0,     0,    23,   725,   725,   203,     0,  1272,     0,
-     0,     0,    26,     0,   130,   131,   563,     0,     0,     0,
-     0,     0,     0,   505,  1122,  1123,     0,  1125,   339,     0,
-     0,     0,   104,     0,     7,     8,     9,    10,     0,  1496,
-    13,     0,   727,   144,     0,     0,   689,     0,     0,     0,
-     0,   879,     0,     0,   904,   907,     0,     0,  1144,     0,
-     0,     0,    18,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,    21,     0,     0,   258,  1520,     0,   620,     0,
-     0,   104,   531,     0,     0,    26,   727,    27,    28,     0,
-     0,     0,   729,     0,   729,     0,   729,   689,     0,     0,
-     0,   966,     0,   727,   725,     0,     0,     0,     0,  1185,
-     0,   967,     0,   725,   725,     7,     8,     9,    10,    32,
-     0,   623,   725,     0,   968,   625,   104,     0,     0,     0,
-   618,     0,   531,   531,   634,     0,  1212,     0,  1377,  1378,
-     0,  1555,     0,    80,     0,     0,     0,   853,  1555,     0,
-     0,     0,     0,    21,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,   258,   725,    26,   558,    27,    28,
-     0,     0,   192,     0,     0,     0,     0,   133,     0,  1233,
-   127,   128,   193,     0,   215,   216,   104,     0,   203,   104,
-    14,  1238,   194,   258,     0,     0,   729,     0,     0,     0,
-    32,     0,     0,   144,     0,   195,   144,     0,   421,  1358,
-   551,   552,    20,     0,     0,     0,     0,     0,   144,     0,
-     0,    23,     0,   620,     0,  1437,    80,     0,  1555,     0,
-    26,     0,   130,   131,   582,   583,   584,   585,   586,   587,
-   588,   589,   590,   591,   592,   593,   621,  1630,     0,     0,
-     0,     0,     0,     0,   203,   203,   622,   258,   203,     0,
-   203,   203,   203,   753,     0,   725,   623,   203,  1645,   631,
-   625,     0,   203,     0,     0,   203,     0,   853,  1291,     0,
-     0,  1480,     0,     0,     0,     0,   727,     0,   727,     0,
-   727,     0,    80,     0,     0,     0,   300,   127,   128,    10,
-     0,     0,    13,   725,     0,     0,     0,     7,     8,     9,
-    10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,  1309,    18,     0,     0,     0,     0,   104,
-   104,   104,   104,     0,    21,     0,  1136,     0,     0,  1137,
-   620,     0,     0,     0,     0,    21,     0,    26,     0,    27,
-   319,  1143,   251,     0,     0,   904,   907,     0,     0,   729,
-    27,    28,     0,  1151,     0,     0,     0,     0,     0,     0,
-     8,     9,     0,  1152,    12,    13,  1540,  1541,     0,     0,
-    14,    32,     0,   623,   252,     0,  1153,   625,     0,   104,
-   727,   531,    32,  1396,    16,     0,    17,  1397,     0,   904,
-   907,     0,    20,   618,     0,   531,   531,     0,   634,     0,
-     0,    23,     0,     0,  1568,   929,     0,     0,     0,   931,
-    26,     0,   130,   131,   603,     0,     0,   258,     0,     0,
-     0,     0,  1413,     0,   203,     0,   127,   128,     0,     0,
-     0,   246,     0,     0,  1582,     0,  1418,     0,     0,     0,
-     0,     0,     0,     0,     7,     8,     9,    10,   133,   604,
-   246,     0,     0,    18,     0,   133,     0,     0,     0,     0,
-     0,     0,     0,   203,   973,   203,   203,   238,   634,   620,
-     0,     0,    18,     0,     0,     0,    26,     0,   130,   131,
-     0,     0,    21,     0,     0,     0,     0,     0,   620,     0,
-     0,     0,   621,     0,     0,    26,     0,    27,    28,     0,
-     0,  1473,   622,     0,     0,  1474,     0,     0,     0,     0,
-   203,   966,   623,     0,   973,   624,   625,     0,     0,     0,
-     0,   967,   203,   203,   753,   753,   753,  1489,  1490,    32,
-   203,   623,     0,     0,   968,   625,     0,     0,   725,     0,
-     0,     0,     0,   727,   579,   580,   581,   582,   583,   584,
-   585,   586,   587,   588,   589,   590,   591,   592,   593,   133,
-     0,     0,    80,     0,    80,     0,     0,     0,     0,  1065,
-    80,     0,    80,     0,   904,   907,     0,     0,   104,     0,
-     0,     0,   263,     0,   104,     8,     9,     0,     0,    12,
-    13,   531,   531,   531,     0,    14,     0,     0,     0,  1136,
-  1137,   904,   907,   531,     0,     0,     0,     0,  1143,    16,
-     0,    17,     0,     0,     0,     0,     0,    20,     0,   264,
-   265,     0,     0,     0,     0,     0,    23,     0,   266,     0,
-     0,   904,   907,     0,     0,    26,     0,   130,   131,     0,
-   267,     0,     0,     0,   268,   269,   270,   271,   272,   273,
-   274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
-   284,   285,   286,   287,   288,     0,     0,   289,   290,   291,
-     0,     0,   292,     0,     0,   293,   531,   531,     0,     0,
-   531,     0,     0,   531,     0,     0,     0,     0,   104,     0,
-     0,   294,   531,     0,   104,     0,   929,   929,   929,     0,
-     0,     0,   531,     0,  1154,     0,   300,     8,     9,    10,
-   580,   581,   582,   583,   584,   585,   586,   587,   588,   589,
-   590,   591,   592,   593,     0,  1136,  1137,   904,   907,     0,
-     0,     0,  1143,     0,     0,     0,   104,     0,   104,     0,
-   203,   203,  1183,    83,    21,     0,     0,     0,     0,     0,
-     0,   251,     0,   106,     0,     0,     0,   472,   475,    27,
-   319,     0,   126,   134,     0,     0,     0,     0,     0,   145,
-   145,     0,   145,     0,    83,   300,   127,   128,    10,     0,
-     0,    83,     0,   252,     0,  1183,     0,     0,     0,     0,
-     0,    32,     0,     0,   145,     0,    83,     0,   104,   753,
-   753,   753,     0,    18,   239,     0,     0,     0,     0,     0,
-     0,   248,     0,    21,     0,   104,     0,     0,  1065,   620,
-     0,     0,     0,   248,     0,     0,    26,   104,    27,   319,
-     0,     0,     0,   300,     8,     9,    10,     0,  1136,  1137,
-  1247,  1143,  1151,     0,     0,     0,     0,     0,    80,     0,
-     0,     0,  1152,     0,     0,     0,     0,     0,     0,     0,
-    32,   104,   623,   104,     0,  1153,   625,     0,     0,     0,
-     0,    21,     0,     0,     0,    83,     0,     0,   251,   145,
-   145,     0,     0,     0,     0,   145,    27,   319,   145,   145,
-   145,   104,     0,     0,     0,     0,   531,   531,     0,   531,
-     0,     0,     0,     0,    83,     0,     0,     0,    83,     0,
-   522,     0,     0,     0,   145,    83,     0,     0,    32,     0,
-     0,     0,   531,   904,   907,   531,   531,   634,     0,     0,
-     0,     0,   145,   145,   145,     7,     8,     9,    10,   167,
-    12,    13,     0,     0,     0,     0,    14,     0,     0,   203,
-   203,   203,   203,   203,  1183,   753,     0,     0,     0,   203,
-    16,   145,    17,    18,    19,     0,     0,     0,    20,     0,
-     0,     0,     0,    21,     0,     0,     0,    23,     0,     0,
-   168,     0,  1183,  1183,  1183,     0,    26,     0,    27,    28,
-     0,     0,     0,     0,   753,   753,   753,   753,   145,     0,
-     0,     0,    30,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,    31,     0,     0,     0,     0,     0,   203,     0,
-    32,     0,     0,   144,     0,    33,    80,     0,     0,     0,
-    34,     0,     0,     0,     0,   746,   248,   145,   747,     0,
-   472,   475,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,   763,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     7,     8,     9,    10,   214,   215,   216,     0,
-     0,     0,     0,    14,     0,   753,   203,   203,   753,   753,
-  1417,   248,     0,   203,     0,   619,     0,   145,   145,   635,
-    18,     0,     0,     0,   644,    20,     0,     0,    83,     0,
-    21,     0,     0,     0,    23,     0,   620,     0,     0,     0,
-     0,     0,     0,    26,     0,    27,    28,     0,     0,   203,
-   973,   203,     0,     0,     0,     0,     0,     0,     0,   966,
-     0,     0,   681,     0,     7,     8,     9,    10,   104,   967,
-    13,   248,     0,   145,   248,     0,     0,    32,     0,   623,
-     8,     9,   968,   625,    12,   246,     0,     0,   145,     0,
-    14,   145,    18,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,    21,   145,    16,     0,    17,     0,   620,     0,
-     0,    83,    20,     0,     0,    26,     0,    27,    28,   753,
-   753,    23,   753,     0,     0,     0,     0,     0,     0,     0,
-    26,  1178,   130,   131,     0,     0,     0,     0,     0,   145,
-   145,  1179,     0,   145,     0,   145,   145,   145,   145,    32,
-     0,   623,   145,     0,  1180,   625,     0,   145,     0,     0,
-   145,     0,     0,     0,     0,  1183,     0,     0,     0,     0,
-     8,     9,     0,   167,    12,    13,   782,    83,   733,     0,
-    14,     7,     8,     9,    10,     0,     0,   519,     0,     0,
-     0,     0,     0,     0,    16,     0,    17,    18,     0,     0,
-     0,     0,    20,     0,   753,   753,  1417,   753,     0,    18,
-     0,    23,     0,     0,   248,   248,   248,   248,     0,    21,
-    26,     0,   130,   131,     0,   620,     0,     0,     0,     0,
-     0,     0,    26,     0,    27,    28,  1183,  1183,  1183,     0,
-     0,     0,   746,   747,   472,   475,     0,     0,   966,     0,
-   763,     0,     0,     0,     0,     0,   753,   104,   967,     0,
-     0,     0,   203,     0,     0,     0,    32,     0,   623,     0,
-     0,   968,   625,     0,   248,     0,   145,   581,   582,   583,
-   584,   585,   586,   587,   588,   589,   590,   591,   592,   593,
-   145,   145,     0,   635,     0,     0,     0,     0,     0,     0,
-   930,   166,     0,     7,     8,     9,    10,   167,    12,    13,
-     0,     0,     0,   644,    14,     0,     0,     0,     0,   145,
-     0,     0,     0,     0,     0,     0,     0,     0,    16,     0,
-    17,    18,    19,     0,     0,     0,    20,     0,     0,     0,
-     0,    21,     0,   681,     0,    23,     0,     0,   168,     0,
-     0,   126,     0,     0,    26,     0,    27,    28,   145,   635,
-   145,   145,   239,   635,     0,     0,     0,     0,     0,     0,
-    30,     0,     0,     7,   127,   128,    10,     0,     0,   246,
-    31,     0,     0,     0,     0,     0,   782,     0,    32,     0,
-     0,     0,     0,    33,     0,     0,     0,     0,    34,     0,
-     0,    18,     0,     0,     0,   145,     0,     0,     0,   635,
-     0,    21,     0,     0,     0,     0,     0,   145,   145,   145,
-   145,   145,     0,     0,    26,   145,    27,    28,   127,   128,
-     0,     0,     0,   519,     0,     0,     0,     0,     0,     0,
-    30,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-    31,     0,     0,     0,   134,    18,     0,    83,    32,    83,
-   472,   475,     0,    33,  1066,    83,     0,    83,     0,     0,
-     0,   620,     0,   248,     0,     0,     0,     0,    26,   248,
-   130,   131,     0,     0,     0,     0,   145,   145,   145,     0,
-     0,     0,     0,     0,   621,     0,     0,     0,   145,     0,
-     0,     0,     0,     0,   622,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,   623,     0,     0,   624,   625,   746,
-   747,   763,     0,     0,     0,     0,     6,     0,     7,     8,
-     9,    10,    11,    12,    13,     0,     0,     0,     0,    14,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,    16,     0,    17,    18,     0,     0,     0,
-     0,    20,     0,     0,     0,     0,    21,     0,     0,     0,
-    23,   145,   145,   438,     0,   145,     0,     0,   145,    26,
-     0,    27,    28,   248,     0,    29,     0,   145,     0,   248,
-     0,   930,   930,   930,     0,    30,     0,   145,     0,   644,
-     0,     0,     0,     0,     0,    31,     0,     0,     0,     0,
-     0,     0,     0,    32,   300,     8,     9,    10,    33,    12,
-   301,   302,   303,     0,   304,    14,     0,     0,     0,     0,
-     0,   248,     0,   248,     0,   145,   145,   635,     0,    16,
-   305,    17,    18,    19,     0,   306,   307,    20,     0,   308,
-   309,   310,    21,   311,   312,     0,    23,     0,   620,     0,
-   313,   314,   315,   316,   317,    26,     0,    27,   319,     0,
-   746,   747,   472,   475,     0,     0,     0,     0,   321,   763,
-   930,   922,     0,     0,     0,     0,     0,     0,     0,   323,
-   324,   923,     0,   248,   145,   145,   145,   326,   327,   328,
-     0,   623,   472,   475,   924,   625,     0,     0,   782,     0,
-   248,     0,     0,  1066,   472,   475,     0,     0,     0,     0,
-     0,   330,   248,   300,     8,     9,    10,     0,     0,    13,
-     0,     0,     0,     0,     7,   127,   128,    10,     0,     0,
-    13,     0,     0,    83,     0,     0,     0,     0,     0,     0,
-     0,    18,     8,     9,     0,     0,   248,   246,   248,     0,
-     0,    21,    18,     0,     0,     0,     0,   620,     0,     0,
-     0,     0,    21,     0,    26,     0,    27,   319,     0,    18,
-     0,     0,     0,     0,     0,    26,   248,    27,    28,     0,
-  1304,   145,   145,     0,   145,   620,   746,   747,   472,   475,
-  1305,   149,    26,   763,   130,   131,     0,     0,    32,     0,
-   623,   150,     0,  1306,   625,     0,     0,   145,  1500,    32,
-   145,   145,   635,     0,   151,     0,     0,     0,  1501,     7,
-     8,     9,    10,   214,   215,   216,     0,     0,   623,     0,
-    14,  1502,   625,     0,   145,   145,   145,   145,   145,   635,
-   145,     0,     0,     0,   145,     0,     0,    18,     0,     0,
-     0,   782,    20,     0,     0,     0,     0,    21,     0,     0,
-     0,    23,     0,   620,     0,     0,     0,   930,   930,   930,
-    26,     0,    27,    28,     0,     0,     0,     0,     0,   145,
-   145,   145,   145,     0,     0,     0,   966,     0,   782,     0,
-    51,     0,     0,     0,     0,     0,   967,     0,     0,   746,
-   747,     0,   763,   145,    32,     0,   623,     0,   145,  1011,
-   625,    83,     0,     0,     0,     0,    51,    51,     0,   152,
-     0,    51,     0,     0,     0,     0,     0,     0,    51,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,    51,   783,    51,     7,     8,   784,    10,   167,    12,
-    13,     0,     0,     0,     0,    14,     0,     0,     0,     0,
-   145,   145,   145,   145,   145,   635,   254,     0,   145,    16,
-     0,    17,    18,    19,     0,     0,     0,    20,  -524,     0,
-     0,     0,    21,     0,   472,   475,    23,   785,     0,   168,
-     0,     0,     0,  1448,     0,    26,     0,    27,    28,     0,
-     0,   786,     0,   787,   145,   635,   145,     0,     0,     0,
-     0,    30,     0,     0,     0,     0,   472,   475,     0,   396,
-   396,    31,    51,   248,     0,     0,    51,    51,     0,    32,
-   254,     0,    51,     0,    33,   152,   152,   152,     0,     0,
-     0,     0,   431,     0,     0,     0,     0,     0,     0,     0,
-  -524,    51,     0,     0,     0,    51,     0,     0,     0,     0,
-     0,    51,    51,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,   145,   145,     0,   145,     0,    51,
-    51,   152,     0,     0,     0,     0,     0,     0,   732,   254,
-   300,     8,     9,    10,   167,    12,   301,   302,   303,   733,
-   304,    14,     0,     0,     0,     0,     0,     0,    51,     0,
-     0,     0,     0,     0,     0,    16,   305,    17,    18,    19,
-   930,   306,   307,    20,     0,   308,   309,   310,    21,   311,
-   312,     0,    23,     0,     0,     0,   313,   314,   315,   316,
-   317,    26,     0,    27,   319,    51,     0,     0,   320,     7,
-     8,     9,    10,     0,   321,    13,     0,   322,     0,   145,
-   145,   635,   145,     0,     0,   323,   324,   325,     0,     0,
-     0,     0,     0,   326,   327,   328,     0,    18,     0,     0,
-   329,     0,     0,     0,     0,     0,     0,    21,     0,     0,
-     0,   930,   930,   930,     0,  -801,     0,   330,     0,     0,
-    26,     0,    27,    28,     0,     0,     0,     0,     0,     0,
-     0,   145,   248,     0,     0,   559,   193,   145,     0,     0,
-     0,     0,     0,     0,     0,     0,   194,     0,     0,     0,
-     0,     0,   396,     0,    32,     0,     0,     0,     0,   195,
-   254,     0,     0,     0,     0,    51,     0,     0,     0,     0,
-     7,     8,     9,    10,   167,    12,    13,     0,     0,   733,
-    78,    14,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,    16,     0,    17,    18,   396,
-     0,     0,     0,    20,     0,     0,    78,    78,    21,    78,
-    51,    78,    23,     0,   620,     0,     0,     0,    78,     0,
-     0,    26,     0,    27,    28,    51,     0,     0,    51,     0,
-     0,    78,     0,    78,   431,   431,   431,  1178,     0,     0,
-    51,     0,     0,     0,     0,     0,     0,  1179,    51,     0,
-     0,     0,     0,     0,     0,    32,     0,   623,   127,   128,
-  1180,   625,   215,   216,     0,     0,     0,     0,    14,     0,
-     0,     0,     0,     0,     0,     0,    51,    51,     0,     0,
-    51,     0,   152,   152,   152,   431,     0,     0,     0,    51,
-    20,     0,     0,     0,    51,     0,     0,    51,     0,    23,
-     0,   620,     0,     0,     0,     0,     0,     0,    26,     0,
-   130,   131,    78,     0,    51,     0,    78,    78,     0,     0,
-     0,     0,    78,     0,   621,    78,    78,    78,     0,     0,
-     0,     0,     8,     9,   622,   167,    12,    13,     0,     0,
-  1584,    78,    14,   559,   623,    78,   559,   624,   625,     0,
-     0,    78,    78,     0,     0,     0,    16,     0,    17,    18,
-     0,   559,   559,   559,    20,     0,     0,     0,     0,    78,
-    78,    78,     0,    23,     0,     0,   559,     0,     0,     0,
-     0,     0,    26,     0,   130,   131,     0,     0,     0,     0,
-     0,     0,   723,     0,   840,   841,   842,    10,    78,    12,
-   536,   302,   303,     0,   304,    14,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,    16,
-   305,    17,     0,    19,   254,   306,   307,    20,     0,   308,
-   309,   310,    21,   311,   312,    78,    23,   559,     0,     0,
-   313,   314,   315,   316,   317,    26,     0,   843,   844,   724,
-     0,     0,   320,     0,     0,     0,    51,     0,   321,     0,
-     0,   322,     8,     9,     0,     0,    12,   246,     0,   323,
-   324,   325,    14,     0,     0,     0,     0,   326,   327,   328,
-   396,     0,     0,     0,   329,   845,    16,   396,    17,     0,
-     0,     0,     0,     0,    20,    51,    51,    51,    51,     0,
-  1003,   330,     0,    23,     0,   620,     0,     0,     0,     0,
-     0,     0,    26,     0,   130,   131,     0,     0,     0,     0,
-     0,     0,     7,     8,     9,    10,     0,     0,   621,     0,
-     0,   643,     0,     0,     0,    78,     0,     0,   622,     0,
-     0,     0,    51,     0,     0,     0,    51,     0,   623,     0,
-    18,   624,   625,     0,    51,    51,   431,   431,   431,     0,
-    21,     0,    51,     0,     0,     0,   620,     0,     0,     0,
-     0,     0,     0,    26,     0,    27,    28,     0,     0,     0,
-    78,   159,     0,     0,     0,     0,     0,     0,     0,   966,
-     0,     0,     0,     0,    51,    78,    51,     0,    78,   967,
-     0,    51,    51,   204,    51,     0,     0,    32,     0,   623,
-    78,     0,   968,   625,     0,     0,     0,     0,    78,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,   559,
-     0,     0,     0,     0,   300,     8,     9,    10,     0,     8,
-     9,     0,   205,    12,   206,     0,    78,    78,     0,    14,
-    78,     0,    78,    78,    78,     7,   127,   128,    10,    78,
-     0,   519,    18,    16,    78,    17,    18,    78,     0,     0,
-     0,    20,    21,     0,     0,     0,     0,     0,   620,     0,
-    23,     0,     0,    18,    78,    26,     0,    27,   319,    26,
-     0,   130,   131,    21,     0,     0,     0,   159,   159,   159,
-     0,  1304,     0,     0,     0,     0,    26,     0,    27,    28,
-     0,  1305,     0,     0,     0,     0,     0,     0,     0,    32,
-     0,   623,    30,   204,  1306,   625,     0,     0,   559,   559,
-   559,     0,    31,     0,   431,   254,     0,     0,     0,     0,
-    32,   204,   204,   481,     0,    33,     0,     0,     7,     8,
-     9,    10,     0,   783,   246,     7,     8,   784,    10,   167,
-    12,    13,     0,     0,     0,     0,    14,     0,     0,     0,
-   204,     0,    51,    51,   152,     0,    18,     0,     0,   254,
-    16,     0,    17,    18,    19,     0,    21,     0,    20,  -525,
-     0,     0,     0,    21,     0,   643,     0,    23,   785,    26,
-   168,    27,    28,     0,     0,     0,    26,     0,    27,    28,
-     0,     0,   786,     0,   787,   193,     0,  1211,     0,     0,
-     0,     0,    30,     0,     0,   194,    78,     0,     0,     0,
-     0,     0,    31,    32,     0,     0,     0,     0,   195,     0,
-    32,     0,     0,     0,     0,    33,   532,     0,     0,     0,
-    51,   300,     8,     9,    10,   167,    12,    13,     0,     0,
-   733,  -525,    14,     0,     0,    78,    78,    78,    78,     0,
-     0,   254,     0,     0,     0,     0,    16,     0,    17,    18,
-    51,     0,     0,     0,    20,     0,     0,     8,     9,    21,
-     0,     0,   519,    23,     0,   620,   628,   628,   628,     0,
-     0,     0,    26,     0,    27,   319,     0,     0,     0,     0,
-     0,     0,    78,     0,    18,     0,    78,     0,  1151,     0,
-     0,     0,     0,     0,    78,    78,     0,     0,  1152,     0,
-   620,     0,    78,     0,     0,     0,    32,    26,   623,   130,
-   131,  1153,   625,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,   204,  1500,   431,     0,     0,   431,   431,   431,
-   254,     0,     0,  1501,    78,     0,    78,     0,     0,     0,
-     0,    78,    78,   623,    78,     0,  1502,   625,     0,     0,
-     0,    51,    51,    51,   152,   152,   152,   431,     0,   254,
-     0,    51,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,     7,     8,     9,    10,
-     0,     0,    13,     0,  1211,  1211,  1211,     0,   204,   204,
-     0,     0,   204,     0,   481,   481,   481,   754,     0,     0,
-     0,   204,     0,     0,    18,     0,   204,     8,     9,   204,
-   167,    12,    13,     0,    21,   733,     0,    14,     0,     0,
-    51,     0,     0,     0,     0,    51,     0,    26,    51,    27,
-    28,    16,     0,    17,    18,     0,     0,     0,     0,    20,
-     0,     0,     0,   476,     0,     0,     0,     0,    23,     0,
-   620,     0,     0,   477,     0,     0,     0,    26,     0,   130,
-   131,    32,     0,     0,     0,     0,   478,     0,     0,     0,
-     0,     0,     0,   621,     0,     0,   643,   431,    51,    51,
-   431,   431,   431,   622,     0,    51,     0,     0,     0,     0,
-     0,     0,     0,   623,     0,     0,   624,   625,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,    78,    78,    78,     0,     0,     0,     0,     0,
-     0,    51,    51,    51,     0,   888,     0,     0,     8,     9,
-     0,   167,    12,    13,     0,     0,   733,     0,    14,   628,
-   628,     0,   628,     0,     7,     8,     9,    10,     0,   628,
-   519,   202,    16,     0,    17,    18,     0,  1213,     0,     0,
-    20,     0,     0,     0,     0,     0,     0,     0,   204,    23,
-     0,   620,    18,     0,     0,     0,   257,     0,    26,   261,
-   130,   131,    21,     0,     0,   369,   371,     0,     0,     0,
-    78,     0,     0,     0,  1500,    26,     0,    27,    28,     0,
-   257,     0,   365,     0,  1501,     0,     0,   970,     0,   970,
-   970,   193,   628,     0,   623,     0,     0,  1502,   625,     0,
-    78,   194,     0,     0,     0,     0,     0,     0,     0,    32,
-     0,     8,     9,     0,   195,    12,    13,  1211,     0,     0,
-     0,    14,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,   970,    16,     0,    17,     0,     0,
-     0,     0,     0,    20,     0,     0,   204,   204,   754,   754,
-   754,   202,    23,     0,   204,     0,   300,     8,     9,    10,
-     0,    26,    13,   130,   131,     0,     0,     0,     0,   202,
-   202,   202,     0,     0,     0,     0,     0,     0,     0,   487,
-     0,     0,     0,     0,    18,     0,     0,     0,  1211,  1211,
-  1211,     0,     0,   204,    21,     0,     0,     0,   202,     0,
-     0,    78,    78,    78,    78,    78,    78,    26,     0,    27,
-   319,    78,     0,     0,    51,   532,   532,   532,     0,     0,
-     0,     0,     0,   750,   261,     0,     0,   628,     0,     0,
-     0,     0,     0,   751,  1213,  1213,  1213,     0,   257,     0,
-     0,    32,     0,     0,     0,     0,   752,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,     7,     8,     9,
-    10,   205,    12,   206,     0,     0,     0,     0,    14,     0,
-    78,     0,     0,     0,     0,    78,     0,     0,    78,     0,
-     0,     0,    16,     0,    17,    18,     0,   562,     0,     0,
-    20,     0,     0,     0,     0,    21,     0,     0,     0,    23,
-   628,   628,     0,     0,   628,     0,     0,   628,    26,     0,
-    27,    28,     0,     0,   207,     0,   628,     0,     0,     0,
-   628,   628,   628,     0,    30,     0,   628,     0,    78,    78,
-   257,   261,     0,     0,    31,    78,     0,     0,     0,     0,
-     0,     0,    32,  1054,  1055,     9,    10,    33,     6,     0,
-     7,     8,     9,    10,    11,    12,    13,     0,     0,     0,
-   688,    14,     0,     0,   970,   970,  1184,     0,     0,     0,
-     0,    78,    78,    78,    15,    16,     0,    17,    18,    19,
-   202,    21,     0,    20,     0,     0,     0,     0,    21,     0,
-     0,    22,    23,    24,    26,    25,    27,    28,     0,     0,
-     0,    26,  1056,    27,    28,     0,     0,    29,     0,  1184,
-   193,     0,     0,     0,     0,     0,     0,    30,     0,     0,
-   194,     0,     0,   754,   754,   754,   735,    31,    32,     0,
-     0,     0,     0,   195,     0,    32,     0,     0,     0,     0,
-    33,     0,   204,     0,     0,    34,   202,   202,     0,     0,
-   202,     0,   202,   202,   202,   202,     0,     0,     0,   202,
-     0,     0,     0,     0,   202,     0,     0,   202,     0,     0,
-     0,     0,     0,     0,     0,     0,  1381,  1382,     9,    10,
-     7,     8,     9,    10,   214,   215,   216,  1213,     0,     0,
-     0,    14,     0,     0,     0,   822,     0,     0,   825,     0,
-     0,     0,   827,   828,   830,   831,   832,     0,    18,     0,
-     0,     0,     0,    20,    21,   562,     0,     0,    21,     0,
-   888,   888,    23,   888,   620,     0,     0,    26,   849,    27,
-    28,    26,     0,    27,    28,  1383,     0,     0,     0,     0,
-     0,     0,     0,   193,     0,     0,   628,   193,     0,   628,
-   628,   628,     0,   194,     0,     0,     0,   194,  1213,  1213,
-  1213,    32,     0,     0,     0,    32,   195,     0,     0,     0,
-  1461,     0,     0,   970,   970,   970,  1184,  1184,  1184,  1307,
-     0,     0,   908,   970,    78,     0,     0,     0,     0,   908,
-     0,     0,     0,     0,     0,     0,     7,   127,   128,    10,
-     0,     0,     7,     8,     9,    10,  1184,  1184,  1184,     0,
-   257,   261,     0,     0,     0,     0,     0,     0,   754,   754,
-   754,   754,     0,     0,    18,     0,   202,     0,     0,   102,
-    18,     0,     0,     0,    21,     0,     0,     0,   121,   102,
-    21,     0,   204,     0,     0,   102,   102,    26,   102,    27,
-    28,     0,     0,    26,     0,    27,    28,     0,     0,     0,
-     0,     0,     0,    30,     0,   202,     0,   202,   202,   476,
-     0,     0,     0,    31,     0,     0,     0,     0,     0,   477,
-   235,    32,     0,     0,     0,     0,    33,    32,     0,     0,
-     0,     0,   478,     0,     0,     0,     0,     0,   688,  1307,
-   970,   970,  1307,  1307,  1307,     0,     0,   970,     0,     0,
-     0,     0,   202,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,   202,   202,   202,   202,   202,   487,
-     0,     0,   202,     0,     0,     0,     0,     0,     0,   389,
-     0,   121,     0,   204,     0,   204,     0,     0,   102,   102,
-     0,     0,     0,     0,     0,   102,   102,     0,   261,   102,
-   102,   102,   735,   417,   102,   102,   102,     0,   735,     0,
-     0,   202,   578,   579,   580,   581,   582,   583,   584,   585,
-   586,   587,   588,   589,   590,   591,   592,   593,   626,   626,
-   626,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,   783,     0,     7,     8,   784,    10,   167,    12,
-    13,     0,     0,  1307,  1307,    14,  1307,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,    16,
-     0,    17,    18,    19,     0,     0,  1116,    20,  -527,     0,
-     0,     0,    21,     0,     0,     0,    23,   785,     0,   168,
-     0,     0,     0,   235,   102,    26,     0,    27,    28,   481,
-     0,   786,     0,   787,     0,     0,     0,     0,     0,     0,
-     0,    30,   849,     0,   102,     0,     0,     0,   735,     0,
-     0,    31,   908,     0,     0,     0,     0,     0,     0,    32,
-     0,     0,     0,     0,    33,     0,     0,     0,  1307,  1307,
-  1307,  1307,     0,     0,     0,   257,   261,   257,     0,     0,
-  -527,     0,     0,   102,     0,     0,     0,     0,     0,     0,
-   688,     0,  1173,     0,     0,     0,   908,     0,     0,     0,
-   481,   481,   481,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,   202,   202,  1182,     0,     0,     0,     0,   257,
-  1307,     0,     0,     0,     0,     0,   204,     0,     0,     0,
-     0,   102,     0,   102,   102,     0,     0,     0,     0,   908,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,  1217,     0,     0,     0,     0,  1182,     0,     0,
-     0,     0,  1228,     0,     0,     0,     0,     0,     0,   735,
-     0,   202,   202,   202,     0,     0,     0,     0,   102,     0,
-     0,   735,     7,     8,     9,    10,   300,     8,     9,    10,
-   202,     0,     0,     0,     0,     0,     0,   102,     0,     0,
-     0,     0,     0,     0,   102,     0,     0,   102,     0,     0,
-    18,   487,     0,     0,    18,   735,     0,   735,     0,   102,
-    21,     0,     0,     0,    21,     0,     0,     0,     0,     0,
-     0,   626,   626,    26,   626,    27,    28,    26,     0,    27,
-   319,   926,     0,     0,     0,  1277,     0,     0,     0,   193,
-     0,     0,     0,   750,     0,     0,     0,     0,     0,   194,
-     0,     0,     0,   751,     0,     0,     0,    32,     0,     0,
-     0,    32,   195,     0,     0,     0,   752,     0,     0,     0,
-     0,   908,     0,     0,     0,     0,     0,     0,     0,     0,
-   102,     0,   775,     0,     0,     0,     0,     0,     0,   626,
-   257,   626,   626,     0,   626,     0,     0,     0,   908,   300,
-     8,     9,    10,   167,    12,    13,   102,     0,   733,     0,
-    14,   202,   202,   202,   202,   202,  1182,   202,     0,  1308,
-     0,   202,     0,     0,    16,     0,    17,    18,   908,     0,
-     0,     0,    20,     0,     0,     0,   626,    21,     0,     0,
-     0,    23,     0,   620,  1182,  1182,  1182,     0,     0,     0,
-    26,     0,    27,   319,     0,     0,   202,   202,   202,   202,
-     0,     0,     0,     0,     0,     0,  1304,     0,     0,  1381,
-   127,   128,    10,     0,     0,     0,  1305,     0,     0,     0,
-   202,     0,   102,     0,    32,     0,   623,     0,     0,  1306,
-   625,     0,     0,   102,   102,     0,   102,   102,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,    21,     0,     7,
-     8,     9,    10,     0,     0,     0,     0,     0,     0,     0,
-    26,     0,    27,    28,   908,     0,     0,     0,  1383,   626,
-     0,     0,     0,     0,     0,     0,    30,   202,   202,   202,
-   202,   202,  1182,     0,     0,   202,    31,    21,     0,   102,
-     0,     0,     0,     0,    32,     0,   102,   121,     0,    33,
-    26,     0,    27,    28,     0,     0,  1455,     0,   235,     0,
-     0,     0,     0,     0,     0,     0,   193,     0,     0,     0,
-     0,   202,  1217,   202,     0,     0,   194,     0,     0,     0,
-     0,     0,   775,     0,    32,     0,     0,    18,     0,   195,
-     0,     0,   626,   626,     0,     0,   626,     0,     0,   626,
-     0,     0,     0,     0,     0,     0,     0,     0,   626,     0,
-     0,     0,   926,   926,   926,     0,     0,     0,   626,   572,
-   573,   574,   575,   576,   577,   578,   579,   580,   581,   582,
-   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
-   593,   202,   202,  1308,   202,     0,     0,   775,     0,     0,
-   102,     0,     0,     0,     0,     0,   626,   626,   626,     0,
-     0,     0,   783,     0,     7,     8,   784,    10,   167,    12,
-    13,     0,     0,     0,     0,    14,     0,     0,     0,     0,
-     0,     0,   102,   102,   102,     0,     0,  1182,     0,    16,
-     0,    17,    18,    19,   102,     0,     0,    20,  -526,     0,
-     0,   926,    21,     0,     0,     0,    23,   785,     0,   168,
-   908,     0,     0,     0,     0,    26,     0,    27,    28,     0,
-     0,   786,     0,   787,     0,     0,   202,   202,  1182,   202,
-     0,    30,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,    31,   562,     0,     0,     0,     0,     0,     0,    32,
-     0,     0,     0,     0,    33,     0,     0,     0,  1182,  1182,
-  1182,   688,     0,     0,     8,     9,     0,   102,   102,    13,
-  -526,   102,     0,     0,   102,     0,     0,     0,   202,     0,
-     0,     0,     0,   102,   202,     0,     0,     0,     0,     0,
-     0,    18,     0,   102,     0,     7,     8,     9,    10,   167,
-    12,    13,     0,     0,  1016,     0,    14,   620,     0,     0,
-     0,     0,     0,     0,    26,     0,   130,   131,     0,     0,
-    16,     0,    17,    18,     0,     0,     0,     0,    20,     0,
-  1500,     0,     0,    21,     0,     0,     0,    23,   626,     0,
-  1501,   626,   626,   626,     0,     0,    26,     0,    27,    28,
-   623,     0,     0,  1502,   625,     0,     0,     0,     0,     0,
-     0,     0,    30,     0,     0,   626,   626,   626,   626,   626,
-   626,   626,    31,     0,   852,   626,   300,     8,     9,    10,
-    32,    12,   536,   302,   303,    33,   304,    14,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,   926,   926,
-   926,    16,   305,    17,   775,    19,     0,   306,   307,    20,
-     0,   308,   309,   310,    21,   311,   312,     0,    23,     0,
-     0,     0,   313,   314,   315,   316,   317,    26,     0,    27,
-   319,   102,     0,     0,   320,  -791,     0,     0,     0,     0,
-   321,     0,     0,   322,     0,     0,     0,     0,     0,     0,
-     0,   323,   324,   325,     0,     0,     0,     0,     0,   326,
-   327,   328,     0,     0,     0,     0,   329,     0,  1516,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,   330,     0,     0,     0,   102,   102,     0,
-   102,   626,   626,   626,   626,   626,   626,     0,     0,   626,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,   102,     0,     0,   102,   102,  1517,   572,
-   573,   574,   575,   576,   577,   578,   579,   580,   581,   582,
-   583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
-   593,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,   775,     0,     0,
-     0,     0,     0,  1545,     0,  -480,  -480,  -480,  -480,  -480,
-  -480,  -480,     0,     0,  -480,     0,  -480,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,  -480,     0,  -480,
-     0,     0,     0,  -480,   775,     0,     0,     0,  -480,     0,
-     0,     0,     0,  -480,     0,   626,   626,  -480,   626,  -480,
-     0,     0,   102,     0,   102,     0,  -480,     0,  -480,  -480,
-  -480,  -480,  -480,     0,  -480,  -480,  -480,  -480,  -480,  -480,
-  -480,  -480,  -480,  -480,  -480,  -480,  -480,  -480,  -480,  -480,
-  -480,  -480,  -480,  -480,  -480,  -480,  -480,     0,  -480,  -480,
-  -480,     0,  -480,  -480,  -480,  -480,  -480,  -480,     0,  -480,
-     0,     0,     0,     0,  1546,     0,     0,     0,     0,  -480,
-  -480,  -480,     0,  -480,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-   626,   626,   626,   626,     0,  1463,     0,  1319,  1320,  1321,
-    10,   167,    12,   301,   302,   303,     0,   304,    14,  1322,
-     0,  1323,  1324,  1325,  1326,  1327,  1328,  1329,  1330,  1331,
-  1332,    15,    16,   305,    17,    18,    19,     0,   306,   307,
-    20,     0,   308,   309,   310,    21,   311,   312,  1333,    23,
-  1334,     0,   626,   313,   314,   315,   316,   317,    26,     0,
-  1335,   319,   720,     0,  1336,   320,     0,     0,     0,     0,
-     0,   321,     0,     0,   322,     0,     0,     0,     0,     0,
-     0,     0,   323,   324,   325,     0,     0,     0,     0,     0,
-   326,   327,   328,     0,     0,     0,     0,   329,     0,  1337,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,  1464,   330,  1318,     0,  1319,  1320,  1321,
-    10,   167,    12,   301,   302,   303,     0,   304,    14,  1322,
-     0,  1323,  1324,  1325,  1326,  1327,  1328,  1329,  1330,  1331,
-  1332,    15,    16,   305,    17,    18,    19,     0,   306,   307,
-    20,     0,   308,   309,   310,    21,   311,   312,  1333,    23,
-  1334,     0,     0,   313,   314,   315,   316,   317,    26,     0,
-  1335,   319,   720,     0,  1336,   320,     0,     0,     0,     0,
-     0,   321,     0,     0,   322,     0,     0,     0,     0,     0,
-     0,     0,   323,   324,   325,     0,     0,     0,     0,     0,
-   326,   327,   328,     0,     0,     0,     0,   329,   554,  1337,
-   300,     8,     9,    10,   167,    12,   301,   302,   303,   733,
-   304,    14,     0,     0,   330,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,    16,   305,    17,    18,    19,
-     0,   306,   307,    20,     0,   308,   309,   310,    21,   311,
-   312,     0,    23,     0,   620,     0,   313,   314,   315,   316,
-   317,    26,     0,    27,   319,  -312,     0,     0,   320,     0,
-     0,     0,     0,     0,   321,     0,     0,   922,     0,     0,
-     0,     0,     0,     0,     0,   323,   324,   923,     0,     0,
-     0,     0,     0,   326,   327,   328,     0,   623,     0,     0,
-   924,   625,   554,     0,     7,     8,     9,    10,   167,    12,
-   301,   302,   303,   733,   304,    14,     0,   330,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,    16,
-   305,    17,    18,    19,     0,   306,   307,    20,     0,   308,
-   309,   310,    21,   311,   312,     0,    23,     0,   620,     0,
-   313,   314,   315,   316,   317,    26,     0,    27,    28,  -312,
-     0,     0,   320,     0,     0,     0,     0,     0,   321,     0,
-     0,  1208,     0,     0,     0,     0,     0,     0,     0,   323,
-   324,  1209,     0,     0,     0,     0,     0,   326,   327,   328,
-     0,   623,     0,     0,  1210,   625,   852,     0,   300,     8,
-     9,    10,   167,    12,   301,   302,   303,     0,   304,    14,
-     0,   330,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,    16,   305,    17,    18,    19,     0,   306,
-   307,    20,     0,   308,   309,   310,    21,   311,   312,     0,
-    23,     0,     0,     0,   313,   314,   315,   316,   317,    26,
-     0,    27,   319,  1563,     0,  -791,   320,     0,     0,     0,
-     0,     0,   321,     0,     0,   322,     0,     0,     0,     0,
-     0,     0,     0,   323,   324,   325,     0,     0,     0,     0,
-     0,   326,   327,   328,     0,     0,     0,   554,   329,   300,
-     8,     9,    10,     0,    12,   301,   302,   303,     0,   304,
-    14,     0,     0,     0,     0,   330,     0,     0,     0,     0,
-     0,     0,     0,     0,    16,   305,    17,    18,    19,     0,
-   306,   307,    20,     0,   308,   309,   310,    21,   311,   312,
-     0,    23,     0,     0,     0,   313,   314,   315,   316,   317,
-    26,     0,    27,   319,  -312,     0,     0,   320,     0,     0,
-     0,     0,     0,   321,     0,     0,   555,     0,     0,     0,
-     0,     0,     0,     0,   323,   324,   556,     0,     0,     0,
-     0,     0,   326,   327,   328,     0,     0,     0,   723,   557,
-   840,   841,   842,    10,     0,    12,   536,   302,   303,     0,
-   304,    14,     0,     0,     0,     0,   330,     0,     0,     0,
-     0,     0,     0,     0,     0,    16,   305,    17,     0,    19,
-     0,   306,   307,    20,     0,   308,   309,   310,    21,   311,
-   312,     0,    23,     0,     0,     0,   313,   314,   315,   316,
-   317,    26,     0,   843,   844,   724,     0,     0,   320,     0,
-     0,     0,     0,     0,   321,     0,     0,   322,     0,     0,
-     0,     0,     0,     0,     0,   323,   324,   325,     0,     0,
-     0,     0,     0,   326,   327,   328,     0,     0,     0,     0,
-   329,   845,   723,     0,   840,   841,   842,    10,     0,    12,
-   536,   302,   303,     0,   304,    14,     0,   330,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,    16,
-   305,    17,     0,    19,     0,   306,   307,    20,     0,   308,
-   309,   310,    21,   311,   312,     0,    23,     0,     0,     0,
-   313,   314,   315,   316,   317,    26,     0,   843,   844,   724,
-     0,     0,   320,     0,     0,     0,     0,     0,   321,     0,
-     0,   322,     0,     0,     0,     0,     0,     0,     0,   323,
-   324,   325,     0,     0,     0,     0,     0,   326,   327,   328,
-     0,     0,     0,   723,   329,   840,   841,   842,    10,     0,
-    12,   536,   302,   303,     0,   304,    14,     0,     0,     0,
-  -484,   330,     0,     0,     0,     0,     0,     0,     0,     0,
-    16,   305,    17,     0,    19,     0,   306,   307,    20,     0,
-   308,   309,   310,    21,   311,   312,     0,    23,     0,     0,
-     0,   313,   314,   315,   316,   317,    26,     0,   843,   844,
-   724,     0,     0,   320,     0,     0,     0,     0,     0,   321,
-     0,     0,   322,     0,     0,     0,     0,     0,     0,     0,
-   323,   324,   325,     0,     0,     0,     0,     0,   326,   327,
-   328,     0,     0,     0,   723,   329,   300,     8,     9,    10,
-     0,    12,   536,   302,   303,     0,   304,    14,     0,     0,
-     0,  1357,   330,     0,     0,     0,     0,     0,     0,     0,
-     0,    16,   305,    17,     0,    19,     0,   306,   307,    20,
-     0,   308,   309,   310,    21,   311,   312,     0,    23,     0,
-     0,     0,   313,   314,   315,   316,   317,    26,     0,    27,
-   319,   724,     0,     0,   320,     0,     0,     0,     0,     0,
-   321,     0,     0,   322,     0,     0,     0,     0,     0,     0,
-     0,   323,   324,   325,     0,     0,     0,     0,     0,   326,
-   327,   328,     0,     0,     0,     0,   329,     0,   554,     0,
-     7,     8,     9,    10,  1361,    12,   301,   302,   303,     0,
-   304,    14,     0,   330,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,    16,   305,    17,    18,    19,
-     0,   306,   307,    20,     0,   308,   309,   310,    21,   311,
-   312,     0,    23,     0,     0,     0,   313,   314,   315,   316,
-   317,    26,     0,    27,    28,  -312,     0,     0,   320,     0,
-     0,     0,     0,     0,   321,     0,     0,  1532,     0,     0,
-     0,     0,     0,     0,     0,   323,   324,  1533,     0,     0,
-     0,     0,     0,   326,   327,   328,     0,     0,     0,   723,
-  1534,   300,     8,     9,    10,     0,    12,   536,   302,   303,
-     0,   304,    14,     0,     0,     0,     0,   330,     0,     0,
-     0,     0,     0,     0,     0,     0,    16,   305,    17,     0,
-    19,     0,   306,   307,    20,     0,   308,   309,   310,    21,
-   311,   312,     0,    23,     0,     0,     0,   313,   314,   315,
-   316,   317,    26,     0,    27,   319,   724,     0,     0,   320,
-     0,     0,     0,     0,     0,   321,     0,     0,   322,     0,
-     0,     0,     0,     0,     0,     0,   323,   324,   325,     0,
-     0,     0,     0,     0,   326,   327,   328,     0,     0,     0,
-  1616,   329,   300,     8,     9,    10,     0,    12,   301,   302,
-   303,     0,   304,    14,     0,     0,     0,     0,   330,     0,
-     0,     0,     0,     0,     0,     0,     0,    16,   305,    17,
-     0,    19,     0,   306,   307,    20,     0,   308,   309,   310,
-    21,   311,   312,     0,    23,     0,     0,     0,   313,   314,
-   315,   316,   317,    26,     0,    27,   319,     0,     0,  -196,
-   320,     0,     0,     0,     0,     0,   321,     0,     0,   322,
-     0,     0,     0,     0,     0,     0,     0,   323,   324,   325,
-     0,     0,     0,     0,     0,   326,   327,   328,     0,     0,
-     0,   852,   329,   300,     8,     9,    10,     0,    12,   536,
-   302,   303,     0,   304,    14,     0,     0,     0,     0,   330,
-     0,     0,     0,     0,     0,     0,     0,     0,    16,   305,
-    17,     0,    19,     0,   306,   307,    20,     0,   308,   309,
-   310,    21,   311,   312,     0,    23,     0,     0,     0,   313,
-   314,   315,   316,   317,    26,     0,    27,   319,     0,     0,
-     0,   320,     0,     0,     0,     0,     0,   321,     0,     0,
-   322,     0,     0,     0,     0,     0,     0,     0,   323,   324,
-   325,     0,     0,     0,     0,     0,   326,   327,   328,     0,
-     0,     0,   944,   329,   300,     8,     9,    10,     0,    12,
-   536,   302,   303,     0,   304,    14,     0,     0,  -791,     0,
-   330,     0,     0,     0,     0,     0,     0,     0,     0,    16,
-   305,    17,     0,    19,     0,   306,   307,    20,     0,   308,
-   309,   310,    21,   311,   312,     0,    23,     0,     0,     0,
-   313,   314,   315,   316,   317,    26,     0,    27,   319,     0,
-     0,     0,   320,     0,     0,     0,     0,     0,   321,     0,
-     0,   322,     0,     0,     0,     0,     0,     0,     0,   323,
-   324,   325,     0,     0,     0,     0,     0,   326,   327,   328,
-     0,     0,     0,   946,   329,   300,     8,     9,    10,     0,
-    12,   536,   302,   303,     0,   304,    14,     0,     0,     0,
-     0,   330,     0,     0,     0,     0,     0,     0,     0,     0,
-    16,   305,    17,     0,    19,     0,   306,   307,    20,     0,
-   308,   309,   310,    21,   311,   312,     0,    23,     0,     0,
-     0,   313,   314,   315,   316,   317,    26,     0,    27,   319,
-     0,     0,     0,   320,     0,     0,     0,     0,     0,   321,
-     0,     0,   322,     0,     0,     0,     0,     0,     0,     0,
-   323,   324,   325,     0,     0,     0,     0,     0,   326,   327,
-   328,     0,     0,     0,  1581,   329,   300,     8,     9,    10,
-     0,    12,   536,   302,   303,     0,   304,    14,     0,     0,
-     0,     0,   330,     0,     0,     0,     0,     0,     0,     0,
-     0,    16,   305,    17,     0,    19,     0,   306,   307,    20,
-     0,   308,   309,   310,    21,   311,   312,     0,    23,     0,
-     0,     0,   313,   314,   315,   316,   317,    26,     0,    27,
-   319,     0,     0,     0,   320,     0,     0,     0,     0,     0,
-   321,     0,     0,   322,     0,     0,     0,     0,     0,     0,
-     0,   323,   324,   325,     0,     0,     0,     0,     0,   326,
-   327,   328,   300,     8,     9,    10,   329,    12,   536,   302,
-   303,     0,   304,    14,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,   330,     0,     0,     0,    16,   305,    17,
-     0,    19,     0,   306,   307,    20,     0,   308,   309,   310,
-    21,   311,   312,     0,    23,     0,     0,     0,   313,   314,
-   315,   316,   317,    26,     0,    27,   319,     0,     0,     0,
-   320,     0,     0,     0,     0,     0,   321,     0,     0,   322,
-     0,     0,     0,     0,     0,     0,     0,   323,   324,   325,
-     0,     0,     0,     0,     0,   326,   327,   328,     0,     0,
-     0,     0,   329,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,   330,
-   891,  1319,  1320,  1321,    10,   167,    12,   301,   302,   303,
-     0,   304,    14,  1322,     0,  1323,  1324,  1325,  1326,  1327,
-  1328,  1329,  1330,  1331,  1332,    15,    16,   305,    17,    18,
-    19,     0,   306,   307,    20,     0,   308,   309,   310,    21,
-   311,   312,  1333,    23,  1334,     0,     0,   313,   314,   315,
-   316,   317,    26,     0,  1335,   319,   720,     0,  1336,   320,
-     0,     0,     0,     0,     0,   321,     0,     0,   322,     0,
-     0,     0,     0,     0,     0,     0,   323,   324,   325,     0,
-     0,     0,     0,     0,   326,   327,   328,     0,     0,     0,
-     0,   329,     0,  1337,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,  1468,   330,  1319,
-  1320,  1321,    10,   167,    12,   301,   302,   303,     0,   304,
-    14,  1322,     0,  1323,  1324,  1325,  1326,  1327,  1328,  1329,
-  1330,  1331,  1332,    15,    16,   305,    17,    18,    19,     0,
-   306,   307,    20,     0,   308,   309,   310,    21,   311,   312,
-  1333,    23,  1334,     0,     0,   313,   314,   315,   316,   317,
-    26,     0,  1335,   319,   720,     0,  1336,   320,     0,     0,
-     0,     0,     0,   321,     0,     0,   322,     0,     0,     0,
-     0,     0,     0,     0,   323,   324,   325,     0,     0,     0,
-     0,     0,   326,   327,   328,     0,     0,     0,     0,   329,
-     0,  1337,     0,  1319,  1320,  1321,    10,   167,    12,   301,
-   302,   303,     0,   304,    14,  1322,   330,  1323,  1324,  1325,
-  1326,  1327,  1328,  1329,  1330,  1331,  1332,    15,    16,   305,
-    17,    18,    19,     0,   306,   307,    20,     0,   308,   309,
-   310,    21,   311,   312,  1333,    23,  1334,     0,     0,   313,
-   314,   315,   316,   317,    26,     0,  1335,   319,  1590,     0,
-  1336,   320,     0,     0,     0,     0,     0,   321,     0,     0,
-   322,     0,     0,     0,     0,     0,     0,     0,   323,   324,
-   325,     0,     0,     0,     0,     0,   326,   327,   328,     0,
-     0,     0,     0,   329,     0,  1337,     0,  1319,  1320,  1321,
-    10,   167,    12,   301,   302,   303,     0,   304,    14,  1322,
-   330,  1323,  1324,  1325,  1326,  1327,  1328,  1329,  1330,  1331,
-  1332,    15,    16,   305,    17,    18,    19,     0,   306,   307,
-    20,     0,   308,   309,   310,    21,   311,   312,  1333,    23,
-  1334,     0,     0,   313,   314,   315,   316,   317,    26,     0,
-  1335,   319,     0,     0,  1336,   320,     0,     0,     0,     0,
-     0,   321,     0,     0,   322,     0,     0,     0,     0,     0,
-     0,     0,   323,   324,   325,     0,     0,     0,     0,     0,
-   326,   327,   328,     0,     0,     0,     0,   329,     0,  1337,
-   300,     8,     9,    10,   167,    12,   301,   302,   303,   733,
-   304,    14,     0,     0,   330,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,    16,   305,    17,    18,    19,
-     0,   306,   307,    20,     0,   308,   309,   310,    21,   311,
-   312,     0,    23,     0,   620,     0,   313,   314,   315,   316,
-   317,    26,     0,    27,   319,     0,     0,     0,   320,     0,
-     0,     0,     0,     0,   321,     0,     0,   922,     0,     0,
-     0,     0,     0,     0,     0,   323,   324,   923,     0,     0,
-     0,     0,     0,   326,   327,   328,     0,   623,     0,     0,
-   924,   625,     7,     8,     9,    10,   167,    12,   301,   302,
-   303,   733,   304,    14,     0,     0,     0,   330,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,    16,   305,    17,
-    18,    19,     0,   306,   307,    20,     0,   308,   309,   310,
-    21,   311,   312,     0,    23,     0,   620,     0,   313,   314,
-   315,   316,   317,    26,     0,    27,    28,     0,     0,     0,
-   320,     0,     0,     0,     0,     0,   321,     0,     0,  1208,
-     0,     0,     0,     0,     0,     0,     0,   323,   324,  1209,
-     0,     0,     0,     0,     0,   326,   327,   328,     0,   623,
-     0,     0,  1210,   625,     7,     8,     9,    10,     0,    12,
-   301,   302,   303,     0,   304,    14,     0,     0,     0,   330,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,    16,
-   305,    17,    18,    19,     0,   306,   307,    20,     0,   308,
-   309,   310,    21,   311,   312,     0,    23,     0,   620,     0,
-   313,   314,   315,   316,   317,    26,     0,    27,    28,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,   321,     0,
-     0,  1208,     0,     0,     0,     0,     0,     0,     0,   323,
-   324,  1209,     0,     0,     0,     0,     0,   326,   327,   328,
-     0,   623,     0,     0,  1210,   625,   300,     8,     9,    10,
-     0,    12,   536,   302,   303,     0,   304,    14,     0,     0,
-     0,   330,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,    16,   305,    17,    18,    19,     0,   306,   307,    20,
-     0,   308,   309,   310,    21,   311,   312,     0,    23,     0,
-     0,     0,   313,   314,   315,   316,   317,    26,     0,    27,
-   319,     0,     0,     0,   320,     0,     0,     0,     0,     0,
-   321,     0,     0,   555,     0,     0,     0,     0,     0,     0,
-     0,   323,   324,   556,     0,     0,     0,     0,     0,   326,
-   327,   328,   300,     8,     9,    10,   557,    12,   536,   302,
-   303,     0,   304,    14,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,   330,     0,     0,     0,    16,   305,    17,
-     0,    19,     0,   306,   307,    20,     0,   308,   309,   310,
-    21,   311,   312,     0,    23,     0,     0,     0,   313,   314,
-   315,   316,   317,    26,     0,    27,   319,     0,     0,  1441,
-   320,     0,     0,     0,     0,     0,   321,     0,     0,   322,
-     0,     0,     0,     0,     0,     0,     0,   323,   324,   325,
-     0,     0,     0,     0,     0,   326,   327,   328,     0,     0,
-     0,     0,   329,   300,     8,     9,    10,   167,    12,   301,
-   302,   303,     0,   304,    14,     0,     0,     0,     0,   330,
-     0,     0,     0,     0,     0,     0,     0,     0,    16,   305,
-    17,    18,    19,     0,   306,   307,    20,     0,   308,   309,
-   310,    21,   311,   312,     0,    23,     0,     0,     0,   313,
-   314,   315,   316,   317,    26,     0,    27,   319,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,   321,     0,     0,
-   322,     0,     0,     0,     0,     0,     0,     0,   323,   324,
-   325,     0,     0,     0,     0,     0,   326,   327,   328,     7,
-     8,     9,    10,   329,    12,   536,   302,   303,     0,   304,
-    14,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-   330,     0,     0,     0,    16,   305,    17,    18,    19,     0,
-   306,   307,    20,     0,   308,   309,   310,    21,   311,   312,
-     0,    23,     0,     0,     0,   313,   314,   315,   316,   317,
-    26,     0,    27,    28,     0,     0,     0,   320,     0,     0,
-     0,     0,     0,   321,     0,     0,  1532,     0,     0,     0,
-     0,     0,     0,     0,   323,   324,  1533,     0,     0,     0,
-     0,     0,   326,   327,   328,   300,     8,     9,    10,  1534,
-    12,   301,   302,   303,     0,   304,    14,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,   330,     0,     0,     0,
-    16,   305,    17,     0,    19,     0,   306,   307,    20,     0,
-   308,   309,   310,    21,   311,   312,     0,    23,     0,     0,
-     0,   313,   314,   315,   316,   317,    26,     0,   318,   319,
-     0,     0,     0,   320,     0,     0,     0,     0,     0,   321,
-     0,     0,   322,     0,     0,     0,     0,     0,     0,     0,
-   323,   324,   325,     0,     0,     0,     0,     0,   326,   327,
-   328,   300,     8,     9,    10,   329,    12,   301,   302,   303,
-     0,   304,    14,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,   330,     0,     0,     0,    16,   305,    17,     0,
-    19,     0,   306,   307,    20,     0,   308,   309,   310,    21,
-   311,   312,     0,    23,     0,     0,     0,   313,   314,   315,
-   316,   317,    26,     0,    27,   319,     0,     0,     0,   320,
-     0,     0,     0,     0,     0,   321,     0,     0,   322,     0,
-     0,     0,     0,     0,     0,     0,   323,   324,   325,     0,
-     0,     0,     0,     0,   326,   327,   328,   300,     8,     9,
-    10,   329,    12,   536,   302,   303,     0,   304,    14,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,   330,     0,
-     0,     0,    16,   305,    17,     0,    19,     0,   306,   307,
-    20,     0,   308,   309,   310,    21,   311,   312,     0,    23,
-     0,     0,     0,   313,   314,   315,   316,   317,    26,     0,
-    27,   319,     0,     0,     0,   320,     0,     0,     0,     0,
-     0,   321,     0,     0,   322,     0,     0,     0,     0,     0,
-     0,     0,   323,   324,   325,     0,     0,     0,     0,     0,
-   326,   327,   328,   300,     8,     9,    10,   329,    12,   536,
-   302,   303,     0,   304,    14,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,   330,     0,     0,     0,    16,   305,
-    17,     0,    19,     0,   306,   307,    20,     0,   308,   309,
-   310,    21,   311,   312,     0,    23,     0,     0,     0,   313,
-   314,   315,   316,   317,    26,     0,    27,   319,   569,     0,
-     0,     0,     0,     0,     0,     0,     0,   321,     0,     0,
-   322,     0,     0,     0,     0,     0,     0,     0,   323,   324,
-   325,     0,     0,     0,     0,     0,   326,   327,   328,   300,
-     8,     9,    10,   570,    12,   536,   302,   303,     0,   304,
-    14,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-   330,     0,     0,     0,    16,   305,    17,     0,    19,     0,
-   306,   307,    20,     0,   308,   309,   310,    21,   311,   312,
-     0,    23,     0,     0,     0,   313,   314,   315,   316,   317,
-    26,     0,    27,   319,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,   321,     0,     0,   322,     0,     0,     0,
-     0,     0,     0,     0,   323,   324,   325,     0,     0,     0,
-     0,     0,   326,   327,   328,     0,     0,     0,     0,   329,
-   608,   300,     8,     9,    10,     0,    12,   536,   302,   303,
-     0,   304,    14,     0,     0,     0,   330,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,    16,   305,    17,    18,
-    19,     0,   306,   307,    20,     0,   308,   309,   310,    21,
-   311,   312,     0,    23,     0,     0,     0,   313,   314,   315,
-   316,   317,    26,     0,    27,   319,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,   321,     0,     0,   555,     0,
-     0,     0,     0,     0,     0,     0,   323,   324,   556,     0,
-     0,     0,     0,     0,   326,   327,   328,  1166,     8,     9,
-    10,   557,    12,   536,   302,   303,     0,   304,    14,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,   330,     0,
-     0,     0,    16,   305,    17,     0,    19,     0,   306,   307,
-    20,     0,   308,   309,   310,    21,   311,   312,     0,    23,
-     0,     0,     0,   313,   314,   315,   316,   317,    26,     0,
-    27,   319,     0,     0,     0,   320,     0,     0,     0,     0,
-     0,   321,     0,     0,   322,     0,     0,     0,     0,     0,
-     0,     0,   323,   324,   325,     0,     0,     0,     0,     0,
-   326,   327,   328,     7,     8,     9,    10,   329,    12,   301,
-   302,   303,     0,   304,    14,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,   330,     0,     0,     0,    16,   305,
-    17,    18,    19,     0,   306,   307,    20,     0,   308,   309,
-   310,    21,   311,   312,     0,    23,     0,     0,     0,   313,
-   314,   315,   316,   317,    26,     0,    27,    28,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,   321,     0,     0,
-  1532,     0,     0,     0,     0,     0,     0,     0,   323,   324,
-  1533,     0,     0,     0,     0,     0,   326,   327,   328,   300,
-     8,     9,    10,  1534,    12,   536,   302,   303,     0,   304,
-    14,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-   330,     0,     0,     0,    16,   305,    17,     0,    19,     0,
-   306,   307,    20,     0,   308,   309,   310,    21,   311,   312,
-     0,    23,     0,     0,     0,   313,   314,   315,   316,   317,
-    26,     0,    27,   319,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,   321,     0,     0,   322,     0,     0,     0,
-     0,     0,     0,     0,   323,   324,   325,     0,     0,     0,
-     0,     0,   326,   327,   328,   300,     8,     9,    10,   537,
-    12,   536,   302,   303,     0,   304,    14,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,   330,     0,     0,     0,
-    16,   305,    17,     0,    19,     0,   306,   307,    20,     0,
-   308,   309,   310,    21,   311,   312,     0,    23,     0,     0,
-     0,   313,   314,   315,   316,   317,    26,     0,    27,   319,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,   321,
-     0,     0,   322,     0,     0,     0,     0,     0,     0,     0,
-   323,   324,   325,     0,     0,     0,     0,     0,   326,   327,
-   328,   300,     8,     9,    10,   540,    12,   536,   302,   303,
-     0,   304,    14,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,   330,     0,     0,     0,    16,   305,    17,     0,
-    19,     0,   306,   307,    20,     0,   308,   309,   310,    21,
-   311,   312,     0,    23,     0,     0,     0,   313,   314,   315,
-   316,   317,    26,     0,    27,   319,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,   321,     0,   783,   322,     7,
-     8,   784,    10,   167,    12,    13,   323,   324,   325,     0,
-    14,     0,     0,     0,   326,   327,   328,     0,     0,     0,
-     0,   329,     0,     0,    16,     0,    17,    18,    19,     0,
-     0,     0,    20,     0,     0,     0,     0,    21,   330,     0,
-     0,    23,   785,     0,   168,     0,     0,     0,     0,     0,
-    26,     0,    27,    28,     0,     0,   786,     0,   787,     0,
-     0,     0,     0,     0,     0,     0,    30,  -387,     8,     9,
-  -387,  -387,    12,   246,     0,     0,    31,     0,    14,     0,
-     0,     0,     0,     0,    32,     0,     0,     0,     0,    33,
-     0,     0,    16,     0,    17,  -387,     0,     0,     0,     0,
-    20,     0,     0,     0,     0,  -387,     0,     0,     0,    23,
-     0,   620,     0,     0,     0,     0,     0,     0,    26,     0,
-   130,   131,  1054,     8,   784,    10,   205,    12,   206,     0,
-     0,     0,     0,    14,   621,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,   622,     0,     0,    16,     0,    17,
-    18,     0,  -387,     0,   623,    20,     0,   624,   625,     0,
-    21,     0,     0,     0,    23,     0,     0,     0,     0,     0,
-     0,     0,     0,    26,     0,    27,    28,     0,     0,     0,
-     0,  1056,     0,     0,     0,     0,     0,     0,     0,    30,
-     7,     8,     9,    10,   205,    12,   206,     0,     0,    31,
-     0,    14,     0,     0,     0,     0,     0,    32,     0,     0,
-     0,     0,    33,     0,     0,    16,     0,    17,    18,     0,
-     0,     0,     0,    20,     0,     0,     0,     0,    21,     0,
-     0,     0,    23,     0,     0,     0,     0,     0,     0,     0,
-     0,    26,     0,    27,    28,     0,     0,  1458,     0,     7,
-     8,     9,    10,   167,    12,    13,     0,    30,     0,     0,
-    14,     0,     0,     0,     0,     0,     0,    31,     0,     0,
-     0,     0,     0,     0,    16,    32,    17,    18,     0,     0,
-    33,     0,    20,     0,     0,     0,     0,    21,     0,     0,
-     0,    23,     0,     0,     0,     0,     0,     0,     0,     0,
-    26,     0,    27,    28,     7,     8,     9,    10,   205,    12,
-   206,     0,     0,     0,     0,    14,    30,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,    31,     0,     0,    16,
-     0,    17,    18,     0,    32,     0,     0,    20,     0,    33,
-     0,     0,    21,     0,     0,     0,    23,     0,     0,     0,
-     0,     0,     0,     0,     0,    26,     0,    27,    28,     8,
-     9,     0,   167,    12,    13,     0,     0,     0,     0,    14,
-     0,    30,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,    31,     0,    16,     0,    17,    18,     0,     0,    32,
-     0,    20,     0,     0,    33,     0,     0,     0,     0,     0,
-   682,     0,     0,   168,     0,     0,     0,     0,     0,    26,
-     0,   130,   131,   572,   573,   574,   575,   576,   577,   578,
-   579,   580,   581,   582,   583,   584,   585,   586,   587,   588,
-   589,   590,   591,   592,   593,   572,   573,   574,   575,   576,
-   577,   578,   579,   580,   581,   582,   583,   584,   585,   586,
-   587,   588,   589,   590,   591,   592,   593,     0,     0,     0,
-     0,  1267,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,   661,     0,     0,  1604,
-   572,   573,   574,   575,   576,   577,   578,   579,   580,   581,
-   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
-   592,   593,  1598,   572,   573,   574,   575,   576,   577,   578,
-   579,   580,   581,   582,   583,   584,   585,   586,   587,   588,
-   589,   590,   591,   592,   593,   572,   573,   574,   575,   576,
-   577,   578,   579,   580,   581,   582,   583,   584,   585,   586,
-   587,   588,   589,   590,   591,   592,   593,   572,   573,   574,
-   575,   576,   577,   578,   579,   580,   581,   582,   583,     0,
-   585,   586,   587,   588,   589,   590,   591,   592,   593,   576,
-   577,   578,   579,   580,   581,   582,   583,   584,   585,   586,
-   587,   588,   589,   590,   591,   592,   593,   577,   578,   579,
-   580,   581,   582,   583,   584,   585,   586,   587,   588,   589,
-   590,   591,   592,   593
+/* YYDEFGOTO[NTERM-NUM].  */
+static const yytype_int16 yydefgoto[] =
+{
+      -1,     1,   438,     3,   439,   167,   712,   333,   183,     5,
+       6,    39,   675,   375,  1341,   676,   791,  1342,  1343,   395,
+    1448,   680,    43,   792,   404,   686,   961,   687,   688,   689,
+      45,   174,   175,    46,   457,   186,   182,    47,    48,   806,
+    1089,   812,  1091,    49,   794,   795,   187,   188,   458,   719,
+     997,   998,   655,   999,   236,    50,   983,   982,   702,   699,
+    1160,  1159,   941,   938,   138,   981,    51,   238,    52,   935,
+     568,   334,   335,   336,   337,  1344,  1616,  1510,  1618,  1557,
+    1651,  1203,  1592,  1613,   369,   927,   338,  1277,   879,   607,
+     886,   339,   340,   370,   342,   360,    54,   257,   681,   420,
+     156,    55,    56,   343,   563,   344,   345,   346,   347,   459,
+     348,  1345,   501,   629,   349,  1346,    58,   219,   692,   350,
+     220,   541,   221,   199,   212,    62,   484,   502,  1368,   759,
+    1225,   200,   213,    63,   512,   760,    64,    65,   671,   672,
+     673,  1318,   464,   849,   850,  1607,  1608,  1584,  1548,  1487,
+      66,   659,   363,   510,  1395,  1549,  1110,   944,    67,    68,
+      69,    70,    71,   244,    72,    73,   246,   778,   779,   780,
+     781,   799,  1076,   800,   801,   802,  1061,  1071,  1062,  1385,
+    1063,  1064,  1386,  1387,   656,   657,   608,   917,   352,   467,
+     468,   193,   482,   475,   202,    75,    76,    77,   144,   145,
+     159,    79,   134,   353,   354,   355,    81,   356,    83,   783,
+     125,   126,   127,   517,   107,    84,   357,   891,   892,   912,
+     907,   632,  1349,  1350,  1204,  1205,  1206,   723,  1351,  1004,
+    1352,  1433,  1560,  1513,  1514,  1353,  1354,  1538,  1434,  1561,
+    1435,  1594,  1436,  1596,  1645,  1661,  1437,  1620,  1570,  1621,
+    1519,   460,   720,  1316,  1355,  1451,  1575,  1424,  1425,  1505,
+    1587,  1559,  1555,  1356,  1566,  1454,   856,  1623,  1624,  1625,
+    1659,   739,   913,  1024,  1217,  1364,   741,   742,   743,  1020,
+     744,   150,  1022,   746,  1219,  1220,   535,    86,    87
 };
 
-static const short yycheck[] = {     4,
-   175,   174,    55,   349,    62,   149,   150,   161,   176,   402,
-    23,     4,   507,   485,   718,   355,   251,   209,   402,   126,
-   304,   305,    90,   880,    92,    14,   156,    84,    80,   355,
-    35,   700,     4,   133,     4,   402,   788,    42,   790,    42,
-   133,   134,    35,     4,   356,   357,   798,    42,   567,   134,
-   604,    42,    57,   337,   440,   247,  1236,  1237,   124,   647,
-   693,  1423,   243,    35,  1338,    35,  1514,    72,    59,   137,
-    42,   373,    42,  1253,    35,    54,  1513,  1537,    42,    84,
-    42,    42,   140,    88,   209,    90,    12,    92,   217,   218,
-    59,    11,   144,   218,    83,    47,   408,   409,   156,  1559,
-    47,  1348,   107,   108,   296,    11,   468,     0,  1355,    11,
-  1515,     1,     4,   701,    60,    33,    59,   106,   804,   455,
-   355,     9,   175,  1560,   810,    54,     0,   493,    60,    37,
-    74,   136,   137,    59,   139,    74,    62,     1,    30,    31,
-   109,    93,    62,    35,   510,    74,    93,    94,    27,     4,
-    42,   203,    31,   625,   212,    58,   108,   349,    80,  1619,
-   165,   108,   220,   109,   169,   108,   169,    12,    58,    47,
-   165,   176,    57,    61,   169,   136,   155,   109,   169,   237,
-    35,    60,   348,   349,   350,    64,     1,    42,   108,    48,
-  1595,   109,    84,   539,    58,    98,  1644,   169,    62,   169,
-  1380,   109,   108,    74,   165,   169,   108,   169,   169,  1389,
-  1390,    59,  1392,    59,    59,    93,    94,    62,   209,    46,
-    60,   200,   717,  1660,    54,   561,   217,   218,    47,    38,
-   109,    95,    62,    47,   920,    60,    47,    59,  1600,    25,
-  1514,    27,    93,    58,   136,    54,   346,    62,   460,    76,
-    25,   136,    27,   346,     4,     5,   247,   149,   150,   248,
-   108,    74,   108,   108,     3,     4,     5,   936,     4,   109,
-   939,  1518,    58,   165,    93,    94,    62,   169,    33,    93,
-    95,   136,    93,    58,   109,   342,   108,    62,    47,   108,
-   358,   176,   297,    54,   448,  1563,    47,   108,    48,    35,
-    93,   193,   194,    93,   644,   296,    56,    57,   393,    95,
-   165,   980,   981,    74,   169,    93,   683,    56,    57,   385,
-    95,    31,  1569,    47,   329,   879,   712,   713,   961,    47,
-    80,    47,   476,   477,    93,    94,   648,   342,    60,    25,
-   262,    80,    93,    94,  1612,   350,    64,   740,    64,   479,
-     4,   404,    60,   358,   359,  1041,   740,   108,   349,    47,
-   489,   490,    47,  1543,  1544,   490,   355,  1053,   497,    93,
-    94,   673,    58,  1620,   107,    93,    62,    93,   613,     4,
-   509,    35,    47,   719,   108,     4,   213,    58,    42,    25,
-   736,    54,   450,    64,   149,   150,   151,   402,   359,   528,
-   405,  1087,    75,  1089,    77,    93,    94,    55,    93,    95,
-    35,    74,   470,    47,    47,   406,    35,     8,     9,  1276,
-    25,   479,    27,    14,     3,     4,     5,     6,    93,    94,
-    84,   141,   402,   501,     4,     5,   146,   442,   496,   442,
-   195,     4,   804,   108,  1032,    36,   965,   442,   810,   921,
-   342,   442,    31,    58,    45,   182,    47,    62,    44,    93,
-    93,    58,    41,   468,    59,    62,   534,   359,    54,     4,
-     5,    57,    35,    47,   359,    54,    54,    56,    57,    42,
-    75,   442,   136,    25,   194,    27,    56,    57,  1157,  1158,
-    95,    70,    55,    62,    57,    31,   501,    62,   489,   490,
-  1252,    80,    93,   508,   359,    74,   497,    12,   820,    88,
-   402,   165,    62,    48,    93,   169,    58,    47,   509,    93,
-    62,    56,    57,   689,    74,   691,   692,   175,   694,   534,
-     7,    58,   537,    74,    64,   540,   508,   528,   711,   544,
-   545,   546,   547,   548,  1039,    80,    47,   508,   605,   259,
-   442,  1408,   557,    95,    59,    47,    54,    62,   920,    64,
-    37,    47,   567,    93,    94,   570,   109,   483,    47,   962,
-   736,    47,    47,   136,   222,   491,   468,   140,   962,    54,
-    58,     4,     5,    93,   476,   477,   508,   442,   681,   674,
-   930,   772,    93,   774,    54,   962,   681,   650,   779,    74,
-   605,    93,   165,    47,   930,    54,   169,    93,   676,     4,
-     5,    54,   175,   176,    93,   108,   508,    93,    93,   624,
-     3,     4,     5,   508,     4,     5,   631,     3,     4,     5,
-    75,    54,    54,    56,    57,   764,   689,   829,   691,   692,
-     4,     5,   926,   955,    62,     9,   635,    70,    94,    93,
-     4,     5,    74,   508,  1126,    62,    74,    80,   108,   222,
-   651,    56,    57,   829,  1000,     4,     5,    74,    48,   682,
-   882,   676,   499,    56,    57,   782,    56,    57,    54,  1041,
-    56,    57,    58,   736,   108,   690,    11,    47,   342,   694,
-    54,  1053,    56,    57,    48,   930,   108,  1192,    47,   109,
-    14,   692,    56,    57,   717,   359,    70,    47,    22,   419,
-    98,    47,   422,   605,    60,    54,    80,    56,    57,    47,
-    93,   476,   477,   478,   434,  1087,    80,  1089,    62,   621,
-   622,    70,   624,    93,  1229,   740,   902,   805,   806,   631,
-   808,    80,   795,   909,    93,   736,    62,     3,   402,  1122,
-  1123,    65,  1125,    93,    60,    94,   404,    93,     3,     4,
-     5,   471,   928,   111,   474,    93,     3,     4,     5,  1081,
-  1082,  1083,    33,   764,   108,  1121,    74,    47,   488,     3,
-     4,     5,     6,   788,    54,   790,    54,    54,   442,    83,
-    84,   796,   108,   798,    62,    62,   359,    94,   928,   804,
-   805,   806,    94,   808,    74,   810,    74,    74,     4,     5,
-   124,    56,    57,    58,   468,   988,   788,    41,   790,    56,
-    57,    62,   470,    93,   111,    54,   798,   788,    93,   790,
-    93,   479,    56,    57,   148,   483,    74,   798,   829,    59,
-    60,   404,    54,   491,   902,    74,    74,    54,   740,    27,
-    62,   909,    48,    31,   508,  1036,  1037,  1038,   750,   751,
-    56,    57,    74,    54,     4,     5,   788,    74,   790,     9,
-   928,    62,    54,   878,   796,    59,   798,    74,   883,   442,
-    62,    59,    60,    74,    80,     3,     4,     5,   149,   150,
-   151,    75,    74,    77,  1106,  1107,   788,    74,   790,     3,
-     4,     5,    59,   788,    11,   790,   798,   470,   109,   914,
-   795,   796,   804,   798,    54,   920,    56,    57,   810,   924,
-   483,   973,  1626,   108,   238,   239,    59,    60,   491,    59,
-    70,     4,     5,   788,   195,   790,    54,   251,    56,    57,
-    80,   930,    47,   798,    48,   508,     3,     4,     5,    54,
-     7,   605,    56,    57,    94,   108,   108,   962,    54,   964,
-   965,    59,    60,   968,   791,   792,    62,    59,    60,    74,
-   624,     4,     5,    30,   801,  1287,     9,   631,    74,   108,
-    37,    54,  1148,    56,    57,   817,   818,   819,    93,    59,
-    60,  1044,   962,    74,  1206,    59,    60,    54,    31,    56,
-    57,  1347,   650,  1215,  1216,    74,  1011,   321,    54,  1175,
-    59,    60,  1224,  1065,    74,  1181,    59,    60,  1148,  1024,
-   108,    54,   109,    56,    57,     3,     4,     5,   920,  1034,
-   922,   923,   924,   109,  1178,  1179,  1041,    70,   748,   749,
-   767,   689,    27,   691,   692,   111,   756,    80,  1053,   363,
-   108,  1181,    59,    60,     9,  1267,   111,    12,   372,    74,
-    93,    74,  1130,    27,  1208,  1209,    54,    31,    74,  1074,
-   962,   385,    59,    60,   966,   967,   968,   111,    56,    57,
-   111,   108,  1087,   108,  1089,   108,   740,   650,   736,    58,
-  1148,   108,    47,     8,     9,    59,    60,    54,  1434,    14,
-    64,     8,  1074,   111,    59,    47,    61,    62,    64,    64,
-     4,     5,  1117,  1074,  1450,    59,    93,  1175,    93,  1011,
-    75,    36,    77,  1181,    54,  1130,   689,   690,   691,   692,
-    45,  1183,     4,     5,   788,  1301,   790,   109,    93,    94,
-    60,    36,    64,  1065,   798,    64,    64,   795,  1153,  1041,
-   804,    60,  1074,   108,    48,  1367,   810,   108,   108,  1044,
-  1553,  1053,    56,    57,    62,  1223,   111,   108,   108,  1553,
-  1345,  1301,  1347,   736,   108,  1180,    48,   740,  1346,  1192,
-   108,    64,  1074,    64,    56,    57,    80,    64,    75,  1074,
-    93,   505,    59,  1405,   108,  1087,   108,  1089,  1203,    75,
-     3,  1537,   108,     6,   108,  1210,   108,    75,    80,    75,
-  1203,  1557,    75,   968,    62,   476,   477,   478,   108,  1074,
-     3,     4,     5,  1559,   108,   788,    62,   790,    31,    59,
-  1057,  1203,   795,   796,   108,   798,  1063,  1064,    41,    62,
-  1067,  1068,   111,  1301,  1071,    94,   108,  1252,   108,    88,
-  1586,   108,   111,    56,    57,   569,  1011,   967,    74,  1151,
-  1152,  1153,    47,    59,    47,   108,   920,    70,   108,   111,
-   924,    54,   109,    56,    57,   108,   111,    80,    74,    75,
-  1252,    77,   108,  1619,   108,    88,  1178,  1179,  1180,   109,
-    93,  1252,  1345,    60,  1347,    59,    64,    59,    64,   613,
-    59,  1306,    64,    59,  1640,    62,   108,   108,   962,    93,
-    93,  1203,    74,    75,   968,    93,  1208,  1209,  1210,  1046,
-  1047,    93,    93,   109,   111,  1247,     8,   109,  1220,  1221,
-  1252,   108,   108,  1338,   108,   108,   111,  1503,   108,   108,
-    33,  1346,    64,  1348,   109,   108,  1073,   108,  1203,    54,
-  1355,  1078,    62,   108,   108,  1348,  1347,  1011,   108,  1364,
-  1252,   108,  1355,   108,   108,  1557,  1338,  1252,   682,     4,
-     5,    30,    31,   108,    33,  1529,  1348,   108,   111,   693,
-    47,   108,   108,  1355,   108,    96,  1552,  1041,  1532,  1533,
-    62,    62,    12,     9,    60,    60,  1044,  1252,    57,  1053,
-    59,    80,    81,    82,    83,    84,    65,    27,    60,    44,
-   724,    31,  1304,  1305,  1306,     3,     4,     5,    16,    54,
-  1074,    56,    57,  1178,  1179,  1180,    60,    47,   108,    93,
-   108,   108,   108,  1087,  1607,  1089,    60,    93,  1650,    59,
-    60,    64,    62,    54,    64,  1503,  1338,   108,     3,     4,
-     5,   108,    93,  1208,  1209,  1210,  1348,   111,    17,    60,
-    48,    93,    54,  1355,   108,    60,  1176,  1177,    56,    57,
-   108,   107,    97,    93,    94,  1185,    11,     3,     4,     5,
-   108,  1044,   141,  1338,     3,     4,     5,   146,   108,   108,
-   149,   150,   151,  1348,  1552,    60,    60,  1502,    60,  1153,
-  1355,    56,    57,  1508,    30,  1558,    93,    59,  1513,  1514,
-  1515,  1074,   108,  1518,    64,  1242,  1243,   176,  1245,  1246,
-  1513,  1248,    60,   182,   108,  1518,  1180,  1175,    54,  1534,
-    56,    57,   108,  1181,   193,   194,   195,    56,    57,    11,
-    60,  1513,  1514,    11,    60,     0,  1518,     0,  1553,  1203,
-   209,     3,     4,     5,     6,  1560,  1210,     0,   217,   218,
-  1387,  1388,   170,     2,  1569,    35,  1557,  1560,  1448,   962,
-   169,     3,     4,     5,   674,  1223,  1569,   442,     3,     4,
-     5,  1606,     7,     8,     9,     3,     4,     5,  1560,    41,
-  1595,   165,  1302,  1303,   796,    94,  1244,  1569,  1252,  1309,
-   259,   238,    54,  1192,    56,    57,    31,   139,  1500,  1501,
-  1502,    36,  1175,  1433,  1660,  1620,  1508,  1277,     3,     4,
-     5,  1513,  1514,  1515,    56,    57,  1518,  1620,   948,   299,
-   724,    56,    57,  1460,   948,   943,    88,   242,    56,    57,
-  1532,  1533,     3,     4,     5,     6,  1229,   961,  1620,  1039,
-  1377,  1378,  1306,  1301,  1074,  1660,  1249,   796,  1513,  1514,
-   657,  1553,   941,  1518,   200,   346,   605,  1660,  1560,    54,
-   329,    56,    57,   124,  1348,  1204,  1626,  1569,    33,  1574,
-    41,  1244,  1640,  1636,  1338,  1364,  1249,  1638,  1660,  1252,
-  1019,     4,     5,    54,  1348,    56,    57,  1345,    -1,  1347,
-    -1,  1355,    -1,  1595,    -1,  1560,  1461,   968,    -1,    70,
-   107,   108,    -1,    -1,  1569,    -1,    -1,    -1,    31,    80,
-     3,     4,     5,    -1,     7,     8,     9,    88,  1620,    -1,
-    -1,    -1,    93,    -1,    -1,     4,     5,    -1,    -1,    -1,
-     9,    54,    -1,    56,    57,    -1,   405,   406,    -1,    -1,
-  1011,    -1,    -1,  1480,  1481,  1482,    -1,    70,    -1,   762,
-   419,  1588,    31,   422,    -1,  1620,    -1,    80,  1660,   428,
-   429,   430,    -1,    56,    57,   434,    -1,  1532,  1533,  1534,
-    93,    -1,  1345,  1346,  1347,    54,    -1,    56,    57,     3,
-     4,     5,     6,  1107,    -1,   150,   151,     7,     8,     9,
-   803,    70,    -1,    -1,    14,  1660,   809,    -1,    -1,    -1,
-    -1,    80,   471,  1540,  1541,   474,    -1,   476,   477,   478,
-    -1,    31,    -1,   482,    93,    -1,    36,    41,    -1,   488,
-   489,   490,    -1,    -1,   493,    45,    -1,    -1,   497,    -1,
-   195,    -1,    56,    57,    -1,    -1,    -1,    -1,  1502,    -1,
-    60,   510,    -1,    -1,  1508,  1503,     7,     8,     9,  1513,
-  1514,  1515,    -1,    14,  1518,    76,    77,    78,    79,    80,
-    81,    82,    83,    84,    88,    -1,    -1,    -1,   537,    -1,
-    31,   540,    47,    -1,  1611,    36,  1200,    -1,    -1,    -1,
-    -1,    -1,  1206,    -1,    45,   461,   555,   556,   557,  1553,
-    -1,    -1,   468,    -1,  1552,    -1,  1560,    -1,    -1,    60,
-  1558,   570,   915,    -1,   917,  1569,   402,  1178,  1179,  1180,
-    -1,    86,    87,    -1,    -1,    -1,    91,    92,    93,    94,
-    -1,    -1,   329,    -1,     4,     5,    -1,    -1,    -1,     9,
-    -1,  1595,    -1,     3,     4,     5,     6,  1208,  1209,  1210,
-    -1,     4,     5,    -1,   306,   307,    88,    -1,    90,    -1,
-    92,    31,   621,   622,    -1,   624,  1620,    -1,    -1,   535,
-   322,    -1,   631,   325,   329,    -1,   328,    47,    31,   331,
-    -1,    41,   468,   335,    54,    -1,    56,    57,    48,    -1,
-    -1,   343,   651,    -1,    47,  1558,    56,    57,    -1,    -1,
-    70,    54,    -1,    56,    57,   137,  1660,   139,    -1,    -1,
-    80,    -1,    -1,     3,     4,     5,     6,    70,  1332,  1333,
-    90,    -1,    -1,    93,    94,    -1,    -1,    80,    88,   595,
-    -1,   690,    -1,   692,   693,   601,    -1,    90,    -1,    -1,
-    93,    94,     3,     4,     5,     6,    -1,    -1,     3,     4,
-     5,    41,     7,     8,     9,    -1,    -1,    -1,    48,    -1,
-    80,    -1,    -1,    -1,    -1,    -1,    56,    57,   465,    -1,
-    -1,    -1,   638,    -1,   429,   430,    31,   736,    -1,    -1,
-    41,    36,    -1,  1086,   104,  1088,    -1,    48,    -1,   748,
-   749,   750,   751,   752,    -1,    56,    57,   756,    88,    54,
-    -1,    56,    57,    58,    -1,   764,    -1,    -1,   767,    -1,
-    -1,  1425,    -1,   133,    -1,    -1,    -1,    -1,    -1,    80,
-    -1,    -1,   477,   478,   144,    -1,    -1,    88,     7,     8,
-     9,    -1,    -1,  1447,  1448,    14,    -1,   796,   624,    -1,
-   537,  1144,    -1,   540,    -1,   631,    -1,   544,   103,   104,
-   105,    -1,    31,    -1,    -1,    -1,    -1,    36,    -1,    -1,
-   557,    -1,    -1,    -1,   823,    -1,    45,     4,     5,    -1,
-    -1,    -1,     9,   570,    -1,    -1,    -1,   574,     3,     4,
-     5,     6,   537,   203,    -1,   540,    -1,    -1,   320,    -1,
-    -1,    82,    -1,    -1,    31,    -1,     3,     4,     5,     6,
-  1461,   556,   557,   555,   556,   602,    -1,     3,     4,     5,
-     6,   608,  1526,    38,    39,   570,    41,    54,   238,    56,
-    57,    -1,    -1,    -1,    -1,    -1,   358,    -1,    -1,    54,
-  1233,    56,    57,    70,    41,  1238,    -1,    -1,    -1,    -1,
-    -1,    48,   262,    80,   903,    41,    -1,   906,    -1,    56,
-    57,    47,    -1,    -1,   740,    -1,    93,    -1,    54,   918,
-    56,    57,    -1,   922,   923,   924,    -1,    -1,   159,    -1,
-    -1,  1532,  1533,  1534,    70,    -1,   631,    -1,    -1,    -1,
-    -1,    88,    -1,    -1,    80,    -1,    -1,    -1,  1291,     4,
-     5,    -1,    88,    -1,    90,    -1,    -1,    93,    94,    -1,
-   191,    -1,   961,    -1,    -1,    -1,    -1,   966,   967,   968,
-    -1,   877,   878,   204,    -1,    -1,    31,   883,   804,    -1,
-     7,     8,     9,    -1,   810,    -1,    -1,    14,   460,   461,
-    -1,   897,    47,   899,   354,   901,   468,    -1,    -1,    54,
-    -1,    56,    57,    -1,    31,     3,     4,     5,     6,    36,
-    -1,    -1,  1011,    -1,    -1,    70,    -1,    -1,    45,    -1,
-    -1,    -1,    -1,    -1,    -1,    80,  1025,  1026,  1027,   501,
-    -1,    -1,    -1,    -1,    -1,    90,    -1,    -1,    93,    94,
-    -1,    -1,    -1,    41,   950,    -1,    -1,  1046,  1047,    -1,
-    48,    -1,   412,  1396,  1397,    -1,   751,   752,    56,    57,
-    -1,    -1,   534,   535,    -1,    -1,    -1,    -1,    -1,    -1,
-  1413,    -1,    -1,    -1,  1073,    -1,    -1,    -1,    -1,  1078,
-    -1,    -1,    80,    -1,     3,     4,     5,     6,   994,    -1,
-    88,    -1,    -1,    -1,   920,   567,    -1,   569,   924,    -1,
-   572,   573,    -1,   575,   576,   577,   578,   579,   580,   581,
-   582,   583,   584,   585,   586,   587,   588,   589,   590,   591,
-   592,   593,    41,   595,    -1,    -1,    -1,    -1,   823,   601,
-  1473,  1474,    -1,    -1,    -1,    54,   962,    56,    57,    -1,
-    -1,    60,   968,    62,    -1,   505,  1489,  1490,     4,     5,
-   887,    70,  1151,  1152,  1153,    -1,    -1,    -1,    -1,   631,
-    -1,    80,    -1,    -1,    -1,    -1,   638,    -1,    -1,    88,
-    -1,   531,    -1,    -1,    93,    -1,    -1,  1176,  1177,  1178,
-  1179,  1180,    -1,   461,    -1,  1011,  1185,   924,   660,   661,
-   468,    47,    -1,    -1,    -1,    -1,    -1,    -1,    54,   891,
-    56,    57,    -1,    -1,   676,    -1,    -1,    -1,    -1,  1208,
-  1209,  1210,    -1,    -1,    70,  1041,    -1,    -1,    -1,    -1,
-    -1,  1220,  1221,  1222,    80,    -1,    -1,  1053,   923,   924,
-   922,   923,    -1,    -1,    90,    -1,    -1,    93,    94,    -1,
-    -1,    -1,    -1,  1242,  1243,    -1,  1245,  1246,    -1,  1248,
-   481,    -1,   724,    -1,    -1,   486,    -1,   535,   618,    -1,
-    -1,  1087,    -1,  1089,    78,    79,    80,    81,    82,    83,
-    84,    -1,    -1,   968,   634,    -1,    -1,    -1,    -1,    -1,
-   511,    -1,    -1,    -1,    -1,    -1,   517,    -1,  1194,    -1,
-  1196,    -1,  1198,    -1,    -1,    -1,    -1,  1034,   529,   530,
-    -1,   532,    -1,  1302,  1303,  1304,  1305,  1306,    -1,    -1,
-  1309,    -1,    -1,    -1,    -1,   787,  1011,   595,     3,     4,
-     5,     6,    -1,   601,     9,    -1,    -1,  1153,    -1,    -1,
-    -1,    -1,    -1,   805,   806,     1,   808,     3,     4,     5,
-     6,    -1,     8,    -1,    -1,    -1,    31,  1346,  1347,    -1,
-    -1,   823,    -1,   631,  1180,    -1,    41,    -1,    -1,    -1,
-   638,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,
-    -1,    56,    57,   845,    -1,    41,    -1,    -1,  1377,  1378,
-    -1,    -1,    48,    -1,  1210,    70,    -1,    -1,    54,    -1,
-    56,    57,  1298,   753,    -1,    80,   627,   628,    -1,    -1,
-    -1,   632,    -1,    88,    -1,   877,   878,    -1,    93,    -1,
-   882,   883,    -1,    -1,    -1,    -1,  1415,  1416,     4,  1418,
-    -1,    -1,    88,    -1,    -1,   897,    -1,   899,    14,   901,
-    -1,    -1,    -1,    -1,    -1,    -1,  1128,    -1,    24,    -1,
-    -1,    -1,    -1,    -1,    30,    31,    -1,    33,    -1,    35,
-    -1,    -1,    -1,    -1,    -1,    -1,    42,  1152,  1153,    -1,
-    -1,    -1,  1461,    -1,    -1,    -1,    -1,    -1,   940,    55,
-    -1,    57,    -1,  1210,    -1,    -1,    -1,    -1,   950,    65,
-  1306,  1480,  1481,  1482,  1179,  1180,    72,    -1,    -1,    -1,
-    -1,    -1,    -1,   965,    -1,    -1,    -1,    83,    84,    -1,
-    -1,  1500,  1501,  1502,    -1,    -1,   978,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,  1209,  1210,  1208,  1209,    -1,    -1,
-   106,    -1,   994,   754,    -1,    -1,  1263,  1264,  1265,  1266,
-    -1,    -1,    -1,  1532,  1533,  1534,    -1,    -1,    -1,  1011,
-    -1,  1540,  1541,    -1,    -1,   823,    -1,    -1,   134,    -1,
-   136,    -1,    -1,    -1,   140,   141,    -1,    -1,    -1,   145,
-   146,    -1,    -1,   149,   150,   151,    -1,    -1,    -1,   929,
-    -1,   931,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   165,
-   811,    -1,   813,   169,  1056,    -1,    -1,    -1,    -1,   175,
-   176,    -1,     4,     5,  1331,    -1,     8,     9,    -1,   877,
-   878,    -1,    14,    -1,    -1,   883,    -1,   193,   194,   195,
-  1305,  1306,  1611,   973,    -1,    -1,    28,    -1,    30,   897,
-    -1,   899,    -1,   901,    36,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    45,  1106,  1107,   222,    -1,  1110,    -1,
-    -1,    -1,    54,    -1,    56,    57,  1338,    -1,    -1,    -1,
-    -1,    -1,    -1,   239,   885,   886,    -1,   888,  1130,    -1,
-    -1,    -1,   248,    -1,     3,     4,     5,     6,    -1,  1406,
-     9,    -1,   950,   259,    -1,    -1,  1502,    -1,    -1,    -1,
-    -1,    93,    -1,    -1,   621,   622,    -1,    -1,   919,    -1,
-    -1,    -1,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    41,    -1,    -1,  1065,  1443,    -1,    47,    -1,
-    -1,   297,   298,    -1,    -1,    54,   994,    56,    57,    -1,
-    -1,    -1,  1194,    -1,  1196,    -1,  1198,  1553,    -1,    -1,
-    -1,    70,    -1,  1011,  1206,    -1,    -1,    -1,    -1,   970,
-    -1,    80,    -1,  1215,  1216,     3,     4,     5,     6,    88,
-    -1,    90,  1224,    -1,    93,    94,   342,    -1,    -1,    -1,
-   346,    -1,   348,   349,   350,    -1,  1461,    -1,  1240,  1241,
-    -1,  1508,    -1,   359,    -1,    -1,    -1,  1514,  1515,    -1,
-    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,  1154,  1267,    54,  1534,    56,    57,
-    -1,    -1,    60,    -1,    -1,    -1,    -1,   393,    -1,  1040,
-     4,     5,    70,    -1,     8,     9,   402,    -1,   404,   405,
-    14,  1052,    80,  1183,    -1,    -1,  1298,    -1,    -1,    -1,
-    88,    -1,    -1,   419,    -1,    93,   422,    -1,  1533,  1534,
-  1532,  1533,    36,    -1,    -1,    -1,    -1,    -1,   434,    -1,
-    -1,    45,    -1,    47,    -1,  1327,   442,    -1,  1595,    -1,
-    54,    -1,    56,    57,    73,    74,    75,    76,    77,    78,
-    79,    80,    81,    82,    83,    84,    70,  1614,    -1,    -1,
-    -1,    -1,    -1,    -1,   470,   471,    80,  1247,   474,    -1,
-   476,   477,   478,   479,    -1,  1367,    90,   483,  1635,    93,
-    94,    -1,   488,    -1,    -1,   491,    -1,  1644,  1139,    -1,
-    -1,  1383,    -1,    -1,    -1,    -1,  1194,    -1,  1196,    -1,
-  1198,    -1,   508,    -1,    -1,    -1,     3,     4,     5,     6,
-    -1,    -1,     9,  1405,    -1,    -1,    -1,     3,     4,     5,
-     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,  1184,    31,    -1,    -1,    -1,    -1,   545,
-   546,   547,   548,    -1,    41,    -1,   903,    -1,    -1,   906,
-    47,    -1,    -1,    -1,    -1,    41,    -1,    54,    -1,    56,
-    57,   918,    48,    -1,    -1,   922,   923,    -1,    -1,  1461,
-    56,    57,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,
-     4,     5,    -1,    80,     8,     9,  1478,  1479,    -1,    -1,
-    14,    88,    -1,    90,    80,    -1,    93,    94,    -1,   605,
-  1298,   607,    88,  1254,    28,    -1,    30,  1258,    -1,   966,
-   967,    -1,    36,   619,    -1,   621,   622,    -1,   624,    -1,
-    -1,    45,    -1,    -1,  1516,   631,    -1,    -1,    -1,   635,
-    54,    -1,    56,    57,    58,    -1,    -1,  1417,    -1,    -1,
-    -1,    -1,  1293,    -1,   650,    -1,     4,     5,    -1,    -1,
-    -1,     9,    -1,    -1,  1546,    -1,  1307,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,     3,     4,     5,     6,   674,    93,
-     9,    -1,    -1,    31,    -1,   681,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,   689,   690,   691,   692,   693,   694,    47,
-    -1,    -1,    31,    -1,    -1,    -1,    54,    -1,    56,    57,
-    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,    47,    -1,
-    -1,    -1,    70,    -1,    -1,    54,    -1,    56,    57,    -1,
-    -1,  1372,    80,    -1,    -1,  1376,    -1,    -1,    -1,    -1,
-   736,    70,    90,    -1,   740,    93,    94,    -1,    -1,    -1,
-    -1,    80,   748,   749,   750,   751,   752,  1398,  1399,    88,
-   756,    90,    -1,    -1,    93,    94,    -1,    -1,  1650,    -1,
-    -1,    -1,    -1,  1461,    70,    71,    72,    73,    74,    75,
-    76,    77,    78,    79,    80,    81,    82,    83,    84,   785,
-    -1,    -1,   788,    -1,   790,    -1,    -1,    -1,    -1,   795,
-   796,    -1,   798,    -1,  1151,  1152,    -1,    -1,   804,    -1,
-    -1,    -1,     1,    -1,   810,     4,     5,    -1,    -1,     8,
-     9,   817,   818,   819,    -1,    14,    -1,    -1,    -1,  1176,
-  1177,  1178,  1179,   829,    -1,    -1,    -1,    -1,  1185,    28,
-    -1,    30,    -1,    -1,    -1,    -1,    -1,    36,    -1,    38,
-    39,    -1,    -1,    -1,    -1,    -1,    45,    -1,    47,    -1,
-    -1,  1208,  1209,    -1,    -1,    54,    -1,    56,    57,    -1,
-    59,    -1,    -1,    -1,    63,    64,    65,    66,    67,    68,
-    69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
-    79,    80,    81,    82,    83,    -1,    -1,    86,    87,    88,
-    -1,    -1,    91,    -1,    -1,    94,   902,   903,    -1,    -1,
-   906,    -1,    -1,   909,    -1,    -1,    -1,    -1,   914,    -1,
-    -1,   110,   918,    -1,   920,    -1,   922,   923,   924,    -1,
-    -1,    -1,   928,    -1,   930,    -1,     3,     4,     5,     6,
-    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
-    81,    82,    83,    84,    -1,  1302,  1303,  1304,  1305,    -1,
-    -1,    -1,  1309,    -1,    -1,    -1,   962,    -1,   964,    -1,
-   966,   967,   968,     4,    41,    -1,    -1,    -1,    -1,    -1,
-    -1,    48,    -1,    14,    -1,    -1,    -1,   193,   194,    56,
-    57,    -1,    23,    24,    -1,    -1,    -1,    -1,    -1,    30,
-    31,    -1,    33,    -1,    35,     3,     4,     5,     6,    -1,
-    -1,    42,    -1,    80,    -1,  1011,    -1,    -1,    -1,    -1,
-    -1,    88,    -1,    -1,    55,    -1,    57,    -1,  1024,  1025,
-  1026,  1027,    -1,    31,    65,    -1,    -1,    -1,    -1,    -1,
-    -1,    72,    -1,    41,    -1,  1041,    -1,    -1,  1044,    47,
-    -1,    -1,    -1,    84,    -1,    -1,    54,  1053,    56,    57,
-    -1,    -1,    -1,     3,     4,     5,     6,    -1,  1415,  1416,
-  1066,  1418,    70,    -1,    -1,    -1,    -1,    -1,  1074,    -1,
-    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    88,  1087,    90,  1089,    -1,    93,    94,    -1,    -1,    -1,
-    -1,    41,    -1,    -1,    -1,   136,    -1,    -1,    48,   140,
-   141,    -1,    -1,    -1,    -1,   146,    56,    57,   149,   150,
-   151,  1117,    -1,    -1,    -1,    -1,  1122,  1123,    -1,  1125,
-    -1,    -1,    -1,    -1,   165,    -1,    -1,    -1,   169,    -1,
-    80,    -1,    -1,    -1,   175,   176,    -1,    -1,    88,    -1,
-    -1,    -1,  1148,  1500,  1501,  1151,  1152,  1153,    -1,    -1,
-    -1,    -1,   193,   194,   195,     3,     4,     5,     6,     7,
-     8,     9,    -1,    -1,    -1,    -1,    14,    -1,    -1,  1175,
-  1176,  1177,  1178,  1179,  1180,  1181,    -1,    -1,    -1,  1185,
-    28,   222,    30,    31,    32,    -1,    -1,    -1,    36,    -1,
-    -1,    -1,    -1,    41,    -1,    -1,    -1,    45,    -1,    -1,
-    48,    -1,  1208,  1209,  1210,    -1,    54,    -1,    56,    57,
-    -1,    -1,    -1,    -1,  1220,  1221,  1222,  1223,   259,    -1,
-    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,  1244,    -1,
-    88,    -1,    -1,  1249,    -1,    93,  1252,    -1,    -1,    -1,
-    98,    -1,    -1,    -1,    -1,   471,   297,   298,   474,    -1,
-   476,   477,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,   488,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,     3,     4,     5,     6,     7,     8,     9,    -1,
-    -1,    -1,    -1,    14,    -1,  1301,  1302,  1303,  1304,  1305,
-  1306,   342,    -1,  1309,    -1,   346,    -1,   348,   349,   350,
-    31,    -1,    -1,    -1,   355,    36,    -1,    -1,   359,    -1,
-    41,    -1,    -1,    -1,    45,    -1,    47,    -1,    -1,    -1,
-    -1,    -1,    -1,    54,    -1,    56,    57,    -1,    -1,  1345,
-  1346,  1347,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
-    -1,    -1,   393,    -1,     3,     4,     5,     6,  1364,    80,
-     9,   402,    -1,   404,   405,    -1,    -1,    88,    -1,    90,
-     4,     5,    93,    94,     8,     9,    -1,    -1,   419,    -1,
-    14,   422,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    41,   434,    28,    -1,    30,    -1,    47,    -1,
-    -1,   442,    36,    -1,    -1,    54,    -1,    56,    57,  1415,
-  1416,    45,  1418,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    54,    70,    56,    57,    -1,    -1,    -1,    -1,    -1,   470,
-   471,    80,    -1,   474,    -1,   476,   477,   478,   479,    88,
-    -1,    90,   483,    -1,    93,    94,    -1,   488,    -1,    -1,
-   491,    -1,    -1,    -1,    -1,  1461,    -1,    -1,    -1,    -1,
-     4,     5,    -1,     7,     8,     9,   507,   508,    12,    -1,
-    14,     3,     4,     5,     6,    -1,    -1,     9,    -1,    -1,
-    -1,    -1,    -1,    -1,    28,    -1,    30,    31,    -1,    -1,
-    -1,    -1,    36,    -1,  1500,  1501,  1502,  1503,    -1,    31,
-    -1,    45,    -1,    -1,   545,   546,   547,   548,    -1,    41,
-    54,    -1,    56,    57,    -1,    47,    -1,    -1,    -1,    -1,
-    -1,    -1,    54,    -1,    56,    57,  1532,  1533,  1534,    -1,
-    -1,    -1,   748,   749,   750,   751,    -1,    -1,    70,    -1,
-   756,    -1,    -1,    -1,    -1,    -1,  1552,  1553,    80,    -1,
-    -1,    -1,  1558,    -1,    -1,    -1,    88,    -1,    90,    -1,
-    -1,    93,    94,    -1,   605,    -1,   607,    72,    73,    74,
-    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
-   621,   622,    -1,   624,    -1,    -1,    -1,    -1,    -1,    -1,
-   631,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
-    -1,    -1,    -1,   644,    14,    -1,    -1,    -1,    -1,   650,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,
-    30,    31,    32,    -1,    -1,    -1,    36,    -1,    -1,    -1,
-    -1,    41,    -1,   674,    -1,    45,    -1,    -1,    48,    -1,
-    -1,   682,    -1,    -1,    54,    -1,    56,    57,   689,   690,
-   691,   692,   693,   694,    -1,    -1,    -1,    -1,    -1,    -1,
-    70,    -1,    -1,     3,     4,     5,     6,    -1,    -1,     9,
-    80,    -1,    -1,    -1,    -1,    -1,   717,    -1,    88,    -1,
-    -1,    -1,    -1,    93,    -1,    -1,    -1,    -1,    98,    -1,
-    -1,    31,    -1,    -1,    -1,   736,    -1,    -1,    -1,   740,
-    -1,    41,    -1,    -1,    -1,    -1,    -1,   748,   749,   750,
-   751,   752,    -1,    -1,    54,   756,    56,    57,     4,     5,
-    -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,
-    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    80,    -1,    -1,    -1,   785,    31,    -1,   788,    88,   790,
-   966,   967,    -1,    93,   795,   796,    -1,   798,    -1,    -1,
-    -1,    47,    -1,   804,    -1,    -1,    -1,    -1,    54,   810,
-    56,    57,    -1,    -1,    -1,    -1,   817,   818,   819,    -1,
-    -1,    -1,    -1,    -1,    70,    -1,    -1,    -1,   829,    -1,
-    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    90,    -1,    -1,    93,    94,  1025,
-  1026,  1027,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,
-     5,     6,     7,     8,     9,    -1,    -1,    -1,    -1,    14,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    28,    -1,    30,    31,    -1,    -1,    -1,
-    -1,    36,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,
-    45,   902,   903,    48,    -1,   906,    -1,    -1,   909,    54,
-    -1,    56,    57,   914,    -1,    60,    -1,   918,    -1,   920,
-    -1,   922,   923,   924,    -1,    70,    -1,   928,    -1,   930,
-    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    88,     3,     4,     5,     6,    93,     8,
-     9,    10,    11,    -1,    13,    14,    -1,    -1,    -1,    -1,
-    -1,   962,    -1,   964,    -1,   966,   967,   968,    -1,    28,
-    29,    30,    31,    32,    -1,    34,    35,    36,    -1,    38,
-    39,    40,    41,    42,    43,    -1,    45,    -1,    47,    -1,
-    49,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
-  1176,  1177,  1178,  1179,    -1,    -1,    -1,    -1,    67,  1185,
-  1011,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
-    79,    80,    -1,  1024,  1025,  1026,  1027,    86,    87,    88,
-    -1,    90,  1208,  1209,    93,    94,    -1,    -1,  1039,    -1,
-  1041,    -1,    -1,  1044,  1220,  1221,    -1,    -1,    -1,    -1,
-    -1,   110,  1053,     3,     4,     5,     6,    -1,    -1,     9,
-    -1,    -1,    -1,    -1,     3,     4,     5,     6,    -1,    -1,
-     9,    -1,    -1,  1074,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    31,     4,     5,    -1,    -1,  1087,     9,  1089,    -1,
-    -1,    41,    31,    -1,    -1,    -1,    -1,    47,    -1,    -1,
-    -1,    -1,    41,    -1,    54,    -1,    56,    57,    -1,    31,
-    -1,    -1,    -1,    -1,    -1,    54,  1117,    56,    57,    -1,
-    70,  1122,  1123,    -1,  1125,    47,  1302,  1303,  1304,  1305,
-    80,    70,    54,  1309,    56,    57,    -1,    -1,    88,    -1,
-    90,    80,    -1,    93,    94,    -1,    -1,  1148,    70,    88,
-  1151,  1152,  1153,    -1,    93,    -1,    -1,    -1,    80,     3,
-     4,     5,     6,     7,     8,     9,    -1,    -1,    90,    -1,
-    14,    93,    94,    -1,  1175,  1176,  1177,  1178,  1179,  1180,
-  1181,    -1,    -1,    -1,  1185,    -1,    -1,    31,    -1,    -1,
-    -1,  1192,    36,    -1,    -1,    -1,    -1,    41,    -1,    -1,
-    -1,    45,    -1,    47,    -1,    -1,    -1,  1208,  1209,  1210,
-    54,    -1,    56,    57,    -1,    -1,    -1,    -1,    -1,  1220,
-  1221,  1222,  1223,    -1,    -1,    -1,    70,    -1,  1229,    -1,
-     4,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,  1415,
-  1416,    -1,  1418,  1244,    88,    -1,    90,    -1,  1249,    93,
-    94,  1252,    -1,    -1,    -1,    -1,    30,    31,    -1,    33,
-    -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,    42,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    55,     1,    57,     3,     4,     5,     6,     7,     8,
-     9,    -1,    -1,    -1,    -1,    14,    -1,    -1,    -1,    -1,
-  1301,  1302,  1303,  1304,  1305,  1306,    80,    -1,  1309,    28,
-    -1,    30,    31,    32,    -1,    -1,    -1,    36,    37,    -1,
-    -1,    -1,    41,    -1,  1500,  1501,    45,    46,    -1,    48,
-    -1,    -1,    -1,  1334,    -1,    54,    -1,    56,    57,    -1,
-    -1,    60,    -1,    62,  1345,  1346,  1347,    -1,    -1,    -1,
-    -1,    70,    -1,    -1,    -1,    -1,  1532,  1533,    -1,   133,
-   134,    80,   136,  1364,    -1,    -1,   140,   141,    -1,    88,
-   144,    -1,   146,    -1,    93,   149,   150,   151,    -1,    -1,
-    -1,    -1,   156,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-   109,   165,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,
-    -1,   175,   176,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,  1415,  1416,    -1,  1418,    -1,   193,
-   194,   195,    -1,    -1,    -1,    -1,    -1,    -1,     1,   203,
-     3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
-    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,   222,    -1,
-    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
-  1461,    34,    35,    36,    -1,    38,    39,    40,    41,    42,
-    43,    -1,    45,    -1,    -1,    -1,    49,    50,    51,    52,
-    53,    54,    -1,    56,    57,   259,    -1,    -1,    61,     3,
-     4,     5,     6,    -1,    67,     9,    -1,    70,    -1,  1500,
-  1501,  1502,  1503,    -1,    -1,    78,    79,    80,    -1,    -1,
-    -1,    -1,    -1,    86,    87,    88,    -1,    31,    -1,    -1,
-    93,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,
-    -1,  1532,  1533,  1534,    -1,   108,    -1,   110,    -1,    -1,
-    54,    -1,    56,    57,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,  1552,  1553,    -1,    -1,   329,    70,  1558,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,
-    -1,    -1,   346,    -1,    88,    -1,    -1,    -1,    -1,    93,
-   354,    -1,    -1,    -1,    -1,   359,    -1,    -1,    -1,    -1,
-     3,     4,     5,     6,     7,     8,     9,    -1,    -1,    12,
-     4,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    28,    -1,    30,    31,   393,
-    -1,    -1,    -1,    36,    -1,    -1,    30,    31,    41,    33,
-   404,    35,    45,    -1,    47,    -1,    -1,    -1,    42,    -1,
-    -1,    54,    -1,    56,    57,   419,    -1,    -1,   422,    -1,
-    -1,    55,    -1,    57,   428,   429,   430,    70,    -1,    -1,
-   434,    -1,    -1,    -1,    -1,    -1,    -1,    80,   442,    -1,
-    -1,    -1,    -1,    -1,    -1,    88,    -1,    90,     4,     5,
-    93,    94,     8,     9,    -1,    -1,    -1,    -1,    14,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,   470,   471,    -1,    -1,
-   474,    -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,
-    36,    -1,    -1,    -1,   488,    -1,    -1,   491,    -1,    45,
-    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,
-    56,    57,   136,    -1,   508,    -1,   140,   141,    -1,    -1,
-    -1,    -1,   146,    -1,    70,   149,   150,   151,    -1,    -1,
-    -1,    -1,     4,     5,    80,     7,     8,     9,    -1,    -1,
-    12,   165,    14,   537,    90,   169,   540,    93,    94,    -1,
-    -1,   175,   176,    -1,    -1,    -1,    28,    -1,    30,    31,
-    -1,   555,   556,   557,    36,    -1,    -1,    -1,    -1,   193,
-   194,   195,    -1,    45,    -1,    -1,   570,    -1,    -1,    -1,
-    -1,    -1,    54,    -1,    56,    57,    -1,    -1,    -1,    -1,
-    -1,    -1,     1,    -1,     3,     4,     5,     6,   222,     8,
-     9,    10,    11,    -1,    13,    14,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
-    29,    30,    -1,    32,   618,    34,    35,    36,    -1,    38,
-    39,    40,    41,    42,    43,   259,    45,   631,    -1,    -1,
-    49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
-    -1,    -1,    61,    -1,    -1,    -1,   650,    -1,    67,    -1,
-    -1,    70,     4,     5,    -1,    -1,     8,     9,    -1,    78,
-    79,    80,    14,    -1,    -1,    -1,    -1,    86,    87,    88,
-   674,    -1,    -1,    -1,    93,    94,    28,   681,    30,    -1,
-    -1,    -1,    -1,    -1,    36,   689,   690,   691,   692,    -1,
-   109,   110,    -1,    45,    -1,    47,    -1,    -1,    -1,    -1,
-    -1,    -1,    54,    -1,    56,    57,    -1,    -1,    -1,    -1,
-    -1,    -1,     3,     4,     5,     6,    -1,    -1,    70,    -1,
-    -1,   355,    -1,    -1,    -1,   359,    -1,    -1,    80,    -1,
-    -1,    -1,   736,    -1,    -1,    -1,   740,    -1,    90,    -1,
-    31,    93,    94,    -1,   748,   749,   750,   751,   752,    -1,
-    41,    -1,   756,    -1,    -1,    -1,    47,    -1,    -1,    -1,
-    -1,    -1,    -1,    54,    -1,    56,    57,    -1,    -1,    -1,
-   404,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
-    -1,    -1,    -1,    -1,   788,   419,   790,    -1,   422,    80,
-    -1,   795,   796,    55,   798,    -1,    -1,    88,    -1,    90,
-   434,    -1,    93,    94,    -1,    -1,    -1,    -1,   442,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   823,
-    -1,    -1,    -1,    -1,     3,     4,     5,     6,    -1,     4,
-     5,    -1,     7,     8,     9,    -1,   470,   471,    -1,    14,
-   474,    -1,   476,   477,   478,     3,     4,     5,     6,   483,
-    -1,     9,    31,    28,   488,    30,    31,   491,    -1,    -1,
-    -1,    36,    41,    -1,    -1,    -1,    -1,    -1,    47,    -1,
-    45,    -1,    -1,    31,   508,    54,    -1,    56,    57,    54,
-    -1,    56,    57,    41,    -1,    -1,    -1,   149,   150,   151,
-    -1,    70,    -1,    -1,    -1,    -1,    54,    -1,    56,    57,
-    -1,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,
-    -1,    90,    70,   175,    93,    94,    -1,    -1,   922,   923,
-   924,    -1,    80,    -1,   928,   929,    -1,    -1,    -1,    -1,
-    88,   193,   194,   195,    -1,    93,    -1,    -1,     3,     4,
-     5,     6,    -1,     1,     9,     3,     4,     5,     6,     7,
-     8,     9,    -1,    -1,    -1,    -1,    14,    -1,    -1,    -1,
-   222,    -1,   966,   967,   968,    -1,    31,    -1,    -1,   973,
-    28,    -1,    30,    31,    32,    -1,    41,    -1,    36,    37,
-    -1,    -1,    -1,    41,    -1,   619,    -1,    45,    46,    54,
-    48,    56,    57,    -1,    -1,    -1,    54,    -1,    56,    57,
-    -1,    -1,    60,    -1,    62,    70,    -1,  1011,    -1,    -1,
-    -1,    -1,    70,    -1,    -1,    80,   650,    -1,    -1,    -1,
-    -1,    -1,    80,    88,    -1,    -1,    -1,    -1,    93,    -1,
-    88,    -1,    -1,    -1,    -1,    93,   298,    -1,    -1,    -1,
-  1044,     3,     4,     5,     6,     7,     8,     9,    -1,    -1,
-    12,   109,    14,    -1,    -1,   689,   690,   691,   692,    -1,
-    -1,  1065,    -1,    -1,    -1,    -1,    28,    -1,    30,    31,
-  1074,    -1,    -1,    -1,    36,    -1,    -1,     4,     5,    41,
-    -1,    -1,     9,    45,    -1,    47,   348,   349,   350,    -1,
-    -1,    -1,    54,    -1,    56,    57,    -1,    -1,    -1,    -1,
-    -1,    -1,   736,    -1,    31,    -1,   740,    -1,    70,    -1,
-    -1,    -1,    -1,    -1,   748,   749,    -1,    -1,    80,    -1,
-    47,    -1,   756,    -1,    -1,    -1,    88,    54,    90,    56,
-    57,    93,    94,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,   404,    70,  1148,    -1,    -1,  1151,  1152,  1153,
-  1154,    -1,    -1,    80,   788,    -1,   790,    -1,    -1,    -1,
-    -1,   795,   796,    90,   798,    -1,    93,    94,    -1,    -1,
-    -1,  1175,  1176,  1177,  1178,  1179,  1180,  1181,    -1,  1183,
-    -1,  1185,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,
-    -1,    -1,     9,    -1,  1208,  1209,  1210,    -1,   470,   471,
-    -1,    -1,   474,    -1,   476,   477,   478,   479,    -1,    -1,
-    -1,   483,    -1,    -1,    31,    -1,   488,     4,     5,   491,
-     7,     8,     9,    -1,    41,    12,    -1,    14,    -1,    -1,
-  1244,    -1,    -1,    -1,    -1,  1249,    -1,    54,  1252,    56,
-    57,    28,    -1,    30,    31,    -1,    -1,    -1,    -1,    36,
-    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,    45,    -1,
-    47,    -1,    -1,    80,    -1,    -1,    -1,    54,    -1,    56,
-    57,    88,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1,
-    -1,    -1,    -1,    70,    -1,    -1,   930,  1301,  1302,  1303,
-  1304,  1305,  1306,    80,    -1,  1309,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    90,    -1,    -1,    93,    94,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,   966,   967,   968,    -1,    -1,    -1,    -1,    -1,
-    -1,  1345,  1346,  1347,    -1,   607,    -1,    -1,     4,     5,
-    -1,     7,     8,     9,    -1,    -1,    12,    -1,    14,   621,
-   622,    -1,   624,    -1,     3,     4,     5,     6,    -1,   631,
-     9,    55,    28,    -1,    30,    31,    -1,  1011,    -1,    -1,
-    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   650,    45,
-    -1,    47,    31,    -1,    -1,    -1,    80,    -1,    54,    83,
-    56,    57,    41,    -1,    -1,   107,   108,    -1,    -1,    -1,
-  1044,    -1,    -1,    -1,    70,    54,    -1,    56,    57,    -1,
-   104,    -1,   106,    -1,    80,    -1,    -1,   689,    -1,   691,
-   692,    70,   694,    -1,    90,    -1,    -1,    93,    94,    -1,
-  1074,    80,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,
-    -1,     4,     5,    -1,    93,     8,     9,  1461,    -1,    -1,
-    -1,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,   736,    28,    -1,    30,    -1,    -1,
-    -1,    -1,    -1,    36,    -1,    -1,   748,   749,   750,   751,
-   752,   175,    45,    -1,   756,    -1,     3,     4,     5,     6,
-    -1,    54,     9,    56,    57,    -1,    -1,    -1,    -1,   193,
-   194,   195,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   203,
-    -1,    -1,    -1,    -1,    31,    -1,    -1,    -1,  1532,  1533,
-  1534,    -1,    -1,   795,    41,    -1,    -1,    -1,   222,    -1,
-    -1,  1175,  1176,  1177,  1178,  1179,  1180,    54,    -1,    56,
-    57,  1185,    -1,    -1,  1558,   817,   818,   819,    -1,    -1,
-    -1,    -1,    -1,    70,   248,    -1,    -1,   829,    -1,    -1,
-    -1,    -1,    -1,    80,  1208,  1209,  1210,    -1,   262,    -1,
-    -1,    88,    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,
-     6,     7,     8,     9,    -1,    -1,    -1,    -1,    14,    -1,
-  1244,    -1,    -1,    -1,    -1,  1249,    -1,    -1,  1252,    -1,
-    -1,    -1,    28,    -1,    30,    31,    -1,   329,    -1,    -1,
-    36,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    45,
-   902,   903,    -1,    -1,   906,    -1,    -1,   909,    54,    -1,
-    56,    57,    -1,    -1,    60,    -1,   918,    -1,    -1,    -1,
-   922,   923,   924,    -1,    70,    -1,   928,    -1,  1302,  1303,
-   354,   355,    -1,    -1,    80,  1309,    -1,    -1,    -1,    -1,
-    -1,    -1,    88,     3,     4,     5,     6,    93,     1,    -1,
-     3,     4,     5,     6,     7,     8,     9,    -1,    -1,    -1,
-   402,    14,    -1,    -1,   966,   967,   968,    -1,    -1,    -1,
-    -1,  1345,  1346,  1347,    27,    28,    -1,    30,    31,    32,
-   404,    41,    -1,    36,    -1,    -1,    -1,    -1,    41,    -1,
-    -1,    44,    45,    46,    54,    48,    56,    57,    -1,    -1,
-    -1,    54,    62,    56,    57,    -1,    -1,    60,    -1,  1011,
-    70,    -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,    -1,
-    80,    -1,    -1,  1025,  1026,  1027,   468,    80,    88,    -1,
-    -1,    -1,    -1,    93,    -1,    88,    -1,    -1,    -1,    -1,
-    93,    -1,  1044,    -1,    -1,    98,   470,   471,    -1,    -1,
-   474,    -1,   476,   477,   478,   479,    -1,    -1,    -1,   483,
-    -1,    -1,    -1,    -1,   488,    -1,    -1,   491,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,
-     3,     4,     5,     6,     7,     8,     9,  1461,    -1,    -1,
-    -1,    14,    -1,    -1,    -1,   537,    -1,    -1,   540,    -1,
-    -1,    -1,   544,   545,   546,   547,   548,    -1,    31,    -1,
-    -1,    -1,    -1,    36,    41,   557,    -1,    -1,    41,    -1,
-  1122,  1123,    45,  1125,    47,    -1,    -1,    54,   570,    56,
-    57,    54,    -1,    56,    57,    62,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    70,    -1,    -1,  1148,    70,    -1,  1151,
-  1152,  1153,    -1,    80,    -1,    -1,    -1,    80,  1532,  1533,
-  1534,    88,    -1,    -1,    -1,    88,    93,    -1,    -1,    -1,
-    93,    -1,    -1,  1175,  1176,  1177,  1178,  1179,  1180,  1181,
-    -1,    -1,   624,  1185,  1558,    -1,    -1,    -1,    -1,   631,
-    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,
-    -1,    -1,     3,     4,     5,     6,  1208,  1209,  1210,    -1,
-   634,   635,    -1,    -1,    -1,    -1,    -1,    -1,  1220,  1221,
-  1222,  1223,    -1,    -1,    31,    -1,   650,    -1,    -1,    14,
-    31,    -1,    -1,    -1,    41,    -1,    -1,    -1,    23,    24,
-    41,    -1,  1244,    -1,    -1,    30,    31,    54,    33,    56,
-    57,    -1,    -1,    54,    -1,    56,    57,    -1,    -1,    -1,
-    -1,    -1,    -1,    70,    -1,   689,    -1,   691,   692,    70,
-    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    -1,    80,
-    65,    88,    -1,    -1,    -1,    -1,    93,    88,    -1,    -1,
-    -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,   740,  1301,
-  1302,  1303,  1304,  1305,  1306,    -1,    -1,  1309,    -1,    -1,
-    -1,    -1,   736,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,   748,   749,   750,   751,   752,   753,
-    -1,    -1,   756,    -1,    -1,    -1,    -1,    -1,    -1,   124,
-    -1,   126,    -1,  1345,    -1,  1347,    -1,    -1,   133,   134,
-    -1,    -1,    -1,    -1,    -1,   140,   141,    -1,   782,   144,
-   145,   146,   804,   148,   149,   150,   151,    -1,   810,    -1,
-    -1,   795,    69,    70,    71,    72,    73,    74,    75,    76,
-    77,    78,    79,    80,    81,    82,    83,    84,   348,   349,
-   350,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,     1,    -1,     3,     4,     5,     6,     7,     8,
-     9,    -1,    -1,  1415,  1416,    14,  1418,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
-    -1,    30,    31,    32,    -1,    -1,   878,    36,    37,    -1,
-    -1,    -1,    41,    -1,    -1,    -1,    45,    46,    -1,    48,
-    -1,    -1,    -1,   238,   239,    54,    -1,    56,    57,  1461,
-    -1,    60,    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    70,   914,    -1,   259,    -1,    -1,    -1,   920,    -1,
-    -1,    80,   924,    -1,    -1,    -1,    -1,    -1,    -1,    88,
-    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1,  1500,  1501,
-  1502,  1503,    -1,    -1,    -1,   929,   930,   931,    -1,    -1,
-   109,    -1,    -1,   298,    -1,    -1,    -1,    -1,    -1,    -1,
-   962,    -1,   964,    -1,    -1,    -1,   968,    -1,    -1,    -1,
-  1532,  1533,  1534,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,   966,   967,   968,    -1,    -1,    -1,    -1,   973,
-  1552,    -1,    -1,    -1,    -1,    -1,  1558,    -1,    -1,    -1,
-    -1,   346,    -1,   348,   349,    -1,    -1,    -1,    -1,  1011,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,  1024,    -1,    -1,    -1,    -1,  1011,    -1,    -1,
-    -1,    -1,  1034,    -1,    -1,    -1,    -1,    -1,    -1,  1041,
-    -1,  1025,  1026,  1027,    -1,    -1,    -1,    -1,   393,    -1,
-    -1,  1053,     3,     4,     5,     6,     3,     4,     5,     6,
-  1044,    -1,    -1,    -1,    -1,    -1,    -1,   412,    -1,    -1,
-    -1,    -1,    -1,    -1,   419,    -1,    -1,   422,    -1,    -1,
-    31,  1065,    -1,    -1,    31,  1087,    -1,  1089,    -1,   434,
-    41,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,
-    -1,   621,   622,    54,   624,    56,    57,    54,    -1,    56,
-    57,   631,    -1,    -1,    -1,  1117,    -1,    -1,    -1,    70,
-    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    80,
-    -1,    -1,    -1,    80,    -1,    -1,    -1,    88,    -1,    -1,
-    -1,    88,    93,    -1,    -1,    -1,    93,    -1,    -1,    -1,
-    -1,  1153,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-   505,    -1,   507,    -1,    -1,    -1,    -1,    -1,    -1,   689,
-  1154,   691,   692,    -1,   694,    -1,    -1,    -1,  1180,     3,
-     4,     5,     6,     7,     8,     9,   531,    -1,    12,    -1,
-    14,  1175,  1176,  1177,  1178,  1179,  1180,  1181,    -1,  1183,
-    -1,  1185,    -1,    -1,    28,    -1,    30,    31,  1210,    -1,
-    -1,    -1,    36,    -1,    -1,    -1,   736,    41,    -1,    -1,
-    -1,    45,    -1,    47,  1208,  1209,  1210,    -1,    -1,    -1,
-    54,    -1,    56,    57,    -1,    -1,  1220,  1221,  1222,  1223,
-    -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,    -1,     3,
-     4,     5,     6,    -1,    -1,    -1,    80,    -1,    -1,    -1,
-  1244,    -1,   607,    -1,    88,    -1,    90,    -1,    -1,    93,
-    94,    -1,    -1,   618,   619,    -1,   621,   622,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,     3,
-     4,     5,     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    54,    -1,    56,    57,  1306,    -1,    -1,    -1,    62,   829,
-    -1,    -1,    -1,    -1,    -1,    -1,    70,  1301,  1302,  1303,
-  1304,  1305,  1306,    -1,    -1,  1309,    80,    41,    -1,   674,
-    -1,    -1,    -1,    -1,    88,    -1,   681,   682,    -1,    93,
-    54,    -1,    56,    57,    -1,    -1,    60,    -1,   693,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,    -1,    -1,
-    -1,  1345,  1364,  1347,    -1,    -1,    80,    -1,    -1,    -1,
-    -1,    -1,   717,    -1,    88,    -1,    -1,    31,    -1,    93,
-    -1,    -1,   902,   903,    -1,    -1,   906,    -1,    -1,   909,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   918,    -1,
-    -1,    -1,   922,   923,   924,    -1,    -1,    -1,   928,    63,
-    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
-    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
-    84,  1415,  1416,  1417,  1418,    -1,    -1,   782,    -1,    -1,
-   785,    -1,    -1,    -1,    -1,    -1,   966,   967,   968,    -1,
-    -1,    -1,     1,    -1,     3,     4,     5,     6,     7,     8,
-     9,    -1,    -1,    -1,    -1,    14,    -1,    -1,    -1,    -1,
-    -1,    -1,   817,   818,   819,    -1,    -1,  1461,    -1,    28,
-    -1,    30,    31,    32,   829,    -1,    -1,    36,    37,    -1,
-    -1,  1011,    41,    -1,    -1,    -1,    45,    46,    -1,    48,
-  1502,    -1,    -1,    -1,    -1,    54,    -1,    56,    57,    -1,
-    -1,    60,    -1,    62,    -1,    -1,  1500,  1501,  1502,  1503,
-    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    80,  1534,    -1,    -1,    -1,    -1,    -1,    -1,    88,
-    -1,    -1,    -1,    -1,    93,    -1,    -1,    -1,  1532,  1533,
-  1534,  1553,    -1,    -1,     4,     5,    -1,   902,   903,     9,
-   109,   906,    -1,    -1,   909,    -1,    -1,    -1,  1552,    -1,
-    -1,    -1,    -1,   918,  1558,    -1,    -1,    -1,    -1,    -1,
-    -1,    31,    -1,   928,    -1,     3,     4,     5,     6,     7,
-     8,     9,    -1,    -1,    12,    -1,    14,    47,    -1,    -1,
-    -1,    -1,    -1,    -1,    54,    -1,    56,    57,    -1,    -1,
-    28,    -1,    30,    31,    -1,    -1,    -1,    -1,    36,    -1,
-    70,    -1,    -1,    41,    -1,    -1,    -1,    45,  1148,    -1,
-    80,  1151,  1152,  1153,    -1,    -1,    54,    -1,    56,    57,
-    90,    -1,    -1,    93,    94,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    70,    -1,    -1,  1175,  1176,  1177,  1178,  1179,
-  1180,  1181,    80,    -1,     1,  1185,     3,     4,     5,     6,
-    88,     8,     9,    10,    11,    93,    13,    14,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1208,  1209,
-  1210,    28,    29,    30,  1039,    32,    -1,    34,    35,    36,
-    -1,    38,    39,    40,    41,    42,    43,    -1,    45,    -1,
-    -1,    -1,    49,    50,    51,    52,    53,    54,    -1,    56,
-    57,  1066,    -1,    -1,    61,    62,    -1,    -1,    -1,    -1,
-    67,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    78,    79,    80,    -1,    -1,    -1,    -1,    -1,    86,
-    87,    88,    -1,    -1,    -1,    -1,    93,    -1,    12,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,   110,    -1,    -1,    -1,  1122,  1123,    -1,
-  1125,  1301,  1302,  1303,  1304,  1305,  1306,    -1,    -1,  1309,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,  1148,    -1,    -1,  1151,  1152,    62,    63,
-    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
-    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
-    84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1192,    -1,    -1,
-    -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,     7,
-     8,     9,    -1,    -1,    12,    -1,    14,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    27,
-    -1,    -1,    -1,    31,  1229,    -1,    -1,    -1,    36,    -1,
-    -1,    -1,    -1,    41,    -1,  1415,  1416,    45,  1418,    47,
-    -1,    -1,  1247,    -1,  1249,    -1,    54,    -1,    56,    57,
-    58,    59,    60,    -1,    62,    63,    64,    65,    66,    67,
-    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
-    78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
-    88,    -1,    90,    91,    92,    93,    94,    95,    -1,    97,
-    -1,    -1,    -1,    -1,   102,    -1,    -1,    -1,    -1,   107,
-   108,   109,    -1,   111,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-  1500,  1501,  1502,  1503,    -1,     1,    -1,     3,     4,     5,
-     6,     7,     8,     9,    10,    11,    -1,    13,    14,    15,
-    -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-    26,    27,    28,    29,    30,    31,    32,    -1,    34,    35,
-    36,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
-    46,    -1,  1552,    49,    50,    51,    52,    53,    54,    -1,
-    56,    57,    58,    -1,    60,    61,    -1,    -1,    -1,    -1,
-    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,    -1,
-    86,    87,    88,    -1,    -1,    -1,    -1,    93,    -1,    95,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,   109,   110,     1,    -1,     3,     4,     5,
-     6,     7,     8,     9,    10,    11,    -1,    13,    14,    15,
-    -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-    26,    27,    28,    29,    30,    31,    32,    -1,    34,    35,
-    36,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
-    46,    -1,    -1,    49,    50,    51,    52,    53,    54,    -1,
-    56,    57,    58,    -1,    60,    61,    -1,    -1,    -1,    -1,
-    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,    -1,
-    86,    87,    88,    -1,    -1,    -1,    -1,    93,     1,    95,
-     3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
-    13,    14,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
-    -1,    34,    35,    36,    -1,    38,    39,    40,    41,    42,
-    43,    -1,    45,    -1,    47,    -1,    49,    50,    51,    52,
-    53,    54,    -1,    56,    57,    58,    -1,    -1,    61,    -1,
-    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    78,    79,    80,    -1,    -1,
-    -1,    -1,    -1,    86,    87,    88,    -1,    90,    -1,    -1,
-    93,    94,     1,    -1,     3,     4,     5,     6,     7,     8,
-     9,    10,    11,    12,    13,    14,    -1,   110,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
-    29,    30,    31,    32,    -1,    34,    35,    36,    -1,    38,
-    39,    40,    41,    42,    43,    -1,    45,    -1,    47,    -1,
-    49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
-    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    -1,
-    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
-    79,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,
-    -1,    90,    -1,    -1,    93,    94,     1,    -1,     3,     4,
-     5,     6,     7,     8,     9,    10,    11,    -1,    13,    14,
-    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    28,    29,    30,    31,    32,    -1,    34,
-    35,    36,    -1,    38,    39,    40,    41,    42,    43,    -1,
-    45,    -1,    -1,    -1,    49,    50,    51,    52,    53,    54,
-    -1,    56,    57,    58,    -1,    60,    61,    -1,    -1,    -1,
-    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,
-    -1,    86,    87,    88,    -1,    -1,    -1,     1,    93,     3,
-     4,     5,     6,    -1,     8,     9,    10,    11,    -1,    13,
-    14,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    -1,
-    34,    35,    36,    -1,    38,    39,    40,    41,    42,    43,
-    -1,    45,    -1,    -1,    -1,    49,    50,    51,    52,    53,
-    54,    -1,    56,    57,    58,    -1,    -1,    61,    -1,    -1,
-    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    78,    79,    80,    -1,    -1,    -1,
-    -1,    -1,    86,    87,    88,    -1,    -1,    -1,     1,    93,
-     3,     4,     5,     6,    -1,     8,     9,    10,    11,    -1,
-    13,    14,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    -1,    32,
-    -1,    34,    35,    36,    -1,    38,    39,    40,    41,    42,
-    43,    -1,    45,    -1,    -1,    -1,    49,    50,    51,    52,
-    53,    54,    -1,    56,    57,    58,    -1,    -1,    61,    -1,
-    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    78,    79,    80,    -1,    -1,
-    -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,
-    93,    94,     1,    -1,     3,     4,     5,     6,    -1,     8,
-     9,    10,    11,    -1,    13,    14,    -1,   110,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
-    29,    30,    -1,    32,    -1,    34,    35,    36,    -1,    38,
-    39,    40,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
-    49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
-    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    -1,
-    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
-    79,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,
-    -1,    -1,    -1,     1,    93,     3,     4,     5,     6,    -1,
-     8,     9,    10,    11,    -1,    13,    14,    -1,    -1,    -1,
-   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    28,    29,    30,    -1,    32,    -1,    34,    35,    36,    -1,
-    38,    39,    40,    41,    42,    43,    -1,    45,    -1,    -1,
-    -1,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
-    58,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,
-    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    78,    79,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,
-    88,    -1,    -1,    -1,     1,    93,     3,     4,     5,     6,
-    -1,     8,     9,    10,    11,    -1,    13,    14,    -1,    -1,
-    -1,   109,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    28,    29,    30,    -1,    32,    -1,    34,    35,    36,
-    -1,    38,    39,    40,    41,    42,    43,    -1,    45,    -1,
-    -1,    -1,    49,    50,    51,    52,    53,    54,    -1,    56,
-    57,    58,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,
-    67,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    78,    79,    80,    -1,    -1,    -1,    -1,    -1,    86,
-    87,    88,    -1,    -1,    -1,    -1,    93,    -1,     1,    -1,
-     3,     4,     5,     6,   101,     8,     9,    10,    11,    -1,
-    13,    14,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
-    -1,    34,    35,    36,    -1,    38,    39,    40,    41,    42,
-    43,    -1,    45,    -1,    -1,    -1,    49,    50,    51,    52,
-    53,    54,    -1,    56,    57,    58,    -1,    -1,    61,    -1,
-    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    78,    79,    80,    -1,    -1,
-    -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,     1,
-    93,     3,     4,     5,     6,    -1,     8,     9,    10,    11,
-    -1,    13,    14,    -1,    -1,    -1,    -1,   110,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    -1,
-    32,    -1,    34,    35,    36,    -1,    38,    39,    40,    41,
-    42,    43,    -1,    45,    -1,    -1,    -1,    49,    50,    51,
-    52,    53,    54,    -1,    56,    57,    58,    -1,    -1,    61,
-    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    80,    -1,
-    -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,
-     1,    93,     3,     4,     5,     6,    -1,     8,     9,    10,
-    11,    -1,    13,    14,    -1,    -1,    -1,    -1,   110,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
-    -1,    32,    -1,    34,    35,    36,    -1,    38,    39,    40,
-    41,    42,    43,    -1,    45,    -1,    -1,    -1,    49,    50,
-    51,    52,    53,    54,    -1,    56,    57,    -1,    -1,    60,
-    61,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    80,
-    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,
-    -1,     1,    93,     3,     4,     5,     6,    -1,     8,     9,
-    10,    11,    -1,    13,    14,    -1,    -1,    -1,    -1,   110,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
-    30,    -1,    32,    -1,    34,    35,    36,    -1,    38,    39,
-    40,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    49,
-    50,    51,    52,    53,    54,    -1,    56,    57,    -1,    -1,
-    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
-    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,
-    80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,
-    -1,    -1,     1,    93,     3,     4,     5,     6,    -1,     8,
-     9,    10,    11,    -1,    13,    14,    -1,    -1,   108,    -1,
-   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
-    29,    30,    -1,    32,    -1,    34,    35,    36,    -1,    38,
-    39,    40,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
-    49,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
-    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    -1,
-    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
-    79,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,
-    -1,    -1,    -1,     1,    93,     3,     4,     5,     6,    -1,
-     8,     9,    10,    11,    -1,    13,    14,    -1,    -1,    -1,
-    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    28,    29,    30,    -1,    32,    -1,    34,    35,    36,    -1,
-    38,    39,    40,    41,    42,    43,    -1,    45,    -1,    -1,
-    -1,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
-    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,
-    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    78,    79,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,
-    88,    -1,    -1,    -1,     1,    93,     3,     4,     5,     6,
-    -1,     8,     9,    10,    11,    -1,    13,    14,    -1,    -1,
-    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    28,    29,    30,    -1,    32,    -1,    34,    35,    36,
-    -1,    38,    39,    40,    41,    42,    43,    -1,    45,    -1,
-    -1,    -1,    49,    50,    51,    52,    53,    54,    -1,    56,
-    57,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,
-    67,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    78,    79,    80,    -1,    -1,    -1,    -1,    -1,    86,
-    87,    88,     3,     4,     5,     6,    93,     8,     9,    10,
-    11,    -1,    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,   110,    -1,    -1,    -1,    28,    29,    30,
-    -1,    32,    -1,    34,    35,    36,    -1,    38,    39,    40,
-    41,    42,    43,    -1,    45,    -1,    -1,    -1,    49,    50,
-    51,    52,    53,    54,    -1,    56,    57,    -1,    -1,    -1,
-    61,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    80,
-    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,
-    -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
-   111,     3,     4,     5,     6,     7,     8,     9,    10,    11,
-    -1,    13,    14,    15,    -1,    17,    18,    19,    20,    21,
-    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-    32,    -1,    34,    35,    36,    -1,    38,    39,    40,    41,
-    42,    43,    44,    45,    46,    -1,    -1,    49,    50,    51,
-    52,    53,    54,    -1,    56,    57,    58,    -1,    60,    61,
-    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    80,    -1,
-    -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,
-    -1,    93,    -1,    95,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,   109,   110,     3,
-     4,     5,     6,     7,     8,     9,    10,    11,    -1,    13,
-    14,    15,    -1,    17,    18,    19,    20,    21,    22,    23,
-    24,    25,    26,    27,    28,    29,    30,    31,    32,    -1,
-    34,    35,    36,    -1,    38,    39,    40,    41,    42,    43,
-    44,    45,    46,    -1,    -1,    49,    50,    51,    52,    53,
-    54,    -1,    56,    57,    58,    -1,    60,    61,    -1,    -1,
-    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    78,    79,    80,    -1,    -1,    -1,
-    -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    93,
-    -1,    95,    -1,     3,     4,     5,     6,     7,     8,     9,
-    10,    11,    -1,    13,    14,    15,   110,    17,    18,    19,
-    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
-    30,    31,    32,    -1,    34,    35,    36,    -1,    38,    39,
-    40,    41,    42,    43,    44,    45,    46,    -1,    -1,    49,
-    50,    51,    52,    53,    54,    -1,    56,    57,    58,    -1,
-    60,    61,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
-    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,
-    80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,
-    -1,    -1,    -1,    93,    -1,    95,    -1,     3,     4,     5,
-     6,     7,     8,     9,    10,    11,    -1,    13,    14,    15,
-   110,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-    26,    27,    28,    29,    30,    31,    32,    -1,    34,    35,
-    36,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
-    46,    -1,    -1,    49,    50,    51,    52,    53,    54,    -1,
-    56,    57,    -1,    -1,    60,    61,    -1,    -1,    -1,    -1,
-    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,    -1,
-    86,    87,    88,    -1,    -1,    -1,    -1,    93,    -1,    95,
-     3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
-    13,    14,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,
-    -1,    34,    35,    36,    -1,    38,    39,    40,    41,    42,
-    43,    -1,    45,    -1,    47,    -1,    49,    50,    51,    52,
-    53,    54,    -1,    56,    57,    -1,    -1,    -1,    61,    -1,
-    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    78,    79,    80,    -1,    -1,
-    -1,    -1,    -1,    86,    87,    88,    -1,    90,    -1,    -1,
-    93,    94,     3,     4,     5,     6,     7,     8,     9,    10,
-    11,    12,    13,    14,    -1,    -1,    -1,   110,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
-    31,    32,    -1,    34,    35,    36,    -1,    38,    39,    40,
-    41,    42,    43,    -1,    45,    -1,    47,    -1,    49,    50,
-    51,    52,    53,    54,    -1,    56,    57,    -1,    -1,    -1,
-    61,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    80,
-    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,    90,
-    -1,    -1,    93,    94,     3,     4,     5,     6,    -1,     8,
-     9,    10,    11,    -1,    13,    14,    -1,    -1,    -1,   110,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
-    29,    30,    31,    32,    -1,    34,    35,    36,    -1,    38,
-    39,    40,    41,    42,    43,    -1,    45,    -1,    47,    -1,
-    49,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
-    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
-    79,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,
-    -1,    90,    -1,    -1,    93,    94,     3,     4,     5,     6,
-    -1,     8,     9,    10,    11,    -1,    13,    14,    -1,    -1,
-    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    28,    29,    30,    31,    32,    -1,    34,    35,    36,
-    -1,    38,    39,    40,    41,    42,    43,    -1,    45,    -1,
-    -1,    -1,    49,    50,    51,    52,    53,    54,    -1,    56,
-    57,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,
-    67,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    78,    79,    80,    -1,    -1,    -1,    -1,    -1,    86,
-    87,    88,     3,     4,     5,     6,    93,     8,     9,    10,
-    11,    -1,    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,   110,    -1,    -1,    -1,    28,    29,    30,
-    -1,    32,    -1,    34,    35,    36,    -1,    38,    39,    40,
-    41,    42,    43,    -1,    45,    -1,    -1,    -1,    49,    50,
-    51,    52,    53,    54,    -1,    56,    57,    -1,    -1,    60,
-    61,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    80,
-    -1,    -1,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,
-    -1,    -1,    93,     3,     4,     5,     6,     7,     8,     9,
-    10,    11,    -1,    13,    14,    -1,    -1,    -1,    -1,   110,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
-    30,    31,    32,    -1,    34,    35,    36,    -1,    38,    39,
-    40,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    49,
-    50,    51,    52,    53,    54,    -1,    56,    57,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
-    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,
-    80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,     3,
-     4,     5,     6,    93,     8,     9,    10,    11,    -1,    13,
-    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-   110,    -1,    -1,    -1,    28,    29,    30,    31,    32,    -1,
-    34,    35,    36,    -1,    38,    39,    40,    41,    42,    43,
-    -1,    45,    -1,    -1,    -1,    49,    50,    51,    52,    53,
-    54,    -1,    56,    57,    -1,    -1,    -1,    61,    -1,    -1,
-    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    78,    79,    80,    -1,    -1,    -1,
-    -1,    -1,    86,    87,    88,     3,     4,     5,     6,    93,
-     8,     9,    10,    11,    -1,    13,    14,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,
-    28,    29,    30,    -1,    32,    -1,    34,    35,    36,    -1,
-    38,    39,    40,    41,    42,    43,    -1,    45,    -1,    -1,
-    -1,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
-    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,
-    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    78,    79,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,
-    88,     3,     4,     5,     6,    93,     8,     9,    10,    11,
-    -1,    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,   110,    -1,    -1,    -1,    28,    29,    30,    -1,
-    32,    -1,    34,    35,    36,    -1,    38,    39,    40,    41,
-    42,    43,    -1,    45,    -1,    -1,    -1,    49,    50,    51,
-    52,    53,    54,    -1,    56,    57,    -1,    -1,    -1,    61,
-    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    80,    -1,
-    -1,    -1,    -1,    -1,    86,    87,    88,     3,     4,     5,
-     6,    93,     8,     9,    10,    11,    -1,    13,    14,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,
-    -1,    -1,    28,    29,    30,    -1,    32,    -1,    34,    35,
-    36,    -1,    38,    39,    40,    41,    42,    43,    -1,    45,
-    -1,    -1,    -1,    49,    50,    51,    52,    53,    54,    -1,
-    56,    57,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,
-    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,    -1,
-    86,    87,    88,     3,     4,     5,     6,    93,     8,     9,
-    10,    11,    -1,    13,    14,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    28,    29,
-    30,    -1,    32,    -1,    34,    35,    36,    -1,    38,    39,
-    40,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    49,
-    50,    51,    52,    53,    54,    -1,    56,    57,    58,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
-    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,
-    80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,     3,
-     4,     5,     6,    93,     8,     9,    10,    11,    -1,    13,
-    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-   110,    -1,    -1,    -1,    28,    29,    30,    -1,    32,    -1,
-    34,    35,    36,    -1,    38,    39,    40,    41,    42,    43,
-    -1,    45,    -1,    -1,    -1,    49,    50,    51,    52,    53,
-    54,    -1,    56,    57,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    78,    79,    80,    -1,    -1,    -1,
-    -1,    -1,    86,    87,    88,    -1,    -1,    -1,    -1,    93,
-    94,     3,     4,     5,     6,    -1,     8,     9,    10,    11,
-    -1,    13,    14,    -1,    -1,    -1,   110,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,    31,
-    32,    -1,    34,    35,    36,    -1,    38,    39,    40,    41,
-    42,    43,    -1,    45,    -1,    -1,    -1,    49,    50,    51,
-    52,    53,    54,    -1,    56,    57,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    80,    -1,
-    -1,    -1,    -1,    -1,    86,    87,    88,     3,     4,     5,
-     6,    93,     8,     9,    10,    11,    -1,    13,    14,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,
-    -1,    -1,    28,    29,    30,    -1,    32,    -1,    34,    35,
-    36,    -1,    38,    39,    40,    41,    42,    43,    -1,    45,
-    -1,    -1,    -1,    49,    50,    51,    52,    53,    54,    -1,
-    56,    57,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,
-    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,    -1,
-    86,    87,    88,     3,     4,     5,     6,    93,     8,     9,
-    10,    11,    -1,    13,    14,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    28,    29,
-    30,    31,    32,    -1,    34,    35,    36,    -1,    38,    39,
-    40,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    49,
-    50,    51,    52,    53,    54,    -1,    56,    57,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
-    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,
-    80,    -1,    -1,    -1,    -1,    -1,    86,    87,    88,     3,
-     4,     5,     6,    93,     8,     9,    10,    11,    -1,    13,
-    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-   110,    -1,    -1,    -1,    28,    29,    30,    -1,    32,    -1,
-    34,    35,    36,    -1,    38,    39,    40,    41,    42,    43,
-    -1,    45,    -1,    -1,    -1,    49,    50,    51,    52,    53,
-    54,    -1,    56,    57,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    78,    79,    80,    -1,    -1,    -1,
-    -1,    -1,    86,    87,    88,     3,     4,     5,     6,    93,
-     8,     9,    10,    11,    -1,    13,    14,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,
-    28,    29,    30,    -1,    32,    -1,    34,    35,    36,    -1,
-    38,    39,    40,    41,    42,    43,    -1,    45,    -1,    -1,
-    -1,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
-    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    78,    79,    80,    -1,    -1,    -1,    -1,    -1,    86,    87,
-    88,     3,     4,     5,     6,    93,     8,     9,    10,    11,
-    -1,    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,   110,    -1,    -1,    -1,    28,    29,    30,    -1,
-    32,    -1,    34,    35,    36,    -1,    38,    39,    40,    41,
-    42,    43,    -1,    45,    -1,    -1,    -1,    49,    50,    51,
-    52,    53,    54,    -1,    56,    57,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    67,    -1,     1,    70,     3,
-     4,     5,     6,     7,     8,     9,    78,    79,    80,    -1,
-    14,    -1,    -1,    -1,    86,    87,    88,    -1,    -1,    -1,
-    -1,    93,    -1,    -1,    28,    -1,    30,    31,    32,    -1,
-    -1,    -1,    36,    -1,    -1,    -1,    -1,    41,   110,    -1,
-    -1,    45,    46,    -1,    48,    -1,    -1,    -1,    -1,    -1,
-    54,    -1,    56,    57,    -1,    -1,    60,    -1,    62,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    70,     3,     4,     5,
-     6,     7,     8,     9,    -1,    -1,    80,    -1,    14,    -1,
-    -1,    -1,    -1,    -1,    88,    -1,    -1,    -1,    -1,    93,
-    -1,    -1,    28,    -1,    30,    31,    -1,    -1,    -1,    -1,
-    36,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    45,
-    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,
-    56,    57,     3,     4,     5,     6,     7,     8,     9,    -1,
-    -1,    -1,    -1,    14,    70,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    80,    -1,    -1,    28,    -1,    30,
-    31,    -1,    88,    -1,    90,    36,    -1,    93,    94,    -1,
-    41,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    54,    -1,    56,    57,    -1,    -1,    -1,
-    -1,    62,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
-     3,     4,     5,     6,     7,     8,     9,    -1,    -1,    80,
-    -1,    14,    -1,    -1,    -1,    -1,    -1,    88,    -1,    -1,
-    -1,    -1,    93,    -1,    -1,    28,    -1,    30,    31,    -1,
-    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    41,    -1,
-    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    54,    -1,    56,    57,    -1,    -1,    60,    -1,     3,
-     4,     5,     6,     7,     8,     9,    -1,    70,    -1,    -1,
-    14,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,
-    -1,    -1,    -1,    -1,    28,    88,    30,    31,    -1,    -1,
-    93,    -1,    36,    -1,    -1,    -1,    -1,    41,    -1,    -1,
-    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    54,    -1,    56,    57,     3,     4,     5,     6,     7,     8,
-     9,    -1,    -1,    -1,    -1,    14,    70,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    28,
-    -1,    30,    31,    -1,    88,    -1,    -1,    36,    -1,    93,
-    -1,    -1,    41,    -1,    -1,    -1,    45,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    54,    -1,    56,    57,     4,
-     5,    -1,     7,     8,     9,    -1,    -1,    -1,    -1,    14,
-    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    80,    -1,    28,    -1,    30,    31,    -1,    -1,    88,
-    -1,    36,    -1,    -1,    93,    -1,    -1,    -1,    -1,    -1,
-    45,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    54,
-    -1,    56,    57,    63,    64,    65,    66,    67,    68,    69,
-    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
-    80,    81,    82,    83,    84,    63,    64,    65,    66,    67,
-    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
-    78,    79,    80,    81,    82,    83,    84,    -1,    -1,    -1,
-    -1,   111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,   107,
-    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
-    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
-    83,    84,    62,    63,    64,    65,    66,    67,    68,    69,
-    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
-    80,    81,    82,    83,    84,    63,    64,    65,    66,    67,
-    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
-    78,    79,    80,    81,    82,    83,    84,    63,    64,    65,
-    66,    67,    68,    69,    70,    71,    72,    73,    74,    -1,
-    76,    77,    78,    79,    80,    81,    82,    83,    84,    67,
-    68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
-    78,    79,    80,    81,    82,    83,    84,    68,    69,    70,
-    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
-    81,    82,    83,    84
+/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
+   STATE-NUM.  */
+#define YYPACT_NINF -1444
+static const yytype_int16 yypact[] =
+{
+      97,   131,   231, -1444, -1444, -1444,  6086, -1444,    49,    38,
+      52,   232,   176,   237, -1444, -1444,  1423, -1444,   219,   293,
+     301, -1444, -1444, -1444,  1648,  1230,   430,   280, -1444,   236,
+     333, -1444,  3476,  3476, -1444,  1540, -1444,  6086,   305, -1444,
+   -1444,   359, -1444,    50,  6214, -1444, -1444,   388,   603,   437,
+     406,   468, -1444, -1444, -1444, -1444,   365,  2016, -1444,  7389,
+   -1444,  2134,   321, -1444,   503, -1444, -1444,  1389,    85, -1444,
+     490, -1444, -1444,   506,  4769, -1444, -1444, -1444,  1093, -1444,
+   -1444, -1444,  2245, -1444, -1444,   831,  4682,   497, -1444, -1444,
+   11071, -1444, 11071, -1444, 11071, -1444, -1444, -1444,    52,   232,
+     528,   333,   475,   534,   468, -1444,  1009, -1444,   831, 11156,
+   11156,   513, -1444, -1444, -1444, -1444, -1444,   221,   544,   253,
+     444,   559,   478,   577, -1444, -1444,  1292, -1444,  1270,    52,
+     232, -1444,   528,   333, -1444,   584,   277,   572, 12193, -1444,
+   11071, 11071,  1689,  3602, -1444, -1444,  2936,   932,  3602, -1444,
+    1878,  4133,  4133,  1540,   557,   563, -1444,   596,   793,   568,
+     611, -1444, -1444,   716, -1444,   626, -1444,  7874, -1444, -1444,
+     280,  6901,   639, -1444, -1444, -1444,   388,  5433, 12251,   363,
+     684, -1444, -1444,   679,   503,   744,   111,   154,   719, -1444,
+   -1444,   672,   447, -1444, -1444,  4588,  4588,  3756,  1093,   608,
+   -1444, -1444,   436, -1444, -1444,  3403, -1444, -1444, -1444, -1444,
+   -1444,  2134,   761, -1444,   503,  1093, -1444, -1444, -1444,  2604,
+    2134, -1444,   503, -1444,  5433, -1444, -1444, -1444, -1444, -1444,
+   -1444, -1444, -1444, -1444, -1444,   720, -1444,   468, -1444,   503,
+    1707,  1992, -1444, -1444,   490, -1444, -1444, -1444, -1444,  1026,
+     831, -1444,   677,  1375, -1444,   465, -1444, -1444, -1444, -1444,
+   -1444,  4798, -1444, -1444,   319, -1444,   702,   712, -1444, -1444,
+   -1444, -1444,   741, -1444, -1444, -1444, -1444, -1444, -1444, -1444,
+   -1444, -1444, -1444, -1444, -1444, -1444, -1444, -1444, -1444, -1444,
+   -1444, -1444, -1444, -1444,   697, -1444, -1444, -1444,  1026,  4769,
+    1223, -1444, -1444,   726, -1444, -1444, 11757, 11842, 11927, 11927,
+   -1444, -1444, -1444, -1444, -1444,   733,   769,   774,   781,   791,
+     528,   880, 11241,  1995, 11927, -1444, -1444, 11927, 11927, -1444,
+   -1444,  8782, -1444, 11927,   562,   810, -1444, 11927, -1444, 11326,
+   -1444, 12470,   508,   900,  1871, 11411, -1444,   872,  2257, -1444,
+    2603,  2463,   445, -1444,   531, -1444,   654,  2864,   562,   562,
+   11071, 12193, -1444,  1995,   777,  1995, -1444, -1444,   803,   842,
+   12403,   813,   817,   821,   756,   626, -1444, -1444, -1444, -1444,
+   -1444, -1444, -1444, -1444,   544,   253,   444,  1995,   559,   478,
+     860,   577, -1444,   895, -1444,  2447,    52,   232, -1444, -1444,
+   -1444, -1444, -1444, -1444,  7496, -1444,  5433,  8429,  2592, -1444,
+     545,   562, -1444, -1444,   650, -1444,   879,   890, -1444, -1444,
+   -1444,  3602, -1444, -1444,  3602, -1444,   859, -1444, -1444, -1444,
+     793,   793,   793, -1444, -1444, -1444,  4798,    72,   867,   875,
+   -1444, -1444, -1444, -1444, 12193, -1444,   940,   957, -1444, -1444,
+     716, -1444,   503, -1444, -1444, -1444, -1444,    94, -1444, -1444,
+   -1444, -1444,  9329, 11241, -1444, -1444, -1444, 11241,   886, -1444,
+    5340,    93,  5534,  4987, -1444, -1444,  4987, -1444,  5097,  5097,
+    3756,  6418,   893, -1444,   503,  5433, -1444,   894, -1444, -1444,
+    5106,  2604,  2134,  5433, -1444,   503, -1444, -1444,   503,  2604,
+   -1444,   981, -1444, 11071,   720, -1444, -1444,  1707, -1444,  2455,
+    4856,  1026,   503, -1444, -1444,   937,   953,   975,   973, -1444,
+   -1444, -1444, -1444,   936, -1444,   561,   927,   939, -1444, -1444,
+    1026, -1444, -1444,   710, -1444, -1444, 11071, 11241,   726,  8782,
+   -1444,   581,  8782, -1444, -1444, -1444, 11156,  5069,  5069,  5069,
+    5069, 12448, -1444, -1444, -1444, -1444,   944, 11502, 11502,  8782,
+     959,   303,   961,  1014,   966, -1444, -1444, -1444, -1444, 11071,
+   -1444,  8872,  8782, -1444, 11241, 11241,  9419, 11241, 11241, 11241,
+   11241, 11241, 11241, 11241, 11241, 11241, 11241, 11241, 11241, 11241,
+   11241, 11241, 11241, 11241, 11241, 11241, -1444, 11241, -1444, -1444,
+   -1444, -1444, 11241, 11241, -1444, -1444, -1444,  3019,   456,   852,
+    9954, -1444, -1444, -1444,  1028,  1375,  1078,   600,   605,   653,
+    1075,   932, -1444,  3949,  3949, -1444,  6321,   977,  1002,  1054,
+   -1444, -1444,   525,  6572,  1971, -1444,  1210,   831, -1444, -1444,
+   11241, -1444, -1444, -1444, -1444, -1444,    84,   497, -1444, -1444,
+     562, -1444,  5433,  2730, -1444,  1042,  1043, -1444, -1444,  1995,
+     860, -1444,  9689,  9779, -1444, -1444, -1444, -1444, -1444, -1444,
+   -1444,    54, -1444,  1020,   997,   626,  2447,  1063, 11071, -1444,
+    1059, -1444, -1444,   277,  1987,  1085,   146,  1062,  1064, -1444,
+   -1444,  2189, 12251,  2189,  4421,  1389,  3407, -1444,  1065, -1444,
+   -1444, -1444, -1444, -1444, -1444, -1444, -1444,  1022,  1031, -1444,
+    1080, -1444, -1444,   388, -1444, -1444, -1444, -1444,    79,   464,
+    1074,  1014, -1444, -1444, -1444, -1444,  8689, 12448, -1444,   842,
+    1034, 12403, -1444, -1444,  1036, -1444,  1040,   151,  5246,  1049,
+   -1444,   116, 12017,  1084,  1088,   657, -1444, -1444, -1444, -1444,
+    4987,  4987,  5792,  5792,  6418,  1210, -1444, -1444,  5106, -1444,
+    1098, -1444, -1444,  1027,    93, -1444,  2604, -1444, -1444,   503,
+    1091, -1444,   253,   444, -1444,  1082, -1444,   577,  1107, -1444,
+   -1444,   108, -1444, -1444,  2132, -1444,  1030,   811, -1444, 11241,
+    7645, -1444,  7645,   163,   163,   324,   682,  2303, 12075,    55,
+    4967, -1444,    59,   163, -1444,    93,  7509, 11071, 11071, -1444,
+   11071,    93,  7509, -1444, -1444, -1444, -1444, -1444, -1444,  1852,
+    1852,  1852,   562,  1060,  1079, 10726,  1054,  1086,  1092,  1096,
+    1108,  2844,  1109,  1110,  1112, -1444,  1099, -1444, -1444,  1101,
+   -1444, -1444,  1105,    67,   451,   171,   583, 11241,  1126, -1444,
+    1111,  1102, 12448, 12448, -1444, -1444,  1128,  8070,  6671,  9978,
+   12485,  4038,  3825,  4070,  2753,  2753,  2753,  2620,  2620,   673,
+     673,   361,   361,   361, -1444, -1444,  1103,  1115,  1081, 11241,
+   11156, -1444,   456, -1444,  9329, 11241, -1444, -1444, -1444, 11241,
+   -1444, -1444,  1100, 11927,  1090,  1121,  1123,  1172, -1444, 11241,
+   -1444, 11241, -1444, 11241,  1884,  6424, -1444, -1444,  6424, -1444,
+     134,  1884,  1122,  1135, -1444,  1118,  5069,    93, -1444,    93,
+    6644, -1444,  7509,  1133, 10544, 10544,  8503,  1137, 11326,  1141,
+    3279,  3509,  2864,  1511,  1142, -1444, -1444, -1444, -1444, -1444,
+   -1444, -1444, 11241,  1995,  1144,  1043, -1444, 12448, -1444, 12448,
+     756,  1143, 11587, -1444,  1146,  1197, -1444,   562, -1444, -1444,
+   -1444, -1444, -1444,  2819,  7496, -1444,  5069, 11071,  1735,  1735,
+    7981, -1444, -1444, -1444, -1444,  3403, -1444, -1444, -1444,   985,
+   11241, -1444, -1444, -1444, -1444, -1444, -1444, -1444, -1444, -1444,
+     388, -1444,   544, -1444,   559,   478, 11241,  1200, -1444,   693,
+     705,   763,  1014, -1444,    48, -1444,    30, -1444, -1444, -1444,
+   -1444, -1444, -1444, 10453, -1444, -1444, -1444, -1444, -1444, -1444,
+   -1444,  1088,  1199, -1444, -1444, -1444,  5069,  2535,  2535,  3065,
+   -1444, -1444, -1444,  1206, -1444, -1444, 11156, -1444, -1444, -1444,
+   -1444,   965, -1444,  7509, 12448, -1444,  1398, -1444,   503,   503,
+   -1444, -1444, -1444, -1444, -1444,  7509,   809,   779, 11241,   981,
+   -1444,  1212, -1444, -1444, -1444,   239,   246,  2245,   932,   533,
+     163,  1213, -1444,   655,  1216,   503,  5474, -1444, -1444, -1444,
+     503, -1444,  1175,   562,   562,   562, -1444,  1177,    93,  7509,
+      93,  7509, -1444, -1444, -1444, -1444, -1444, -1444, -1444, -1444,
+   -1444,  1207,  1208,  1214,  1215,  1022, -1444, 12336,  9329,  8965,
+    1180, -1444, 11241, -1444, -1444, -1444,  1182,  1184,  1194,  5069,
+   -1444, -1444,  1203,   355,   385,   385,  1201,   385, -1444, -1444,
+   11927,  1300, 11071, -1444,  1222,  1226,  1227, -1444, -1444, -1444,
+   -1444, -1444, -1444, -1444, -1444, -1444,    93,  1229, -1444,  1204,
+    3279, -1444, -1444,  2323,  2323,  8166,  3877, -1444, -1444, -1444,
+   -1444, -1444, 12448, -1444, -1444,  1233, -1444, -1444,    68,  1231,
+   -1444, -1444, -1444, -1444, -1444, -1444, -1444,  4234,  2675,  2675,
+    3799,  3799,  7981,  4542,   248,  3403, -1444,  4325, 12470, -1444,
+   -1444, -1444,  1236,   464, -1444, 11241, -1444, 11241, -1444, 11241,
+   -1444,  1995, -1444, -1444,  8267,  1298, -1444,  9055, -1444, 10635,
+   10635,  8596,   514,  1245,   518, -1444,  9329,  9145, -1444, -1444,
+     181,  3125,  3125,  1168,  1168,  9329, -1444, -1444,  1247,  1253,
+    2455, -1444, -1444, -1444,    93,  1256, -1444,  1291,  1291,    93,
+    1259, 11241, 11241,  6456,   503,  3262,   503,   503,  1580,   503,
+    3665, -1444, -1444,  5730,  1291, -1444, -1444,  1316, -1444, -1444,
+   -1444,  1269, -1444,  1274, 11241, 11241, 11241, 11241,  9329, -1444,
+    1327, -1444, -1444, 12448, -1444, -1444, -1444,   649,  1194, -1444,
+   -1444, -1444, -1444, -1444, -1444,  1279, -1444,  1344,   562, -1444,
+   -1444, -1444,    93, -1444, -1444, -1444, -1444, -1444, -1444, 11241,
+   -1444, -1444,  4542,  2675,  2675,  4484,  4484,  8361, -1444,   601,
+    4325, -1444, -1444,  1287,  1297,  1301,  1311, -1444,   996,   234,
+    1346,   841,   851, -1444, -1444, -1444, -1444, -1444, 11241,  1349,
+    1352,  1353, 10811,   360,  1995,   258,   819, -1444, -1444, 10901,
+    1405, -1444, -1444, -1444,  1359, -1444,  6304, 12135, 12306,  7114,
+   -1444, -1444,  1406, -1444, -1444, -1444, 10063, -1444, -1444,  1313,
+     919, -1444, -1444, -1444, -1444,  5069, -1444, -1444,  9329, -1444,
+   -1444, -1444, -1444, -1444, -1444, -1444, -1444, -1444,  6456,  6456,
+   -1444,  1291,   853,   889, 11241, -1444, -1444, -1444,   981,   981,
+    1291,  1291,   936,  1291, -1444, -1444, -1444,    93,    93, -1444,
+   -1444,  1315,  1330,  1334,  1341, -1444,  9329, 11241, -1444,   649,
+   -1444, -1444, -1444, -1444,    93,  1345,  6798,  6798,  1210,  7012,
+   -1444, -1444, -1444, -1444,  1311, -1444,  1995, -1444, -1444, -1444,
+   -1444, -1444, -1444,   780,   780,  1014,  1332,  1343,  5161, -1444,
+   -1444, -1444, -1444,  1397, 11241,  1401,  1399,  1411,  2177,  2263,
+   -1444,  1014, -1444, -1444,  1377, -1444, -1444,   981,  1004, -1444,
+    1037,   981, 10986,  1039,   261, -1444, -1444, -1444, -1444, -1444,
+   -1444,   640, -1444, -1444,    93,    93, -1444, -1444, -1444, 11241,
+   11241,  6456,   503,   503, -1444, -1444, -1444,  5939, -1444, -1444,
+      93,    93, -1444, -1444, -1444, -1444, -1444,  1356, -1444, -1444,
+   -1444,  7238,  7238,  6792,  2024,  1381, -1444, -1444, -1444, 11156,
+   -1444, -1444, -1444,  1465, 10359,  5632, 11156, 11241, -1444, 10171,
+   -1444,  1424, -1444, -1444,  1431, -1444,  1411,  2177, -1444, -1444,
+     716, -1444, -1444, 11672, 11672,  9239, -1444, -1444,  1014, -1444,
+   -1444,  6456,  6456, -1444,  1291,  1291, -1444,  9869, -1444, -1444,
+   -1444, -1444, -1444,  2024,  7783, -1444, -1444,  1379,   401,  5433,
+    1014, 10265, -1444, -1444,    48, -1444, -1444,  1428,  1383, 12426,
+   10171, -1444, -1444, -1444, -1444,  1311,    74, -1444, -1444, -1444,
+   -1444, -1444,  1382, 12358,  1403,  1387,  1388,  1014, -1444,   981,
+   -1444, -1444, -1444, -1444,   783, -1444,  9509, -1444, -1444, -1444,
+   -1444,  1311,  1491,  1445, -1444, -1444, -1444,   437,   388, -1444,
+   -1444, -1444,   503,    48, -1444, 11241,  1447, -1444,  1451, -1444,
+    1014, 10171,  1425,    75,  1459, -1444, -1444,   123, -1444,  1456,
+   -1444,  1412, -1444, -1444, -1444, -1444, 11241,  1491,  1462,  1491,
+   -1444,    94, -1444, -1444, -1444,  9599,  1416,   149, -1444, -1444,
+   -1444,  9329,  1418, -1444,  1519,  1477, -1444, -1444, -1444,   320,
+   -1444, 10265,  1528,  1481, -1444, -1444, -1444
 };
-/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
-#line 3 "/usr/cygnus/gnupro-98r2/share/bison.simple"
 
-/* Skeleton output parser for bison,
-   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.
+/* YYPGOTO[NTERM-NUM].  */
+static const yytype_int16 yypgoto[] =
+{
+   -1444, -1444,  1542, -1444,  -330,  1378,  -387,    61,     9,  1544,
+   -1444,  1520, -1444, -1444,   222, -1444,   255, -1444,   494, -1444,
+     107,   882,    33,    21, -1444, -1444,  -626, -1444, -1444,   598,
+      35,  1392,  1116,  1402,  -704,   -42,  -168,   -18,   -22, -1444,
+   -1444, -1444, -1444, -1444,   768, -1444, -1444, -1444, -1444, -1444,
+   -1444,   381,  1076, -1444, -1444, -1444, -1444, -1444, -1444, -1444,
+   -1444, -1444, -1444, -1444,  1490,  -683,  7337,  1337,   104,  -605,
+    -143,   -85,  1448,  -535, -1444,   722, -1444,   158, -1444, -1422,
+   -1444, -1128,   -68, -1444,  2640,  1246,  -243,   317,  -566, -1444,
+    -850,  6925,  1508,  1993,  5137,  1302,  -335,   -86,  -100,  1581,
+    -107,   -16,   629, -1444, -1444, -1444,  -336, -1444,  -162, -1444,
+   -1444, -1280,   -10,  -346,  2238,    70,  2662,  -172,    17,   233,
+    -207,    -6,   -78,  -171,  -166,    -1,    45,    23, -1444,  -274,
+   -1444, -1444, -1444, -1444, -1444,    -7,  1466,     8, -1444,   648,
+   -1444, -1444, -1137,  -388,   876, -1444, -1444, -1444, -1444, -1444,
+     -20, -1444, -1444, -1444, -1444, -1444, -1444,   656,  -379, -1444,
+   -1444, -1444, -1444, -1444, -1444, -1444,  1360, -1444,   376,   566,
+   -1444, -1444, -1444,   532,  -730, -1444, -1444, -1444, -1444, -1444,
+   -1444,   814, -1444,   371,   954,   680,  1017,  1853,   165,    22,
+    -467,  1427,  3048,   669, -1444,  -492, -1444,     2,   126,   206,
+    -149,   738,  -108,  5715,  1278, -1444,  6561,  2946,  1567,   -14,
+    -118, -1444,  1501,   -74, -1444,  6080,  3911,  -197, -1444,  2742,
+    1514, -1444, -1444,   286, -1444, -1444,   434,     0,    13, -1444,
+   -1444, -1444, -1444, -1262, -1444, -1274, -1443, -1444, -1444, -1444,
+   -1444, -1444, -1444, -1444, -1444, -1444, -1444, -1444, -1444, -1444,
+   -1444,    16, -1444, -1444, -1444, -1444, -1444,    65, -1367, -1444,
+   -1444,   -53, -1444, -1444, -1444, -1444, -1442,    19, -1444,     6,
+   -1444,  -686,  -440,   625, -1444, -1444, -1444, -1444,  -391, -1444,
+    -390,  -195, -1444,  2295,   292, -1444,   153, -1444,  -224
+};
 
-   This program is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
+/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
+   positive, shift that token.  If negative, reduce the rule which
+   number is the opposite.  If YYTABLE_NINF, syntax error.  */
+#define YYTABLE_NINF -833
+static const yytype_int16 yytable[] =
+{
+      61,   437,   422,   425,   492,   634,   446,   358,   445,   359,
+     394,   124,   447,   697,   698,    38,  1002,   782,   105,   984,
+     763,   644,   643,    59,   180,   695,   176,    44,   402,   518,
+     740,    61,  1120,   300,   841,   400,   401,   210,    61,   491,
+     880,   223,   511,   179,   936,   674,    38,   198,   499,   399,
+     509,   434,   393,   211,    59,   713,   411,  1506,    44,  1452,
+    1045,   178,  1047,   540,   543,    44,   258,    37,   249,   978,
+    1077,  1563,   226,  1567,   728,  1467,    57,   172,   192,   173,
+     298,  1201,  1470,   612,   351,   612,   351,   262,   351,  1207,
+     612,   530,  1074,   184,  1568,   721,   573,    -2,    37,   985,
+    1374,  1375,   521,   351,   351,   171,    91,    57,   165,    88,
+     366,    90,   454,   950,   177,  1039,   405,  1396,  1593,  1078,
+    1082,    91,   310,   251,  1640,    92,  1087,  1299,  1015,  -142,
+     258,     4,   408,   647,   351,   351,  1602,  1637,    28,  1208,
+      92,   497,   500,   242,   530,  1040,  1010,   243,   166,   442,
+     226,   180,   722,   176,   745,   407,   210,  1202,    89,   149,
+     915,    61,   951,  1010,  1075,    61,   226,   198,  1079,  -357,
+     179,    74,   211,   455,  1619,  1016,  1300,   451,  1017,   192,
+     710,  -357,  1603,  1638,    59,   455,   255,   991,   178,   258,
+      17,   223,    44,  1011,  -416,   826,  1012,   143,   148,   223,
+     223,   461,    74,  1652,   172,   964,   173,   456,   406,    74,
+    1011,  1654,    78,  1012,  -832,   648,   649,   462,  1593,   456,
+     965,   768,   226,  -416,   192,   139,  -416,  1000,    40,   223,
+     226,    -3,   171,  -145,  1506,  1565,  1147,    57,   804,    60,
+    1365,   177,   840,    78,  1478,  1571,   463,   226,   618,    95,
+      78,   299,   262,  1484,  1485,  1158,  1486,  1655,  1161,    40,
+     495,    41,   617,   203,  -366,   215,    17,   703,   704,   413,
+      60,  -367,  -416,    17,   415,   650,  1577,    60,   223,   376,
+     302,   396,   397,    12,   377,    96,    93,   682,   718,  1366,
+     139,   609,    41,   249,  1428,  -602,  1600,  -366,  1590,  1189,
+    1190,  -366,   131,    74,  -367,    94,   963,   379,  -367,   140,
+     644,   109,    28,   677,  1447,  1119,   421,   424,    23,   297,
+     766,  1428,   149,    10,   523,   351,    92,   989,   990,   422,
+     425,   223,    74,   320,    30,  -366,    74,  1173,   298,   651,
+    -602,  -602,  -367,  1429,   409,   954,   249,  1635,   412,  1050,
+     596,   697,  1021,   137,   351,   653,  -602,  1235,  1634,   262,
+     473,   476,    34,    97,   112,   113,   740,   365,   525,  1240,
+    1537,    60,   740,    78,   434,   132,   133,    78,   407,  1662,
+     224,   225,  1051,   203,   215,   110,  1052,   522,   223,   129,
+     130,   518,   634,   111,   521,   597,   700,   163,   694,   524,
+      60,   211,   622,  1261,    60,  1263,   141,  1580,  1581,   217,
+     218,  -296,  -583,   497,   500,    16,   114,   115,   770,   164,
+    1053,   497,   224,   448,   180,   685,   715,  1408,  1663,  1227,
+     203,   652,  1176,   500,   129,   130,  1595,    22,    61,    28,
+    1444,   132,   133,   179,   594,   595,    25,   825,   622,    10,
+      11,   822,   500,    14,   248,   887,  1149,  -583,   191,    16,
+     226,   178,   185,  1280,   738,   888,   189,   992,   772,   773,
+     724,   223,   223,    18,   131,    19,  1296,  1297,   889,   223,
+     226,    22,   740,  -583,    28,  1630,   132,   133,   793,   226,
+      25,   223,   622,   825,   469,   181,  1121,   351,   380,    28,
+      42,   132,   133,   883,    61,    93,   226,   937,   761,   299,
+     223,   993,   519,  -143,   177,   623,   767,    94,    28,   884,
+     994,   995,   190,  1077,    94,   624,    74,   798,  -583,   487,
+     351,    42,   382,   351,    20,   625,   351,   626,   627,   470,
+     351,   831,   831,   831,   831,   988,   769,   705,   885,   782,
+     706,   141,   245,   351,   609,   596,   996,   520,  -121,  1498,
+      17,  -303,   709,   351,   247,  -627,   351,   654,   682,   696,
+     301,   790,   921,   697,   698,   960,   839,   297,   639,  1035,
+     797,  1037,   139,   959,   362,   695,  1041,   302,   396,   397,
+      12,  -121,   364,   957,    60,  -121,   644,   643,   378,   413,
+     597,   298,   415,   740,   569,   374,  -303,  -303,   815,    74,
+    -627,  -627,   203,   381,   796,   740,   522,   922,   923,   566,
+     694,   567,  -296,   640,   530,    23,  -627,   738,   622,  -121,
+      17,   383,   253,   223,  -416,   696,   566,   693,   567,   262,
+     320,    30,   939,   750,   751,  -144,   403,   898,  -601,   740,
+      78,   740,   900,   816,   129,   130,   141,   302,    10,    11,
+      12,  1285,  -416,  -416,   157,  -296,   394,   485,   486,    34,
+     124,   427,   351,   825,   223,    74,   435,    60,   412,  1095,
+    -119,   971,    17,   976,   977,   573,   211,  -305,   497,   191,
+     249,   203,   899,  -601,  -601,    23,   883,   901,   365,   203,
+     902,  1000,   253,   693,  1025,  1001,   132,   133,   647,  -601,
+     320,    30,   884,  -119,   129,   130,   803,  -119,   223,  -622,
+    1269,  1271,  1083,  1084,   513,  1085,   201,   305,   977,  1054,
+     524,    93,  -305,  -305,  1003,    -8,   694,   166,   782,    34,
+    1194,   885,  1407,    60,   449,   903,   223,   453,  -299,  1026,
+      94,  -119,  1196,   591,   592,   593,   594,   595,   365,    97,
+     112,   113,  1033,   667,   668,   669,   132,   133,   793,   514,
+     793,   450,   299,   160,  1055,  1059,  1069,   826,   793,   465,
+     157,   157,   157,   466,    61,  1195,    61,  1060,   905,   908,
+     254,   696,   211,   503,    61,   526,   302,  1197,   696,    12,
+     694,   351,   351,   528,   351,   527,   694,   798,   529,   798,
+    1198,   223,   114,   115,  1172,   129,   130,   798,   537,  1271,
+     493,   494,  1191,   434,    20,   546,   157,  1508,  1361,  1363,
+    1614,   368,   372,    91,    23,    10,    11,  1367,  1048,  1049,
+     297,  1242,   547,  1230,  1231,  1232,   201,   548,  1080,   428,
+     429,   790,    92,   790,   549,  1199,   129,   130,   203,   693,
+     797,   790,  1046,   430,   550,    28,   693,   132,   133,   569,
+     797,  1241,  1509,   431,   351,  1615,   705,   706,    34,  1123,
+    1405,  1450,    90,   612,   709,   432,   658,   132,   133,   160,
+     160,   160,   141,   201,   796,    91,   796,   203,   974,   203,
+     203,   662,   796,  1431,   796,    93,    28,   696,   132,   133,
+     831,   661,   226,  1432,    92,  1479,   694,  1027,  1028,   226,
+     738,   664,   887,  1641,    94,   665,    90,  1281,  1282,   666,
+    1284,  -305,   888,   678,   262,   160,   129,   130,   226,  -184,
+    1256,  1257,  1258,    91,   203,   889,  -305,   598,  1019,   679,
+    -305,  1480,    92,   141,  -184,    74,  -184,    74,   694,   258,
+     831,   351,    92,    94,   694,    74,  -305,   707,   118,   772,
+     773,   696,  1092,  1093,  1094,   693,    -7,   696,  -305,  -305,
+    1473,  -305,  -305,   813,   711,   685,   599,   600,   132,   133,
+      93,   601,   602,   603,   604,   775,   803,   733,   803,   485,
+     716,   757,   826,  1066,  1073,   762,   803,   738,    17,    94,
+     807,  -305,  -305,    10,    11,  1200,   493,   717,  1496,    28,
+     831,   121,   122,    60,  1059,    60,   808,  -305,   814,   809,
+     351,   422,   425,    60,   217,   218,  1060,   694,   817,   693,
+      16,  1237,  1238,   434,   -53,   693,   810,  1288,   -53,   694,
+     818,   258,   835,   560,   793,  1426,  1427,   365,   503,   -53,
+     422,   425,    22,   485,  1531,   132,   133,   837,  1252,   838,
+      61,    25,   722,  1254,   840,   201,   434,  1042,   302,   129,
+     130,    12,   895,   694,    93,   694,   897,   696,   914,   905,
+     908,   696,   103,   798,   916,   149,   493,  1532,   485,  1536,
+     117,   918,   943,    94,  1244,   942,   953,   157,   157,   157,
+    1246,  1247,   952,   831,  1244,  1249,    23,   956,  1247,   958,
+      17,    22,  1043,   253,  -416,   966,   351,   967,   980,   696,
+    -299,   320,    30,  1178,  1179,   696,   455,   790,  1031,   986,
+     987,   747,  1007,   235,  1008,  1412,   797,  -831,  1009,   694,
+     747,  1023,  -416,  -416,   201,   693,  -416,  1014,   226,   693,
+      34,  1030,   201,   697,  1586,  1034,  1038,  -141,  1096,   258,
+    1109,   255,    10,    11,  1036,  1458,   694,  1463,   696,  1001,
+     796,  1460,  1101,  1102,  1103,   226,  1104,  1097,  1108,   732,
+    1112,   226,  1115,  1128,  1098,   434,  1132,   693,  1348,    20,
+    1099,  1130,   390,   693,  1100,   738,  1131,  1105,   696,  1106,
+    1111,  1113,   826,  1340,    10,    11,   160,   160,   160,  1133,
+     696,  1347,    28,  1114,   132,   133,   418,   129,   130,  1142,
+    1140,   793,   226,   118,   119,   120,  1380,  1381,  1221,  1390,
+    1391,    74,  1393,  1141,  1148,  1151,   693,    61,  1222,  1152,
+    1157,  1167,  1066,  1164,   696,  1170,   696,  1171,   365,  1193,
+    1223,   560,  1216,  1656,   560,  1339,   132,   133,   828,  1226,
+     798,  1245,  1250,   118,   119,   120,   693,    28,  1251,   132,
+     133,   560,   803,  1255,    28,  1259,   121,   122,   693,  1272,
+     254,  1274,  1275,   531,   560,   384,   385,   386,   855,  1264,
+    1265,   694,  1276,   532,   413,   415,  1266,  1267,  1287,    60,
+     226,  1279,  1283,   522,   790,  1295,   504,   506,   905,   908,
+     696,   201,   693,   797,   693,   878,   121,   122,   223,   516,
+    1289,  1201,   894,  1348,  1290,  1291,  1457,  1294,  1457,  1301,
+     387,   211,  1298,  1348,  1311,  1303,  1304,   696,   388,   389,
+    1348,   530,   525,  1360,   462,  1369,  1347,   796,  1340,   831,
+     201,  1370,   201,   201,  1373,  1340,  1347,  1377,  1576,    74,
+    -664,  1476,  1477,  1347,  1303,  1304,   696,  1399,    97,   112,
+     113,   515,  1400,   412,   422,   425,  1027,  1028,   693,  1406,
+    1410,  1411,    97,    98,    99,  1420,   227,   228,   229,   552,
+    1339,  1056,  1057,    11,    12,  1421,  1423,   201,  1430,  1422,
+    1339,  1439,  1440,  1441,  1453,   693,    23,  1339,    74,  1455,
+      20,  1471,  1468,  1492,  1515,   230,    97,    98,    99,   705,
+     706,   114,   115,  1482,  1483,  1516,   709,    60,  1493,    23,
+    1628,   660,  1494,    28,   693,   100,   101,   231,  1512,  1495,
+     670,  1389,    28,  1500,    29,    30,  1389,  1520,  1236,   803,
+    1058,  1522,   377,   660,  1529,  1523,  1065,  1552,   195,  1530,
+    1416,  1417,   696,  1554,  1543,  1544,  1545,    28,   196,   100,
+     101,   102,  1562,    34,  1572,  1573,    60,  1588,  1597,  1604,
+     197,  1598,   232,   233,   234,  1609,  1610,   694,   142,   142,
+    1606,   158,  1622,  1558,    74,  1626,   495,  1632,  1348,  1348,
+    1558,  1633,   226,  1348,    74,    10,    11,  1636,  1639,  1643,
+    1644,    74,  1648,  1340,  1653,   214,  1657,   222,  1340,   351,
+    1658,  1347,  1347,   239,  1578,  1579,  1347,  1660,   223,  1665,
+     693,  1666,     2,     9,   129,   130,    12,     7,   694,  1589,
+     444,  1512,   203,  1461,   203,  1348,  1527,   162,   955,   365,
+     714,   226,  1174,   443,  1348,  1627,  1070,   132,   133,   441,
+    1340,    20,    60,  1512,  1312,  1339,  1339,   505,  1347,  1340,
+    1339,    23,    60,   771,   129,  1392,   361,  1347,   410,    60,
+    1558,   524,  1511,  1664,    28,  1409,    29,    30,  1166,   157,
+    1611,  1165,  1006,   536,   508,  1629,  1371,  1233,  1253,   142,
+     151,  1126,  1072,   945,   142,  1348,   155,   158,   158,   158,
+     152,  1394,  1339,  1163,   882,    34,   619,   392,   365,   488,
+    1340,  1339,   153,  1512,  1612,  1466,   132,   133,  1347,  1357,
+    1601,  1650,   157,  1642,   214,  1649,  1215,   848,   560,   260,
+     452,    97,   112,   113,   724,  1348,  1647,  1472,     0,     0,
+     524,   472,   472,   481,     0,     0,  1416,  1417,   696,     0,
+    1340,     0,     0,   260,   299,     0,     0,   222,  1347,    74,
+      74,   299,  1339,     0,    74,   498,   222,     0,     0,     0,
+       0,   896,     9,   129,   130,    12,     0,     0,   750,   751,
+       0,     0,   260,     0,   114,   115,   116,     0,   160,   730,
+      97,    98,    99,   260,     0,  1065,   736,     0,     0,   696,
+      20,     0,  1339,     0,     0,     0,    74,   142,     0,     0,
+      23,     0,     0,   423,   426,    74,   693,     0,     9,    10,
+      11,    12,   297,    28,    15,    29,    30,    60,    60,   297,
+       0,   160,    60,     0,     0,   365,     0,     0,  1228,    32,
+     962,   299,     0,   100,   101,   203,    20,     0,     0,    33,
+       0,   979,   260,     0,    34,     0,    23,     0,   155,     0,
+       0,    35,   622,   823,     0,     0,    74,   693,     0,    28,
+       0,    29,    30,     0,    60,     0,     0,   158,     0,     0,
+       0,     0,   848,    60,     0,   968,     0,   260,     0,   157,
+     157,   157,     0,     0,     0,   969,   544,   545,     0,     0,
+      34,     0,     0,     0,     0,   625,    74,   970,   627,   297,
+       0,   260,   553,     0,     0,   554,   555,     0,   157,   157,
+     157,   565,     0,   876,     0,   570,   747,     0,   877,     0,
+       0,     0,   747,   611,    60,     0,   129,   130,     0,     0,
+       0,   521,     0,     0,   631,   635,   638,     0,     0,     0,
+       0,     0,     0,   214,   222,    10,    11,     0,     0,    14,
+      15,    97,   416,   417,     0,    16,   934,   142,   129,   130,
+     142,     0,     0,   747,    60,     0,   158,   158,   158,    18,
+       0,    19,   142,     0,     0,     0,    28,    22,   132,   133,
+       0,     0,   562,     0,  1388,    20,    25,     0,   160,   160,
+     160,     0,   531,   260,     0,    28,     0,   132,   133,   605,
+       0,   622,   532,   560,   114,   101,     0,   261,    28,   472,
+     132,   133,   472,     0,   481,   481,   481,   160,   160,   160,
+     452,     0,     0,     0,   623,     0,   472,   498,   222,     0,
+       0,   452,     0,   606,   624,   498,     0,     0,     0,     0,
+       0,   747,     0,     0,   625,     0,   626,   627,   452,     0,
+    -579,   260,     0,  -579,     0,     0,  1401,  1402,  1403,  1404,
+     384,   385,   386,     0,     0,    97,    98,    99,    97,   112,
+     113,     0,     0,     0,     0,   158,     0,     0,   158,     0,
+       0,     0,   423,   708,   436,   201,     0,   201,   918,     9,
+      10,    11,    12,   158,   158,   158,   670,     0,    10,    11,
+    -579,     0,  -579,  -579,  -579,     0,     0,     0,   158,   962,
+       0,    28,     0,   388,   389,  -579,   471,  -579,   100,   101,
+       0,   114,   115,     0,  1443,    20,     0,    23,     0,   490,
+     423,   426,     0,  -579,  -579,   553,   554,     0,     0,     0,
+      28,   622,    29,    30,   260,     0,   194,     0,    28,  -579,
+     132,   133,     0,   341,     0,   341,   195,   341,     0,   904,
+     904,   157,   911,     0,  1501,     0,   196,     0,     0,   930,
+     260,    34,     0,     0,  1502,     0,     0,     0,   197,     0,
+       0,     0,     0,     0,   625,     0,  1503,   627,     0,   222,
+     562,     0,     0,   562,     0,  1116,  1117,     0,     0,  1497,
+       0,  1122,     0,   341,   341,   118,   772,   773,     0,   423,
+     836,   216,   217,   218,     0,  1134,     0,  1135,    16,  1136,
+       0,     0,     0,   562,     0,     0,     0,     0,   214,     0,
+     222,   239,   157,   157,   157,    20,  1521,     0,     0,     0,
+      22,     0,     0,   747,     0,     0,     0,     0,     0,    25,
+      97,   112,   113,     0,     0,  1270,     0,   260,   121,   122,
+       0,     0,     9,    10,    11,    12,     0,     0,  1169,     0,
+     160,     0,     0,   260,   222,   973,     0,   631,   635,     0,
+     638,     0,     0,     0,   929,     0,   472,   472,   481,   481,
+     481,     0,   747,     0,   472,     0,     0,     0,   201,     0,
+      23,  1556,   498,  1524,   115,   452,   622,   855,  1556,     0,
+       0,     0,  1192,    28,     0,    29,    30,     0,     9,    10,
+     252,    12,   635,     0,     0,     0,     0,   560,   613,   968,
+     302,   396,   397,    12,   214,   614,    97,   112,   113,   969,
+       0,   160,   160,   160,    34,     0,     0,  1317,     0,   625,
+       0,   970,   627,  1270,     0,     0,    23,     0,     0,     0,
+       0,   158,     0,   253,     0,     0,     0,     0,    23,     0,
+       0,    29,    30,     0,     0,   615,  1056,  1057,    11,    12,
+       0,    28,     0,   320,    30,   551,     0,     0,  1556,  1526,
+     115,     0,   260,     0,     0,   254,   302,   129,   130,    12,
+      34,     0,    15,     0,   423,   708,   758,  1631,     0,     0,
+       0,   764,   616,     0,    23,   635,     0,   371,   373,     0,
+       0,     0,     0,   341,    20,     0,     0,    28,  1646,    29,
+      30,     0,     0,     0,    23,  1058,   805,   855,     0,     0,
+     622,   904,   811,   195,   904,     0,     0,    28,     0,   320,
+      30,     0,     0,   196,   819,   820,   904,   821,    34,     0,
+    1150,  1150,   930,  1153,     0,   197,     0,     0,     0,     0,
+       0,  1129,     0,  1154,     0,     0,   929,     0,    34,  1445,
+    1446,     0,     0,   625,     0,  1155,   627,     0,  1137,     0,
+       0,     0,     0,     0,     0,  1137,     0,     0,     0,   239,
+       0,     0,   553,   554,  1177,  1177,  1183,     0,     0,     0,
+       0,  1313,     0,  1314,  1137,  1315,     0,     0,     0,     0,
+     302,   396,   397,    12,     0,   727,   731,     0,   118,   772,
+     773,     0,   774,   731,     0,     0,     0,   129,   130,     0,
+       0,   217,   218,     0,     0,     0,     0,    16,     0,  1183,
+       0,     0,   919,   920,     0,   775,     0,   919,    23,     0,
+       0,     0,   776,  1224,  1224,  1224,   341,     0,   260,    22,
+     260,    28,  1507,   320,    30,     0,   423,   836,    25,    28,
+     622,   121,   122,     0,   452,   452,     0,    28,     0,   132,
+     133,     0,     0,     0,  1525,  1528,     0,     0,     0,   341,
+     731,     0,    34,   623,     0,     0,     0,     0,     0,    10,
+      11,   452,   260,   624,   248,  1415,   452,     0,     0,     0,
+       0,   155,     0,   625,     0,   633,   627,     0,     0,     0,
+       0,     0,   341,     0,   727,     0,    20,   852,   853,   564,
+     857,   858,   859,   860,   861,   862,   863,   864,   865,   866,
+     867,   868,   869,   870,   871,   872,   873,   874,   875,    28,
+     731,   132,   133,     0,  1213,   731,     0,     0,     0,   216,
+     217,   218,     0,  1574,     0,  1221,    16,   129,   130,  1029,
+       0,   496,   217,   218,     0,  1222,     0,     0,    16,  1150,
+    1150,   930,     0,    20,     0,     0,   731,  1223,    22,     0,
+       0,     0,     0,   731,   260,    20,     0,    25,  1286,     0,
+      22,     0,   690,     0,  1177,  1177,  1302,  1302,  1183,    25,
+     622,     0,   701,  1177,     0,   947,   949,    28,     0,   132,
+     133,     0,     0,     0,  1137,     0,  1088,     0,  1090,     0,
+       0,   341,     0,   623,     0,  1302,  1302,  1183,     9,    10,
+      11,    12,     0,   624,   248,     0,     0,  1224,  1224,  1224,
+       0,  1137,     0,   625,     0,   626,   627,  1137,   589,   590,
+     591,   592,   593,   594,   595,     0,    20,     0,   737,   452,
+     452,     0,   452,   452,     0,   452,    23,   553,   554,   727,
+       0,     0,   622,   260,     0,     0,     0,     0,     0,    28,
+       0,    29,    30,     0,     0,   423,   708,   216,   217,   218,
+    1124,  1125,     0,  1127,    16,   968,     0,     0,     0,     0,
+       0,     0,   260,     0,     0,   969,     0,     0,     0,     0,
+      34,    20,   423,   426,     0,   625,    22,   970,   627,  1177,
+    1177,  1302,  1302,  1183,  1146,    25,  1177,   824,     0,     0,
+     827,     0,  1044,     0,   829,   830,   832,   833,   834,     0,
+     940,   423,  1359,     0,     0,     0,     0,   564,     0,     0,
+     341,   341,     0,   341,     0,     0,     0,     0,     0,     0,
+     851,     0,     0,   214,   222,   260,  1137,     0,   731,     0,
+       0,     0,    97,   112,   113,  1187,   227,   228,   229,   587,
+     588,   589,   590,   591,   592,   593,   594,   595,     0,     0,
+    1107,     0,     0,     0,   452,   452,     0,   565,   129,   130,
+      20,     0,   217,   218,     0,   230,     0,     0,    16,     0,
+       0,     0,     0,     0,   910,     0,     0,   641,    10,    11,
+      12,   910,   731,   731,     0,   114,   115,   727,   731,     0,
+      22,     0,  1504,  1504,     0,  1504,     0,   423,   708,    25,
+       0,   622,   731,     0,   731,  1234,   731,     0,    28,     0,
+     132,   133,   310,   642,     0,    23,     0,  1239,     0,     0,
+       0,     0,     0,     0,   623,     0,     0,     0,    28,     0,
+     132,   133,     0,     0,   624,     0,     0,     0,   481,     0,
+       0,     0,     0,     0,   625,  1162,   626,   627,     0,     9,
+     129,   130,    12,     0,     0,   731,     0,   452,   452,   452,
+       0,     0,    82,     0,     0,     0,     0,     0,     0,     0,
+     341,     0,   106,     0,     0,     0,     0,  1504,  1504,  1553,
+       0,     0,   135,  1188,     0,     0,     0,    23,   146,   146,
+     690,   146,     0,    82,   253,   260,     0,     0,     0,   731,
+      82,     0,    29,    30,  1292,     0,     0,     0,     0,   481,
+     481,   481,     0,   205,     0,    82,   731,   452,   452,     0,
+       0,     0,     0,   240,     0,     0,   254,     0,  1137,     0,
+     106,    34,     0,    10,    11,     0,     0,    14,    15,     0,
+       0,   264,   106,    16,     0,     0,     0,     0,     0,  1310,
+       0,   553,   554,  1213,   737,     0,     0,    18,     0,    19,
+     737,  1243,     0,     0,   106,    22,     0,     0,     0,  1032,
+       0,     0,     0,     0,    25,     0,   691,  1137,     0,    10,
+      11,     0,     0,    28,   521,   132,   133,     0,   452,     0,
+       0,     0,   135,     0,    82,     0,     0,     0,   146,   146,
+       0,     0,     0,   414,   146,     0,    20,   146,   146,   146,
+    1081,   727,   727,   729,     0,  1273,  1086,     0,  1397,     0,
+     729,   881,  1398,    82,     0,   423,  1359,    82,  1118,    28,
+       0,   132,   133,   205,    82,   341,     0,     0,     0,    10,
+      11,     0,   691,     0,    15,  1221,     0,     0,     0,     0,
+       0,   205,   205,   205,     0,  1222,     0,  1414,     0,     0,
+       0,     0,     0,     0,   851,     0,    20,  1223,     0,     0,
+     737,  1419,     0,     0,   910,     0,     0,     0,     0,     0,
+     205,     0,     0,     0,     0,     0,     0,   729,     0,    28,
+       0,   132,   133,     0,     0,     0,     0,   507,   731,     0,
+     731,     0,   731,     0,     0,  1221,   106,     0,     0,     0,
+     727,     0,   690,     0,  1175,  1222,     0,   146,   910,   727,
+     727,     0,  1143,     0,  1144,     0,     0,  1223,   727,     0,
+       0,     0,     0,     0,     0,     0,  1474,     0,     0,     0,
+    1475,     0,     0,     0,  1378,  1379,     0,   729,     0,     0,
+       0,     0,   729,   474,   477,   106,   533,     0,     0,     0,
+       0,   910,  1490,  1491,     0,     0,     0,     0,     0,     0,
+       0,   727,     0,     0,  1218,  1382,  1383,    11,    12,     0,
+       0,     0,     0,   729,  1229,     0,     0,     0,     0,     0,
+     729,   737,   302,   129,   130,    12,     0,     0,   691,     0,
+     106,     0,   731,   737,   620,   691,   533,   533,   636,     0,
+       0,     0,     0,    23,     0,     0,     0,    82,     0,     0,
+      20,     0,     0,     0,     0,     0,    28,     0,    29,    30,
+      23,  1438,     0,     0,  1384,     0,   622,   737,     0,   737,
+       0,     0,   195,    28,     0,   320,    30,     0,     0,     0,
+       0,   135,   196,     0,     0,     0,     0,    34,     0,  1153,
+     106,     0,   205,   106,   197,     0,     0,  1278,     0,  1154,
+       0,   727,     0,     0,    34,   906,   909,   146,     0,   625,
+     146,  1155,   627,     0,     0,     0,     0,  1481,     0,     0,
+       0,     0,   146,  1260,     0,  1262,     0,     0,     0,     0,
+      82,     0,     0,   910,     0,     0,     0,     0,     0,   727,
+       0,     0,     0,     0,   691,     0,     9,    10,    11,    12,
+    -388,    10,    11,  -388,  -388,    14,   248,     0,   205,   205,
+     910,    16,   205,     0,   205,   205,   205,   755,     0,     0,
+       0,   205,     0,     0,     0,    18,   205,    19,  -388,   205,
+       0,  1293,     0,    22,    23,     0,     0,     0,  -388,   910,
+       0,   253,    25,     0,   622,   731,    82,     0,     0,    29,
+      30,    28,     0,   132,   133,   729,     0,     0,   691,     0,
+       0,     0,  1541,  1542,   691,     0,     0,   623,     0,     9,
+     129,   130,    12,   254,     0,    15,     0,   624,    34,     0,
+       0,     0,  -388,   106,   106,   106,   106,   625,     0,   626,
+     627,     0,     0,     0,     0,     0,     0,    20,     0,     0,
+    1569,     0,   302,    10,    11,    12,     0,    23,     0,   729,
+     729,   748,     0,     0,   749,   729,   474,   477,     0,  1372,
+      28,     0,    29,    30,  1376,     0,     0,     0,   765,   729,
+    1583,   729,     0,   729,     0,   910,    32,     0,     0,     0,
+      23,     0,     0,   106,     0,   533,    33,   253,     0,     0,
+       0,    34,     0,     0,     0,   320,    30,   620,    35,   533,
+     533,     0,   636,     0,     0,     0,     0,     0,     0,   931,
+       0,     0,     0,   933,   691,     0,     0,  1413,   691,   254,
+       0,     0,   729,     0,    34,     0,     0,     0,   205,     0,
+       0,     0,     0,  1218,     0,     9,   129,   130,    12,     0,
+       0,   248,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   135,     0,     0,     0,   691,     0,     0,   135,
+       0,     0,   691,    20,     0,     0,   729,   205,   975,   205,
+     205,   240,   636,    23,   727,     0,     0,  1138,     0,     0,
+    1139,     0,     0,   729,     0,     0,    28,     0,    29,    30,
+       0,     0,  1145,     0,     0,     0,   906,   909,  1382,   129,
+     130,    12,    32,     0,     0,   691,     0,     0,     0,     0,
+       0,     0,    33,     0,   205,     0,     0,    34,   975,     0,
+       0,     0,  1488,  1489,    35,     0,   205,   205,   755,   755,
+     755,     0,     0,     0,   205,   691,    23,     0,     0,  1499,
+     906,   909,     0,     0,     0,     0,     0,   691,     0,    28,
+       0,    29,    30,     0,     0,     0,     0,  1384,     0,     0,
+       0,     0,     0,   135,     0,    32,    82,     0,    82,     0,
+       0,   910,     0,  1067,    82,    33,    82,     0,     0,     0,
+      34,   691,   106,   691,     0,     0,     0,    35,   106,     9,
+      10,    11,    12,     0,     0,   533,   533,   533,     0,  1539,
+    1540,     0,     0,   564,     0,     0,     0,   533,     0,     0,
+       0,     0,     0,     0,     0,  1550,  1551,    20,     0,     0,
+       0,     0,   690,     0,     0,     0,     0,    23,   748,   749,
+     474,   477,     9,    10,    11,    12,   765,     0,    15,     0,
+      28,     0,    29,    30,     0,     0,     0,   691,     0,     0,
+       0,     0,     0,     0,     0,     0,   478,     0,     0,     0,
+      20,     0,     0,     0,     0,   729,   479,   729,     0,   729,
+      23,    34,     0,     0,   691,     0,   622,     0,   480,     0,
+     533,   533,     0,    28,   533,    29,    30,   533,     0,     0,
+       0,     0,   106,     0,     0,     0,   533,     0,   106,  1180,
+     931,   931,   931,   691,     0,     0,   533,     0,  1156,  1181,
+     302,    10,    11,    12,    34,     0,     0,     0,     0,   625,
+       0,  1182,   627,     0,     0,   906,   909,   583,   584,   585,
+     586,   587,   588,   589,   590,   591,   592,   593,   594,   595,
+     106,     0,   106,     0,   205,   205,  1185,    85,    23,     0,
+    1138,  1139,   906,   909,     0,   253,     0,   108,     0,  1145,
+       0,     0,     0,   320,    30,     0,   128,   136,     0,   729,
+       0,     0,     0,   147,   147,     0,   147,     0,    85,     0,
+       0,   906,   909,   129,   130,    85,     0,   524,    15,  1185,
+       0,     0,    34,     0,     0,     0,     0,     0,   147,   691,
+      85,     0,   106,   755,   755,   755,     0,     0,   241,     0,
+      20,     0,     0,     0,     0,   250,     0,     0,     0,   106,
+       0,     0,  1067,     0,     0,     0,   622,   250,     0,     0,
+       0,   106,     0,    28,     0,   132,   133,     0,     0,     0,
+       0,     0,     0,     0,  1248,     0,   474,   477,     0,   623,
+       0,     0,    82,     0,     0,     0,     0,     0,     0,   624,
+       0,     0,     0,     0,     0,   106,     0,   106,     0,   625,
+       0,   626,   627,     0,     0,  1138,  1139,   906,   909,    85,
+       0,     0,  1145,   147,   147,     0,     0,     0,     0,   147,
+       0,     0,   147,   147,   147,   106,     0,     0,     0,     0,
+     533,   533,     0,   533,     0,   748,   749,   765,    85,     0,
+       0,     0,    85,     0,     0,     0,     0,     0,   147,    85,
+       0,     0,     0,     0,     0,     0,   533,     0,     0,   533,
+     533,   636,   729,     0,     0,     0,   147,   147,   147,   582,
+     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
+     593,   594,   595,   205,   205,   205,   205,   205,  1185,   755,
+       0,     0,     0,   205,     0,   147,     9,   129,   130,    12,
+       0,     0,    15,   584,   585,   586,   587,   588,   589,   590,
+     591,   592,   593,   594,   595,  1185,  1185,  1185,  1138,  1139,
+       0,  1145,     0,     0,    20,   691,     0,   755,   755,   755,
+     755,     0,   147,     0,    23,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,    28,     0,    29,
+      30,   205,     0,     0,     0,     0,   146,     0,     0,    82,
+       0,     0,     0,   151,     0,     0,     0,     0,     0,     0,
+     250,   147,     0,   152,     0,     0,   691,     0,    34,     0,
+       0,     0,     0,     0,     0,   153,   748,   749,   474,   477,
+       0,     0,     0,     0,     0,   765,     0,     9,    10,    11,
+      12,     0,     0,   906,   909,     0,     0,     0,   755,   205,
+     205,   755,   755,  1418,     0,   250,   205,   474,   477,   621,
+       0,   147,   147,   637,     0,    20,     0,     0,   646,   474,
+     477,     0,    85,     0,     0,    23,     0,     0,     0,     0,
+       0,   622,     0,     0,     0,     0,     0,     0,    28,     0,
+      29,    30,   205,   975,   205,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   968,     0,   683,     0,     0,     0,
+       0,   106,     0,     0,   969,   250,     0,   147,   250,    34,
+       0,     0,     0,     0,   625,     0,   970,   627,     9,    10,
+      11,    12,   147,     0,   521,   147,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   147,     0,     0,
+       0,   748,   749,   474,   477,    85,    20,     0,   765,     0,
+       0,     0,   755,   755,     0,   755,    23,     0,     0,     0,
+       0,     0,   622,     0,     0,     0,     0,     0,     0,    28,
+       0,    29,    30,   147,   147,     0,     0,   147,     0,   147,
+     147,   147,   147,     0,     0,   968,   147,     0,     0,     0,
+       0,   147,     0,     0,   147,   969,     0,     0,  1185,     0,
+      34,     0,     0,     0,     0,   625,     0,   970,   627,     0,
+     784,    85,     0,     0,     9,    10,    11,    12,   216,   217,
+     218,     0,     0,     0,     0,    16,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   755,   755,  1418,
+     755,     0,    20,     0,     0,     0,     0,    22,   250,   250,
+     250,   250,    23,     0,   748,   749,    25,   765,   622,     0,
+       0,     0,     0,     0,     0,    28,     0,    29,    30,  1185,
+    1185,  1185,     0,     0,     0,     0,     0,   302,    10,    11,
+      12,   968,     0,    15,     0,     0,     0,     0,     0,   755,
+     106,   969,     0,     0,     0,   205,    34,     0,     0,     0,
+       0,   625,     0,   970,   627,    20,     0,     0,   250,     0,
+     147,     0,     0,     0,     0,    23,     0,     0,     0,     0,
+       0,   622,     0,     0,   147,   147,     0,   637,    28,     0,
+     320,    30,     0,     0,   932,   302,    10,    11,    12,   474,
+     477,     0,     0,     0,  1305,     0,     0,   646,     0,     0,
+       0,     0,     0,   147,  1306,     0,     0,     0,     0,    34,
+       0,     0,     0,    20,   625,     0,  1307,   627,     0,     0,
+       0,   474,   477,    23,     0,     0,     0,   683,     0,   622,
+       0,     9,    10,    11,    12,   128,    28,    15,   320,    30,
+       0,     0,   147,   637,   147,   147,   241,   637,     0,     0,
+       0,     0,  1305,     0,     0,     0,     0,     0,     0,    20,
+       0,     0,  1306,     0,     0,     0,     0,    34,     0,    23,
+     784,     0,   625,     0,  1307,   627,     0,     0,     0,     0,
+       0,     0,    28,     0,    29,    30,     0,     0,     0,   147,
+       0,     0,     0,   637,     0,     0,     0,     0,   195,     0,
+       0,   147,   147,   147,   147,   147,     0,     0,   196,   147,
+       0,     0,     0,    34,     0,     0,     0,     0,     0,     0,
+     197,     0,     0,   265,     0,     0,    10,    11,     0,     0,
+      14,    15,     0,     0,     0,     0,    16,     0,   136,     0,
+       0,    85,     0,    85,     0,     0,     0,     0,  1068,    85,
+      18,    85,    19,     0,     0,     0,     0,   250,    22,     0,
+     266,   267,     0,   250,     0,     0,     0,    25,     0,   268,
+     147,   147,   147,     0,     0,     0,    28,     0,   132,   133,
+       0,   269,   147,     0,     0,   270,   271,   272,   273,   274,
+     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
+     285,   286,   287,   288,   289,     0,   290,   291,   292,   293,
+       0,     0,     0,    10,    11,   294,   295,    14,   248,     0,
+       0,     0,     0,    16,     0,     0,     0,     0,     0,     0,
+       0,     0,   296,     0,     0,     0,     0,    18,     0,    19,
+       0,     9,   129,   130,    12,    22,     0,   521,     0,     0,
+       0,     0,     0,     0,    25,   147,   147,     0,     0,   147,
+       0,     0,   147,    28,     0,   132,   133,   250,     0,    20,
+       0,   147,     0,   250,     0,   932,   932,   932,     0,    23,
+       0,   147,     0,   646,     0,     0,     0,     0,     0,     0,
+       0,     0,    28,     0,    29,    30,     0,   785,     0,     9,
+      10,   786,    12,   169,    14,    15,     0,     0,    32,     0,
+      16,     0,     0,     0,     0,   250,     0,   250,    33,   147,
+     147,   637,     0,    34,    18,     0,    19,    20,    21,     0,
+      35,     0,    22,  -525,     0,     0,     0,    23,     0,     0,
+       0,    25,   787,     0,   170,     0,     0,     0,     0,     0,
+      28,     0,    29,    30,     0,     0,   788,     0,   789,     0,
+       0,     0,     0,     0,   932,     0,    32,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,    33,   250,   147,   147,
+     147,    34,     0,     0,     0,     0,     0,     0,    35,     0,
+       0,     0,   784,     0,   250,     0,     0,  1068,     0,     0,
+       0,     0,     0,     0,     0,  -525,   250,     0,   785,     0,
+       9,    10,   786,    12,   169,    14,    15,     0,     0,     0,
+       0,    16,     0,     0,     0,     0,     0,    85,     0,     0,
+       9,    10,    11,    12,     0,    18,   248,    19,    20,    21,
+     250,     0,   250,    22,  -526,     0,     0,     0,    23,     0,
+       0,     0,    25,   787,     0,   170,     0,     0,    20,     0,
+       0,    28,     0,    29,    30,     0,     0,   788,    23,   789,
+     250,     0,     0,     0,     0,   147,   147,    32,   147,     0,
+       0,    28,     0,    29,    30,     0,     0,    33,     0,     0,
+       0,     0,    34,     0,     0,     0,     0,   195,     0,    35,
+       0,   147,     0,     0,   147,   147,   637,   196,     0,     0,
+       0,     0,    34,    10,    11,     0,  -526,    14,    15,   197,
+       0,     0,     0,    16,     0,     0,     0,     0,   147,   147,
+     147,   147,   147,   637,   147,     0,     0,    18,   147,    19,
+       9,    10,    11,    12,   784,    22,    15,     0,     0,     9,
+      10,    11,    12,     0,    25,   521,     0,     0,     0,     0,
+     932,   932,   932,    28,     0,   132,   133,     0,    20,     0,
+       0,     0,   147,   147,   147,   147,     0,    20,    23,     0,
+       0,   784,     0,    53,     0,     0,     0,    23,     0,     0,
+       0,    28,     0,    29,    30,     0,   147,     0,     0,     0,
+      28,   147,    29,    30,    85,     0,     0,   478,     0,    53,
+      53,     0,   154,  1517,    53,     0,   195,   479,     0,     0,
+       0,    53,    34,     0,     0,     0,   196,     0,     0,   480,
+       0,    34,     0,     0,    53,     0,    53,     0,   197,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,   147,   147,   147,   147,   147,   637,   256,
+       0,   147,     0,  1518,   574,   575,   576,   577,   578,   579,
+     580,   581,   582,   583,   584,   585,   586,   587,   588,   589,
+     590,   591,   592,   593,   594,   595,  1449,     0,     0,     9,
+      10,    11,    12,   216,   217,   218,     0,   147,   637,   147,
+      16,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   398,   398,     0,    53,   250,    20,     0,    53,
+      53,     0,    22,   256,     0,    53,     0,    23,   154,   154,
+     154,    25,     0,   622,     0,   433,     0,     0,     0,     0,
+      28,     0,    29,    30,    53,     0,     0,     0,    53,     0,
+       0,     0,     0,     0,    53,    53,   968,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   969,   147,   147,     0,
+     147,    34,    53,    53,   154,     0,   625,     0,  1013,   627,
+       0,   734,   256,   302,    10,    11,    12,   169,    14,   303,
+     304,   305,   735,   306,    16,     0,     0,     0,     0,     0,
+       0,    53,     0,     0,     0,     0,     0,     0,    18,   307,
+      19,    20,    21,   932,   308,   309,    22,     0,   310,   311,
+     312,    23,   313,   314,     0,    25,     0,     0,     0,   315,
+     316,   317,   318,   319,    28,     0,   320,    30,    53,     0,
+       0,   322,     0,     0,     0,     0,     0,   323,     0,     0,
+     324,     0,   147,   147,   637,   147,     0,     0,   325,   326,
+     327,     0,     0,     0,     0,   328,   329,   330,     0,     0,
+       0,     0,   331,     0,     0,     0,     9,    10,    11,    12,
+       0,     0,     0,     0,   932,   932,   932,     0,  -802,     0,
+     332,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   147,   250,     0,     0,   561,     0,
+     147,     0,     0,     0,    23,   785,     0,     9,    10,   786,
+      12,   169,    14,    15,     0,   398,     0,    28,    16,    29,
+      30,     0,     0,   256,     0,     0,     0,     0,    53,     0,
+       0,     0,    18,   195,    19,    20,    21,     0,     0,     0,
+      22,  -528,     0,   196,     0,    23,     0,     0,    34,    25,
+     787,     0,   170,     0,     0,   197,     0,     0,    28,     0,
+      29,    30,   398,     0,   788,     0,   789,     9,    10,    11,
+      12,     0,     0,    53,    32,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,    33,     0,     0,     0,    53,    34,
+       0,    53,     0,     0,     0,    20,    35,   433,   433,   433,
+       0,     0,     0,    53,     0,    23,     0,     0,     0,     0,
+       0,    53,     0,  -528,     0,     0,     0,     0,    28,     0,
+      29,    30,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   195,     0,     0,     0,     0,    53,
+      53,     0,     0,    53,   196,   154,   154,   154,   433,    34,
+       0,     0,    53,     0,     0,     0,   197,    53,     0,     0,
+      53,     0,     0,   854,     0,   302,    10,    11,    12,   169,
+      14,   303,   304,   305,     0,   306,    16,    53,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+      18,   307,    19,    20,    21,     0,   308,   309,    22,     0,
+     310,   311,   312,    23,   313,   314,   561,    25,     0,   561,
+       0,   315,   316,   317,   318,   319,    28,     0,   320,    30,
+    1564,     0,  -792,   322,   561,   561,   561,     0,     0,   323,
+       0,     0,   324,     0,     0,     0,     0,     0,     0,   561,
+     325,   326,   327,     0,     0,     0,     0,   328,   329,   330,
+       0,    80,     0,     0,   331,     0,     0,     0,     0,     0,
+       0,   785,     0,     9,    10,   786,    12,   169,    14,    15,
+       0,     0,   332,     0,    16,     0,     0,    80,    80,     0,
+      80,     0,    80,     0,     0,     0,     0,   256,    18,    80,
+      19,    20,    21,     0,     0,     0,    22,  -527,     0,     0,
+     561,    23,    80,     0,    80,    25,   787,     0,   170,     0,
+       0,     0,     0,     0,    28,     0,    29,    30,     0,    53,
+     788,     0,   789,     0,     0,   302,    10,    11,    12,     0,
+      32,    15,     0,     0,     0,     0,     0,     0,     0,     0,
+      33,     0,     0,   398,     0,    34,     0,     0,     0,     0,
+     398,     0,    35,    20,     0,     0,     0,     0,    53,    53,
+      53,    53,     0,    23,     0,     0,     0,     0,     0,  -527,
+       0,     0,     0,     0,     0,     0,    28,     0,   320,    30,
+       0,     0,     0,    80,     0,     0,     0,    80,    80,     0,
+       0,     0,   752,    80,     0,     0,    80,    80,    80,     0,
+       0,     0,   753,     0,     0,    53,     0,    34,     0,    53,
+       0,     0,    80,     0,   754,     0,    80,    53,    53,   433,
+     433,   433,    80,    80,     0,    53,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+      80,    80,    80,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,    53,     0,    53,
+       0,     0,     0,     0,    53,    53,     0,    53,     0,    80,
+    1546,     0,  -481,  -481,  -481,  -481,  -481,  -481,  -481,     0,
+       0,  -481,     0,  -481,     0,     0,     0,     0,     0,     0,
+       0,     0,   561,     0,  -481,     0,  -481,     0,     0,     0,
+    -481,     0,     0,     0,     0,  -481,    80,     0,     0,     0,
+    -481,     0,     0,     0,  -481,     0,  -481,     0,     0,     0,
+       0,     0,     0,  -481,     0,  -481,  -481,  -481,  -481,  -481,
+       0,  -481,  -481,  -481,  -481,  -481,  -481,  -481,  -481,  -481,
+    -481,  -481,  -481,  -481,  -481,  -481,  -481,  -481,  -481,  -481,
+    -481,  -481,  -481,  -481,  -481,  -481,  -481,     0,     0,  -481,
+    -481,  -481,  -481,  -481,     0,  -481,  -481,     0,     0,     0,
+       0,  1547,     0,     0,     0,     0,  -481,  -481,  -481,     0,
+    -481,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   561,   561,   561,     0,     0,     0,   433,   256,     0,
+       0,     0,   645,     0,     0,     0,    80,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     8,     0,     9,
+      10,    11,    12,    13,    14,    15,     0,     0,     0,     0,
+      16,     0,     0,     0,     0,    53,    53,   154,     0,     0,
+       0,     0,   256,    17,    18,   161,    19,    20,    21,     0,
+       0,    80,    22,     0,     0,     0,     0,    23,     0,     0,
+      24,    25,    26,     0,    27,     0,    80,   206,     0,    80,
+      28,     0,    29,    30,     0,     0,    31,     0,     0,     0,
+    1212,    80,     0,     0,     0,     0,    32,     0,     0,    80,
+       0,     0,     0,     0,     0,     0,    33,     0,     0,     0,
+       0,    34,     0,     0,     0,     0,     0,     0,    35,     0,
+       0,     0,     0,    53,    36,     0,     0,    80,    80,     0,
+       0,    80,     0,    80,    80,    80,     0,     0,     0,     0,
+      80,     0,     0,     0,   256,    80,     0,     0,    80,     0,
+       0,     0,     0,    53,     0,   168,     0,     9,    10,    11,
+      12,   169,    14,    15,     0,    80,     0,     0,    16,     0,
+       0,   161,   161,   161,     0,     0,     0,     0,     0,     0,
+       0,     0,    18,     0,    19,    20,    21,     0,     0,     0,
+      22,     0,     0,     0,     0,    23,     0,   206,     0,    25,
+       0,     0,   170,     0,     0,     0,     0,     0,    28,     0,
+      29,    30,     0,     0,     0,   206,   206,   483,     0,     0,
+       0,     0,     0,     0,    32,     0,     0,   433,     0,     0,
+     433,   433,   433,   256,    33,     0,     0,     0,     0,    34,
+       0,     0,     0,     0,   206,     0,    35,     9,    10,    11,
+      12,     0,    36,     0,    53,    53,    53,   154,   154,   154,
+     433,     0,   256,     0,    53,    10,    11,     0,   169,    14,
+      15,     0,     0,   735,     0,    16,   645,     0,     0,     0,
+       0,     0,     0,     0,     0,    23,  1212,  1212,  1212,    18,
+       0,    19,    20,     0,     0,     0,     0,    22,    28,     0,
+      29,    30,     0,     0,  1456,     0,    25,    80,   622,     0,
+       0,     0,     0,     0,   195,    28,     0,   132,   133,     0,
+     534,     0,    53,     0,   196,     0,     0,    53,     0,    34,
+      53,   623,     0,     0,     0,     0,   197,     0,     0,     0,
+       0,   624,     0,     0,     0,     0,    80,    80,    80,    80,
+       0,   625,     0,   626,   627,     0,     0,     0,     0,     0,
+       0,   302,    10,    11,    12,     0,     0,     0,   129,   130,
+     630,   630,   630,   248,     0,     0,     0,     0,     0,   433,
+      53,    53,   433,   433,   433,     0,     0,    53,     0,    20,
+       0,     0,     0,    80,     0,    20,     0,    80,     0,    23,
+       0,     0,     0,     0,     0,    80,    80,     0,     0,     0,
+       0,   622,    28,    80,   320,    30,     0,     0,    28,     0,
+     132,   133,     0,    53,    53,    53,   206,    20,   752,     0,
+       0,     0,     0,     0,   623,     0,     0,     0,   753,     0,
+       0,     0,     0,    34,   624,    80,     0,    80,     0,     0,
+     754,     0,    80,    80,   625,    80,   626,   627,     0,   574,
+     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
+     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
+     595,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   206,   206,     0,     0,   206,     0,   483,   483,
+     483,   756,     0,     0,     0,   206,     0,     0,     0,     0,
+     206,     0,     0,   206,     0,   302,    10,    11,    12,   169,
+      14,   303,   304,   305,   735,   306,    16,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1212,
+      18,   307,    19,    20,    21,     0,   308,   309,    22,     0,
+     310,   311,   312,    23,   313,   314,     0,    25,   204,   622,
+       0,   315,   316,   317,   318,   319,    28,     0,   320,    30,
+       0,     0,     0,   322,     0,     0,     0,     0,     0,   323,
+       0,     0,   924,   259,     0,     0,   263,   645,   129,   130,
+     325,   326,   925,   521,     0,     0,     0,   328,   329,   330,
+       0,     0,   625,     0,   926,   627,     0,   259,     0,   367,
+    1212,  1212,  1212,     0,     0,    20,     0,     0,     0,     0,
+       0,     0,   332,    80,    80,    80,     0,     0,     0,   890,
+       0,   622,     0,     0,     0,     0,    53,     0,    28,     0,
+     132,   133,     0,   630,   630,     0,   630,     0,     0,     0,
+       0,     0,     0,   630,   623,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   624,     0,     0,     0,  1214,     0,
+       0,     0,   206,     0,   625,     0,   626,   627,   204,   579,
+     580,   581,   582,   583,   584,   585,   586,   587,   588,   589,
+     590,   591,   592,   593,   594,   595,   204,   204,   204,     0,
+       0,    80,     0,     0,     0,     0,   489,     0,     0,     0,
+       0,   972,     0,   972,   972,     0,   630,     0,     0,     0,
+       0,     0,     0,     0,     0,   204,     0,     0,     0,     0,
+       0,    80,     0,     0,     0,     0,    10,    11,     0,   169,
+      14,    15,    10,    11,   735,     0,    16,   248,     0,     0,
+       0,   263,     0,     0,     0,     0,     0,     0,   972,     0,
+      18,     0,    19,    20,     0,   259,     0,     0,    22,    20,
+     206,   206,   756,   756,   756,     0,     0,    25,   206,   622,
+       0,     0,     0,     0,     0,   622,    28,     0,   132,   133,
+       0,     0,    28,     0,   132,   133,     0,     0,     0,     0,
+       0,     0,  1501,     0,     0,     0,     0,     0,  1501,     0,
+       0,     0,  1502,     0,     0,     0,     0,   206,  1502,     0,
+       0,     0,   625,     0,  1503,   627,     0,     0,   625,     0,
+    1503,   627,    80,    80,    80,    80,    80,    80,     0,   534,
+     534,   534,    80,     0,     9,    10,    11,    12,   169,    14,
+      15,   630,     0,     0,     0,    16,     0,   259,   263,     0,
+       0,     0,     0,     0,  1214,  1214,  1214,     0,     0,    18,
+       0,    19,    20,    21,     0,     0,     0,    22,     0,     0,
+       0,     0,    23,     0,     0,     0,    25,     0,     0,   170,
+       0,     0,     0,     0,     0,    28,     0,    29,    30,     0,
+      80,     0,     0,     0,     0,    80,     0,   204,    80,     0,
+       0,    32,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,    33,     0,     0,   630,   630,    34,     0,   630,     0,
+       0,   630,     0,    35,     0,     0,     0,     0,     0,    36,
+     630,     0,     0,     0,   630,   630,   630,     0,     0,     0,
+     630,     0,     0,     0,     0,     0,    10,    11,    80,    80,
+       0,   521,     0,     0,     0,    80,     0,     0,     0,     0,
+       0,     0,     0,   204,   204,     0,     0,   204,     0,   204,
+     204,   204,   204,    20,     0,     0,   204,     0,   972,   972,
+    1186,   204,     0,     0,   204,     0,     0,     0,     0,   622,
+       0,    80,    80,    80,     0,     0,    28,     0,   132,   133,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,  1501,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,  1502,  1186,     0,     0,     0,     0,     0,     0,
+       0,     0,   625,     0,  1503,   627,     0,   756,   756,   756,
+       0,     0,     0,     0,     0,  1464,     0,  1320,  1321,  1322,
+      12,   169,    14,   303,   304,   305,   206,   306,    16,  1323,
+       0,  1324,  1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,
+    1333,    17,    18,   307,    19,    20,    21,     0,   308,   309,
+      22,     0,   310,   311,   312,    23,   313,   314,  1334,    25,
+    1335,     0,     0,   315,   316,   317,   318,   319,    28,     0,
+     320,  1336,   722,     0,  1337,   322,     0,  1214,     0,     0,
+       0,   323,     0,     0,   324,     0,     0,     0,     0,     0,
+       0,     0,   325,   326,   327,     0,     0,   259,   263,   328,
+     329,   330,     0,     0,   890,   890,   331,   890,     0,     0,
+    1338,     0,     0,   204,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,  1465,   332,     0,     0,     0,     0,     0,
+     630,     0,     0,   630,   630,   630,     0,     0,     0,     0,
+       0,     0,    10,    11,     0,     0,     0,    15,  1214,  1214,
+    1214,     0,   204,     0,   204,   204,     0,   972,   972,   972,
+    1186,  1186,  1186,  1308,     0,     0,     0,   972,     0,    20,
+       0,     0,     0,     0,    80,   628,   628,   628,     0,     0,
+       0,     0,     0,     0,     0,   622,     0,     0,     0,  1186,
+    1186,  1186,    28,     0,   132,   133,     0,     0,     0,   204,
+       0,   756,   756,   756,   756,     0,     0,     0,  1501,     0,
+       0,   204,   204,   204,   204,   204,   489,     0,  1502,   204,
+       0,     0,     0,     0,     0,   206,     0,     0,   625,     0,
+    1503,   627,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   263,     0,     0,     0,     0,
+       0,     0,     0,   104,     0,     0,     0,     0,   204,     0,
+       0,     0,   123,   104,     0,     0,     0,     0,     0,   104,
+     104,     0,   104,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,  1308,   972,   972,  1308,  1308,  1308,     0,     0,
+     972,     0,     9,    10,    11,    12,   207,    14,   208,     0,
+       0,     0,     0,    16,   237,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,    18,     0,    19,
+      20,     0,     0,     0,     0,    22,   206,     0,   206,     0,
+      23,     0,     0,     0,    25,     0,     0,     0,     0,     0,
+       0,     0,     0,    28,     0,    29,    30,     0,     0,   209,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,    32,
+       0,     0,     0,   391,     0,   123,     0,     0,     0,    33,
+       0,     0,   104,   104,    34,     0,     0,     0,     0,   104,
+     104,    35,     0,   104,   104,   104,     0,   419,   104,   104,
+     104,     0,   259,   263,   259,     0,  1308,  1308,     0,  1308,
+      10,    11,     0,   169,    14,    15,     0,     0,     0,     0,
+      16,     0,     0,    10,    11,     0,   169,    14,    15,     0,
+       0,   735,     0,    16,    18,     0,    19,    20,     0,   204,
+     204,  1184,    22,     0,     0,     0,   259,    18,     0,    19,
+      20,   684,   483,     0,   170,    22,     0,     0,   628,   628,
+      28,   628,   132,   133,    25,     0,     0,     0,   928,     0,
+       0,     0,     0,    28,     0,   132,   133,     0,     0,     0,
+       0,     0,     0,     0,  1184,     0,     0,   237,   104,     0,
+       0,  1308,  1308,  1308,  1308,     0,     0,     0,   204,   204,
+     204,     0,     0,     0,     0,     0,     0,     0,   104,     0,
+       0,     0,     0,     0,     0,     0,     0,   204,     0,     0,
+       0,     0,     0,   483,   483,   483,   628,     0,   628,   628,
+       0,   628,     0,     0,     0,     0,     0,     0,   489,     0,
+       0,     0,     0,  1308,     0,     0,     0,   104,     0,   206,
+       0,     0,     0,     0,     0,     0,   785,     0,     9,    10,
+     786,    12,   169,    14,    15,     0,     0,     0,     0,    16,
+       0,     0,     0,   628,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,    18,     0,    19,    20,    21,     0,     0,
+       0,    22,     0,     0,     0,   104,    23,   104,   104,     0,
+      25,   787,     0,   170,     0,     0,     0,     0,     0,    28,
+       0,    29,    30,     0,     0,   788,     0,   789,     0,     0,
+       0,     0,     0,     0,     0,    32,     0,   259,     0,     0,
+       0,     0,     0,     0,     0,    33,     0,     0,     0,     0,
+      34,     0,   104,     0,     0,     0,     0,    35,   204,   204,
+     204,   204,   204,  1184,   204,     0,  1309,     0,   204,     0,
+       0,   104,     0,     0,     0,     0,   628,     0,   104,     0,
+       0,   104,     0,     0,     0,     0,     0,     0,     0,     0,
+    1184,  1184,  1184,   104,     0,     0,     0,     0,     0,     0,
+       0,     0,   204,   204,   204,   204,     0,    10,    11,     0,
+     169,    14,    15,     0,     0,  1585,     0,    16,     0,     0,
+       0,     0,     0,     0,     0,     0,   204,     0,     0,     0,
+       0,    18,     0,    19,    20,     0,     0,     0,     0,    22,
+       0,     0,     0,     0,     0,     0,     0,     0,    25,   628,
+     628,     0,     0,   628,     0,     0,   628,    28,     0,   132,
+     133,     0,     0,     0,   104,   628,   777,     0,     0,   928,
+     928,   928,     0,     0,     0,   628,     0,     0,     0,     0,
+       0,     0,     0,   204,   204,   204,   204,   204,  1184,     0,
+     104,   204,     0,     0,     0,     8,     0,     9,    10,    11,
+      12,    13,    14,    15,     0,     0,     0,     0,    16,     0,
+       0,     0,     0,   628,   628,   628,     0,     0,     0,     0,
+       0,     0,    18,     0,    19,    20,     0,   204,     0,   204,
+      22,     0,     0,     0,     0,    23,     0,     0,     0,    25,
+       0,     0,   440,     0,     0,     0,     0,     0,    28,     0,
+      29,    30,     0,     0,    31,     0,     0,     0,   928,     0,
+       0,     0,     0,     0,    32,     0,   104,     0,     0,     0,
+       0,     0,     0,     0,    33,     0,     0,   104,   104,    34,
+     104,   104,     0,     0,     0,     0,    35,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   204,   204,  1309,
+     204,     0,     0,     0,     9,    10,    11,    12,   169,    14,
+      15,     0,     0,   735,     0,    16,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,    18,
+       0,    19,    20,   104,     0,     0,     0,    22,     0,     0,
+     104,   123,    23,  1184,     0,     0,    25,     0,   622,     0,
+       0,     0,   237,     0,     0,    28,     0,    29,    30,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,  1180,     0,     0,     0,     0,   777,     0,     0,     0,
+       0,  1181,   204,   204,  1184,   204,    34,     0,     0,     0,
+       0,   625,     0,  1182,   627,   628,     0,     0,   628,   628,
+     628,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,  1184,  1184,  1184,     0,     0,     0,
+       0,     0,   628,   628,   628,   628,   628,   628,   628,     0,
+       0,     0,   628,     0,   204,     0,     0,     0,     0,     0,
+     204,   777,     0,     0,   104,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   928,   928,   928,   578,   579,   580,
+     581,   582,   583,   584,   585,   586,   587,   588,   589,   590,
+     591,   592,   593,   594,   595,     0,   104,   104,   104,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   104,   302,
+      10,    11,    12,   169,    14,    15,     0,     0,   735,     0,
+      16,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,    18,     0,    19,    20,     0,     0,
+       0,     0,    22,     0,     0,     0,     0,    23,     0,     0,
+       0,    25,     0,   622,     0,     0,     0,     0,     0,     0,
+      28,     0,   320,    30,     0,     0,     0,   628,   628,   628,
+     628,   628,   628,     0,     0,   628,  1153,     0,     0,     0,
+       0,   104,   104,     0,     0,   104,  1154,     0,   104,     0,
+       0,    34,     0,     0,     0,     0,   625,   104,  1155,   627,
+       0,     0,     0,     0,     0,     0,     0,   104,  1319,     0,
+    1320,  1321,  1322,    12,   169,    14,   303,   304,   305,     0,
+     306,    16,  1323,     0,  1324,  1325,  1326,  1327,  1328,  1329,
+    1330,  1331,  1332,  1333,    17,    18,   307,    19,    20,    21,
+       0,   308,   309,    22,     0,   310,   311,   312,    23,   313,
+     314,  1334,    25,  1335,     0,     0,   315,   316,   317,   318,
+     319,    28,     0,   320,  1336,   722,     0,  1337,   322,     0,
+       0,     0,     0,     0,   323,     0,     0,   324,     0,     0,
+       0,   628,   628,     0,   628,   325,   326,   327,     0,     0,
+       0,     0,   328,   329,   330,     0,     0,     0,     0,   331,
+       0,     0,     0,  1338,   302,    10,    11,    12,   169,    14,
+      15,     0,     0,   735,     0,    16,     0,   332,   777,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,    18,
+       0,    19,    20,     0,     0,     0,     0,    22,     0,     0,
+       0,     0,    23,     0,     0,   104,    25,     0,   622,     0,
+       0,     0,     0,     0,     0,    28,     0,   320,    30,     0,
+       0,     0,     0,     0,     0,     0,   628,   628,   628,   628,
+       0,  1305,     0,    10,    11,     0,   207,    14,   208,     0,
+       0,  1306,     0,    16,     0,     0,    34,     0,     0,     0,
+       0,   625,     0,  1307,   627,     0,     0,    18,     0,    19,
+      20,   104,   104,     0,   104,    22,     0,     0,     0,     0,
+       0,     0,     0,     0,    25,     0,     0,     0,   628,     0,
+       0,     0,     0,    28,     0,   132,   133,   104,     0,     0,
+     104,   104,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   556,     0,   302,    10,    11,    12,
+     169,    14,   303,   304,   305,   735,   306,    16,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     777,    18,   307,    19,    20,    21,     0,   308,   309,    22,
+       0,   310,   311,   312,    23,   313,   314,     0,    25,     0,
+     622,     0,   315,   316,   317,   318,   319,    28,     0,   320,
+      30,  -313,     0,     0,   322,     0,     0,   777,     0,     0,
+     323,     0,     0,   924,     0,     0,     0,     0,     0,     0,
+       0,   325,   326,   925,     0,   104,     0,   104,   328,   329,
+     330,     0,     0,   625,     0,   926,   627,   556,     0,     9,
+      10,    11,    12,   169,    14,   303,   304,   305,   735,   306,
+      16,     0,     0,   332,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,    18,   307,    19,    20,    21,     0,
+     308,   309,    22,     0,   310,   311,   312,    23,   313,   314,
+       0,    25,     0,   622,     0,   315,   316,   317,   318,   319,
+      28,     0,    29,    30,  -313,     0,     0,   322,     0,     0,
+       0,     0,     0,   323,     0,     0,  1209,     0,     0,     0,
+       0,     0,     0,     0,   325,   326,  1210,     0,     0,     0,
+       0,   328,   329,   330,     0,     0,   625,     0,  1211,   627,
+     725,     0,   842,   843,   844,    12,     0,    14,   538,   304,
+     305,     0,   306,    16,     0,     0,   332,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,    18,   307,    19,
+       0,    21,     0,   308,   309,    22,     0,   310,   311,   312,
+      23,   313,   314,     0,    25,     0,     0,     0,   315,   316,
+     317,   318,   319,    28,     0,   845,   846,   726,     0,     0,
+     322,     0,     0,     0,     0,     0,   323,     0,     0,   324,
+       0,     0,     0,     0,     0,     0,     0,   325,   326,   327,
+       0,     0,     0,     0,   328,   329,   330,     0,     0,     0,
+       0,   331,   847,   556,     0,   302,    10,    11,    12,     0,
+      14,   303,   304,   305,     0,   306,    16,     0,  1005,   332,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+      18,   307,    19,    20,    21,     0,   308,   309,    22,     0,
+     310,   311,   312,    23,   313,   314,     0,    25,     0,     0,
+       0,   315,   316,   317,   318,   319,    28,     0,   320,    30,
+    -313,     0,     0,   322,     0,     0,     0,     0,     0,   323,
+       0,     0,   557,     0,     0,     0,     0,     0,     0,     0,
+     325,   326,   558,     0,     0,     0,     0,   328,   329,   330,
+       0,     0,     0,   725,   559,   842,   843,   844,    12,     0,
+      14,   538,   304,   305,     0,   306,    16,     0,     0,     0,
+       0,     0,   332,     0,     0,     0,     0,     0,     0,     0,
+      18,   307,    19,     0,    21,     0,   308,   309,    22,     0,
+     310,   311,   312,    23,   313,   314,     0,    25,     0,     0,
+       0,   315,   316,   317,   318,   319,    28,     0,   845,   846,
+     726,     0,     0,   322,     0,     0,     0,     0,     0,   323,
+       0,     0,   324,     0,     0,     0,     0,     0,     0,     0,
+     325,   326,   327,     0,     0,     0,     0,   328,   329,   330,
+       0,     0,     0,     0,   331,   847,   725,     0,   842,   843,
+     844,    12,     0,    14,   538,   304,   305,     0,   306,    16,
+       0,     0,   332,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,    18,   307,    19,     0,    21,     0,   308,
+     309,    22,     0,   310,   311,   312,    23,   313,   314,     0,
+      25,     0,     0,     0,   315,   316,   317,   318,   319,    28,
+       0,   845,   846,   726,     0,     0,   322,     0,     0,     0,
+       0,     0,   323,     0,     0,   324,     0,     0,     0,     0,
+       0,     0,     0,   325,   326,   327,     0,     0,     0,     0,
+     328,   329,   330,     0,     0,     0,   725,   331,   842,   843,
+     844,    12,     0,    14,   538,   304,   305,     0,   306,    16,
+       0,     0,     0,     0,  -485,   332,     0,     0,     0,     0,
+       0,     0,     0,    18,   307,    19,     0,    21,     0,   308,
+     309,    22,     0,   310,   311,   312,    23,   313,   314,     0,
+      25,     0,     0,     0,   315,   316,   317,   318,   319,    28,
+       0,   845,   846,   726,     0,     0,   322,     0,     0,     0,
+       0,     0,   323,     0,     0,   324,     0,     0,     0,     0,
+       0,     0,     0,   325,   326,   327,     0,     0,     0,     0,
+     328,   329,   330,     0,     0,     0,   725,   331,   302,    10,
+      11,    12,     0,    14,   538,   304,   305,     0,   306,    16,
+       0,     0,     0,     0,  1358,   332,     0,     0,     0,     0,
+       0,     0,     0,    18,   307,    19,     0,    21,     0,   308,
+     309,    22,     0,   310,   311,   312,    23,   313,   314,     0,
+      25,     0,     0,     0,   315,   316,   317,   318,   319,    28,
+       0,   320,    30,   726,     0,     0,   322,     0,     0,     0,
+       0,     0,   323,     0,     0,   324,     0,     0,     0,     0,
+       0,     0,     0,   325,   326,   327,     0,     0,     0,     0,
+     328,   329,   330,     0,     0,     0,     0,   331,     0,     0,
+     556,     0,     9,    10,    11,    12,  1362,    14,   303,   304,
+     305,     0,   306,    16,     0,   332,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,    18,   307,    19,
+      20,    21,     0,   308,   309,    22,     0,   310,   311,   312,
+      23,   313,   314,     0,    25,     0,     0,     0,   315,   316,
+     317,   318,   319,    28,     0,    29,    30,  -313,     0,     0,
+     322,     0,     0,     0,     0,     0,   323,     0,     0,  1533,
+       0,     0,     0,     0,     0,     0,     0,   325,   326,  1534,
+       0,     0,     0,     0,   328,   329,   330,     0,     0,     0,
+     725,  1535,   302,    10,    11,    12,     0,    14,   538,   304,
+     305,     0,   306,    16,     0,     0,     0,     0,     0,   332,
+       0,     0,     0,     0,     0,     0,     0,    18,   307,    19,
+       0,    21,     0,   308,   309,    22,     0,   310,   311,   312,
+      23,   313,   314,     0,    25,     0,     0,     0,   315,   316,
+     317,   318,   319,    28,     0,   320,    30,   726,     0,     0,
+     322,     0,     0,     0,     0,     0,   323,     0,     0,   324,
+       0,     0,     0,     0,     0,     0,     0,   325,   326,   327,
+       0,     0,     0,     0,   328,   329,   330,     0,     0,     0,
+     854,   331,   302,    10,    11,    12,     0,    14,   538,   304,
+     305,     0,   306,    16,     0,     0,     0,     0,     0,   332,
+       0,     0,     0,     0,     0,     0,     0,    18,   307,    19,
+       0,    21,     0,   308,   309,    22,     0,   310,   311,   312,
+      23,   313,   314,     0,    25,     0,     0,     0,   315,   316,
+     317,   318,   319,    28,     0,   320,    30,     0,     0,     0,
+     322,  -792,     0,     0,     0,     0,   323,     0,     0,   324,
+       0,     0,     0,     0,     0,     0,     0,   325,   326,   327,
+       0,     0,     0,     0,   328,   329,   330,     0,     0,     0,
+    1617,   331,   302,    10,    11,    12,     0,    14,   303,   304,
+     305,     0,   306,    16,     0,     0,     0,     0,     0,   332,
+       0,     0,     0,     0,     0,     0,     0,    18,   307,    19,
+       0,    21,     0,   308,   309,    22,     0,   310,   311,   312,
+      23,   313,   314,     0,    25,     0,     0,     0,   315,   316,
+     317,   318,   319,    28,     0,   320,    30,     0,     0,  -197,
+     322,     0,     0,     0,     0,     0,   323,     0,     0,   324,
+       0,     0,     0,     0,     0,     0,     0,   325,   326,   327,
+       0,     0,     0,     0,   328,   329,   330,     0,     0,     0,
+     854,   331,   302,    10,    11,    12,     0,    14,   538,   304,
+     305,     0,   306,    16,     0,     0,     0,     0,     0,   332,
+       0,     0,     0,     0,     0,     0,     0,    18,   307,    19,
+       0,    21,     0,   308,   309,    22,     0,   310,   311,   312,
+      23,   313,   314,     0,    25,     0,     0,     0,   315,   316,
+     317,   318,   319,    28,     0,   320,    30,     0,     0,     0,
+     322,     0,     0,     0,     0,     0,   323,     0,     0,   324,
+       0,     0,     0,     0,     0,     0,     0,   325,   326,   327,
+       0,     0,     0,     0,   328,   329,   330,     0,     0,     0,
+     946,   331,   302,    10,    11,    12,     0,    14,   538,   304,
+     305,     0,   306,    16,     0,     0,     0,  -792,     0,   332,
+       0,     0,     0,     0,     0,     0,     0,    18,   307,    19,
+       0,    21,     0,   308,   309,    22,     0,   310,   311,   312,
+      23,   313,   314,     0,    25,     0,     0,     0,   315,   316,
+     317,   318,   319,    28,     0,   320,    30,     0,     0,     0,
+     322,     0,     0,     0,     0,     0,   323,     0,     0,   324,
+       0,     0,     0,     0,     0,     0,     0,   325,   326,   327,
+       0,     0,     0,     0,   328,   329,   330,     0,     0,     0,
+     948,   331,   302,    10,    11,    12,     0,    14,   538,   304,
+     305,     0,   306,    16,     0,     0,     0,     0,     0,   332,
+       0,     0,     0,     0,     0,     0,     0,    18,   307,    19,
+       0,    21,     0,   308,   309,    22,     0,   310,   311,   312,
+      23,   313,   314,     0,    25,     0,     0,     0,   315,   316,
+     317,   318,   319,    28,     0,   320,    30,     0,     0,     0,
+     322,     0,     0,     0,     0,     0,   323,     0,     0,   324,
+       0,     0,     0,     0,     0,     0,     0,   325,   326,   327,
+       0,     0,     0,     0,   328,   329,   330,     0,     0,     0,
+    1582,   331,   302,    10,    11,    12,     0,    14,   538,   304,
+     305,     0,   306,    16,     0,     0,     0,     0,     0,   332,
+       0,     0,     0,     0,     0,     0,     0,    18,   307,    19,
+       0,    21,     0,   308,   309,    22,     0,   310,   311,   312,
+      23,   313,   314,     0,    25,     0,     0,     0,   315,   316,
+     317,   318,   319,    28,     0,   320,    30,     0,     0,     0,
+     322,     0,     0,     0,     0,     0,   323,     0,     0,   324,
+       0,     0,     0,     0,     0,     0,     0,   325,   326,   327,
+       0,     0,     0,     0,   328,   329,   330,   302,    10,    11,
+      12,   331,    14,   538,   304,   305,     0,   306,    16,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   332,
+       0,     0,    18,   307,    19,     0,    21,     0,   308,   309,
+      22,     0,   310,   311,   312,    23,   313,   314,     0,    25,
+       0,     0,     0,   315,   316,   317,   318,   319,    28,     0,
+     320,    30,     0,     0,     0,   322,     0,     0,     0,     0,
+       0,   323,     0,     0,   324,     0,     0,     0,     0,     0,
+       0,     0,   325,   326,   327,     0,     0,     0,     0,   328,
+     329,   330,     0,     0,     0,     0,   331,   580,   581,   582,
+     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
+     593,   594,   595,     0,   332,   893,  1320,  1321,  1322,    12,
+     169,    14,   303,   304,   305,     0,   306,    16,  1323,     0,
+    1324,  1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,  1333,
+      17,    18,   307,    19,    20,    21,     0,   308,   309,    22,
+       0,   310,   311,   312,    23,   313,   314,  1334,    25,  1335,
+       0,     0,   315,   316,   317,   318,   319,    28,     0,   320,
+    1336,   722,     0,  1337,   322,     0,     0,     0,     0,     0,
+     323,     0,     0,   324,     0,     0,     0,     0,     0,     0,
+       0,   325,   326,   327,     0,     0,     0,     0,   328,   329,
+     330,     0,     0,     0,     0,   331,     0,     0,     0,  1338,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,  1469,   332,  1320,  1321,  1322,    12,   169,    14,
+     303,   304,   305,     0,   306,    16,  1323,     0,  1324,  1325,
+    1326,  1327,  1328,  1329,  1330,  1331,  1332,  1333,    17,    18,
+     307,    19,    20,    21,     0,   308,   309,    22,     0,   310,
+     311,   312,    23,   313,   314,  1334,    25,  1335,     0,     0,
+     315,   316,   317,   318,   319,    28,     0,   320,  1336,   722,
+       0,  1337,   322,     0,     0,     0,     0,     0,   323,     0,
+       0,   324,     0,     0,     0,     0,     0,     0,     0,   325,
+     326,   327,     0,     0,     0,     0,   328,   329,   330,     0,
+       0,     0,     0,   331,     0,     0,     0,  1338,  1320,  1321,
+    1322,    12,   169,    14,   303,   304,   305,     0,   306,    16,
+    1323,   332,  1324,  1325,  1326,  1327,  1328,  1329,  1330,  1331,
+    1332,  1333,    17,    18,   307,    19,    20,    21,     0,   308,
+     309,    22,     0,   310,   311,   312,    23,   313,   314,  1334,
+      25,  1335,     0,     0,   315,   316,   317,   318,   319,    28,
+       0,   320,  1336,  1591,     0,  1337,   322,     0,     0,     0,
+       0,     0,   323,     0,     0,   324,     0,     0,     0,     0,
+       0,     0,     0,   325,   326,   327,     0,     0,     0,     0,
+     328,   329,   330,     0,     0,     0,     0,   331,     0,     0,
+       0,  1338,  1320,  1321,  1322,    12,   169,    14,   303,   304,
+     305,     0,   306,    16,  1323,   332,  1324,  1325,  1326,  1327,
+    1328,  1329,  1330,  1331,  1332,  1333,    17,    18,   307,    19,
+      20,    21,     0,   308,   309,    22,     0,   310,   311,   312,
+      23,   313,   314,  1334,    25,  1335,     0,     0,   315,   316,
+     317,   318,   319,    28,     0,   320,  1336,     0,     0,  1337,
+     322,     0,     0,     0,     0,     0,   323,     0,     0,   324,
+       0,     0,     0,     0,     0,     0,     0,   325,   326,   327,
+       0,     0,     0,     0,   328,   329,   330,     0,     0,     0,
+       0,   331,     0,     0,     0,  1338,     9,    10,    11,    12,
+     169,    14,   303,   304,   305,   735,   306,    16,     0,   332,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,    18,   307,    19,    20,    21,     0,   308,   309,    22,
+       0,   310,   311,   312,    23,   313,   314,     0,    25,     0,
+     622,     0,   315,   316,   317,   318,   319,    28,     0,    29,
+      30,     0,     0,     0,   322,     0,     0,     0,     0,     0,
+     323,     0,     0,  1209,     0,     0,     0,     0,     0,     0,
+       0,   325,   326,  1210,     0,     0,     0,     0,   328,   329,
+     330,     0,     0,   625,     0,  1211,   627,   302,    10,    11,
+      12,     0,    14,   303,   304,   305,     0,   306,    16,     0,
+       0,     0,     0,   332,     0,     0,     0,     0,     0,     0,
+       0,     0,    18,   307,    19,    20,    21,     0,   308,   309,
+      22,     0,   310,   311,   312,    23,   313,   314,     0,    25,
+       0,   622,     0,   315,   316,   317,   318,   319,    28,     0,
+     320,    30,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   323,     0,     0,   924,     0,     0,     0,     0,     0,
+       0,     0,   325,   326,   925,     0,     0,     0,     0,   328,
+     329,   330,     0,     0,   625,     0,   926,   627,     9,    10,
+      11,    12,     0,    14,   303,   304,   305,     0,   306,    16,
+       0,     0,     0,     0,   332,     0,     0,     0,     0,     0,
+       0,     0,     0,    18,   307,    19,    20,    21,     0,   308,
+     309,    22,     0,   310,   311,   312,    23,   313,   314,     0,
+      25,     0,   622,     0,   315,   316,   317,   318,   319,    28,
+       0,    29,    30,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   323,     0,     0,  1209,     0,     0,     0,     0,
+       0,     0,     0,   325,   326,  1210,     0,     0,     0,     0,
+     328,   329,   330,     0,     0,   625,     0,  1211,   627,   302,
+      10,    11,    12,     0,    14,   538,   304,   305,     0,   306,
+      16,     0,     0,     0,     0,   332,     0,     0,     0,     0,
+       0,     0,     0,     0,    18,   307,    19,    20,    21,     0,
+     308,   309,    22,     0,   310,   311,   312,    23,   313,   314,
+       0,    25,     0,     0,     0,   315,   316,   317,   318,   319,
+      28,     0,   320,    30,     0,     0,     0,   322,     0,     0,
+       0,     0,     0,   323,     0,     0,   557,     0,     0,     0,
+       0,     0,     0,     0,   325,   326,   558,     0,     0,     0,
+       0,   328,   329,   330,   302,    10,    11,    12,   559,    14,
+     538,   304,   305,     0,   306,    16,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   332,     0,     0,    18,
+     307,    19,     0,    21,     0,   308,   309,    22,     0,   310,
+     311,   312,    23,   313,   314,     0,    25,     0,     0,     0,
+     315,   316,   317,   318,   319,    28,     0,   320,    30,     0,
+       0,  1442,   322,     0,     0,     0,     0,     0,   323,     0,
+       0,   324,     0,     0,     0,     0,     0,     0,     0,   325,
+     326,   327,     0,     0,     0,     0,   328,   329,   330,     0,
+       0,     0,     0,   331,   302,    10,    11,    12,   169,    14,
+     303,   304,   305,     0,   306,    16,     0,     0,     0,     0,
+       0,   332,     0,     0,     0,     0,     0,     0,     0,    18,
+     307,    19,    20,    21,     0,   308,   309,    22,     0,   310,
+     311,   312,    23,   313,   314,     0,    25,     0,     0,     0,
+     315,   316,   317,   318,   319,    28,     0,   320,    30,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
+       0,   324,     0,     0,     0,     0,     0,     0,     0,   325,
+     326,   327,     0,     0,     0,     0,   328,   329,   330,     9,
+      10,    11,    12,   331,    14,   538,   304,   305,     0,   306,
+      16,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   332,     0,     0,    18,   307,    19,    20,    21,     0,
+     308,   309,    22,     0,   310,   311,   312,    23,   313,   314,
+       0,    25,     0,     0,     0,   315,   316,   317,   318,   319,
+      28,     0,    29,    30,     0,     0,     0,   322,     0,     0,
+       0,     0,     0,   323,     0,     0,  1533,     0,     0,     0,
+       0,     0,     0,     0,   325,   326,  1534,     0,     0,     0,
+       0,   328,   329,   330,   302,    10,    11,    12,  1535,    14,
+     303,   304,   305,     0,   306,    16,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   332,     0,     0,    18,
+     307,    19,     0,    21,     0,   308,   309,    22,     0,   310,
+     311,   312,    23,   313,   314,     0,    25,     0,     0,     0,
+     315,   316,   317,   318,   319,    28,     0,   320,   321,     0,
+       0,     0,   322,     0,     0,     0,     0,     0,   323,     0,
+       0,   324,     0,     0,     0,     0,     0,     0,     0,   325,
+     326,   327,     0,     0,     0,     0,   328,   329,   330,   302,
+      10,    11,    12,   331,    14,   303,   304,   305,     0,   306,
+      16,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   332,     0,     0,    18,   307,    19,     0,    21,     0,
+     308,   309,    22,     0,   310,   311,   312,    23,   313,   314,
+       0,    25,     0,     0,     0,   315,   316,   317,   318,   319,
+      28,     0,   320,    30,     0,     0,     0,   322,     0,     0,
+       0,     0,     0,   323,     0,     0,   324,     0,     0,     0,
+       0,     0,     0,     0,   325,   326,   327,     0,     0,     0,
+       0,   328,   329,   330,   302,    10,    11,    12,   331,    14,
+     538,   304,   305,     0,   306,    16,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   332,     0,     0,    18,
+     307,    19,     0,    21,     0,   308,   309,    22,     0,   310,
+     311,   312,    23,   313,   314,     0,    25,     0,     0,     0,
+     315,   316,   317,   318,   319,    28,     0,   320,    30,     0,
+       0,     0,   322,     0,     0,     0,     0,     0,   323,     0,
+       0,   324,     0,     0,     0,     0,     0,     0,     0,   325,
+     326,   327,     0,     0,     0,     0,   328,   329,   330,   302,
+      10,    11,    12,   331,    14,   538,   304,   305,     0,   306,
+      16,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,   332,     0,     0,    18,   307,    19,     0,    21,     0,
+     308,   309,    22,     0,   310,   311,   312,    23,   313,   314,
+       0,    25,     0,     0,     0,   315,   316,   317,   318,   319,
+      28,     0,   320,    30,   571,     0,     0,     0,     0,     0,
+       0,     0,     0,   323,     0,     0,   324,     0,     0,     0,
+       0,     0,     0,     0,   325,   326,   327,     0,     0,     0,
+       0,   328,   329,   330,   302,    10,    11,    12,   572,    14,
+     538,   304,   305,     0,   306,    16,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   332,     0,     0,    18,
+     307,    19,     0,    21,     0,   308,   309,    22,     0,   310,
+     311,   312,    23,   313,   314,     0,    25,     0,     0,     0,
+     315,   316,   317,   318,   319,    28,     0,   320,    30,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   323,     0,
+       0,   324,     0,     0,     0,     0,     0,     0,     0,   325,
+     326,   327,     0,     0,     0,     0,   328,   329,   330,     0,
+       0,     0,     0,   331,   610,   302,    10,    11,    12,     0,
+      14,   538,   304,   305,     0,   306,    16,     0,     0,     0,
+       0,   332,     0,     0,     0,     0,     0,     0,     0,     0,
+      18,   307,    19,    20,    21,     0,   308,   309,    22,     0,
+     310,   311,   312,    23,   313,   314,     0,    25,     0,     0,
+       0,   315,   316,   317,   318,   319,    28,     0,   320,    30,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
+       0,     0,   557,     0,     0,     0,     0,     0,     0,     0,
+     325,   326,   558,     0,     0,     0,     0,   328,   329,   330,
+    1168,    10,    11,    12,   559,    14,   538,   304,   305,     0,
+     306,    16,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   332,     0,     0,    18,   307,    19,     0,    21,
+       0,   308,   309,    22,     0,   310,   311,   312,    23,   313,
+     314,     0,    25,     0,     0,     0,   315,   316,   317,   318,
+     319,    28,     0,   320,    30,     0,     0,     0,   322,     0,
+       0,     0,     0,     0,   323,     0,     0,   324,     0,     0,
+       0,     0,     0,     0,     0,   325,   326,   327,     0,     0,
+       0,     0,   328,   329,   330,     9,    10,    11,    12,   331,
+      14,   303,   304,   305,     0,   306,    16,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   332,     0,     0,
+      18,   307,    19,    20,    21,     0,   308,   309,    22,     0,
+     310,   311,   312,    23,   313,   314,     0,    25,     0,     0,
+       0,   315,   316,   317,   318,   319,    28,     0,    29,    30,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
+       0,     0,  1533,     0,     0,     0,     0,     0,     0,     0,
+     325,   326,  1534,     0,     0,     0,     0,   328,   329,   330,
+     302,    10,    11,    12,  1535,    14,   538,   304,   305,     0,
+     306,    16,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   332,     0,     0,    18,   307,    19,     0,    21,
+       0,   308,   309,    22,     0,   310,   311,   312,    23,   313,
+     314,     0,    25,     0,     0,     0,   315,   316,   317,   318,
+     319,    28,     0,   320,    30,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   323,     0,     0,   324,     0,     0,
+       0,     0,     0,     0,     0,   325,   326,   327,     0,     0,
+       0,     0,   328,   329,   330,   302,    10,    11,    12,   539,
+      14,   538,   304,   305,     0,   306,    16,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,   332,     0,     0,
+      18,   307,    19,     0,    21,     0,   308,   309,    22,     0,
+     310,   311,   312,    23,   313,   314,     0,    25,     0,     0,
+       0,   315,   316,   317,   318,   319,    28,     0,   320,    30,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   323,
+       0,     0,   324,     0,     0,     0,     0,     0,     0,     0,
+     325,   326,   327,     0,     0,     0,     0,   328,   329,   330,
+     302,    10,    11,    12,   542,    14,   538,   304,   305,     0,
+     306,    16,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   332,     0,     0,    18,   307,    19,     0,    21,
+       0,   308,   309,    22,     0,   310,   311,   312,    23,   313,
+     314,     0,    25,     0,     0,     0,   315,   316,   317,   318,
+     319,    28,     0,   320,    30,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,   323,     0,     0,   324,     0,     0,
+       0,     0,     0,     0,     0,   325,   326,   327,     0,     0,
+       0,     0,   328,   329,   330,     0,     0,     0,     0,   331,
+       9,    10,    11,    12,   169,    14,    15,     0,     0,  1018,
+       0,    16,     0,     0,     0,     0,     0,   332,     0,     0,
+       0,     0,     0,     0,     0,    18,     0,    19,    20,     0,
+       0,     0,     0,    22,     0,     0,     0,     0,    23,     0,
+       0,     0,    25,     0,     0,     0,     0,     0,     0,     0,
+       0,    28,     0,    29,    30,     0,     0,     0,  1056,    10,
+     786,    12,   207,    14,   208,     0,     0,    32,     0,    16,
+       0,     0,     0,     0,     0,     0,     0,    33,     0,     0,
+       0,     0,    34,    18,     0,    19,    20,     0,     0,    35,
+       0,    22,     0,     0,     0,     0,    23,     0,     0,     0,
+      25,     0,     0,     0,     0,     0,     0,     0,     0,    28,
+       0,    29,    30,     0,     0,     0,     0,  1058,     9,    10,
+      11,    12,   207,    14,   208,    32,     0,     0,     0,    16,
+       0,     0,     0,     0,     0,    33,     0,     0,     0,     0,
+      34,     0,     0,    18,     0,    19,    20,    35,     0,     0,
+       0,    22,     0,     0,     0,     0,    23,     0,     0,     0,
+      25,     0,     0,     0,     0,     0,     0,     0,     0,    28,
+       0,    29,    30,     0,     0,  1459,     9,    10,    11,    12,
+     169,    14,    15,     0,     0,    32,     0,    16,     0,     0,
+       0,     0,     0,     0,     0,    33,     0,     0,     0,     0,
+      34,    18,     0,    19,    20,     0,     0,    35,     0,    22,
+       0,     0,     0,     0,    23,     0,     0,     0,    25,     0,
+       0,     0,     0,     0,     0,     0,     0,    28,     0,    29,
+      30,     0,     0,     0,     9,    10,    11,    12,   207,    14,
+     208,     0,     0,    32,     0,    16,     0,     0,     0,     0,
+       0,     0,     0,    33,     0,     0,     0,     0,    34,    18,
+       0,    19,    20,     0,     0,    35,     0,    22,     0,     0,
+       0,     0,    23,     0,     0,     0,    25,     0,     0,     0,
+       0,     0,     0,     0,     0,    28,     0,    29,    30,     9,
+      10,    11,    12,   216,   217,   218,     0,     0,     0,     0,
+      16,    32,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,    33,     0,     0,     0,     0,    34,    20,     0,     0,
+       0,     0,    22,    35,     0,     0,     0,    23,     0,     0,
+       0,    25,     0,   622,     0,     0,     0,     0,     0,     0,
+      28,     0,    29,    30,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   195,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,   196,     0,     0,     0,
+       0,    34,     0,     0,     0,     0,     0,     0,  1462,   574,
+     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
+     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
+     595,   574,   575,   576,   577,   578,   579,   580,   581,   582,
+     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
+     593,   594,   595,     0,     0,     0,     0,  1268,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,   663,     0,     0,  1605,   574,   575,   576,   577,
+     578,   579,   580,   581,   582,   583,   584,   585,   586,   587,
+     588,   589,   590,   591,   592,   593,   594,   595,  1599,   574,
+     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
+     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
+     595,   574,   575,   576,   577,   578,   579,   580,   581,   582,
+     583,   584,   585,   586,   587,   588,   589,   590,   591,   592,
+     593,   594,   595,   574,   575,   576,   577,   578,   579,   580,
+     581,   582,   583,   584,     0,   586,   587,   588,   589,   590,
+     591,   592,   593,   594,   595,   581,   582,   583,   584,   585,
+     586,   587,   588,   589,   590,   591,   592,   593,   594,   595
+};
 
-   This program is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-   GNU General Public License for more details.
+#define yypact_value_is_default(Yystate) \
+  (!!((Yystate) == (-1444)))
 
-   You should have received a copy of the GNU General Public License
-   along with this program; if not, write to the Free Software
-   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
+#define yytable_value_is_error(Yytable_value) \
+  YYID (0)
 
-/* As a special exception, when this file is copied by Bison into a
-   Bison output file, you may use that output file without restriction.
-   This special exception was added by the Free Software Foundation
-   in version 1.24 of Bison.  */
+static const yytype_int16 yycheck[] =
+{
+       6,   163,   151,   152,   211,   351,   177,    92,   176,    94,
+     128,    25,   178,   404,   404,     6,   720,   509,    16,   702,
+     487,   357,   357,     6,    44,   404,    44,     6,   136,   253,
+     470,    37,   882,    86,   569,   135,   136,    59,    44,   211,
+     606,    61,   249,    44,   649,   375,    37,    57,   220,   135,
+     245,   158,   126,    59,    37,   442,   141,  1424,    37,  1339,
+     790,    44,   792,   306,   307,    44,    82,     6,    74,   695,
+     800,  1514,    64,  1515,   462,  1349,     6,    44,    56,    44,
+      86,    33,  1356,    11,    90,    11,    92,    85,    94,    59,
+      11,   298,    37,    48,  1516,     1,   339,     0,    37,   704,
+    1237,  1238,     9,   109,   110,    44,    54,    37,    58,    60,
+     108,    73,     1,    59,    44,     7,   138,  1254,  1561,    60,
+     806,    54,    38,    78,     1,    73,   812,    59,    12,    62,
+     146,     0,   138,   357,   140,   141,    62,    62,    54,   109,
+      73,   219,   220,    58,   351,    37,    12,    62,    98,   167,
+     142,   171,    58,   171,    61,   138,   178,   109,   109,    33,
+     627,   167,   108,    12,   109,   171,   158,   177,   109,    58,
+     171,     6,   178,    62,  1596,    59,   108,   184,    62,   157,
+     108,    58,   108,   108,   167,    62,    82,   108,   171,   205,
+      27,   211,   171,    59,    31,   541,    62,    32,    33,   219,
+     220,    47,    37,  1645,   171,    59,   171,    96,   138,    44,
+      59,    62,     6,    62,    63,   358,   359,    63,  1661,    96,
+      74,   495,   214,    60,   202,    54,    63,   719,     6,   249,
+     222,     0,   171,    62,  1601,  1515,   922,   167,   512,     6,
+      59,   171,   108,    37,  1381,  1519,    92,   239,   348,    73,
+      44,    86,   250,  1390,  1391,   938,  1393,   108,   941,    37,
+     215,     6,   348,    57,    25,    59,    27,   410,   411,   143,
+      37,    25,   109,    27,   148,   360,  1538,    44,   298,    58,
+       3,     4,     5,     6,    63,    48,    54,   395,   450,   108,
+      54,   344,    37,   299,    60,    47,  1570,    58,  1560,   982,
+     983,    62,    44,   138,    58,    73,   685,    54,    62,    73,
+     646,    92,    54,   387,    56,   881,   151,   152,    41,    86,
+     492,    60,   196,     4,     5,   331,    73,   714,   715,   478,
+     479,   351,   167,    56,    57,    96,   171,   963,   344,   361,
+      92,    93,    96,   109,   138,   675,   352,  1621,   142,    25,
+      47,   742,   742,    73,   360,   361,   108,  1043,  1620,   357,
+     195,   196,    85,     3,     4,     5,   806,    48,   264,  1055,
+     109,   138,   812,   167,   481,    56,    57,   171,   361,    59,
+      59,    60,    58,   177,   178,    92,    62,   261,   408,     4,
+       5,   615,   738,    92,     9,    92,   406,    92,   404,    80,
+     167,   407,    47,  1089,   171,  1091,    73,  1544,  1545,     8,
+       9,   108,    47,   491,   492,    14,    56,    57,   503,    60,
+      96,   499,    59,    60,   444,   404,   444,  1277,   108,  1034,
+     224,   361,   967,   511,     4,     5,  1564,    36,   444,    54,
+      80,    56,    57,   444,    83,    84,    45,    92,    47,     4,
+       5,   536,   530,     8,     9,    70,   923,    92,    93,    14,
+     452,   444,    25,   108,   470,    80,    60,     3,     4,     5,
+     457,   491,   492,    28,    44,    30,  1159,  1160,    93,   499,
+     472,    36,   922,    47,    54,  1613,    56,    57,   510,   481,
+      45,   511,    47,    92,    47,   107,   884,   503,    54,    54,
+       6,    56,    57,    47,   510,    54,   498,   650,   485,   344,
+     530,    47,    47,    62,   444,    70,   493,    73,    54,    63,
+      56,    57,    54,  1253,    73,    80,   361,   510,    92,    93,
+     536,    37,    54,   539,    31,    90,   542,    92,    93,    92,
+     546,   547,   548,   549,   550,   713,   501,   421,    92,  1041,
+     424,    73,    62,   559,   607,    47,    92,    92,    25,  1409,
+      27,    47,   436,   569,    58,    47,   572,   361,   676,   404,
+      73,   510,    47,   964,   964,   683,   563,   344,    47,   774,
+     510,   776,    54,   683,   109,   964,   781,     3,     4,     5,
+       6,    58,    58,   678,   361,    62,   932,   932,    54,   473,
+      92,   607,   476,  1043,    59,    92,    92,    93,    47,   444,
+      92,    93,   406,    54,   510,  1055,   490,    92,    93,    74,
+     626,    76,   108,    92,   831,    41,   108,   633,    47,    96,
+      27,    54,    48,   653,    31,   470,    74,   404,    76,   637,
+      56,    57,   652,   478,   479,    62,    74,    47,    47,  1089,
+     444,  1091,    47,    92,     4,     5,    73,     3,     4,     5,
+       6,  1128,    59,    60,    35,   108,   784,    59,    60,    85,
+     684,   108,   678,    92,   694,   510,   108,   444,   472,   822,
+      25,   691,    27,   693,   694,   928,   692,    47,   766,    93,
+     696,   485,    92,    92,    93,    41,    47,    92,    48,   493,
+      47,  1193,    48,   470,    47,   719,    56,    57,   932,   108,
+      56,    57,    63,    58,     4,     5,   510,    62,   738,   108,
+    1108,  1109,   807,   808,    47,   810,    57,    11,   738,    47,
+      80,    54,    92,    93,   721,   109,   742,    98,  1230,    85,
+      47,    92,    93,   510,    60,    92,   766,     3,   108,    92,
+      73,    96,    47,    80,    81,    82,    83,    84,    48,     3,
+       4,     5,   769,     7,     8,     9,    56,    57,   790,    92,
+     792,    92,   607,    35,    92,   797,   798,  1123,   800,    60,
+     151,   152,   153,   111,   790,    92,   792,   797,   623,   624,
+      80,   626,   798,    73,   800,    93,     3,    92,   633,     6,
+     806,   807,   808,    62,   810,    93,   812,   790,   111,   792,
+      47,   831,    56,    57,   957,     4,     5,   800,    92,  1207,
+      59,    60,   990,   930,    31,    92,   197,    47,  1216,  1217,
+      47,   109,   110,    54,    41,     4,     5,  1225,   793,   794,
+     607,    62,    73,  1038,  1039,  1040,   177,    73,   803,    56,
+      57,   790,    73,   792,    73,    92,     4,     5,   652,   626,
+     790,   800,   792,    70,    73,    54,   633,    56,    57,    59,
+     800,    62,    92,    80,   880,    92,   750,   751,    85,   885,
+    1268,    62,    73,    11,   758,    92,   109,    56,    57,   151,
+     152,   153,    73,   224,   790,    54,   792,   691,   692,   693,
+     694,    59,   798,    62,   800,    54,    54,   742,    56,    57,
+     916,   108,   904,    62,    73,    62,   922,   752,   753,   911,
+     926,   108,    70,  1627,    73,   108,    73,  1124,  1125,   108,
+    1127,    12,    80,    73,   932,   197,     4,     5,   930,    59,
+    1083,  1084,  1085,    54,   738,    93,    27,    47,   742,    54,
+      31,    62,    73,    73,    74,   790,    76,   792,   964,   975,
+     966,   967,    73,    73,   970,   800,    47,   108,     3,     4,
+       5,   806,   819,   820,   821,   742,   109,   812,    59,    60,
+    1368,    62,    63,    47,   109,   964,    86,    87,    56,    57,
+      54,    91,    92,    93,    94,    30,   790,   111,   792,    59,
+      60,   108,  1348,   797,   798,   111,   800,  1013,    27,    73,
+      73,    92,    93,     4,     5,  1002,    59,    60,  1406,    54,
+    1026,    56,    57,   790,  1046,   792,    73,   108,    92,    54,
+    1036,  1180,  1181,   800,     8,     9,  1046,  1043,   111,   806,
+      14,  1048,  1049,  1150,    59,   812,    73,  1132,    63,  1055,
+     111,  1067,   108,   331,  1076,    59,    60,    48,    73,    74,
+    1209,  1210,    36,    59,    60,    56,    57,   108,  1075,   108,
+    1076,    45,    58,  1080,   108,   406,  1183,    47,     3,     4,
+       5,     6,    54,  1089,    54,  1091,     8,   922,   111,   924,
+     925,   926,    16,  1076,    92,   969,    59,    60,    59,    60,
+      24,    47,    59,    73,  1059,    63,   109,   478,   479,   480,
+    1065,  1066,    92,  1119,  1069,  1070,    41,    54,  1073,    60,
+      27,    36,    92,    48,    31,    63,  1132,    63,    63,   964,
+     108,    56,    57,   968,   969,   970,    62,  1076,   111,   108,
+      60,   472,   108,    67,   108,  1288,  1076,    63,   108,  1155,
+     481,    63,    59,    60,   485,   922,    63,   108,  1150,   926,
+      85,    63,   493,  1554,  1554,    74,    59,    62,   108,  1185,
+      59,  1067,     4,     5,    92,  1346,  1182,  1348,  1013,  1193,
+    1076,  1347,    74,    74,    74,  1177,    74,   108,    62,   467,
+      62,  1183,   111,    93,   108,  1302,    73,   964,  1204,    31,
+     108,   111,   126,   970,   108,  1211,    85,   108,  1043,   108,
+     108,   108,  1558,  1204,     4,     5,   478,   479,   480,    47,
+    1055,  1204,    54,   108,    56,    57,   150,     4,     5,   111,
+     108,  1253,  1224,     3,     4,     5,  1243,  1244,    70,  1246,
+    1247,  1076,  1249,   108,   111,   108,  1013,  1253,    80,   108,
+     108,   108,  1046,   109,  1089,   109,  1091,    60,    48,    59,
+      92,   539,    63,  1651,   542,  1204,    56,    57,   546,    63,
+    1253,    59,    59,     3,     4,     5,  1043,    54,    62,    56,
+      57,   559,  1076,   108,    54,   108,    56,    57,  1055,   109,
+      80,   109,   108,    70,   572,     3,     4,     5,   576,    92,
+      92,  1307,   108,    80,  1178,  1179,    92,    92,     8,  1076,
+    1302,   108,   111,  1187,  1253,   111,   240,   241,  1153,  1154,
+    1155,   652,  1089,  1253,  1091,   603,    56,    57,  1348,   253,
+     108,    33,   610,  1339,   108,   108,  1346,   108,  1348,   108,
+      48,  1347,   109,  1349,   108,  1180,  1181,  1182,    56,    57,
+    1356,  1558,  1248,   108,    63,   108,  1339,  1253,  1349,  1365,
+     691,   108,   693,   694,   108,  1356,  1349,   108,  1530,  1204,
+      54,  1378,  1379,  1356,  1209,  1210,  1211,   108,     3,     4,
+       5,     6,   108,  1177,  1533,  1534,  1221,  1222,  1155,    62,
+     111,    47,     3,     4,     5,   108,     7,     8,     9,   323,
+    1339,     3,     4,     5,     6,   108,    95,   738,    62,   108,
+    1349,    62,    60,    60,     9,  1182,    41,  1356,  1253,    60,
+      31,   108,    16,   108,    92,    36,     3,     4,     5,  1303,
+    1304,    56,    57,  1388,  1389,    92,  1310,  1204,   108,    41,
+    1608,   365,   108,    54,  1211,    56,    57,    58,  1435,   108,
+     374,  1245,    54,   108,    56,    57,  1250,    60,    60,  1253,
+      62,    60,    63,   387,  1451,    54,   797,   111,    70,    92,
+    1305,  1306,  1307,    92,  1481,  1482,  1483,    54,    80,    56,
+      57,    58,    17,    85,    60,    54,  1253,   108,    60,   107,
+      92,   108,   103,   104,   105,   108,   108,  1503,    32,    33,
+      97,    35,    11,  1509,  1339,    60,  1461,    60,  1514,  1515,
+    1516,    60,  1504,  1519,  1349,     4,     5,    92,    59,    63,
+     108,  1356,    60,  1514,   108,    59,   108,    61,  1519,  1535,
+      11,  1514,  1515,    67,  1541,  1542,  1519,    60,  1558,    11,
+    1307,    60,     0,     3,     4,     5,     6,     3,  1554,  1559,
+     172,  1538,  1346,  1347,  1348,  1561,  1449,    37,   676,    48,
+     444,  1553,   964,   171,  1570,  1607,   798,    56,    57,   167,
+    1561,    31,  1339,  1560,  1193,  1514,  1515,   240,  1561,  1570,
+    1519,    41,  1349,   507,     4,     5,    96,  1570,   140,  1356,
+    1596,    80,  1434,  1661,    54,  1278,    56,    57,   950,   970,
+    1587,   945,   726,   301,   244,  1612,  1230,  1041,  1076,   143,
+      70,   889,   798,   659,   148,  1621,    35,   151,   152,   153,
+      80,  1250,  1561,   943,   607,    85,   348,   126,    48,   202,
+    1621,  1570,    92,  1620,  1589,  1349,    56,    57,  1621,  1205,
+    1575,  1641,  1013,  1627,   178,  1639,  1021,   571,   926,    82,
+     184,     3,     4,     5,  1641,  1661,  1637,  1365,    -1,    -1,
+      80,   195,   196,   197,    -1,    -1,  1501,  1502,  1503,    -1,
+    1661,    -1,    -1,   106,  1509,    -1,    -1,   211,  1661,  1514,
+    1515,  1516,  1621,    -1,  1519,   219,   220,    -1,    -1,    -1,
+      -1,   615,     3,     4,     5,     6,    -1,    -1,  1533,  1534,
+      -1,    -1,   135,    -1,    56,    57,    58,    -1,   970,   463,
+       3,     4,     5,   146,    -1,  1046,   470,    -1,    -1,  1554,
+      31,    -1,  1661,    -1,    -1,    -1,  1561,   261,    -1,    -1,
+      41,    -1,    -1,   152,   153,  1570,  1503,    -1,     3,     4,
+       5,     6,  1509,    54,     9,    56,    57,  1514,  1515,  1516,
+      -1,  1013,  1519,    -1,    -1,    48,    -1,    -1,  1036,    70,
+     684,  1596,    -1,    56,    57,  1559,    31,    -1,    -1,    80,
+      -1,   695,   205,    -1,    85,    -1,    41,    -1,   197,    -1,
+      -1,    92,    47,   537,    -1,    -1,  1621,  1554,    -1,    54,
+      -1,    56,    57,    -1,  1561,    -1,    -1,   331,    -1,    -1,
+      -1,    -1,   726,  1570,    -1,    70,    -1,   240,    -1,  1180,
+    1181,  1182,    -1,    -1,    -1,    80,   308,   309,    -1,    -1,
+      85,    -1,    -1,    -1,    -1,    90,  1661,    92,    93,  1596,
+      -1,   264,   324,    -1,    -1,   327,   328,    -1,  1209,  1210,
+    1211,   333,    -1,   597,    -1,   337,  1177,    -1,   602,    -1,
+      -1,    -1,  1183,   345,  1621,    -1,     4,     5,    -1,    -1,
+      -1,     9,    -1,    -1,   350,   351,   352,    -1,    -1,    -1,
+      -1,    -1,    -1,   407,   408,     4,     5,    -1,    -1,     8,
+       9,     3,     4,     5,    -1,    14,   640,   421,     4,     5,
+     424,    -1,    -1,  1224,  1661,    -1,   430,   431,   432,    28,
+      -1,    30,   436,    -1,    -1,    -1,    54,    36,    56,    57,
+      -1,    -1,   331,    -1,  1245,    31,    45,    -1,  1180,  1181,
+    1182,    -1,    70,   356,    -1,    54,    -1,    56,    57,    58,
+      -1,    47,    80,  1211,    56,    57,    -1,    84,    54,   473,
+      56,    57,   476,    -1,   478,   479,   480,  1209,  1210,  1211,
+     484,    -1,    -1,    -1,    70,    -1,   490,   491,   492,    -1,
+      -1,   495,    -1,    92,    80,   499,    -1,    -1,    -1,    -1,
+      -1,  1302,    -1,    -1,    90,    -1,    92,    93,   512,    -1,
+       9,   414,    -1,    12,    -1,    -1,  1264,  1265,  1266,  1267,
+       3,     4,     5,    -1,    -1,     3,     4,     5,     3,     4,
+       5,    -1,    -1,    -1,    -1,   539,    -1,    -1,   542,    -1,
+      -1,    -1,   431,   432,   161,  1346,    -1,  1348,    47,     3,
+       4,     5,     6,   557,   558,   559,   950,    -1,     4,     5,
+      59,    -1,    61,    62,    63,    -1,    -1,    -1,   572,   963,
+      -1,    54,    -1,    56,    57,    74,   193,    76,    56,    57,
+      -1,    56,    57,    -1,  1332,    31,    -1,    41,    -1,   206,
+     479,   480,    -1,    92,    93,   557,   558,    -1,    -1,    -1,
+      54,    47,    56,    57,   507,    -1,    60,    -1,    54,   108,
+      56,    57,    -1,    90,    -1,    92,    70,    94,    -1,   623,
+     624,  1462,   626,    -1,    70,    -1,    80,    -1,    -1,   633,
+     533,    85,    -1,    -1,    80,    -1,    -1,    -1,    92,    -1,
+      -1,    -1,    -1,    -1,    90,    -1,    92,    93,    -1,   653,
+     539,    -1,    -1,   542,    -1,   879,   880,    -1,    -1,  1407,
+      -1,   885,    -1,   140,   141,     3,     4,     5,    -1,   558,
+     559,     7,     8,     9,    -1,   899,    -1,   901,    14,   903,
+      -1,    -1,    -1,   572,    -1,    -1,    -1,    -1,   692,    -1,
+     694,   695,  1533,  1534,  1535,    31,  1444,    -1,    -1,    -1,
+      36,    -1,    -1,  1504,    -1,    -1,    -1,    -1,    -1,    45,
+       3,     4,     5,    -1,    -1,  1109,    -1,   620,    56,    57,
+      -1,    -1,     3,     4,     5,     6,    -1,    -1,   952,    -1,
+    1462,    -1,    -1,   636,   738,   691,    -1,   693,   694,    -1,
+     696,    -1,    -1,    -1,   633,    -1,   750,   751,   752,   753,
+     754,    -1,  1553,    -1,   758,    -1,    -1,    -1,  1559,    -1,
+      41,  1509,   766,    56,    57,   769,    47,  1515,  1516,    -1,
+      -1,    -1,   996,    54,    -1,    56,    57,    -1,     3,     4,
+       5,     6,   738,    -1,    -1,    -1,    -1,  1535,     1,    70,
+       3,     4,     5,     6,   798,     8,     3,     4,     5,    80,
+      -1,  1533,  1534,  1535,    85,    -1,    -1,  1201,    -1,    90,
+      -1,    92,    93,  1207,    -1,    -1,    41,    -1,    -1,    -1,
+      -1,   825,    -1,    48,    -1,    -1,    -1,    -1,    41,    -1,
+      -1,    56,    57,    -1,    -1,    48,     3,     4,     5,     6,
+      -1,    54,    -1,    56,    57,   322,    -1,    -1,  1596,    56,
+      57,    -1,   755,    -1,    -1,    80,     3,     4,     5,     6,
+      85,    -1,     9,    -1,   753,   754,   483,  1615,    -1,    -1,
+      -1,   488,    85,    -1,    41,   831,    -1,   109,   110,    -1,
+      -1,    -1,    -1,   360,    31,    -1,    -1,    54,  1636,    56,
+      57,    -1,    -1,    -1,    41,    62,   513,  1645,    -1,    -1,
+      47,   905,   519,    70,   908,    -1,    -1,    54,    -1,    56,
+      57,    -1,    -1,    80,   531,   532,   920,   534,    85,    -1,
+     924,   925,   926,    70,    -1,    92,    -1,    -1,    -1,    -1,
+      -1,   893,    -1,    80,    -1,    -1,   825,    -1,    85,  1333,
+    1334,    -1,    -1,    90,    -1,    92,    93,    -1,   904,    -1,
+      -1,    -1,    -1,    -1,    -1,   911,    -1,    -1,    -1,   963,
+      -1,    -1,   924,   925,   968,   969,   970,    -1,    -1,    -1,
+      -1,  1195,    -1,  1197,   930,  1199,    -1,    -1,    -1,    -1,
+       3,     4,     5,     6,    -1,   462,   463,    -1,     3,     4,
+       5,    -1,     7,   470,    -1,    -1,    -1,     4,     5,    -1,
+      -1,     8,     9,    -1,    -1,    -1,    -1,    14,    -1,  1013,
+      -1,    -1,   629,   630,    -1,    30,    -1,   634,    41,    -1,
+      -1,    -1,    37,  1027,  1028,  1029,   503,    -1,   931,    36,
+     933,    54,  1426,    56,    57,    -1,   925,   926,    45,    54,
+      47,    56,    57,    -1,  1048,  1049,    -1,    54,    -1,    56,
+      57,    -1,    -1,    -1,  1448,  1449,    -1,    -1,    -1,   536,
+     537,    -1,    85,    70,    -1,    -1,    -1,    -1,    -1,     4,
+       5,  1075,   975,    80,     9,  1299,  1080,    -1,    -1,    -1,
+      -1,   970,    -1,    90,    -1,    92,    93,    -1,    -1,    -1,
+      -1,    -1,   569,    -1,   571,    -1,    31,   574,   575,   331,
+     577,   578,   579,   580,   581,   582,   583,   584,   585,   586,
+     587,   588,   589,   590,   591,   592,   593,   594,   595,    54,
+     597,    56,    57,    -1,  1013,   602,    -1,    -1,    -1,     7,
+       8,     9,    -1,  1527,    -1,    70,    14,     4,     5,   756,
+      -1,     7,     8,     9,    -1,    80,    -1,    -1,    14,  1153,
+    1154,  1155,    -1,    31,    -1,    -1,   633,    92,    36,    -1,
+      -1,    -1,    -1,   640,  1067,    31,    -1,    45,  1130,    -1,
+      36,    -1,   404,    -1,  1178,  1179,  1180,  1181,  1182,    45,
+      47,    -1,    60,  1187,    -1,   662,   663,    54,    -1,    56,
+      57,    -1,    -1,    -1,  1150,    -1,   813,    -1,   815,    -1,
+      -1,   678,    -1,    70,    -1,  1209,  1210,  1211,     3,     4,
+       5,     6,    -1,    80,     9,    -1,    -1,  1221,  1222,  1223,
+      -1,  1177,    -1,    90,    -1,    92,    93,  1183,    78,    79,
+      80,    81,    82,    83,    84,    -1,    31,    -1,   470,  1243,
+    1244,    -1,  1246,  1247,    -1,  1249,    41,  1209,  1210,   726,
+      -1,    -1,    47,  1156,    -1,    -1,    -1,    -1,    -1,    54,
+      -1,    56,    57,    -1,    -1,  1154,  1155,     7,     8,     9,
+     887,   888,    -1,   890,    14,    70,    -1,    -1,    -1,    -1,
+      -1,    -1,  1185,    -1,    -1,    80,    -1,    -1,    -1,    -1,
+      85,    31,  1181,  1182,    -1,    90,    36,    92,    93,  1303,
+    1304,  1305,  1306,  1307,   921,    45,  1310,   539,    -1,    -1,
+     542,    -1,   789,    -1,   546,   547,   548,   549,   550,    -1,
+      60,  1210,  1211,    -1,    -1,    -1,    -1,   559,    -1,    -1,
+     807,   808,    -1,   810,    -1,    -1,    -1,    -1,    -1,    -1,
+     572,    -1,    -1,  1347,  1348,  1248,  1302,    -1,   825,    -1,
+      -1,    -1,     3,     4,     5,   972,     7,     8,     9,    76,
+      77,    78,    79,    80,    81,    82,    83,    84,    -1,    -1,
+     847,    -1,    -1,    -1,  1378,  1379,    -1,  1339,     4,     5,
+      31,    -1,     8,     9,    -1,    36,    -1,    -1,    14,    -1,
+      -1,    -1,    -1,    -1,   626,    -1,    -1,     3,     4,     5,
+       6,   633,   879,   880,    -1,    56,    57,   884,   885,    -1,
+      36,    -1,  1416,  1417,    -1,  1419,    -1,  1306,  1307,    45,
+      -1,    47,   899,    -1,   901,  1042,   903,    -1,    54,    -1,
+      56,    57,    38,    39,    -1,    41,    -1,  1054,    -1,    -1,
+      -1,    -1,    -1,    -1,    70,    -1,    -1,    -1,    54,    -1,
+      56,    57,    -1,    -1,    80,    -1,    -1,    -1,  1462,    -1,
+      -1,    -1,    -1,    -1,    90,   942,    92,    93,    -1,     3,
+       4,     5,     6,    -1,    -1,   952,    -1,  1481,  1482,  1483,
+      -1,    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     967,    -1,    16,    -1,    -1,    -1,    -1,  1501,  1502,  1503,
+      -1,    -1,    26,   980,    -1,    -1,    -1,    41,    32,    33,
+     742,    35,    -1,    37,    48,  1418,    -1,    -1,    -1,   996,
+      44,    -1,    56,    57,  1141,    -1,    -1,    -1,    -1,  1533,
+    1534,  1535,    -1,    57,    -1,    59,  1013,  1541,  1542,    -1,
+      -1,    -1,    -1,    67,    -1,    -1,    80,    -1,  1504,    -1,
+      74,    85,    -1,     4,     5,    -1,    -1,     8,     9,    -1,
+      -1,    85,    86,    14,    -1,    -1,    -1,    -1,    -1,  1186,
+      -1,  1533,  1534,  1462,   806,    -1,    -1,    28,    -1,    30,
+     812,  1058,    -1,    -1,   108,    36,    -1,    -1,    -1,   764,
+      -1,    -1,    -1,    -1,    45,    -1,   404,  1553,    -1,     4,
+       5,    -1,    -1,    54,     9,    56,    57,    -1,  1612,    -1,
+      -1,    -1,   136,    -1,   138,    -1,    -1,    -1,   142,   143,
+      -1,    -1,    -1,   147,   148,    -1,    31,   151,   152,   153,
+     805,  1108,  1109,   463,    -1,  1112,   811,    -1,  1255,    -1,
+     470,    92,  1259,   167,    -1,  1534,  1535,   171,   880,    54,
+      -1,    56,    57,   177,   178,  1132,    -1,    -1,    -1,     4,
+       5,    -1,   470,    -1,     9,    70,    -1,    -1,    -1,    -1,
+      -1,   195,   196,   197,    -1,    80,    -1,  1294,    -1,    -1,
+      -1,    -1,    -1,    -1,   916,    -1,    31,    92,    -1,    -1,
+     922,  1308,    -1,    -1,   926,    -1,    -1,    -1,    -1,    -1,
+     224,    -1,    -1,    -1,    -1,    -1,    -1,   537,    -1,    54,
+      -1,    56,    57,    -1,    -1,    -1,    -1,   241,  1195,    -1,
+    1197,    -1,  1199,    -1,    -1,    70,   250,    -1,    -1,    -1,
+    1207,    -1,   964,    -1,   966,    80,    -1,   261,   970,  1216,
+    1217,    -1,   917,    -1,   919,    -1,    -1,    92,  1225,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,  1373,    -1,    -1,    -1,
+    1377,    -1,    -1,    -1,  1241,  1242,    -1,   597,    -1,    -1,
+      -1,    -1,   602,   195,   196,   299,   300,    -1,    -1,    -1,
+      -1,  1013,  1399,  1400,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,  1268,    -1,    -1,  1026,     3,     4,     5,     6,    -1,
+      -1,    -1,    -1,   633,  1036,    -1,    -1,    -1,    -1,    -1,
+     640,  1043,     3,     4,     5,     6,    -1,    -1,   626,    -1,
+     344,    -1,  1299,  1055,   348,   633,   350,   351,   352,    -1,
+      -1,    -1,    -1,    41,    -1,    -1,    -1,   361,    -1,    -1,
+      31,    -1,    -1,    -1,    -1,    -1,    54,    -1,    56,    57,
+      41,  1328,    -1,    -1,    62,    -1,    47,  1089,    -1,  1091,
+      -1,    -1,    70,    54,    -1,    56,    57,    -1,    -1,    -1,
+      -1,   395,    80,    -1,    -1,    -1,    -1,    85,    -1,    70,
+     404,    -1,   406,   407,    92,    -1,    -1,  1119,    -1,    80,
+      -1,  1368,    -1,    -1,    85,   623,   624,   421,    -1,    90,
+     424,    92,    93,    -1,    -1,    -1,    -1,  1384,    -1,    -1,
+      -1,    -1,   436,  1088,    -1,  1090,    -1,    -1,    -1,    -1,
+     444,    -1,    -1,  1155,    -1,    -1,    -1,    -1,    -1,  1406,
+      -1,    -1,    -1,    -1,   742,    -1,     3,     4,     5,     6,
+       3,     4,     5,     6,     7,     8,     9,    -1,   472,   473,
+    1182,    14,   476,    -1,   478,   479,   480,   481,    -1,    -1,
+      -1,   485,    -1,    -1,    -1,    28,   490,    30,    31,   493,
+      -1,  1146,    -1,    36,    41,    -1,    -1,    -1,    41,  1211,
+      -1,    48,    45,    -1,    47,  1462,   510,    -1,    -1,    56,
+      57,    54,    -1,    56,    57,   825,    -1,    -1,   806,    -1,
+      -1,    -1,  1479,  1480,   812,    -1,    -1,    70,    -1,     3,
+       4,     5,     6,    80,    -1,     9,    -1,    80,    85,    -1,
+      -1,    -1,    85,   547,   548,   549,   550,    90,    -1,    92,
+      93,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
+    1517,    -1,     3,     4,     5,     6,    -1,    41,    -1,   879,
+     880,   473,    -1,    -1,   476,   885,   478,   479,    -1,  1234,
+      54,    -1,    56,    57,  1239,    -1,    -1,    -1,   490,   899,
+    1547,   901,    -1,   903,    -1,  1307,    70,    -1,    -1,    -1,
+      41,    -1,    -1,   607,    -1,   609,    80,    48,    -1,    -1,
+      -1,    85,    -1,    -1,    -1,    56,    57,   621,    92,   623,
+     624,    -1,   626,    -1,    -1,    -1,    -1,    -1,    -1,   633,
+      -1,    -1,    -1,   637,   922,    -1,    -1,  1292,   926,    80,
+      -1,    -1,   952,    -1,    85,    -1,    -1,    -1,   652,    -1,
+      -1,    -1,    -1,  1365,    -1,     3,     4,     5,     6,    -1,
+      -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   676,    -1,    -1,    -1,   964,    -1,    -1,   683,
+      -1,    -1,   970,    31,    -1,    -1,   996,   691,   692,   693,
+     694,   695,   696,    41,  1651,    -1,    -1,   905,    -1,    -1,
+     908,    -1,    -1,  1013,    -1,    -1,    54,    -1,    56,    57,
+      -1,    -1,   920,    -1,    -1,    -1,   924,   925,     3,     4,
+       5,     6,    70,    -1,    -1,  1013,    -1,    -1,    -1,    -1,
+      -1,    -1,    80,    -1,   738,    -1,    -1,    85,   742,    -1,
+      -1,    -1,  1397,  1398,    92,    -1,   750,   751,   752,   753,
+     754,    -1,    -1,    -1,   758,  1043,    41,    -1,    -1,  1414,
+     968,   969,    -1,    -1,    -1,    -1,    -1,  1055,    -1,    54,
+      -1,    56,    57,    -1,    -1,    -1,    -1,    62,    -1,    -1,
+      -1,    -1,    -1,   787,    -1,    70,   790,    -1,   792,    -1,
+      -1,  1503,    -1,   797,   798,    80,   800,    -1,    -1,    -1,
+      85,  1089,   806,  1091,    -1,    -1,    -1,    92,   812,     3,
+       4,     5,     6,    -1,    -1,   819,   820,   821,    -1,  1474,
+    1475,    -1,    -1,  1535,    -1,    -1,    -1,   831,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,  1490,  1491,    31,    -1,    -1,
+      -1,    -1,  1554,    -1,    -1,    -1,    -1,    41,   750,   751,
+     752,   753,     3,     4,     5,     6,   758,    -1,     9,    -1,
+      54,    -1,    56,    57,    -1,    -1,    -1,  1155,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,    -1,    -1,
+      31,    -1,    -1,    -1,    -1,  1195,    80,  1197,    -1,  1199,
+      41,    85,    -1,    -1,  1182,    -1,    47,    -1,    92,    -1,
+     904,   905,    -1,    54,   908,    56,    57,   911,    -1,    -1,
+      -1,    -1,   916,    -1,    -1,    -1,   920,    -1,   922,    70,
+     924,   925,   926,  1211,    -1,    -1,   930,    -1,   932,    80,
+       3,     4,     5,     6,    85,    -1,    -1,    -1,    -1,    90,
+      -1,    92,    93,    -1,    -1,  1153,  1154,    72,    73,    74,
+      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
+     964,    -1,   966,    -1,   968,   969,   970,     6,    41,    -1,
+    1178,  1179,  1180,  1181,    -1,    48,    -1,    16,    -1,  1187,
+      -1,    -1,    -1,    56,    57,    -1,    25,    26,    -1,  1299,
+      -1,    -1,    -1,    32,    33,    -1,    35,    -1,    37,    -1,
+      -1,  1209,  1210,     4,     5,    44,    -1,    80,     9,  1013,
+      -1,    -1,    85,    -1,    -1,    -1,    -1,    -1,    57,  1307,
+      59,    -1,  1026,  1027,  1028,  1029,    -1,    -1,    67,    -1,
+      31,    -1,    -1,    -1,    -1,    74,    -1,    -1,    -1,  1043,
+      -1,    -1,  1046,    -1,    -1,    -1,    47,    86,    -1,    -1,
+      -1,  1055,    -1,    54,    -1,    56,    57,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,  1068,    -1,   968,   969,    -1,    70,
+      -1,    -1,  1076,    -1,    -1,    -1,    -1,    -1,    -1,    80,
+      -1,    -1,    -1,    -1,    -1,  1089,    -1,  1091,    -1,    90,
+      -1,    92,    93,    -1,    -1,  1303,  1304,  1305,  1306,   138,
+      -1,    -1,  1310,   142,   143,    -1,    -1,    -1,    -1,   148,
+      -1,    -1,   151,   152,   153,  1119,    -1,    -1,    -1,    -1,
+    1124,  1125,    -1,  1127,    -1,  1027,  1028,  1029,   167,    -1,
+      -1,    -1,   171,    -1,    -1,    -1,    -1,    -1,   177,   178,
+      -1,    -1,    -1,    -1,    -1,    -1,  1150,    -1,    -1,  1153,
+    1154,  1155,  1462,    -1,    -1,    -1,   195,   196,   197,    71,
+      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
+      82,    83,    84,  1177,  1178,  1179,  1180,  1181,  1182,  1183,
+      -1,    -1,    -1,  1187,    -1,   224,     3,     4,     5,     6,
+      -1,    -1,     9,    73,    74,    75,    76,    77,    78,    79,
+      80,    81,    82,    83,    84,  1209,  1210,  1211,  1416,  1417,
+      -1,  1419,    -1,    -1,    31,  1503,    -1,  1221,  1222,  1223,
+    1224,    -1,   261,    -1,    41,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    56,
+      57,  1245,    -1,    -1,    -1,    -1,  1250,    -1,    -1,  1253,
+      -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,
+     299,   300,    -1,    80,    -1,    -1,  1554,    -1,    85,    -1,
+      -1,    -1,    -1,    -1,    -1,    92,  1178,  1179,  1180,  1181,
+      -1,    -1,    -1,    -1,    -1,  1187,    -1,     3,     4,     5,
+       6,    -1,    -1,  1501,  1502,    -1,    -1,    -1,  1302,  1303,
+    1304,  1305,  1306,  1307,    -1,   344,  1310,  1209,  1210,   348,
+      -1,   350,   351,   352,    -1,    31,    -1,    -1,   357,  1221,
+    1222,    -1,   361,    -1,    -1,    41,    -1,    -1,    -1,    -1,
+      -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,
+      56,    57,  1346,  1347,  1348,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    70,    -1,   395,    -1,    -1,    -1,
+      -1,  1365,    -1,    -1,    80,   404,    -1,   406,   407,    85,
+      -1,    -1,    -1,    -1,    90,    -1,    92,    93,     3,     4,
+       5,     6,   421,    -1,     9,   424,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   436,    -1,    -1,
+      -1,  1303,  1304,  1305,  1306,   444,    31,    -1,  1310,    -1,
+      -1,    -1,  1416,  1417,    -1,  1419,    41,    -1,    -1,    -1,
+      -1,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,    54,
+      -1,    56,    57,   472,   473,    -1,    -1,   476,    -1,   478,
+     479,   480,   481,    -1,    -1,    70,   485,    -1,    -1,    -1,
+      -1,   490,    -1,    -1,   493,    80,    -1,    -1,  1462,    -1,
+      85,    -1,    -1,    -1,    -1,    90,    -1,    92,    93,    -1,
+     509,   510,    -1,    -1,     3,     4,     5,     6,     7,     8,
+       9,    -1,    -1,    -1,    -1,    14,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1501,  1502,  1503,
+    1504,    -1,    31,    -1,    -1,    -1,    -1,    36,   547,   548,
+     549,   550,    41,    -1,  1416,  1417,    45,  1419,    47,    -1,
+      -1,    -1,    -1,    -1,    -1,    54,    -1,    56,    57,  1533,
+    1534,  1535,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,
+       6,    70,    -1,     9,    -1,    -1,    -1,    -1,    -1,  1553,
+    1554,    80,    -1,    -1,    -1,  1559,    85,    -1,    -1,    -1,
+      -1,    90,    -1,    92,    93,    31,    -1,    -1,   607,    -1,
+     609,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,
+      -1,    47,    -1,    -1,   623,   624,    -1,   626,    54,    -1,
+      56,    57,    -1,    -1,   633,     3,     4,     5,     6,  1501,
+    1502,    -1,    -1,    -1,    70,    -1,    -1,   646,    -1,    -1,
+      -1,    -1,    -1,   652,    80,    -1,    -1,    -1,    -1,    85,
+      -1,    -1,    -1,    31,    90,    -1,    92,    93,    -1,    -1,
+      -1,  1533,  1534,    41,    -1,    -1,    -1,   676,    -1,    47,
+      -1,     3,     4,     5,     6,   684,    54,     9,    56,    57,
+      -1,    -1,   691,   692,   693,   694,   695,   696,    -1,    -1,
+      -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    31,
+      -1,    -1,    80,    -1,    -1,    -1,    -1,    85,    -1,    41,
+     719,    -1,    90,    -1,    92,    93,    -1,    -1,    -1,    -1,
+      -1,    -1,    54,    -1,    56,    57,    -1,    -1,    -1,   738,
+      -1,    -1,    -1,   742,    -1,    -1,    -1,    -1,    70,    -1,
+      -1,   750,   751,   752,   753,   754,    -1,    -1,    80,   758,
+      -1,    -1,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,
+      92,    -1,    -1,     1,    -1,    -1,     4,     5,    -1,    -1,
+       8,     9,    -1,    -1,    -1,    -1,    14,    -1,   787,    -1,
+      -1,   790,    -1,   792,    -1,    -1,    -1,    -1,   797,   798,
+      28,   800,    30,    -1,    -1,    -1,    -1,   806,    36,    -1,
+      38,    39,    -1,   812,    -1,    -1,    -1,    45,    -1,    47,
+     819,   820,   821,    -1,    -1,    -1,    54,    -1,    56,    57,
+      -1,    59,   831,    -1,    -1,    63,    64,    65,    66,    67,
+      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,
+      78,    79,    80,    81,    82,    -1,    84,    85,    86,    87,
+      -1,    -1,    -1,     4,     5,    93,    94,     8,     9,    -1,
+      -1,    -1,    -1,    14,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   110,    -1,    -1,    -1,    -1,    28,    -1,    30,
+      -1,     3,     4,     5,     6,    36,    -1,     9,    -1,    -1,
+      -1,    -1,    -1,    -1,    45,   904,   905,    -1,    -1,   908,
+      -1,    -1,   911,    54,    -1,    56,    57,   916,    -1,    31,
+      -1,   920,    -1,   922,    -1,   924,   925,   926,    -1,    41,
+      -1,   930,    -1,   932,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    54,    -1,    56,    57,    -1,     1,    -1,     3,
+       4,     5,     6,     7,     8,     9,    -1,    -1,    70,    -1,
+      14,    -1,    -1,    -1,    -1,   964,    -1,   966,    80,   968,
+     969,   970,    -1,    85,    28,    -1,    30,    31,    32,    -1,
+      92,    -1,    36,    37,    -1,    -1,    -1,    41,    -1,    -1,
+      -1,    45,    46,    -1,    48,    -1,    -1,    -1,    -1,    -1,
+      54,    -1,    56,    57,    -1,    -1,    60,    -1,    62,    -1,
+      -1,    -1,    -1,    -1,  1013,    -1,    70,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    80,  1026,  1027,  1028,
+    1029,    85,    -1,    -1,    -1,    -1,    -1,    -1,    92,    -1,
+      -1,    -1,  1041,    -1,  1043,    -1,    -1,  1046,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   109,  1055,    -1,     1,    -1,
+       3,     4,     5,     6,     7,     8,     9,    -1,    -1,    -1,
+      -1,    14,    -1,    -1,    -1,    -1,    -1,  1076,    -1,    -1,
+       3,     4,     5,     6,    -1,    28,     9,    30,    31,    32,
+    1089,    -1,  1091,    36,    37,    -1,    -1,    -1,    41,    -1,
+      -1,    -1,    45,    46,    -1,    48,    -1,    -1,    31,    -1,
+      -1,    54,    -1,    56,    57,    -1,    -1,    60,    41,    62,
+    1119,    -1,    -1,    -1,    -1,  1124,  1125,    70,  1127,    -1,
+      -1,    54,    -1,    56,    57,    -1,    -1,    80,    -1,    -1,
+      -1,    -1,    85,    -1,    -1,    -1,    -1,    70,    -1,    92,
+      -1,  1150,    -1,    -1,  1153,  1154,  1155,    80,    -1,    -1,
+      -1,    -1,    85,     4,     5,    -1,   109,     8,     9,    92,
+      -1,    -1,    -1,    14,    -1,    -1,    -1,    -1,  1177,  1178,
+    1179,  1180,  1181,  1182,  1183,    -1,    -1,    28,  1187,    30,
+       3,     4,     5,     6,  1193,    36,     9,    -1,    -1,     3,
+       4,     5,     6,    -1,    45,     9,    -1,    -1,    -1,    -1,
+    1209,  1210,  1211,    54,    -1,    56,    57,    -1,    31,    -1,
+      -1,    -1,  1221,  1222,  1223,  1224,    -1,    31,    41,    -1,
+      -1,  1230,    -1,     6,    -1,    -1,    -1,    41,    -1,    -1,
+      -1,    54,    -1,    56,    57,    -1,  1245,    -1,    -1,    -1,
+      54,  1250,    56,    57,  1253,    -1,    -1,    70,    -1,    32,
+      33,    -1,    35,    12,    37,    -1,    70,    80,    -1,    -1,
+      -1,    44,    85,    -1,    -1,    -1,    80,    -1,    -1,    92,
+      -1,    85,    -1,    -1,    57,    -1,    59,    -1,    92,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,  1302,  1303,  1304,  1305,  1306,  1307,    82,
+      -1,  1310,    -1,    62,    63,    64,    65,    66,    67,    68,
+      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
+      79,    80,    81,    82,    83,    84,  1335,    -1,    -1,     3,
+       4,     5,     6,     7,     8,     9,    -1,  1346,  1347,  1348,
+      14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   135,   136,    -1,   138,  1365,    31,    -1,   142,
+     143,    -1,    36,   146,    -1,   148,    -1,    41,   151,   152,
+     153,    45,    -1,    47,    -1,   158,    -1,    -1,    -1,    -1,
+      54,    -1,    56,    57,   167,    -1,    -1,    -1,   171,    -1,
+      -1,    -1,    -1,    -1,   177,   178,    70,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    80,  1416,  1417,    -1,
+    1419,    85,   195,   196,   197,    -1,    90,    -1,    92,    93,
+      -1,     1,   205,     3,     4,     5,     6,     7,     8,     9,
+      10,    11,    12,    13,    14,    -1,    -1,    -1,    -1,    -1,
+      -1,   224,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,
+      30,    31,    32,  1462,    34,    35,    36,    -1,    38,    39,
+      40,    41,    42,    43,    -1,    45,    -1,    -1,    -1,    49,
+      50,    51,    52,    53,    54,    -1,    56,    57,   261,    -1,
+      -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,
+      70,    -1,  1501,  1502,  1503,  1504,    -1,    -1,    78,    79,
+      80,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,
+      -1,    -1,    92,    -1,    -1,    -1,     3,     4,     5,     6,
+      -1,    -1,    -1,    -1,  1533,  1534,  1535,    -1,   108,    -1,
+     110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,  1553,  1554,    -1,    -1,   331,    -1,
+    1559,    -1,    -1,    -1,    41,     1,    -1,     3,     4,     5,
+       6,     7,     8,     9,    -1,   348,    -1,    54,    14,    56,
+      57,    -1,    -1,   356,    -1,    -1,    -1,    -1,   361,    -1,
+      -1,    -1,    28,    70,    30,    31,    32,    -1,    -1,    -1,
+      36,    37,    -1,    80,    -1,    41,    -1,    -1,    85,    45,
+      46,    -1,    48,    -1,    -1,    92,    -1,    -1,    54,    -1,
+      56,    57,   395,    -1,    60,    -1,    62,     3,     4,     5,
+       6,    -1,    -1,   406,    70,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,   421,    85,
+      -1,   424,    -1,    -1,    -1,    31,    92,   430,   431,   432,
+      -1,    -1,    -1,   436,    -1,    41,    -1,    -1,    -1,    -1,
+      -1,   444,    -1,   109,    -1,    -1,    -1,    -1,    54,    -1,
+      56,    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,   472,
+     473,    -1,    -1,   476,    80,   478,   479,   480,   481,    85,
+      -1,    -1,   485,    -1,    -1,    -1,    92,   490,    -1,    -1,
+     493,    -1,    -1,     1,    -1,     3,     4,     5,     6,     7,
+       8,     9,    10,    11,    -1,    13,    14,   510,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      28,    29,    30,    31,    32,    -1,    34,    35,    36,    -1,
+      38,    39,    40,    41,    42,    43,   539,    45,    -1,   542,
+      -1,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
+      58,    -1,    60,    61,   557,   558,   559,    -1,    -1,    67,
+      -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,   572,
+      78,    79,    80,    -1,    -1,    -1,    -1,    85,    86,    87,
+      -1,     6,    -1,    -1,    92,    -1,    -1,    -1,    -1,    -1,
+      -1,     1,    -1,     3,     4,     5,     6,     7,     8,     9,
+      -1,    -1,   110,    -1,    14,    -1,    -1,    32,    33,    -1,
+      35,    -1,    37,    -1,    -1,    -1,    -1,   620,    28,    44,
+      30,    31,    32,    -1,    -1,    -1,    36,    37,    -1,    -1,
+     633,    41,    57,    -1,    59,    45,    46,    -1,    48,    -1,
+      -1,    -1,    -1,    -1,    54,    -1,    56,    57,    -1,   652,
+      60,    -1,    62,    -1,    -1,     3,     4,     5,     6,    -1,
+      70,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      80,    -1,    -1,   676,    -1,    85,    -1,    -1,    -1,    -1,
+     683,    -1,    92,    31,    -1,    -1,    -1,    -1,   691,   692,
+     693,   694,    -1,    41,    -1,    -1,    -1,    -1,    -1,   109,
+      -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    56,    57,
+      -1,    -1,    -1,   138,    -1,    -1,    -1,   142,   143,    -1,
+      -1,    -1,    70,   148,    -1,    -1,   151,   152,   153,    -1,
+      -1,    -1,    80,    -1,    -1,   738,    -1,    85,    -1,   742,
+      -1,    -1,   167,    -1,    92,    -1,   171,   750,   751,   752,
+     753,   754,   177,   178,    -1,   758,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     195,   196,   197,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   790,    -1,   792,
+      -1,    -1,    -1,    -1,   797,   798,    -1,   800,    -1,   224,
+       1,    -1,     3,     4,     5,     6,     7,     8,     9,    -1,
+      -1,    12,    -1,    14,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   825,    -1,    25,    -1,    27,    -1,    -1,    -1,
+      31,    -1,    -1,    -1,    -1,    36,   261,    -1,    -1,    -1,
+      41,    -1,    -1,    -1,    45,    -1,    47,    -1,    -1,    -1,
+      -1,    -1,    -1,    54,    -1,    56,    57,    58,    59,    60,
+      -1,    62,    63,    64,    65,    66,    67,    68,    69,    70,
+      71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
+      81,    82,    83,    84,    85,    86,    87,    -1,    -1,    90,
+      91,    92,    93,    94,    -1,    96,    97,    -1,    -1,    -1,
+      -1,   102,    -1,    -1,    -1,    -1,   107,   108,   109,    -1,
+     111,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   924,   925,   926,    -1,    -1,    -1,   930,   931,    -1,
+      -1,    -1,   357,    -1,    -1,    -1,   361,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,
+       4,     5,     6,     7,     8,     9,    -1,    -1,    -1,    -1,
+      14,    -1,    -1,    -1,    -1,   968,   969,   970,    -1,    -1,
+      -1,    -1,   975,    27,    28,    35,    30,    31,    32,    -1,
+      -1,   406,    36,    -1,    -1,    -1,    -1,    41,    -1,    -1,
+      44,    45,    46,    -1,    48,    -1,   421,    57,    -1,   424,
+      54,    -1,    56,    57,    -1,    -1,    60,    -1,    -1,    -1,
+    1013,   436,    -1,    -1,    -1,    -1,    70,    -1,    -1,   444,
+      -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,
+      -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,    92,    -1,
+      -1,    -1,    -1,  1046,    98,    -1,    -1,   472,   473,    -1,
+      -1,   476,    -1,   478,   479,   480,    -1,    -1,    -1,    -1,
+     485,    -1,    -1,    -1,  1067,   490,    -1,    -1,   493,    -1,
+      -1,    -1,    -1,  1076,    -1,     1,    -1,     3,     4,     5,
+       6,     7,     8,     9,    -1,   510,    -1,    -1,    14,    -1,
+      -1,   151,   152,   153,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    28,    -1,    30,    31,    32,    -1,    -1,    -1,
+      36,    -1,    -1,    -1,    -1,    41,    -1,   177,    -1,    45,
+      -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    54,    -1,
+      56,    57,    -1,    -1,    -1,   195,   196,   197,    -1,    -1,
+      -1,    -1,    -1,    -1,    70,    -1,    -1,  1150,    -1,    -1,
+    1153,  1154,  1155,  1156,    80,    -1,    -1,    -1,    -1,    85,
+      -1,    -1,    -1,    -1,   224,    -1,    92,     3,     4,     5,
+       6,    -1,    98,    -1,  1177,  1178,  1179,  1180,  1181,  1182,
+    1183,    -1,  1185,    -1,  1187,     4,     5,    -1,     7,     8,
+       9,    -1,    -1,    12,    -1,    14,   621,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    41,  1209,  1210,  1211,    28,
+      -1,    30,    31,    -1,    -1,    -1,    -1,    36,    54,    -1,
+      56,    57,    -1,    -1,    60,    -1,    45,   652,    47,    -1,
+      -1,    -1,    -1,    -1,    70,    54,    -1,    56,    57,    -1,
+     300,    -1,  1245,    -1,    80,    -1,    -1,  1250,    -1,    85,
+    1253,    70,    -1,    -1,    -1,    -1,    92,    -1,    -1,    -1,
+      -1,    80,    -1,    -1,    -1,    -1,   691,   692,   693,   694,
+      -1,    90,    -1,    92,    93,    -1,    -1,    -1,    -1,    -1,
+      -1,     3,     4,     5,     6,    -1,    -1,    -1,     4,     5,
+     350,   351,   352,     9,    -1,    -1,    -1,    -1,    -1,  1302,
+    1303,  1304,  1305,  1306,  1307,    -1,    -1,  1310,    -1,    31,
+      -1,    -1,    -1,   738,    -1,    31,    -1,   742,    -1,    41,
+      -1,    -1,    -1,    -1,    -1,   750,   751,    -1,    -1,    -1,
+      -1,    47,    54,   758,    56,    57,    -1,    -1,    54,    -1,
+      56,    57,    -1,  1346,  1347,  1348,   406,    31,    70,    -1,
+      -1,    -1,    -1,    -1,    70,    -1,    -1,    -1,    80,    -1,
+      -1,    -1,    -1,    85,    80,   790,    -1,   792,    -1,    -1,
+      92,    -1,   797,   798,    90,   800,    92,    93,    -1,    63,
+      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
+      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
+      84,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   472,   473,    -1,    -1,   476,    -1,   478,   479,
+     480,   481,    -1,    -1,    -1,   485,    -1,    -1,    -1,    -1,
+     490,    -1,    -1,   493,    -1,     3,     4,     5,     6,     7,
+       8,     9,    10,    11,    12,    13,    14,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1462,
+      28,    29,    30,    31,    32,    -1,    34,    35,    36,    -1,
+      38,    39,    40,    41,    42,    43,    -1,    45,    57,    47,
+      -1,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
+      -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,
+      -1,    -1,    70,    82,    -1,    -1,    85,   932,     4,     5,
+      78,    79,    80,     9,    -1,    -1,    -1,    85,    86,    87,
+      -1,    -1,    90,    -1,    92,    93,    -1,   106,    -1,   108,
+    1533,  1534,  1535,    -1,    -1,    31,    -1,    -1,    -1,    -1,
+      -1,    -1,   110,   968,   969,   970,    -1,    -1,    -1,   609,
+      -1,    47,    -1,    -1,    -1,    -1,  1559,    -1,    54,    -1,
+      56,    57,    -1,   623,   624,    -1,   626,    -1,    -1,    -1,
+      -1,    -1,    -1,   633,    70,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,  1013,    -1,
+      -1,    -1,   652,    -1,    90,    -1,    92,    93,   177,    68,
+      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
+      79,    80,    81,    82,    83,    84,   195,   196,   197,    -1,
+      -1,  1046,    -1,    -1,    -1,    -1,   205,    -1,    -1,    -1,
+      -1,   691,    -1,   693,   694,    -1,   696,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   224,    -1,    -1,    -1,    -1,
+      -1,  1076,    -1,    -1,    -1,    -1,     4,     5,    -1,     7,
+       8,     9,     4,     5,    12,    -1,    14,     9,    -1,    -1,
+      -1,   250,    -1,    -1,    -1,    -1,    -1,    -1,   738,    -1,
+      28,    -1,    30,    31,    -1,   264,    -1,    -1,    36,    31,
+     750,   751,   752,   753,   754,    -1,    -1,    45,   758,    47,
+      -1,    -1,    -1,    -1,    -1,    47,    54,    -1,    56,    57,
+      -1,    -1,    54,    -1,    56,    57,    -1,    -1,    -1,    -1,
+      -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    70,    -1,
+      -1,    -1,    80,    -1,    -1,    -1,    -1,   797,    80,    -1,
+      -1,    -1,    90,    -1,    92,    93,    -1,    -1,    90,    -1,
+      92,    93,  1177,  1178,  1179,  1180,  1181,  1182,    -1,   819,
+     820,   821,  1187,    -1,     3,     4,     5,     6,     7,     8,
+       9,   831,    -1,    -1,    -1,    14,    -1,   356,   357,    -1,
+      -1,    -1,    -1,    -1,  1209,  1210,  1211,    -1,    -1,    28,
+      -1,    30,    31,    32,    -1,    -1,    -1,    36,    -1,    -1,
+      -1,    -1,    41,    -1,    -1,    -1,    45,    -1,    -1,    48,
+      -1,    -1,    -1,    -1,    -1,    54,    -1,    56,    57,    -1,
+    1245,    -1,    -1,    -1,    -1,  1250,    -1,   406,  1253,    -1,
+      -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    80,    -1,    -1,   904,   905,    85,    -1,   908,    -1,
+      -1,   911,    -1,    92,    -1,    -1,    -1,    -1,    -1,    98,
+     920,    -1,    -1,    -1,   924,   925,   926,    -1,    -1,    -1,
+     930,    -1,    -1,    -1,    -1,    -1,     4,     5,  1303,  1304,
+      -1,     9,    -1,    -1,    -1,  1310,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   472,   473,    -1,    -1,   476,    -1,   478,
+     479,   480,   481,    31,    -1,    -1,   485,    -1,   968,   969,
+     970,   490,    -1,    -1,   493,    -1,    -1,    -1,    -1,    47,
+      -1,  1346,  1347,  1348,    -1,    -1,    54,    -1,    56,    57,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    80,  1013,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    90,    -1,    92,    93,    -1,  1027,  1028,  1029,
+      -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,
+       6,     7,     8,     9,    10,    11,  1046,    13,    14,    15,
+      -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    -1,    34,    35,
+      36,    -1,    38,    39,    40,    41,    42,    43,    44,    45,
+      46,    -1,    -1,    49,    50,    51,    52,    53,    54,    -1,
+      56,    57,    58,    -1,    60,    61,    -1,  1462,    -1,    -1,
+      -1,    67,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    78,    79,    80,    -1,    -1,   636,   637,    85,
+      86,    87,    -1,    -1,  1124,  1125,    92,  1127,    -1,    -1,
+      96,    -1,    -1,   652,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,   109,   110,    -1,    -1,    -1,    -1,    -1,
+    1150,    -1,    -1,  1153,  1154,  1155,    -1,    -1,    -1,    -1,
+      -1,    -1,     4,     5,    -1,    -1,    -1,     9,  1533,  1534,
+    1535,    -1,   691,    -1,   693,   694,    -1,  1177,  1178,  1179,
+    1180,  1181,  1182,  1183,    -1,    -1,    -1,  1187,    -1,    31,
+      -1,    -1,    -1,    -1,  1559,   350,   351,   352,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,  1209,
+    1210,  1211,    54,    -1,    56,    57,    -1,    -1,    -1,   738,
+      -1,  1221,  1222,  1223,  1224,    -1,    -1,    -1,    70,    -1,
+      -1,   750,   751,   752,   753,   754,   755,    -1,    80,   758,
+      -1,    -1,    -1,    -1,    -1,  1245,    -1,    -1,    90,    -1,
+      92,    93,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,   784,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    16,    -1,    -1,    -1,    -1,   797,    -1,
+      -1,    -1,    25,    26,    -1,    -1,    -1,    -1,    -1,    32,
+      33,    -1,    35,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,  1302,  1303,  1304,  1305,  1306,  1307,    -1,    -1,
+    1310,    -1,     3,     4,     5,     6,     7,     8,     9,    -1,
+      -1,    -1,    -1,    14,    67,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    30,
+      31,    -1,    -1,    -1,    -1,    36,  1346,    -1,  1348,    -1,
+      41,    -1,    -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    54,    -1,    56,    57,    -1,    -1,    60,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
+      -1,    -1,    -1,   126,    -1,   128,    -1,    -1,    -1,    80,
+      -1,    -1,   135,   136,    85,    -1,    -1,    -1,    -1,   142,
+     143,    92,    -1,   146,   147,   148,    -1,   150,   151,   152,
+     153,    -1,   931,   932,   933,    -1,  1416,  1417,    -1,  1419,
+       4,     5,    -1,     7,     8,     9,    -1,    -1,    -1,    -1,
+      14,    -1,    -1,     4,     5,    -1,     7,     8,     9,    -1,
+      -1,    12,    -1,    14,    28,    -1,    30,    31,    -1,   968,
+     969,   970,    36,    -1,    -1,    -1,   975,    28,    -1,    30,
+      31,    45,  1462,    -1,    48,    36,    -1,    -1,   623,   624,
+      54,   626,    56,    57,    45,    -1,    -1,    -1,   633,    -1,
+      -1,    -1,    -1,    54,    -1,    56,    57,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,  1013,    -1,    -1,   240,   241,    -1,
+      -1,  1501,  1502,  1503,  1504,    -1,    -1,    -1,  1027,  1028,
+    1029,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   261,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1046,    -1,    -1,
+      -1,    -1,    -1,  1533,  1534,  1535,   691,    -1,   693,   694,
+      -1,   696,    -1,    -1,    -1,    -1,    -1,    -1,  1067,    -1,
+      -1,    -1,    -1,  1553,    -1,    -1,    -1,   300,    -1,  1559,
+      -1,    -1,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,
+       5,     6,     7,     8,     9,    -1,    -1,    -1,    -1,    14,
+      -1,    -1,    -1,   738,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    28,    -1,    30,    31,    32,    -1,    -1,
+      -1,    36,    -1,    -1,    -1,   348,    41,   350,   351,    -1,
+      45,    46,    -1,    48,    -1,    -1,    -1,    -1,    -1,    54,
+      -1,    56,    57,    -1,    -1,    60,    -1,    62,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    70,    -1,  1156,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
+      85,    -1,   395,    -1,    -1,    -1,    -1,    92,  1177,  1178,
+    1179,  1180,  1181,  1182,  1183,    -1,  1185,    -1,  1187,    -1,
+      -1,   414,    -1,    -1,    -1,    -1,   831,    -1,   421,    -1,
+      -1,   424,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    1209,  1210,  1211,   436,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,  1221,  1222,  1223,  1224,    -1,     4,     5,    -1,
+       7,     8,     9,    -1,    -1,    12,    -1,    14,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,  1245,    -1,    -1,    -1,
+      -1,    28,    -1,    30,    31,    -1,    -1,    -1,    -1,    36,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,   904,
+     905,    -1,    -1,   908,    -1,    -1,   911,    54,    -1,    56,
+      57,    -1,    -1,    -1,   507,   920,   509,    -1,    -1,   924,
+     925,   926,    -1,    -1,    -1,   930,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,  1302,  1303,  1304,  1305,  1306,  1307,    -1,
+     533,  1310,    -1,    -1,    -1,     1,    -1,     3,     4,     5,
+       6,     7,     8,     9,    -1,    -1,    -1,    -1,    14,    -1,
+      -1,    -1,    -1,   968,   969,   970,    -1,    -1,    -1,    -1,
+      -1,    -1,    28,    -1,    30,    31,    -1,  1346,    -1,  1348,
+      36,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    45,
+      -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    54,    -1,
+      56,    57,    -1,    -1,    60,    -1,    -1,    -1,  1013,    -1,
+      -1,    -1,    -1,    -1,    70,    -1,   609,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    80,    -1,    -1,   620,   621,    85,
+     623,   624,    -1,    -1,    -1,    -1,    92,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1416,  1417,  1418,
+    1419,    -1,    -1,    -1,     3,     4,     5,     6,     7,     8,
+       9,    -1,    -1,    12,    -1,    14,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
+      -1,    30,    31,   676,    -1,    -1,    -1,    36,    -1,    -1,
+     683,   684,    41,  1462,    -1,    -1,    45,    -1,    47,    -1,
+      -1,    -1,   695,    -1,    -1,    54,    -1,    56,    57,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    70,    -1,    -1,    -1,    -1,   719,    -1,    -1,    -1,
+      -1,    80,  1501,  1502,  1503,  1504,    85,    -1,    -1,    -1,
+      -1,    90,    -1,    92,    93,  1150,    -1,    -1,  1153,  1154,
+    1155,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,  1533,  1534,  1535,    -1,    -1,    -1,
+      -1,    -1,  1177,  1178,  1179,  1180,  1181,  1182,  1183,    -1,
+      -1,    -1,  1187,    -1,  1553,    -1,    -1,    -1,    -1,    -1,
+    1559,   784,    -1,    -1,   787,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,  1209,  1210,  1211,    67,    68,    69,
+      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
+      80,    81,    82,    83,    84,    -1,   819,   820,   821,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   831,     3,
+       4,     5,     6,     7,     8,     9,    -1,    -1,    12,    -1,
+      14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    28,    -1,    30,    31,    -1,    -1,
+      -1,    -1,    36,    -1,    -1,    -1,    -1,    41,    -1,    -1,
+      -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,
+      54,    -1,    56,    57,    -1,    -1,    -1,  1302,  1303,  1304,
+    1305,  1306,  1307,    -1,    -1,  1310,    70,    -1,    -1,    -1,
+      -1,   904,   905,    -1,    -1,   908,    80,    -1,   911,    -1,
+      -1,    85,    -1,    -1,    -1,    -1,    90,   920,    92,    93,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   930,     1,    -1,
+       3,     4,     5,     6,     7,     8,     9,    10,    11,    -1,
+      13,    14,    15,    -1,    17,    18,    19,    20,    21,    22,
+      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
+      -1,    34,    35,    36,    -1,    38,    39,    40,    41,    42,
+      43,    44,    45,    46,    -1,    -1,    49,    50,    51,    52,
+      53,    54,    -1,    56,    57,    58,    -1,    60,    61,    -1,
+      -1,    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,
+      -1,  1416,  1417,    -1,  1419,    78,    79,    80,    -1,    -1,
+      -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    92,
+      -1,    -1,    -1,    96,     3,     4,     5,     6,     7,     8,
+       9,    -1,    -1,    12,    -1,    14,    -1,   110,  1041,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
+      -1,    30,    31,    -1,    -1,    -1,    -1,    36,    -1,    -1,
+      -1,    -1,    41,    -1,    -1,  1068,    45,    -1,    47,    -1,
+      -1,    -1,    -1,    -1,    -1,    54,    -1,    56,    57,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,  1501,  1502,  1503,  1504,
+      -1,    70,    -1,     4,     5,    -1,     7,     8,     9,    -1,
+      -1,    80,    -1,    14,    -1,    -1,    85,    -1,    -1,    -1,
+      -1,    90,    -1,    92,    93,    -1,    -1,    28,    -1,    30,
+      31,  1124,  1125,    -1,  1127,    36,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    45,    -1,    -1,    -1,  1553,    -1,
+      -1,    -1,    -1,    54,    -1,    56,    57,  1150,    -1,    -1,
+    1153,  1154,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,
+       7,     8,     9,    10,    11,    12,    13,    14,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    1193,    28,    29,    30,    31,    32,    -1,    34,    35,    36,
+      -1,    38,    39,    40,    41,    42,    43,    -1,    45,    -1,
+      47,    -1,    49,    50,    51,    52,    53,    54,    -1,    56,
+      57,    58,    -1,    -1,    61,    -1,    -1,  1230,    -1,    -1,
+      67,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    78,    79,    80,    -1,  1248,    -1,  1250,    85,    86,
+      87,    -1,    -1,    90,    -1,    92,    93,     1,    -1,     3,
+       4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
+      14,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    -1,
+      34,    35,    36,    -1,    38,    39,    40,    41,    42,    43,
+      -1,    45,    -1,    47,    -1,    49,    50,    51,    52,    53,
+      54,    -1,    56,    57,    58,    -1,    -1,    61,    -1,    -1,
+      -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    78,    79,    80,    -1,    -1,    -1,
+      -1,    85,    86,    87,    -1,    -1,    90,    -1,    92,    93,
+       1,    -1,     3,     4,     5,     6,    -1,     8,     9,    10,
+      11,    -1,    13,    14,    -1,    -1,   110,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
+      -1,    32,    -1,    34,    35,    36,    -1,    38,    39,    40,
+      41,    42,    43,    -1,    45,    -1,    -1,    -1,    49,    50,
+      51,    52,    53,    54,    -1,    56,    57,    58,    -1,    -1,
+      61,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    80,
+      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
+      -1,    92,    93,     1,    -1,     3,     4,     5,     6,    -1,
+       8,     9,    10,    11,    -1,    13,    14,    -1,   109,   110,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      28,    29,    30,    31,    32,    -1,    34,    35,    36,    -1,
+      38,    39,    40,    41,    42,    43,    -1,    45,    -1,    -1,
+      -1,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
+      58,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,
+      -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      78,    79,    80,    -1,    -1,    -1,    -1,    85,    86,    87,
+      -1,    -1,    -1,     1,    92,     3,     4,     5,     6,    -1,
+       8,     9,    10,    11,    -1,    13,    14,    -1,    -1,    -1,
+      -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      28,    29,    30,    -1,    32,    -1,    34,    35,    36,    -1,
+      38,    39,    40,    41,    42,    43,    -1,    45,    -1,    -1,
+      -1,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
+      58,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,
+      -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      78,    79,    80,    -1,    -1,    -1,    -1,    85,    86,    87,
+      -1,    -1,    -1,    -1,    92,    93,     1,    -1,     3,     4,
+       5,     6,    -1,     8,     9,    10,    11,    -1,    13,    14,
+      -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    28,    29,    30,    -1,    32,    -1,    34,
+      35,    36,    -1,    38,    39,    40,    41,    42,    43,    -1,
+      45,    -1,    -1,    -1,    49,    50,    51,    52,    53,    54,
+      -1,    56,    57,    58,    -1,    -1,    61,    -1,    -1,    -1,
+      -1,    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,
+      85,    86,    87,    -1,    -1,    -1,     1,    92,     3,     4,
+       5,     6,    -1,     8,     9,    10,    11,    -1,    13,    14,
+      -1,    -1,    -1,    -1,   109,   110,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    28,    29,    30,    -1,    32,    -1,    34,
+      35,    36,    -1,    38,    39,    40,    41,    42,    43,    -1,
+      45,    -1,    -1,    -1,    49,    50,    51,    52,    53,    54,
+      -1,    56,    57,    58,    -1,    -1,    61,    -1,    -1,    -1,
+      -1,    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,
+      85,    86,    87,    -1,    -1,    -1,     1,    92,     3,     4,
+       5,     6,    -1,     8,     9,    10,    11,    -1,    13,    14,
+      -1,    -1,    -1,    -1,   109,   110,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    28,    29,    30,    -1,    32,    -1,    34,
+      35,    36,    -1,    38,    39,    40,    41,    42,    43,    -1,
+      45,    -1,    -1,    -1,    49,    50,    51,    52,    53,    54,
+      -1,    56,    57,    58,    -1,    -1,    61,    -1,    -1,    -1,
+      -1,    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,
+      85,    86,    87,    -1,    -1,    -1,    -1,    92,    -1,    -1,
+       1,    -1,     3,     4,     5,     6,   101,     8,     9,    10,
+      11,    -1,    13,    14,    -1,   110,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
+      31,    32,    -1,    34,    35,    36,    -1,    38,    39,    40,
+      41,    42,    43,    -1,    45,    -1,    -1,    -1,    49,    50,
+      51,    52,    53,    54,    -1,    56,    57,    58,    -1,    -1,
+      61,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    80,
+      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
+       1,    92,     3,     4,     5,     6,    -1,     8,     9,    10,
+      11,    -1,    13,    14,    -1,    -1,    -1,    -1,    -1,   110,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
+      -1,    32,    -1,    34,    35,    36,    -1,    38,    39,    40,
+      41,    42,    43,    -1,    45,    -1,    -1,    -1,    49,    50,
+      51,    52,    53,    54,    -1,    56,    57,    58,    -1,    -1,
+      61,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    80,
+      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
+       1,    92,     3,     4,     5,     6,    -1,     8,     9,    10,
+      11,    -1,    13,    14,    -1,    -1,    -1,    -1,    -1,   110,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
+      -1,    32,    -1,    34,    35,    36,    -1,    38,    39,    40,
+      41,    42,    43,    -1,    45,    -1,    -1,    -1,    49,    50,
+      51,    52,    53,    54,    -1,    56,    57,    -1,    -1,    -1,
+      61,    62,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    80,
+      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
+       1,    92,     3,     4,     5,     6,    -1,     8,     9,    10,
+      11,    -1,    13,    14,    -1,    -1,    -1,    -1,    -1,   110,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
+      -1,    32,    -1,    34,    35,    36,    -1,    38,    39,    40,
+      41,    42,    43,    -1,    45,    -1,    -1,    -1,    49,    50,
+      51,    52,    53,    54,    -1,    56,    57,    -1,    -1,    60,
+      61,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    80,
+      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
+       1,    92,     3,     4,     5,     6,    -1,     8,     9,    10,
+      11,    -1,    13,    14,    -1,    -1,    -1,    -1,    -1,   110,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
+      -1,    32,    -1,    34,    35,    36,    -1,    38,    39,    40,
+      41,    42,    43,    -1,    45,    -1,    -1,    -1,    49,    50,
+      51,    52,    53,    54,    -1,    56,    57,    -1,    -1,    -1,
+      61,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    80,
+      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
+       1,    92,     3,     4,     5,     6,    -1,     8,     9,    10,
+      11,    -1,    13,    14,    -1,    -1,    -1,   108,    -1,   110,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
+      -1,    32,    -1,    34,    35,    36,    -1,    38,    39,    40,
+      41,    42,    43,    -1,    45,    -1,    -1,    -1,    49,    50,
+      51,    52,    53,    54,    -1,    56,    57,    -1,    -1,    -1,
+      61,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    80,
+      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
+       1,    92,     3,     4,     5,     6,    -1,     8,     9,    10,
+      11,    -1,    13,    14,    -1,    -1,    -1,    -1,    -1,   110,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
+      -1,    32,    -1,    34,    35,    36,    -1,    38,    39,    40,
+      41,    42,    43,    -1,    45,    -1,    -1,    -1,    49,    50,
+      51,    52,    53,    54,    -1,    56,    57,    -1,    -1,    -1,
+      61,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    80,
+      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
+       1,    92,     3,     4,     5,     6,    -1,     8,     9,    10,
+      11,    -1,    13,    14,    -1,    -1,    -1,    -1,    -1,   110,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    30,
+      -1,    32,    -1,    34,    35,    36,    -1,    38,    39,    40,
+      41,    42,    43,    -1,    45,    -1,    -1,    -1,    49,    50,
+      51,    52,    53,    54,    -1,    56,    57,    -1,    -1,    -1,
+      61,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    80,
+      -1,    -1,    -1,    -1,    85,    86,    87,     3,     4,     5,
+       6,    92,     8,     9,    10,    11,    -1,    13,    14,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,
+      -1,    -1,    28,    29,    30,    -1,    32,    -1,    34,    35,
+      36,    -1,    38,    39,    40,    41,    42,    43,    -1,    45,
+      -1,    -1,    -1,    49,    50,    51,    52,    53,    54,    -1,
+      56,    57,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,
+      -1,    67,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,    85,
+      86,    87,    -1,    -1,    -1,    -1,    92,    69,    70,    71,
+      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
+      82,    83,    84,    -1,   110,   111,     3,     4,     5,     6,
+       7,     8,     9,    10,    11,    -1,    13,    14,    15,    -1,
+      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
+      27,    28,    29,    30,    31,    32,    -1,    34,    35,    36,
+      -1,    38,    39,    40,    41,    42,    43,    44,    45,    46,
+      -1,    -1,    49,    50,    51,    52,    53,    54,    -1,    56,
+      57,    58,    -1,    60,    61,    -1,    -1,    -1,    -1,    -1,
+      67,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    78,    79,    80,    -1,    -1,    -1,    -1,    85,    86,
+      87,    -1,    -1,    -1,    -1,    92,    -1,    -1,    -1,    96,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   109,   110,     3,     4,     5,     6,     7,     8,
+       9,    10,    11,    -1,    13,    14,    15,    -1,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    31,    32,    -1,    34,    35,    36,    -1,    38,
+      39,    40,    41,    42,    43,    44,    45,    46,    -1,    -1,
+      49,    50,    51,    52,    53,    54,    -1,    56,    57,    58,
+      -1,    60,    61,    -1,    -1,    -1,    -1,    -1,    67,    -1,
+      -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
+      79,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
+      -1,    -1,    -1,    92,    -1,    -1,    -1,    96,     3,     4,
+       5,     6,     7,     8,     9,    10,    11,    -1,    13,    14,
+      15,   110,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    -1,    34,
+      35,    36,    -1,    38,    39,    40,    41,    42,    43,    44,
+      45,    46,    -1,    -1,    49,    50,    51,    52,    53,    54,
+      -1,    56,    57,    58,    -1,    60,    61,    -1,    -1,    -1,
+      -1,    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,
+      85,    86,    87,    -1,    -1,    -1,    -1,    92,    -1,    -1,
+      -1,    96,     3,     4,     5,     6,     7,     8,     9,    10,
+      11,    -1,    13,    14,    15,   110,    17,    18,    19,    20,
+      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
+      31,    32,    -1,    34,    35,    36,    -1,    38,    39,    40,
+      41,    42,    43,    44,    45,    46,    -1,    -1,    49,    50,
+      51,    52,    53,    54,    -1,    56,    57,    -1,    -1,    60,
+      61,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    70,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    80,
+      -1,    -1,    -1,    -1,    85,    86,    87,    -1,    -1,    -1,
+      -1,    92,    -1,    -1,    -1,    96,     3,     4,     5,     6,
+       7,     8,     9,    10,    11,    12,    13,    14,    -1,   110,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    28,    29,    30,    31,    32,    -1,    34,    35,    36,
+      -1,    38,    39,    40,    41,    42,    43,    -1,    45,    -1,
+      47,    -1,    49,    50,    51,    52,    53,    54,    -1,    56,
+      57,    -1,    -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,
+      67,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    78,    79,    80,    -1,    -1,    -1,    -1,    85,    86,
+      87,    -1,    -1,    90,    -1,    92,    93,     3,     4,     5,
+       6,    -1,     8,     9,    10,    11,    -1,    13,    14,    -1,
+      -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    28,    29,    30,    31,    32,    -1,    34,    35,
+      36,    -1,    38,    39,    40,    41,    42,    43,    -1,    45,
+      -1,    47,    -1,    49,    50,    51,    52,    53,    54,    -1,
+      56,    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    67,    -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,    85,
+      86,    87,    -1,    -1,    90,    -1,    92,    93,     3,     4,
+       5,     6,    -1,     8,     9,    10,    11,    -1,    13,    14,
+      -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    28,    29,    30,    31,    32,    -1,    34,
+      35,    36,    -1,    38,    39,    40,    41,    42,    43,    -1,
+      45,    -1,    47,    -1,    49,    50,    51,    52,    53,    54,
+      -1,    56,    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    78,    79,    80,    -1,    -1,    -1,    -1,
+      85,    86,    87,    -1,    -1,    90,    -1,    92,    93,     3,
+       4,     5,     6,    -1,     8,     9,    10,    11,    -1,    13,
+      14,    -1,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    28,    29,    30,    31,    32,    -1,
+      34,    35,    36,    -1,    38,    39,    40,    41,    42,    43,
+      -1,    45,    -1,    -1,    -1,    49,    50,    51,    52,    53,
+      54,    -1,    56,    57,    -1,    -1,    -1,    61,    -1,    -1,
+      -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    78,    79,    80,    -1,    -1,    -1,
+      -1,    85,    86,    87,     3,     4,     5,     6,    92,     8,
+       9,    10,    11,    -1,    13,    14,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    28,
+      29,    30,    -1,    32,    -1,    34,    35,    36,    -1,    38,
+      39,    40,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
+      49,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
+      -1,    60,    61,    -1,    -1,    -1,    -1,    -1,    67,    -1,
+      -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
+      79,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
+      -1,    -1,    -1,    92,     3,     4,     5,     6,     7,     8,
+       9,    10,    11,    -1,    13,    14,    -1,    -1,    -1,    -1,
+      -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,
+      29,    30,    31,    32,    -1,    34,    35,    36,    -1,    38,
+      39,    40,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
+      49,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
+      -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
+      79,    80,    -1,    -1,    -1,    -1,    85,    86,    87,     3,
+       4,     5,     6,    92,     8,     9,    10,    11,    -1,    13,
+      14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   110,    -1,    -1,    28,    29,    30,    31,    32,    -1,
+      34,    35,    36,    -1,    38,    39,    40,    41,    42,    43,
+      -1,    45,    -1,    -1,    -1,    49,    50,    51,    52,    53,
+      54,    -1,    56,    57,    -1,    -1,    -1,    61,    -1,    -1,
+      -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    78,    79,    80,    -1,    -1,    -1,
+      -1,    85,    86,    87,     3,     4,     5,     6,    92,     8,
+       9,    10,    11,    -1,    13,    14,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    28,
+      29,    30,    -1,    32,    -1,    34,    35,    36,    -1,    38,
+      39,    40,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
+      49,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
+      -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    -1,
+      -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
+      79,    80,    -1,    -1,    -1,    -1,    85,    86,    87,     3,
+       4,     5,     6,    92,     8,     9,    10,    11,    -1,    13,
+      14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   110,    -1,    -1,    28,    29,    30,    -1,    32,    -1,
+      34,    35,    36,    -1,    38,    39,    40,    41,    42,    43,
+      -1,    45,    -1,    -1,    -1,    49,    50,    51,    52,    53,
+      54,    -1,    56,    57,    -1,    -1,    -1,    61,    -1,    -1,
+      -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    78,    79,    80,    -1,    -1,    -1,
+      -1,    85,    86,    87,     3,     4,     5,     6,    92,     8,
+       9,    10,    11,    -1,    13,    14,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    28,
+      29,    30,    -1,    32,    -1,    34,    35,    36,    -1,    38,
+      39,    40,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
+      49,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
+      -1,    -1,    61,    -1,    -1,    -1,    -1,    -1,    67,    -1,
+      -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
+      79,    80,    -1,    -1,    -1,    -1,    85,    86,    87,     3,
+       4,     5,     6,    92,     8,     9,    10,    11,    -1,    13,
+      14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,   110,    -1,    -1,    28,    29,    30,    -1,    32,    -1,
+      34,    35,    36,    -1,    38,    39,    40,    41,    42,    43,
+      -1,    45,    -1,    -1,    -1,    49,    50,    51,    52,    53,
+      54,    -1,    56,    57,    58,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    78,    79,    80,    -1,    -1,    -1,
+      -1,    85,    86,    87,     3,     4,     5,     6,    92,     8,
+       9,    10,    11,    -1,    13,    14,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,    28,
+      29,    30,    -1,    32,    -1,    34,    35,    36,    -1,    38,
+      39,    40,    41,    42,    43,    -1,    45,    -1,    -1,    -1,
+      49,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,
+      -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,
+      79,    80,    -1,    -1,    -1,    -1,    85,    86,    87,    -1,
+      -1,    -1,    -1,    92,    93,     3,     4,     5,     6,    -1,
+       8,     9,    10,    11,    -1,    13,    14,    -1,    -1,    -1,
+      -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      28,    29,    30,    31,    32,    -1,    34,    35,    36,    -1,
+      38,    39,    40,    41,    42,    43,    -1,    45,    -1,    -1,
+      -1,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
+      -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      78,    79,    80,    -1,    -1,    -1,    -1,    85,    86,    87,
+       3,     4,     5,     6,    92,     8,     9,    10,    11,    -1,
+      13,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   110,    -1,    -1,    28,    29,    30,    -1,    32,
+      -1,    34,    35,    36,    -1,    38,    39,    40,    41,    42,
+      43,    -1,    45,    -1,    -1,    -1,    49,    50,    51,    52,
+      53,    54,    -1,    56,    57,    -1,    -1,    -1,    61,    -1,
+      -1,    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    78,    79,    80,    -1,    -1,
+      -1,    -1,    85,    86,    87,     3,     4,     5,     6,    92,
+       8,     9,    10,    11,    -1,    13,    14,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,
+      28,    29,    30,    31,    32,    -1,    34,    35,    36,    -1,
+      38,    39,    40,    41,    42,    43,    -1,    45,    -1,    -1,
+      -1,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
+      -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      78,    79,    80,    -1,    -1,    -1,    -1,    85,    86,    87,
+       3,     4,     5,     6,    92,     8,     9,    10,    11,    -1,
+      13,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   110,    -1,    -1,    28,    29,    30,    -1,    32,
+      -1,    34,    35,    36,    -1,    38,    39,    40,    41,    42,
+      43,    -1,    45,    -1,    -1,    -1,    49,    50,    51,    52,
+      53,    54,    -1,    56,    57,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    78,    79,    80,    -1,    -1,
+      -1,    -1,    85,    86,    87,     3,     4,     5,     6,    92,
+       8,     9,    10,    11,    -1,    13,    14,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,
+      28,    29,    30,    -1,    32,    -1,    34,    35,    36,    -1,
+      38,    39,    40,    41,    42,    43,    -1,    45,    -1,    -1,
+      -1,    49,    50,    51,    52,    53,    54,    -1,    56,    57,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
+      -1,    -1,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      78,    79,    80,    -1,    -1,    -1,    -1,    85,    86,    87,
+       3,     4,     5,     6,    92,     8,     9,    10,    11,    -1,
+      13,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,   110,    -1,    -1,    28,    29,    30,    -1,    32,
+      -1,    34,    35,    36,    -1,    38,    39,    40,    41,    42,
+      43,    -1,    45,    -1,    -1,    -1,    49,    50,    51,    52,
+      53,    54,    -1,    56,    57,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    67,    -1,    -1,    70,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    78,    79,    80,    -1,    -1,
+      -1,    -1,    85,    86,    87,    -1,    -1,    -1,    -1,    92,
+       3,     4,     5,     6,     7,     8,     9,    -1,    -1,    12,
+      -1,    14,    -1,    -1,    -1,    -1,    -1,   110,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    28,    -1,    30,    31,    -1,
+      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    41,    -1,
+      -1,    -1,    45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    54,    -1,    56,    57,    -1,    -1,    -1,     3,     4,
+       5,     6,     7,     8,     9,    -1,    -1,    70,    -1,    14,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,
+      -1,    -1,    85,    28,    -1,    30,    31,    -1,    -1,    92,
+      -1,    36,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,
+      45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,
+      -1,    56,    57,    -1,    -1,    -1,    -1,    62,     3,     4,
+       5,     6,     7,     8,     9,    70,    -1,    -1,    -1,    14,
+      -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
+      85,    -1,    -1,    28,    -1,    30,    31,    92,    -1,    -1,
+      -1,    36,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,
+      45,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,
+      -1,    56,    57,    -1,    -1,    60,     3,     4,     5,     6,
+       7,     8,     9,    -1,    -1,    70,    -1,    14,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,
+      85,    28,    -1,    30,    31,    -1,    -1,    92,    -1,    36,
+      -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    45,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    54,    -1,    56,
+      57,    -1,    -1,    -1,     3,     4,     5,     6,     7,     8,
+       9,    -1,    -1,    70,    -1,    14,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    80,    -1,    -1,    -1,    -1,    85,    28,
+      -1,    30,    31,    -1,    -1,    92,    -1,    36,    -1,    -1,
+      -1,    -1,    41,    -1,    -1,    -1,    45,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    54,    -1,    56,    57,     3,
+       4,     5,     6,     7,     8,     9,    -1,    -1,    -1,    -1,
+      14,    70,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    80,    -1,    -1,    -1,    -1,    85,    31,    -1,    -1,
+      -1,    -1,    36,    92,    -1,    -1,    -1,    41,    -1,    -1,
+      -1,    45,    -1,    47,    -1,    -1,    -1,    -1,    -1,    -1,
+      54,    -1,    56,    57,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    80,    -1,    -1,    -1,
+      -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,    92,    63,
+      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
+      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
+      84,    63,    64,    65,    66,    67,    68,    69,    70,    71,
+      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
+      82,    83,    84,    -1,    -1,    -1,    -1,   111,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    59,    -1,    -1,   107,    63,    64,    65,    66,
+      67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
+      77,    78,    79,    80,    81,    82,    83,    84,    62,    63,
+      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
+      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
+      84,    63,    64,    65,    66,    67,    68,    69,    70,    71,
+      72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
+      82,    83,    84,    63,    64,    65,    66,    67,    68,    69,
+      70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
+      80,    81,    82,    83,    84,    70,    71,    72,    73,    74,
+      75,    76,    77,    78,    79,    80,    81,    82,    83,    84
+};
 
-#ifndef alloca
-#ifdef __GNUC__
-#define alloca __builtin_alloca
-#else /* not GNU C.  */
-#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
-#include <alloca.h>
-#else /* not sparc */
-#if defined (MSDOS) && !defined (__TURBOC__)
-#include <malloc.h>
-#else /* not MSDOS, or __TURBOC__ */
-#if defined(_AIX)
-#include <malloc.h>
- #pragma alloca
-#else /* not MSDOS, __TURBOC__, or _AIX */
-#ifdef __hpux
-#ifdef __cplusplus
-extern "C" {
-void *alloca (unsigned int);
+/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
+   symbol of state STATE-NUM.  */
+static const yytype_uint16 yystos[] =
+{
+       0,   113,   114,   115,     0,   121,   122,   121,     1,     3,
+       4,     5,     6,     7,     8,     9,    14,    27,    28,    30,
+      31,    32,    36,    41,    44,    45,    46,    48,    54,    56,
+      57,    60,    70,    80,    85,    92,    98,   119,   120,   123,
+     126,   128,   130,   134,   135,   142,   145,   149,   150,   155,
+     167,   178,   180,   206,   208,   213,   214,   227,   228,   230,
+     231,   233,   237,   245,   248,   249,   262,   270,   271,   272,
+     273,   274,   276,   277,   300,   307,   308,   309,   311,   313,
+     315,   318,   319,   320,   327,   328,   399,   400,    60,   109,
+      73,    54,    73,    54,    73,    73,    48,     3,     4,     5,
+      56,    57,    58,   164,   178,   309,   319,   326,   328,    92,
+      92,    92,     4,     5,    56,    57,    58,   164,     3,     4,
+       5,    56,    57,   178,   321,   322,   323,   324,   328,     4,
+       5,    44,    56,    57,   314,   319,   328,    73,   176,    54,
+      73,    73,   248,   300,   310,   311,   319,   328,   300,   310,
+     393,    70,    80,    92,   206,   211,   212,   214,   248,   312,
+     313,   327,   123,    92,    60,    58,    98,   117,     1,     7,
+      48,   119,   134,   142,   143,   144,   149,   227,   230,   237,
+     262,   107,   148,   120,   238,    25,   147,   158,   159,    60,
+      54,    93,   301,   303,    60,    70,    80,    92,   224,   235,
+     243,   305,   306,   311,   318,   319,   327,     7,     9,    60,
+     150,   233,   236,   244,   248,   311,     7,     8,     9,   229,
+     232,   234,   248,   262,    59,    60,   249,     7,     8,     9,
+      36,    58,   103,   104,   105,   164,   166,   178,   179,   248,
+     319,   328,    58,    62,   275,    62,   278,    58,     9,   233,
+     328,   238,     5,    48,    80,   180,   206,   209,   213,   318,
+     320,   299,   309,   318,   319,     1,    38,    39,    47,    59,
+      63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
+      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
+      84,    85,    86,    87,    93,    94,   110,   231,   233,   300,
+     373,    73,     3,     9,    10,    11,    13,    29,    34,    35,
+      38,    39,    40,    42,    43,    49,    50,    51,    52,    53,
+      56,    57,    61,    67,    70,    78,    79,    80,    85,    86,
+      87,    92,   110,   119,   183,   184,   185,   186,   198,   203,
+     204,   205,   206,   215,   217,   218,   219,   220,   222,   226,
+     231,   233,   300,   315,   316,   317,   319,   328,   183,   183,
+     207,   176,   109,   264,    58,    48,   309,   318,   187,   196,
+     205,   226,   187,   226,    92,   125,    58,    63,    54,    54,
+      54,    54,    54,    54,     3,     4,     5,    48,    56,    57,
+     164,   178,   324,   325,   322,   131,     4,     5,   206,   209,
+     210,   210,   314,    74,   136,   150,   227,   230,   233,   311,
+     184,   183,   311,   310,   319,   310,     4,     5,   164,   178,
+     211,   300,   312,   211,   300,   312,   211,   108,    56,    57,
+      70,    80,    92,   206,   212,   108,   299,   220,   114,   116,
+      48,   145,   149,   143,   117,   148,   235,   236,    60,    60,
+      92,   247,   248,     3,     1,    62,    96,   146,   160,   221,
+     363,    47,    63,    92,   254,    60,   111,   301,   302,    47,
+      92,   299,   248,   300,   304,   305,   300,   304,    70,    80,
+      92,   248,   304,   327,   238,    59,    60,    93,   303,   318,
+     299,   229,   232,    59,    60,   238,     7,   234,   248,   229,
+     234,   224,   239,    73,   164,   179,   164,   319,   278,   393,
+     265,   232,   246,    47,    92,     6,   164,   325,   400,    47,
+      92,     9,   310,     5,    80,   180,    93,    93,    62,   111,
+     232,    70,    80,   319,   327,   398,   207,    92,     9,    92,
+     198,   233,    92,   198,   204,   204,    92,    73,    73,    73,
+      73,   205,   164,   204,   204,   204,     1,    70,    80,    92,
+     187,   206,   211,   216,   226,   204,    74,    76,   182,    59,
+     204,    58,    92,   198,    63,    64,    65,    66,    67,    68,
+      69,    70,    71,    72,    73,    74,    75,    76,    77,    78,
+      79,    80,    81,    82,    83,    84,    47,    92,    47,    86,
+      87,    91,    92,    93,    94,    58,    92,   201,   298,   373,
+      93,   204,    11,     1,     8,    48,    85,   209,   210,   316,
+     319,   328,    47,    70,    80,    90,    92,    93,   203,   225,
+     327,   332,   333,    92,   225,   332,   319,   328,   332,    47,
+      92,     3,    39,   208,   218,   315,   328,   400,   182,   182,
+     183,   150,   227,   233,   311,   164,   296,   297,   109,   263,
+     164,   108,    59,    59,   108,   108,   108,     7,     8,     9,
+     164,   250,   251,   252,   116,   124,   127,   325,    73,    54,
+     133,   210,   314,   328,    45,   135,   137,   139,   140,   141,
+     226,   228,   230,   231,   233,   270,   300,   390,   392,   171,
+     224,    60,   170,   182,   182,   310,   310,   108,   211,   310,
+     108,   109,   118,   118,   144,   149,    60,    60,   220,   161,
+     364,     1,    58,   339,   340,     1,    58,   205,   255,   196,
+     197,   205,   187,   111,     1,    12,   197,   226,   233,   383,
+     384,   388,   389,   390,   392,    61,   395,   305,   304,   304,
+     300,   300,    70,    80,    92,   319,   327,   108,   299,   241,
+     247,   239,   111,   302,   299,   304,   229,   239,   241,   238,
+     183,   164,     4,     5,     7,    30,    37,   178,   279,   280,
+     281,   282,   307,   321,   328,     1,     5,    46,    60,    62,
+     119,   128,   135,   150,   156,   157,   180,   227,   230,   283,
+     285,   286,   287,   311,   241,   299,   151,    73,    73,    54,
+      73,   299,   153,    47,    92,    47,    92,   111,   111,   299,
+     299,   299,   183,   197,   226,    92,   225,   226,   187,   226,
+     226,   233,   226,   226,   226,   108,   211,   108,   108,   340,
+     108,   185,     3,     4,     5,    56,    57,    93,   164,   255,
+     256,   226,   205,   205,     1,   187,   378,   205,   205,   205,
+     205,   205,   205,   205,   205,   205,   205,   205,   205,   205,
+     205,   205,   205,   205,   205,   205,   197,   197,   187,   200,
+     200,    92,   298,    47,    63,    92,   202,    70,    80,    93,
+     327,   329,   330,   111,   187,    54,   164,     8,    47,    92,
+      47,    92,    47,    92,   248,   300,   331,   332,   300,   331,
+     226,   248,   331,   384,   111,   302,    92,   299,    47,   299,
+     299,    47,    92,    93,    70,    80,    92,   197,   203,   211,
+     248,   319,   328,   319,   197,   181,   181,   182,   175,   224,
+      60,   174,    63,    59,   269,   296,     1,   205,     1,   205,
+      59,   108,    92,   109,   116,   133,    54,   183,    60,   210,
+     314,   138,   164,   270,    59,    74,    63,    63,    70,    80,
+      92,   224,   327,   332,   311,   319,   224,   224,   138,   164,
+      63,   177,   169,   168,   177,   181,   108,    60,   148,   118,
+     118,   108,     3,    47,    56,    57,    92,   162,   163,   165,
+     307,   321,   146,   340,   341,   109,   256,   108,   108,   108,
+      12,    59,    62,    92,   108,    12,    59,    62,    12,   311,
+     391,   392,   394,    63,   385,    47,    92,   300,   300,   299,
+      63,   111,   395,   247,    74,   393,    92,   393,    59,     7,
+      37,   393,    47,    92,   205,   286,   227,   286,   238,   238,
+      25,    58,    62,    96,    47,    92,     3,     4,    62,   150,
+     224,   288,   290,   292,   293,   305,   311,   319,   328,   150,
+     156,   289,   293,   311,    37,   109,   284,   286,    60,   109,
+     238,   395,   383,   183,   183,   183,   395,   383,   299,   152,
+     299,   154,   398,   398,   398,   182,   108,   108,   108,   108,
+     108,    74,    74,    74,    74,   108,   108,   205,    62,    59,
+     268,   108,    62,   108,   108,   111,   197,   197,   226,   200,
+     202,   255,   197,   233,   299,   299,   187,   299,    93,   204,
+     111,    85,    73,    47,   197,   197,   197,   332,   331,   331,
+     108,   108,   111,   395,   395,   331,   299,   383,   111,   302,
+     248,   108,   108,    70,    80,    92,   319,   108,   177,   173,
+     172,   177,   205,   297,   109,   269,   251,   108,     3,   197,
+     109,    60,   182,   138,   141,   226,   185,   248,   300,   300,
+      70,    80,    92,   248,   318,   319,   327,   299,   205,   177,
+     177,   148,   197,    59,    47,    92,    47,    92,    47,    92,
+     340,    33,   109,   193,   336,   337,   338,    59,   109,    70,
+      80,    92,   206,   211,   315,   385,    63,   386,   226,   396,
+     397,    70,    80,    92,   248,   242,    63,   181,   187,   226,
+     393,   393,   393,   281,   299,   383,    60,   247,   247,   299,
+     383,    62,    62,   205,   238,    59,   238,   238,   319,   238,
+      59,    62,   247,   285,   247,   108,   182,   182,   182,   108,
+     395,   383,   395,   383,    92,    92,    92,    92,   111,   255,
+     164,   255,   109,   205,   109,   108,   108,   199,   226,   108,
+     108,   329,   329,   111,   329,   302,   204,     8,   183,   108,
+     108,   108,   299,   395,   108,   111,   177,   177,   109,    59,
+     108,   108,   248,   300,   300,    70,    80,    92,   327,   318,
+     299,   108,   163,   197,   197,   197,   365,   164,   253,     1,
+       3,     4,     5,    15,    17,    18,    19,    20,    21,    22,
+      23,    24,    25,    26,    44,    46,    57,    60,    96,   119,
+     120,   126,   129,   130,   187,   223,   227,   230,   233,   334,
+     335,   340,   342,   347,   348,   366,   375,   338,   109,   211,
+     108,   255,   101,   255,   387,    59,   108,   255,   240,   108,
+     108,   280,   395,   108,   254,   254,   395,   108,   205,   205,
+     247,   247,     3,     4,    62,   291,   294,   295,   305,   311,
+     247,   247,     5,   247,   295,   266,   254,   299,   299,   108,
+     108,   187,   187,   187,   187,   255,    62,    93,   202,   199,
+     111,    47,   182,   395,   299,   197,   300,   300,   319,   299,
+     108,   108,   108,    95,   369,   370,    59,    60,    60,   109,
+      62,    62,    62,   343,   350,   352,   354,   358,   205,    62,
+      60,    60,    60,   187,    80,   164,   164,    56,   132,   328,
+      62,   367,   223,     9,   377,    60,    60,   224,   235,    60,
+     236,   311,    92,   235,     1,   109,   335,   347,    16,   109,
+     347,   108,   396,   255,   299,   299,   247,   247,   254,    62,
+      62,   205,   238,   238,   254,   254,   254,   261,   395,   395,
+     299,   299,   108,   108,   108,   108,   255,   187,   202,   395,
+     108,    70,    80,    92,   248,   371,   370,   164,    47,    92,
+     189,   189,   340,   345,   346,    92,    92,    12,    62,   362,
+      60,   187,    60,    54,    56,   164,    56,   132,   164,   340,
+      92,    60,    60,    70,    80,    92,    60,   109,   349,   395,
+     395,   205,   205,   247,   247,   247,     1,   102,   260,   267,
+     395,   395,   111,   248,    92,   374,   187,   191,   233,   373,
+     344,   351,    17,   348,    58,   223,   376,   378,   191,   205,
+     360,   347,    60,    54,   164,   368,   220,   345,   247,   247,
+     254,   254,     1,   205,   259,    12,   392,   372,   108,   224,
+     345,    58,   194,   348,   353,   193,   355,    60,   108,    62,
+     347,   369,    62,   108,   107,   107,    97,   257,   258,   108,
+     108,   340,   238,   195,    47,    92,   188,     1,   190,   191,
+     359,   361,    11,   379,   380,   381,    60,   147,   148,   247,
+     193,   187,    60,    60,   345,   347,    92,    62,   108,    59,
+       1,   146,   363,    63,   108,   356,   187,   379,    60,   381,
+     339,   192,   378,   108,    62,   108,   255,   108,    11,   382,
+      60,   357,    59,   108,   194,    11,    60
 };
-#else /* not __cplusplus */
-void *alloca ();
-#endif /* not __cplusplus */
-#endif /* __hpux */
-#endif /* not _AIX */
-#endif /* not MSDOS, or __TURBOC__ */
-#endif /* not sparc.  */
-#endif /* not GNU C.  */
-#endif /* alloca not defined.  */
-
-/* This is the parser code that is written into each bison parser
-  when the %semantic_parser declaration is not specified in the grammar.
-  It was written by Richard Stallman by simplifying the hairy parser
-  used when %semantic_parser is specified.  */
-
-/* Note: there must be only one dollar sign in this file.
-   It is replaced by the list of actions, each action
-   as one case of the switch.  */
 
 #define yyerrok		(yyerrstatus = 0)
 #define yyclearin	(yychar = YYEMPTY)
-#define YYEMPTY		-2
+#define YYEMPTY		(-2)
 #define YYEOF		0
-#define YYACCEPT	return(0)
-#define YYABORT 	return(1)
-#define YYERROR		goto yyerrlab1
-/* Like YYERROR except do call yyerror.
-   This remains here temporarily to ease the
-   transition to the new meaning of YYERROR, for GCC.
-   Once GCC version 2 has supplanted version 1, this can go.  */
+
+#define YYACCEPT	goto yyacceptlab
+#define YYABORT		goto yyabortlab
+#define YYERROR		goto yyerrorlab
+
+
+/* Like YYERROR except do call yyerror.  This remains here temporarily
+   to ease the transition to the new meaning of YYERROR, for GCC.
+   Once GCC version 2 has supplanted version 1, this can go.  However,
+   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
+   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
+   discussed.  */
+
 #define YYFAIL		goto yyerrlab
+#if defined YYFAIL
+  /* This is here to suppress warnings from the GCC cpp's
+     -Wunused-macros.  Normally we don't worry about that warning, but
+     some users do, and we want to make it easy for users to remove
+     YYFAIL uses, which will produce warnings from Bison 2.5.  */
+#endif
+
 #define YYRECOVERING()  (!!yyerrstatus)
-#define YYBACKUP(token, value) \
-do								\
-  if (yychar == YYEMPTY && yylen == 1)				\
-    { yychar = (token), yylval = (value);			\
-      yychar1 = YYTRANSLATE (yychar);				\
-      YYPOPSTACK;						\
-      goto yybackup;						\
+
+#define YYBACKUP(Token, Value)                                  \
+do                                                              \
+  if (yychar == YYEMPTY)                                        \
+    {                                                           \
+      yychar = (Token);                                         \
+      yylval = (Value);                                         \
+      YYPOPSTACK (yylen);                                       \
+      yystate = *yyssp;                                         \
+      goto yybackup;                                            \
+    }                                                           \
+  else                                                          \
+    {                                                           \
+      yyerror (YY_("syntax error: cannot back up")); \
+      YYERROR;							\
     }								\
-  else								\
-    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
-while (0)
+while (YYID (0))
 
+/* Error token number */
 #define YYTERROR	1
 #define YYERRCODE	256
 
-#ifndef YYPURE
-#define YYLEX		yylex()
+
+/* This macro is provided for backward compatibility. */
+#ifndef YY_LOCATION_PRINT
+# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
 #endif
 
-#ifdef YYPURE
-#ifdef YYLSP_NEEDED
+
+/* YYLEX -- calling `yylex' with the right arguments.  */
 #ifdef YYLEX_PARAM
-#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
+# define YYLEX yylex (YYLEX_PARAM)
 #else
-#define YYLEX		yylex(&yylval, &yylloc)
+# define YYLEX yylex ()
 #endif
-#else /* not YYLSP_NEEDED */
-#ifdef YYLEX_PARAM
-#define YYLEX		yylex(&yylval, YYLEX_PARAM)
+
+/* Enable debugging if requested.  */
+#if YYDEBUG
+
+# ifndef YYFPRINTF
+#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYFPRINTF fprintf
+# endif
+
+# define YYDPRINTF(Args)			\
+do {						\
+  if (yydebug)					\
+    YYFPRINTF Args;				\
+} while (YYID (0))
+
+# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
+do {									  \
+  if (yydebug)								  \
+    {									  \
+      YYFPRINTF (stderr, "%s ", Title);					  \
+      yy_symbol_print (stderr,						  \
+		  Type, Value); \
+      YYFPRINTF (stderr, "\n");						  \
+    }									  \
+} while (YYID (0))
+
+
+/*--------------------------------.
+| Print this symbol on YYOUTPUT.  |
+`--------------------------------*/
+
+/*ARGSUSED*/
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
 #else
-#define YYLEX		yylex(&yylval)
-#endif
-#endif /* not YYLSP_NEEDED */
+static void
+yy_symbol_value_print (yyoutput, yytype, yyvaluep)
+    FILE *yyoutput;
+    int yytype;
+    YYSTYPE const * const yyvaluep;
 #endif
+{
+  FILE *yyo = yyoutput;
+  YYUSE (yyo);
+  if (!yyvaluep)
+    return;
+# ifdef YYPRINT
+  if (yytype < YYNTOKENS)
+    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
+# else
+  YYUSE (yyoutput);
+# endif
+  switch (yytype)
+    {
+      default:
+        break;
+    }
+}
+
 
-/* If nonreentrant, generate the variables here */
+/*--------------------------------.
+| Print this symbol on YYOUTPUT.  |
+`--------------------------------*/
+
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
+#else
+static void
+yy_symbol_print (yyoutput, yytype, yyvaluep)
+    FILE *yyoutput;
+    int yytype;
+    YYSTYPE const * const yyvaluep;
+#endif
+{
+  if (yytype < YYNTOKENS)
+    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
+  else
+    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);
 
-#ifndef YYPURE
+  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
+  YYFPRINTF (yyoutput, ")");
+}
 
-int	yychar;			/*  the lookahead symbol		*/
-YYSTYPE	yylval;			/*  the semantic value of the		*/
-				/*  lookahead symbol			*/
+/*------------------------------------------------------------------.
+| yy_stack_print -- Print the state stack from its BOTTOM up to its |
+| TOP (included).                                                   |
+`------------------------------------------------------------------*/
 
-#ifdef YYLSP_NEEDED
-YYLTYPE yylloc;			/*  location data for the lookahead	*/
-				/*  symbol				*/
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
+#else
+static void
+yy_stack_print (yybottom, yytop)
+    yytype_int16 *yybottom;
+    yytype_int16 *yytop;
 #endif
+{
+  YYFPRINTF (stderr, "Stack now");
+  for (; yybottom <= yytop; yybottom++)
+    {
+      int yybot = *yybottom;
+      YYFPRINTF (stderr, " %d", yybot);
+    }
+  YYFPRINTF (stderr, "\n");
+}
+
+# define YY_STACK_PRINT(Bottom, Top)				\
+do {								\
+  if (yydebug)							\
+    yy_stack_print ((Bottom), (Top));				\
+} while (YYID (0))
 
-int yynerrs;			/*  number of parse errors so far       */
-#endif  /* not YYPURE */
 
-#if YYDEBUG != 0
-int yydebug;			/*  nonzero means print parse trace	*/
-/* Since this is uninitialized, it does not stop multiple parsers
-   from coexisting.  */
+/*------------------------------------------------.
+| Report that the YYRULE is going to be reduced.  |
+`------------------------------------------------*/
+
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
+#else
+static void
+yy_reduce_print (yyvsp, yyrule)
+    YYSTYPE *yyvsp;
+    int yyrule;
 #endif
+{
+  int yynrhs = yyr2[yyrule];
+  int yyi;
+  unsigned long int yylno = yyrline[yyrule];
+  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
+	     yyrule - 1, yylno);
+  /* The symbols being reduced.  */
+  for (yyi = 0; yyi < yynrhs; yyi++)
+    {
+      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
+      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
+		       &(yyvsp[(yyi + 1) - (yynrhs)])
+		       		       );
+      YYFPRINTF (stderr, "\n");
+    }
+}
+
+# define YY_REDUCE_PRINT(Rule)		\
+do {					\
+  if (yydebug)				\
+    yy_reduce_print (yyvsp, Rule); \
+} while (YYID (0))
+
+/* Nonzero means print parse trace.  It is left uninitialized so that
+   multiple parsers can coexist.  */
+int yydebug;
+#else /* !YYDEBUG */
+# define YYDPRINTF(Args)
+# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
+# define YY_STACK_PRINT(Bottom, Top)
+# define YY_REDUCE_PRINT(Rule)
+#endif /* !YYDEBUG */
 
-/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/
 
+/* YYINITDEPTH -- initial size of the parser's stacks.  */
 #ifndef	YYINITDEPTH
-#define YYINITDEPTH 200
+# define YYINITDEPTH 200
 #endif
 
-/*  YYMAXDEPTH is the maximum size the stacks can grow to
-    (effective only if the built-in stack extension method is used).  */
+/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
+   if the built-in stack extension method is used).
 
-#if YYMAXDEPTH == 0
-#undef YYMAXDEPTH
-#endif
+   Do not make this value too large; the results are undefined if
+   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
+   evaluated with infinite-precision integer arithmetic.  */
 
 #ifndef YYMAXDEPTH
-#define YYMAXDEPTH 10000
+# define YYMAXDEPTH 10000
 #endif
 
-/* Prevent warning if -Wstrict-prototypes.  */
-#ifdef __GNUC__
-int yyparse (void);
+
+#if YYERROR_VERBOSE
+
+# ifndef yystrlen
+#  if defined __GLIBC__ && defined _STRING_H
+#   define yystrlen strlen
+#  else
+/* Return the length of YYSTR.  */
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static YYSIZE_T
+yystrlen (const char *yystr)
+#else
+static YYSIZE_T
+yystrlen (yystr)
+    const char *yystr;
 #endif
-
-#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
-#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
-#else				/* not GNU C or C++ */
-#ifndef __cplusplus
-
-/* This is the most reliable way to avoid incompatibilities
-   in available built-in functions on various systems.  */
-static void
-__yy_memcpy (to, from, count)
-     char *to;
-     char *from;
-     int count;
 {
-  register char *f = from;
-  register char *t = to;
-  register int i = count;
-
-  while (i-- > 0)
-    *t++ = *f++;
+  YYSIZE_T yylen;
+  for (yylen = 0; yystr[yylen]; yylen++)
+    continue;
+  return yylen;
 }
+#  endif
+# endif
+
+# ifndef yystpcpy
+#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
+#   define yystpcpy stpcpy
+#  else
+/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
+   YYDEST.  */
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static char *
+yystpcpy (char *yydest, const char *yysrc)
+#else
+static char *
+yystpcpy (yydest, yysrc)
+    char *yydest;
+    const char *yysrc;
+#endif
+{
+  char *yyd = yydest;
+  const char *yys = yysrc;
 
-#else /* __cplusplus */
+  while ((*yyd++ = *yys++) != '\0')
+    continue;
 
-/* This is the most reliable way to avoid incompatibilities
-   in available built-in functions on various systems.  */
-static void
-__yy_memcpy (char *to, char *from, int count)
+  return yyd - 1;
+}
+#  endif
+# endif
+
+# ifndef yytnamerr
+/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
+   quotes and backslashes, so that it's suitable for yyerror.  The
+   heuristic is that double-quoting is unnecessary unless the string
+   contains an apostrophe, a comma, or backslash (other than
+   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
+   null, do not copy; instead, return the length of what the result
+   would have been.  */
+static YYSIZE_T
+yytnamerr (char *yyres, const char *yystr)
 {
-  register char *f = from;
-  register char *t = to;
-  register int i = count;
+  if (*yystr == '"')
+    {
+      YYSIZE_T yyn = 0;
+      char const *yyp = yystr;
+
+      for (;;)
+	switch (*++yyp)
+	  {
+	  case '\'':
+	  case ',':
+	    goto do_not_strip_quotes;
+
+	  case '\\':
+	    if (*++yyp != '\\')
+	      goto do_not_strip_quotes;
+	    /* Fall through.  */
+	  default:
+	    if (yyres)
+	      yyres[yyn] = *yyp;
+	    yyn++;
+	    break;
+
+	  case '"':
+	    if (yyres)
+	      yyres[yyn] = '\0';
+	    return yyn;
+	  }
+    do_not_strip_quotes: ;
+    }
+
+  if (! yyres)
+    return yystrlen (yystr);
 
-  while (i-- > 0)
-    *t++ = *f++;
+  return yystpcpy (yyres, yystr) - yyres;
 }
+# endif
 
-#endif
-#endif
-
-#line 196 "/usr/cygnus/gnupro-98r2/share/bison.simple"
+/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
+   about the unexpected token YYTOKEN for the state stack whose top is
+   YYSSP.
 
-/* The user can define YYPARSE_PARAM as the name of an argument to be passed
-   into yyparse.  The argument should have type void *.
-   It should actually point to an object.
-   Grammar actions can access the variable by casting it
-   to the proper pointer type.  */
+   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
+   not large enough to hold the message.  In that case, also set
+   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
+   required number of bytes is too large to store.  */
+static int
+yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
+                yytype_int16 *yyssp, int yytoken)
+{
+  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
+  YYSIZE_T yysize = yysize0;
+  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
+  /* Internationalized format string. */
+  const char *yyformat = YY_NULL;
+  /* Arguments of yyformat. */
+  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
+  /* Number of reported tokens (one for the "unexpected", one per
+     "expected"). */
+  int yycount = 0;
+
+  /* There are many possibilities here to consider:
+     - Assume YYFAIL is not used.  It's too flawed to consider.  See
+       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
+       for details.  YYERROR is fine as it does not invoke this
+       function.
+     - If this state is a consistent state with a default action, then
+       the only way this function was invoked is if the default action
+       is an error action.  In that case, don't check for expected
+       tokens because there are none.
+     - The only way there can be no lookahead present (in yychar) is if
+       this state is a consistent state with a default action.  Thus,
+       detecting the absence of a lookahead is sufficient to determine
+       that there is no unexpected or expected token to report.  In that
+       case, just report a simple "syntax error".
+     - Don't assume there isn't a lookahead just because this state is a
+       consistent state with a default action.  There might have been a
+       previous inconsistent state, consistent state with a non-default
+       action, or user semantic action that manipulated yychar.
+     - Of course, the expected token list depends on states to have
+       correct lookahead information, and it depends on the parser not
+       to perform extra reductions after fetching a lookahead from the
+       scanner and before detecting a syntax error.  Thus, state merging
+       (from LALR or IELR) and default reductions corrupt the expected
+       token list.  However, the list is correct for canonical LR with
+       one exception: it will still contain any token that will not be
+       accepted due to an error action in a later state.
+  */
+  if (yytoken != YYEMPTY)
+    {
+      int yyn = yypact[*yyssp];
+      yyarg[yycount++] = yytname[yytoken];
+      if (!yypact_value_is_default (yyn))
+        {
+          /* Start YYX at -YYN if negative to avoid negative indexes in
+             YYCHECK.  In other words, skip the first -YYN actions for
+             this state because they are default actions.  */
+          int yyxbegin = yyn < 0 ? -yyn : 0;
+          /* Stay within bounds of both yycheck and yytname.  */
+          int yychecklim = YYLAST - yyn + 1;
+          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
+          int yyx;
+
+          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
+            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
+                && !yytable_value_is_error (yytable[yyx + yyn]))
+              {
+                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
+                  {
+                    yycount = 1;
+                    yysize = yysize0;
+                    break;
+                  }
+                yyarg[yycount++] = yytname[yyx];
+                {
+                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
+                  if (! (yysize <= yysize1
+                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
+                    return 2;
+                  yysize = yysize1;
+                }
+              }
+        }
+    }
 
-#ifdef YYPARSE_PARAM
-#ifdef __cplusplus
-#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
-#define YYPARSE_PARAM_DECL
-#else /* not __cplusplus */
-#define YYPARSE_PARAM_ARG YYPARSE_PARAM
-#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
-#endif /* not __cplusplus */
-#else /* not YYPARSE_PARAM */
-#define YYPARSE_PARAM_ARG
-#define YYPARSE_PARAM_DECL
-#endif /* not YYPARSE_PARAM */
+  switch (yycount)
+    {
+# define YYCASE_(N, S)                      \
+      case N:                               \
+        yyformat = S;                       \
+      break
+      YYCASE_(0, YY_("syntax error"));
+      YYCASE_(1, YY_("syntax error, unexpected %s"));
+      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
+      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
+      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
+      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
+# undef YYCASE_
+    }
 
-int
-yyparse(YYPARSE_PARAM_ARG)
-     YYPARSE_PARAM_DECL
-{
-  register int yystate;
-  register int yyn;
-  register short *yyssp;
-  register YYSTYPE *yyvsp;
-  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
-  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */
+  {
+    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
+    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
+      return 2;
+    yysize = yysize1;
+  }
 
-  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
-  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/
+  if (*yymsg_alloc < yysize)
+    {
+      *yymsg_alloc = 2 * yysize;
+      if (! (yysize <= *yymsg_alloc
+             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
+        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
+      return 1;
+    }
 
-  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
-  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */
+  /* Avoid sprintf, as that infringes on the user's name space.
+     Don't have undefined behavior even if the translation
+     produced a string with the wrong number of "%s"s.  */
+  {
+    char *yyp = *yymsg;
+    int yyi = 0;
+    while ((*yyp = *yyformat) != '\0')
+      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
+        {
+          yyp += yytnamerr (yyp, yyarg[yyi++]);
+          yyformat += 2;
+        }
+      else
+        {
+          yyp++;
+          yyformat++;
+        }
+  }
+  return 0;
+}
+#endif /* YYERROR_VERBOSE */
 
-#ifdef YYLSP_NEEDED
-  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
-  YYLTYPE *yyls = yylsa;
-  YYLTYPE *yylsp;
+/*-----------------------------------------------.
+| Release the memory associated to this symbol.  |
+`-----------------------------------------------*/
 
-#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
+/*ARGSUSED*/
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
 #else
-#define YYPOPSTACK   (yyvsp--, yyssp--)
+static void
+yydestruct (yymsg, yytype, yyvaluep)
+    const char *yymsg;
+    int yytype;
+    YYSTYPE *yyvaluep;
 #endif
+{
+  YYUSE (yyvaluep);
+
+  if (!yymsg)
+    yymsg = "Deleting";
+  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
+
+  switch (yytype)
+    {
+
+      default:
+        break;
+    }
+}
+
+
 
-  int yystacksize = YYINITDEPTH;
 
-#ifdef YYPURE
-  int yychar;
-  YYSTYPE yylval;
-  int yynerrs;
-#ifdef YYLSP_NEEDED
-  YYLTYPE yylloc;
+/* The lookahead symbol.  */
+int yychar;
+
+
+#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+# define YY_IGNORE_MAYBE_UNINITIALIZED_END
 #endif
+#ifndef YY_INITIAL_VALUE
+# define YY_INITIAL_VALUE(Value) /* Nothing. */
 #endif
 
-  YYSTYPE yyval;		/*  the variable used to return		*/
-				/*  semantic values from the action	*/
-				/*  routines				*/
+/* The semantic value of the lookahead symbol.  */
+YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);
+
+/* Number of syntax errors so far.  */
+int yynerrs;
+
 
-  int yylen;
+/*----------.
+| yyparse.  |
+`----------*/
 
-#if YYDEBUG != 0
-  if (yydebug)
-    fprintf(stderr, "Starting parse\n");
+#ifdef YYPARSE_PARAM
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+int
+yyparse (void *YYPARSE_PARAM)
+#else
+int
+yyparse (YYPARSE_PARAM)
+    void *YYPARSE_PARAM;
+#endif
+#else /* ! YYPARSE_PARAM */
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+int
+yyparse (void)
+#else
+int
+yyparse ()
+
+#endif
+#endif
+{
+    int yystate;
+    /* Number of tokens to shift before error messages enabled.  */
+    int yyerrstatus;
+
+    /* The stacks and their tools:
+       `yyss': related to states.
+       `yyvs': related to semantic values.
+
+       Refer to the stacks through separate pointers, to allow yyoverflow
+       to reallocate them elsewhere.  */
+
+    /* The state stack.  */
+    yytype_int16 yyssa[YYINITDEPTH];
+    yytype_int16 *yyss;
+    yytype_int16 *yyssp;
+
+    /* The semantic value stack.  */
+    YYSTYPE yyvsa[YYINITDEPTH];
+    YYSTYPE *yyvs;
+    YYSTYPE *yyvsp;
+
+    YYSIZE_T yystacksize;
+
+  int yyn;
+  int yyresult;
+  /* Lookahead token as an internal (translated) token number.  */
+  int yytoken = 0;
+  /* The variables used to return semantic value and location from the
+     action routines.  */
+  YYSTYPE yyval;
+
+#if YYERROR_VERBOSE
+  /* Buffer for error messages, and its allocated size.  */
+  char yymsgbuf[128];
+  char *yymsg = yymsgbuf;
+  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
 #endif
 
+#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))
+
+  /* The number of symbols on the RHS of the reduced rule.
+     Keep to zero when no symbol should be popped.  */
+  int yylen = 0;
+
+  yyssp = yyss = yyssa;
+  yyvsp = yyvs = yyvsa;
+  yystacksize = YYINITDEPTH;
+
+  YYDPRINTF ((stderr, "Starting parse\n"));
+
   yystate = 0;
   yyerrstatus = 0;
   yynerrs = 0;
-  yychar = YYEMPTY;		/* Cause a token to be read.  */
+  yychar = YYEMPTY; /* Cause a token to be read.  */
+  goto yysetstate;
 
-  /* Initialize stack pointers.
-     Waste one element of value and location stack
-     so that they stay on the same level as the state stack.
-     The wasted elements are never initialized.  */
+/*------------------------------------------------------------.
+| yynewstate -- Push a new state, which is found in yystate.  |
+`------------------------------------------------------------*/
+ yynewstate:
+  /* In all cases, when you get here, the value and location stacks
+     have just been pushed.  So pushing a state here evens the stacks.  */
+  yyssp++;
 
-  yyssp = yyss - 1;
-  yyvsp = yyvs;
-#ifdef YYLSP_NEEDED
-  yylsp = yyls;
-#endif
-
-/* Push a new state, which is found in  yystate  .  */
-/* In all cases, when you get here, the value and location stacks
-   have just been pushed. so pushing a state here evens the stacks.  */
-yynewstate:
+ yysetstate:
+  *yyssp = (yytype_int16)yystate;
 
-  *++yyssp = yystate;
-
-  if (yyssp >= yyss + yystacksize - 1)
+  if (yyss + yystacksize - 1 <= yyssp)
     {
-      /* Give user a chance to reallocate the stack */
-      /* Use copies of these so that the &'s don't force the real ones into memory. */
-      YYSTYPE *yyvs1 = yyvs;
-      short *yyss1 = yyss;
-#ifdef YYLSP_NEEDED
-      YYLTYPE *yyls1 = yyls;
-#endif
-
       /* Get the current used size of the three stacks, in elements.  */
-      int size = yyssp - yyss + 1;
+      YYSIZE_T yysize = (YYSIZE_T)(yyssp - yyss + 1);
 
 #ifdef yyoverflow
-      /* Each stack pointer address is followed by the size of
-	 the data in use in that stack, in bytes.  */
-#ifdef YYLSP_NEEDED
-      /* This used to be a conditional around just the two extra args,
-	 but that might be undefined if yyoverflow is a macro.  */
-      yyoverflow("parser stack overflow",
-		 &yyss1, size * sizeof (*yyssp),
-		 &yyvs1, size * sizeof (*yyvsp),
-		 &yyls1, size * sizeof (*yylsp),
-		 &yystacksize);
-#else
-      yyoverflow("parser stack overflow",
-		 &yyss1, size * sizeof (*yyssp),
-		 &yyvs1, size * sizeof (*yyvsp),
-		 &yystacksize);
-#endif
-
-      yyss = yyss1; yyvs = yyvs1;
-#ifdef YYLSP_NEEDED
-      yyls = yyls1;
-#endif
+      {
+	/* Give user a chance to reallocate the stack.  Use copies of
+	   these so that the &'s don't force the real ones into
+	   memory.  */
+	YYSTYPE *yyvs1 = yyvs;
+	yytype_int16 *yyss1 = yyss;
+
+	/* Each stack pointer address is followed by the size of the
+	   data in use in that stack, in bytes.  This used to be a
+	   conditional around just the two extra args, but that might
+	   be undefined if yyoverflow is a macro.  */
+	yyoverflow (YY_("memory exhausted"),
+		    &yyss1, yysize * sizeof (*yyssp),
+		    &yyvs1, yysize * sizeof (*yyvsp),
+		    &yystacksize);
+
+	yyss = yyss1;
+	yyvs = yyvs1;
+      }
 #else /* no yyoverflow */
+# ifndef YYSTACK_RELOCATE
+      goto yyexhaustedlab;
+# else
       /* Extend the stack our own way.  */
-      if (yystacksize >= YYMAXDEPTH)
-	{
-	  yyerror("parser stack overflow");
-	  return 2;
-	}
+      if (YYMAXDEPTH <= yystacksize)
+	goto yyexhaustedlab;
       yystacksize *= 2;
-      if (yystacksize > YYMAXDEPTH)
+      if (YYMAXDEPTH < yystacksize)
 	yystacksize = YYMAXDEPTH;
-      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
-      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
-      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
-      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
-#ifdef YYLSP_NEEDED
-      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
-      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
-#endif
+
+      {
+	yytype_int16 *yyss1 = yyss;
+	union yyalloc *yyptr =
+	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
+	if (! yyptr)
+	  goto yyexhaustedlab;
+	YYSTACK_RELOCATE (yyss_alloc, yyss);
+	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
+#  undef YYSTACK_RELOCATE
+	if (yyss1 != yyssa)
+	  YYSTACK_FREE (yyss1);
+      }
+# endif
 #endif /* no yyoverflow */
 
-      yyssp = yyss + size - 1;
-      yyvsp = yyvs + size - 1;
-#ifdef YYLSP_NEEDED
-      yylsp = yyls + size - 1;
-#endif
+      yyssp = yyss + yysize - 1;
+      yyvsp = yyvs + yysize - 1;
 
-#if YYDEBUG != 0
-      if (yydebug)
-	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
-#endif
+      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
+		  (unsigned long int) yystacksize));
 
-      if (yyssp >= yyss + yystacksize - 1)
+      if (yyss + yystacksize - 1 <= yyssp)
 	YYABORT;
     }
 
-#if YYDEBUG != 0
-  if (yydebug)
-    fprintf(stderr, "Entering state %d\n", yystate);
-#endif
+  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
+
+  if (yystate == YYFINAL)
+    YYACCEPT;
 
   goto yybackup;
- yybackup:
 
-/* Do appropriate processing given the current state.  */
-/* Read a lookahead token if we need one and don't already have one.  */
-/* yyresume: */
+/*-----------.
+| yybackup.  |
+`-----------*/
+yybackup:
 
-  /* First try to decide what to do without reference to lookahead token.  */
+  /* Do appropriate processing given the current state.  Read a
+     lookahead token if we need one and don't already have one.  */
 
+  /* First try to decide what to do without reference to lookahead token.  */
   yyn = yypact[yystate];
-  if (yyn == YYFLAG)
+  if (yypact_value_is_default (yyn))
     goto yydefault;
 
   /* Not known => get a lookahead token if don't already have one.  */
 
-  /* yychar is either YYEMPTY or YYEOF
-     or a valid token in external form.  */
-
+  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
   if (yychar == YYEMPTY)
     {
-#if YYDEBUG != 0
-      if (yydebug)
-	fprintf(stderr, "Reading a token: ");
-#endif
+      YYDPRINTF ((stderr, "Reading a token: "));
       yychar = YYLEX;
     }
 
-  /* Convert token to internal form (in yychar1) for indexing tables with */
-
-  if (yychar <= 0)		/* This means end of input. */
+  if (yychar <= YYEOF)
     {
-      yychar1 = 0;
-      yychar = YYEOF;		/* Don't call YYLEX any more */
-
-#if YYDEBUG != 0
-      if (yydebug)
-	fprintf(stderr, "Now at end of input.\n");
-#endif
+      yychar = yytoken = YYEOF;
+      YYDPRINTF ((stderr, "Now at end of input.\n"));
     }
   else
     {
-      yychar1 = YYTRANSLATE(yychar);
-
-#if YYDEBUG != 0
-      if (yydebug)
-	{
-	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
-	  /* Give the individual parser a way to print the precise meaning
-	     of a token, for further debugging info.  */
-#ifdef YYPRINT
-	  YYPRINT (stderr, yychar, yylval);
-#endif
-	  fprintf (stderr, ")\n");
-	}
-#endif
+      yytoken = YYTRANSLATE (yychar);
+      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
     }
 
-  yyn += yychar1;
-  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
+  /* If the proper action on seeing token YYTOKEN is to reduce or to
+     detect an error, take that action.  */
+  yyn += yytoken;
+  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
     goto yydefault;
-
   yyn = yytable[yyn];
-
-  /* yyn is what to do for this token type in this state.
-     Negative => reduce, -yyn is rule number.
-     Positive => shift, yyn is new state.
-       New state is final state => don't bother to shift,
-       just return success.
-     0, or most negative number => error.  */
-
-  if (yyn < 0)
+  if (yyn <= 0)
     {
-      if (yyn == YYFLAG)
-	goto yyerrlab;
+      if (yytable_value_is_error (yyn))
+        goto yyerrlab;
       yyn = -yyn;
       goto yyreduce;
     }
-  else if (yyn == 0)
-    goto yyerrlab;
 
-  if (yyn == YYFINAL)
-    YYACCEPT;
+  /* Count tokens shifted since error; after three, turn off error
+     status.  */
+  if (yyerrstatus)
+    yyerrstatus--;
 
   /* Shift the lookahead token.  */
+  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
 
-#if YYDEBUG != 0
-  if (yydebug)
-    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
-#endif
-
-  /* Discard the token being shifted unless it is eof.  */
-  if (yychar != YYEOF)
-    yychar = YYEMPTY;
+  /* Discard the shifted token.  */
+  yychar = YYEMPTY;
 
+  yystate = yyn;
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
   *++yyvsp = yylval;
-#ifdef YYLSP_NEEDED
-  *++yylsp = yylloc;
-#endif
-
-  /* count tokens shifted since error; after three, turn off error status.  */
-  if (yyerrstatus) yyerrstatus--;
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
 
-  yystate = yyn;
   goto yynewstate;
 
-/* Do the default action for the current state.  */
-yydefault:
 
+/*-----------------------------------------------------------.
+| yydefault -- do the default action for the current state.  |
+`-----------------------------------------------------------*/
+yydefault:
   yyn = yydefact[yystate];
   if (yyn == 0)
     goto yyerrlab;
+  goto yyreduce;
+
 
-/* Do a reduction.  yyn is the number of a rule to reduce with.  */
+/*-----------------------------.
+| yyreduce -- Do a reduction.  |
+`-----------------------------*/
 yyreduce:
+  /* yyn is the number of a rule to reduce with.  */
   yylen = yyr2[yyn];
-  if (yylen > 0)
-    yyval = yyvsp[1-yylen]; /* implement default value of the action */
 
-#if YYDEBUG != 0
-  if (yydebug)
-    {
-      int i;
-
-      fprintf (stderr, "Reducing via rule %d (line %d), ",
-	       yyn, yyrline[yyn]);
+  /* If YYLEN is nonzero, implement the default value of the action:
+     `$$ = $1'.
 
-      /* Print the symbols being reduced, and their result.  */
-      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
-	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
-      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
-    }
-#endif
+     Otherwise, the following line sets YYVAL to garbage.
+     This behavior is undocumented and Bison
+     users should not rely upon it.  Assigning to YYVAL
+     unconditionally makes the parser a bit smaller, and it avoids a
+     GCC warning that YYVAL may be used uninitialized.  */
+  yyval = yyvsp[1-yylen];
 
 
-  switch (yyn) {
-
-case 2:
+  YY_REDUCE_PRINT (yyn);
+  switch (yyn)
+    {
+        case 3:
+/* Line 1792 of yacc.c  */
 #line 343 "parse.y"
-{ finish_translation_unit (); ;
-    break;}
-case 3:
+    { finish_translation_unit (); }
+    break;
+
+  case 4:
+/* Line 1792 of yacc.c  */
 #line 351 "parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 4:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 5:
+/* Line 1792 of yacc.c  */
 #line 353 "parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 5:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 6:
+/* Line 1792 of yacc.c  */
 #line 355 "parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 8:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 9:
+/* Line 1792 of yacc.c  */
 #line 364 "parse.y"
-{ have_extern_spec = 1;
+    { have_extern_spec = 1;
 		  used_extern_spec = 0;
-		  yyval.ttype = NULL_TREE; ;
-    break;}
-case 9:
+		  (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 10:
+/* Line 1792 of yacc.c  */
 #line 369 "parse.y"
-{ have_extern_spec = 0; ;
-    break;}
-case 10:
+    { have_extern_spec = 0; }
+    break;
+
+  case 11:
+/* Line 1792 of yacc.c  */
 #line 374 "parse.y"
-{ yyval.itype = pedantic;
-		  pedantic = 0; ;
-    break;}
-case 12:
+    { (yyval.itype) = pedantic;
+		  pedantic = 0; }
+    break;
+
+  case 13:
+/* Line 1792 of yacc.c  */
 #line 383 "parse.y"
-{ if (pending_lang_change) do_pending_lang_change(); ;
-    break;}
-case 13:
+    { if (pending_lang_change) do_pending_lang_change(); }
+    break;
+
+  case 14:
+/* Line 1792 of yacc.c  */
 #line 385 "parse.y"
-{ if (! toplevel_bindings_p () && ! pseudo_global_level_p())
-		  pop_everything (); ;
-    break;}
-case 14:
+    { if (! toplevel_bindings_p () && ! pseudo_global_level_p())
+		  pop_everything (); }
+    break;
+
+  case 15:
+/* Line 1792 of yacc.c  */
 #line 391 "parse.y"
-{ if (pending_inlines) do_pending_inlines (); ;
-    break;}
-case 15:
+    { if (pending_inlines) do_pending_inlines (); }
+    break;
+
+  case 16:
+/* Line 1792 of yacc.c  */
 #line 393 "parse.y"
-{ if (pending_inlines) do_pending_inlines (); ;
-    break;}
-case 16:
+    { if (pending_inlines) do_pending_inlines (); }
+    break;
+
+  case 17:
+/* Line 1792 of yacc.c  */
 #line 395 "parse.y"
-{ if (pending_inlines) do_pending_inlines (); ;
-    break;}
-case 17:
+    { if (pending_inlines) do_pending_inlines (); }
+    break;
+
+  case 18:
+/* Line 1792 of yacc.c  */
 #line 397 "parse.y"
-{ if (TREE_CHAIN (yyvsp[-2].ttype)) yyvsp[-2].ttype = combine_strings (yyvsp[-2].ttype);
-		  assemble_asm (yyvsp[-2].ttype); ;
-    break;}
-case 18:
+    { if (TREE_CHAIN ((yyvsp[(3) - (5)].ttype))) (yyvsp[(3) - (5)].ttype) = combine_strings ((yyvsp[(3) - (5)].ttype));
+		  assemble_asm ((yyvsp[(3) - (5)].ttype)); }
+    break;
+
+  case 19:
+/* Line 1792 of yacc.c  */
 #line 400 "parse.y"
-{ pop_lang_context (); ;
-    break;}
-case 19:
+    { pop_lang_context (); }
+    break;
+
+  case 20:
+/* Line 1792 of yacc.c  */
 #line 402 "parse.y"
-{ if (pending_inlines) do_pending_inlines ();
-		  pop_lang_context (); ;
-    break;}
-case 20:
+    { if (pending_inlines) do_pending_inlines ();
+		  pop_lang_context (); }
+    break;
+
+  case 21:
+/* Line 1792 of yacc.c  */
 #line 405 "parse.y"
-{ if (pending_inlines) do_pending_inlines ();
-		  pop_lang_context (); ;
-    break;}
-case 21:
+    { if (pending_inlines) do_pending_inlines ();
+		  pop_lang_context (); }
+    break;
+
+  case 22:
+/* Line 1792 of yacc.c  */
 #line 408 "parse.y"
-{ push_namespace (yyvsp[-1].ttype); ;
-    break;}
-case 22:
+    { push_namespace ((yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 23:
+/* Line 1792 of yacc.c  */
 #line 410 "parse.y"
-{ pop_namespace (); ;
-    break;}
-case 23:
+    { pop_namespace (); }
+    break;
+
+  case 24:
+/* Line 1792 of yacc.c  */
 #line 412 "parse.y"
-{ push_namespace (NULL_TREE); ;
-    break;}
-case 24:
+    { push_namespace (NULL_TREE); }
+    break;
+
+  case 25:
+/* Line 1792 of yacc.c  */
 #line 414 "parse.y"
-{ pop_namespace (); ;
-    break;}
-case 26:
+    { pop_namespace (); }
+    break;
+
+  case 27:
+/* Line 1792 of yacc.c  */
 #line 417 "parse.y"
-{ do_toplevel_using_decl (yyvsp[-1].ttype); ;
-    break;}
-case 28:
+    { do_toplevel_using_decl ((yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 29:
+/* Line 1792 of yacc.c  */
 #line 420 "parse.y"
-{ pedantic = yyvsp[-1].itype; ;
-    break;}
-case 29:
+    { pedantic = (yyvsp[(1) - (2)].itype); }
+    break;
+
+  case 30:
+/* Line 1792 of yacc.c  */
 #line 425 "parse.y"
-{ begin_only_namespace_names (); ;
-    break;}
-case 30:
+    { begin_only_namespace_names (); }
+    break;
+
+  case 31:
+/* Line 1792 of yacc.c  */
 #line 427 "parse.y"
-{
+    {
 		  end_only_namespace_names ();
 		  if (lastiddecl)
-		    yyvsp[-1].ttype = lastiddecl;
-		  do_namespace_alias (yyvsp[-4].ttype, yyvsp[-1].ttype);
-		;
-    break;}
-case 31:
+		    (yyvsp[(5) - (6)].ttype) = lastiddecl;
+		  do_namespace_alias ((yyvsp[(2) - (6)].ttype), (yyvsp[(5) - (6)].ttype));
+		}
+    break;
+
+  case 32:
+/* Line 1792 of yacc.c  */
 #line 437 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 32:
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype); }
+    break;
+
+  case 33:
+/* Line 1792 of yacc.c  */
 #line 439 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 33:
+    { (yyval.ttype) = (yyvsp[(3) - (3)].ttype); }
+    break;
+
+  case 34:
+/* Line 1792 of yacc.c  */
 #line 441 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 34:
+    { (yyval.ttype) = (yyvsp[(3) - (3)].ttype); }
+    break;
+
+  case 35:
+/* Line 1792 of yacc.c  */
 #line 446 "parse.y"
-{ yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 35:
+    { (yyval.ttype) = build_parse_node (SCOPE_REF, (yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 36:
+/* Line 1792 of yacc.c  */
 #line 448 "parse.y"
-{ yyval.ttype = build_parse_node (SCOPE_REF, global_namespace, yyvsp[0].ttype); ;
-    break;}
-case 36:
+    { (yyval.ttype) = build_parse_node (SCOPE_REF, global_namespace, (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 37:
+/* Line 1792 of yacc.c  */
 #line 450 "parse.y"
-{ yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 37:
+    { (yyval.ttype) = build_parse_node (SCOPE_REF, (yyvsp[(3) - (4)].ttype), (yyvsp[(4) - (4)].ttype)); }
+    break;
+
+  case 38:
+/* Line 1792 of yacc.c  */
 #line 455 "parse.y"
-{ begin_only_namespace_names (); ;
-    break;}
-case 38:
+    { begin_only_namespace_names (); }
+    break;
+
+  case 39:
+/* Line 1792 of yacc.c  */
 #line 457 "parse.y"
-{
+    {
 		  end_only_namespace_names ();
 		  /* If no declaration was found, the using-directive is
 		     invalid. Since that was not reported, we need the
 		     identifier for the error message. */
-		  if (TREE_CODE (yyvsp[-1].ttype) == IDENTIFIER_NODE && lastiddecl)
-		    yyvsp[-1].ttype = lastiddecl;
-		  do_using_directive (yyvsp[-1].ttype);
-		;
-    break;}
-case 39:
+		  if (TREE_CODE ((yyvsp[(4) - (5)].ttype)) == IDENTIFIER_NODE && lastiddecl)
+		    (yyvsp[(4) - (5)].ttype) = lastiddecl;
+		  do_using_directive ((yyvsp[(4) - (5)].ttype));
+		}
+    break;
+
+  case 40:
+/* Line 1792 of yacc.c  */
 #line 470 "parse.y"
-{
-		  if (TREE_CODE (yyval.ttype) == IDENTIFIER_NODE)
-		    yyval.ttype = lastiddecl;
-		  got_scope = yyval.ttype;
-		;
-    break;}
-case 40:
+    {
+		  if (TREE_CODE ((yyval.ttype)) == IDENTIFIER_NODE)
+		    (yyval.ttype) = lastiddecl;
+		  got_scope = (yyval.ttype);
+		}
+    break;
+
+  case 41:
+/* Line 1792 of yacc.c  */
 #line 476 "parse.y"
-{
-		  yyval.ttype = yyvsp[-1].ttype;
-		  if (TREE_CODE (yyval.ttype) == IDENTIFIER_NODE)
-		    yyval.ttype = lastiddecl;
-		  got_scope = yyval.ttype;
-		;
-    break;}
-case 43:
+    {
+		  (yyval.ttype) = (yyvsp[(2) - (3)].ttype);
+		  if (TREE_CODE ((yyval.ttype)) == IDENTIFIER_NODE)
+		    (yyval.ttype) = lastiddecl;
+		  got_scope = (yyval.ttype);
+		}
+    break;
+
+  case 44:
+/* Line 1792 of yacc.c  */
 #line 487 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 44:
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype); }
+    break;
+
+  case 45:
+/* Line 1792 of yacc.c  */
 #line 489 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 45:
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype); }
+    break;
+
+  case 46:
+/* Line 1792 of yacc.c  */
 #line 494 "parse.y"
-{ push_lang_context (yyvsp[0].ttype); ;
-    break;}
-case 46:
+    { push_lang_context ((yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 47:
+/* Line 1792 of yacc.c  */
 #line 496 "parse.y"
-{ if (current_lang_name != yyvsp[0].ttype)
-		    cp_error ("use of linkage spec `%D' is different from previous spec `%D'", yyvsp[0].ttype, current_lang_name);
-		  pop_lang_context (); push_lang_context (yyvsp[0].ttype); ;
-    break;}
-case 47:
+    { if (current_lang_name != (yyvsp[(2) - (2)].ttype))
+		    cp_error ("use of linkage spec `%D' is different from previous spec `%D'", (yyvsp[(2) - (2)].ttype), current_lang_name);
+		  pop_lang_context (); push_lang_context ((yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 48:
+/* Line 1792 of yacc.c  */
 #line 503 "parse.y"
-{ begin_template_parm_list (); ;
-    break;}
-case 48:
+    { begin_template_parm_list (); }
+    break;
+
+  case 49:
+/* Line 1792 of yacc.c  */
 #line 505 "parse.y"
-{ yyval.ttype = end_template_parm_list (yyvsp[-1].ttype); ;
-    break;}
-case 49:
+    { (yyval.ttype) = end_template_parm_list ((yyvsp[(4) - (5)].ttype)); }
+    break;
+
+  case 50:
+/* Line 1792 of yacc.c  */
 #line 507 "parse.y"
-{ begin_specialization(); 
-		  yyval.ttype = NULL_TREE; ;
-    break;}
-case 50:
+    { begin_specialization(); 
+		  (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 51:
+/* Line 1792 of yacc.c  */
 #line 513 "parse.y"
-{ yyval.ttype = process_template_parm (NULL_TREE, yyvsp[0].ttype); ;
-    break;}
-case 51:
+    { (yyval.ttype) = process_template_parm (NULL_TREE, (yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 52:
+/* Line 1792 of yacc.c  */
 #line 515 "parse.y"
-{ yyval.ttype = process_template_parm (yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 52:
+    { (yyval.ttype) = process_template_parm ((yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 53:
+/* Line 1792 of yacc.c  */
 #line 520 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 53:
+    { (yyval.ttype) = (yyvsp[(1) - (1)].ttype); }
+    break;
+
+  case 54:
+/* Line 1792 of yacc.c  */
 #line 522 "parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 54:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 55:
+/* Line 1792 of yacc.c  */
 #line 526 "parse.y"
-{ yyval.ttype = finish_template_type_parm (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 55:
+    { (yyval.ttype) = finish_template_type_parm ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 56:
+/* Line 1792 of yacc.c  */
 #line 528 "parse.y"
-{ yyval.ttype = finish_template_type_parm (class_type_node, yyvsp[0].ttype); ;
-    break;}
-case 56:
+    { (yyval.ttype) = finish_template_type_parm (class_type_node, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 57:
+/* Line 1792 of yacc.c  */
 #line 533 "parse.y"
-{ yyval.ttype = finish_template_template_parm (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 57:
+    { (yyval.ttype) = finish_template_template_parm ((yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 58:
+/* Line 1792 of yacc.c  */
 #line 545 "parse.y"
-{ yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;
-    break;}
-case 58:
+    { (yyval.ttype) = build_tree_list (NULL_TREE, (yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 59:
+/* Line 1792 of yacc.c  */
 #line 547 "parse.y"
-{ yyval.ttype = build_tree_list (groktypename (yyvsp[0].ftype.t), yyvsp[-2].ttype); ;
-    break;}
-case 59:
+    { (yyval.ttype) = build_tree_list (groktypename ((yyvsp[(3) - (3)].ftype).t), (yyvsp[(1) - (3)].ttype)); }
+    break;
+
+  case 60:
+/* Line 1792 of yacc.c  */
 #line 549 "parse.y"
-{ yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ftype.t); ;
-    break;}
-case 60:
+    { (yyval.ttype) = build_tree_list (NULL_TREE, (yyvsp[(1) - (1)].ftype).t); }
+    break;
+
+  case 61:
+/* Line 1792 of yacc.c  */
 #line 551 "parse.y"
-{ yyval.ttype = build_tree_list (yyvsp[0].ttype, yyvsp[-2].ftype.t); ;
-    break;}
-case 61:
+    { (yyval.ttype) = build_tree_list ((yyvsp[(3) - (3)].ttype), (yyvsp[(1) - (3)].ftype).t); }
+    break;
+
+  case 62:
+/* Line 1792 of yacc.c  */
 #line 553 "parse.y"
-{ yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;
-    break;}
-case 62:
+    { (yyval.ttype) = build_tree_list (NULL_TREE, (yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 63:
+/* Line 1792 of yacc.c  */
 #line 555 "parse.y"
-{
-		  if (TREE_CODE (yyvsp[0].ttype) != TEMPLATE_DECL
-		      && TREE_CODE (yyvsp[0].ttype) != TEMPLATE_TEMPLATE_PARM
-		      && TREE_CODE (yyvsp[0].ttype) != TYPE_DECL)
+    {
+		  if (TREE_CODE ((yyvsp[(3) - (3)].ttype)) != TEMPLATE_DECL
+		      && TREE_CODE ((yyvsp[(3) - (3)].ttype)) != TEMPLATE_TEMPLATE_PARM
+		      && TREE_CODE ((yyvsp[(3) - (3)].ttype)) != TYPE_DECL)
 		    {
 		      error ("invalid default template argument");
-		      yyvsp[0].ttype = error_mark_node;
+		      (yyvsp[(3) - (3)].ttype) = error_mark_node;
 		    }
-		  yyval.ttype = build_tree_list (yyvsp[0].ttype, yyvsp[-2].ttype);
-		;
-    break;}
-case 63:
+		  (yyval.ttype) = build_tree_list ((yyvsp[(3) - (3)].ttype), (yyvsp[(1) - (3)].ttype));
+		}
+    break;
+
+  case 64:
+/* Line 1792 of yacc.c  */
 #line 569 "parse.y"
-{ finish_template_decl (yyvsp[-1].ttype); ;
-    break;}
-case 64:
+    { finish_template_decl ((yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 65:
+/* Line 1792 of yacc.c  */
 #line 571 "parse.y"
-{ finish_template_decl (yyvsp[-1].ttype); ;
-    break;}
-case 65:
+    { finish_template_decl ((yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 66:
+/* Line 1792 of yacc.c  */
 #line 576 "parse.y"
-{ if (pending_inlines) do_pending_inlines (); ;
-    break;}
-case 66:
+    { if (pending_inlines) do_pending_inlines (); }
+    break;
+
+  case 67:
+/* Line 1792 of yacc.c  */
 #line 578 "parse.y"
-{ if (pending_inlines) do_pending_inlines (); ;
-    break;}
-case 67:
+    { if (pending_inlines) do_pending_inlines (); }
+    break;
+
+  case 68:
+/* Line 1792 of yacc.c  */
 #line 580 "parse.y"
-{ if (pending_inlines) do_pending_inlines (); ;
-    break;}
-case 68:
+    { if (pending_inlines) do_pending_inlines (); }
+    break;
+
+  case 69:
+/* Line 1792 of yacc.c  */
 #line 582 "parse.y"
-{ if (pending_inlines) do_pending_inlines ();
-		  pop_lang_context (); ;
-    break;}
-case 69:
+    { if (pending_inlines) do_pending_inlines ();
+		  pop_lang_context (); }
+    break;
+
+  case 70:
+/* Line 1792 of yacc.c  */
 #line 585 "parse.y"
-{ if (pending_inlines) do_pending_inlines ();
-		  pop_lang_context (); ;
-    break;}
-case 70:
+    { if (pending_inlines) do_pending_inlines ();
+		  pop_lang_context (); }
+    break;
+
+  case 71:
+/* Line 1792 of yacc.c  */
 #line 588 "parse.y"
-{ pedantic = yyvsp[-1].itype; ;
-    break;}
-case 72:
+    { pedantic = (yyvsp[(1) - (2)].itype); }
+    break;
+
+  case 73:
+/* Line 1792 of yacc.c  */
 #line 594 "parse.y"
-{;
-    break;}
-case 73:
+    {}
+    break;
+
+  case 74:
+/* Line 1792 of yacc.c  */
 #line 596 "parse.y"
-{ note_list_got_semicolon (yyvsp[-2].ftype.t); ;
-    break;}
-case 74:
+    { note_list_got_semicolon ((yyvsp[(1) - (3)].ftype).t); }
+    break;
+
+  case 75:
+/* Line 1792 of yacc.c  */
 #line 598 "parse.y"
-{ maybe_process_partial_specialization (yyvsp[-1].ftype.t);
-		  note_got_semicolon (yyvsp[-1].ftype.t); ;
-    break;}
-case 76:
+    { maybe_process_partial_specialization ((yyvsp[(1) - (2)].ftype).t);
+		  note_got_semicolon ((yyvsp[(1) - (2)].ftype).t); }
+    break;
+
+  case 77:
+/* Line 1792 of yacc.c  */
 #line 605 "parse.y"
-{;
-    break;}
-case 77:
+    {}
+    break;
+
+  case 78:
+/* Line 1792 of yacc.c  */
 #line 607 "parse.y"
-{ note_list_got_semicolon (yyvsp[-2].ftype.t); ;
-    break;}
-case 78:
+    { note_list_got_semicolon ((yyvsp[(1) - (3)].ftype).t); }
+    break;
+
+  case 79:
+/* Line 1792 of yacc.c  */
 #line 609 "parse.y"
-{ pedwarn ("empty declaration"); ;
-    break;}
-case 80:
+    { pedwarn ("empty declaration"); }
+    break;
+
+  case 81:
+/* Line 1792 of yacc.c  */
 #line 612 "parse.y"
-{
+    {
 		  tree t, attrs;
-		  split_specs_attrs (yyvsp[-1].ftype.t, &t, &attrs);
+		  split_specs_attrs ((yyvsp[(1) - (2)].ftype).t, &t, &attrs);
 		  shadow_tag (t);
-		  note_list_got_semicolon (yyvsp[-1].ftype.t);
-		;
-    break;}
-case 84:
+		  note_list_got_semicolon ((yyvsp[(1) - (2)].ftype).t);
+		}
+    break;
+
+  case 85:
+/* Line 1792 of yacc.c  */
 #line 625 "parse.y"
-{ yyval.itype = 0; ;
-    break;}
-case 85:
+    { (yyval.itype) = 0; }
+    break;
+
+  case 86:
+/* Line 1792 of yacc.c  */
 #line 627 "parse.y"
-{ yyval.itype = 1; ;
-    break;}
-case 91:
+    { (yyval.itype) = 1; }
+    break;
+
+  case 92:
+/* Line 1792 of yacc.c  */
 #line 643 "parse.y"
-{ finish_function (lineno, (int)yyvsp[-1].itype, 0); ;
-    break;}
-case 92:
+    { finish_function (lineno, (int)(yyvsp[(3) - (4)].itype), 0); }
+    break;
+
+  case 93:
+/* Line 1792 of yacc.c  */
 #line 645 "parse.y"
-{ 
+    { 
 		  int nested = (hack_decl_function_context
 				(current_function_decl) != NULL_TREE);
-		  finish_function (lineno, (int)yyvsp[0].itype, nested); 
-		;
-    break;}
-case 93:
+		  finish_function (lineno, (int)(yyvsp[(3) - (3)].itype), nested); 
+		}
+    break;
+
+  case 94:
+/* Line 1792 of yacc.c  */
 #line 651 "parse.y"
-{ ;
-    break;}
-case 94:
+    { }
+    break;
+
+  case 95:
+/* Line 1792 of yacc.c  */
 #line 656 "parse.y"
-{ yyval.ttype = begin_constructor_declarator (yyvsp[-2].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 95:
+    { (yyval.ttype) = begin_constructor_declarator ((yyvsp[(1) - (3)].ttype), (yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 96:
+/* Line 1792 of yacc.c  */
 #line 658 "parse.y"
-{ yyval.ttype = make_call_declarator (yyvsp[-4].ttype, yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 96:
+    { (yyval.ttype) = make_call_declarator ((yyvsp[(4) - (8)].ttype), (yyvsp[(5) - (8)].ttype), (yyvsp[(7) - (8)].ttype), (yyvsp[(8) - (8)].ttype)); }
+    break;
+
+  case 97:
+/* Line 1792 of yacc.c  */
 #line 660 "parse.y"
-{ yyval.ttype = begin_constructor_declarator (yyvsp[-4].ttype, yyvsp[-3].ttype); 
-		  yyval.ttype = make_call_declarator (yyval.ttype, empty_parms (), yyvsp[-1].ttype, yyvsp[0].ttype);
-		;
-    break;}
-case 97:
+    { (yyval.ttype) = begin_constructor_declarator ((yyvsp[(1) - (5)].ttype), (yyvsp[(2) - (5)].ttype)); 
+		  (yyval.ttype) = make_call_declarator ((yyval.ttype), empty_parms (), (yyvsp[(4) - (5)].ttype), (yyvsp[(5) - (5)].ttype));
+		}
+    break;
+
+  case 98:
+/* Line 1792 of yacc.c  */
 #line 664 "parse.y"
-{ yyval.ttype = begin_constructor_declarator (yyvsp[-2].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 98:
+    { (yyval.ttype) = begin_constructor_declarator ((yyvsp[(2) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 99:
+/* Line 1792 of yacc.c  */
 #line 666 "parse.y"
-{ yyval.ttype = make_call_declarator (yyvsp[-4].ttype, yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 99:
+    { (yyval.ttype) = make_call_declarator ((yyvsp[(5) - (9)].ttype), (yyvsp[(6) - (9)].ttype), (yyvsp[(8) - (9)].ttype), (yyvsp[(9) - (9)].ttype)); }
+    break;
+
+  case 100:
+/* Line 1792 of yacc.c  */
 #line 668 "parse.y"
-{ yyval.ttype = begin_constructor_declarator (yyvsp[-4].ttype, yyvsp[-3].ttype);
-		  yyval.ttype = make_call_declarator (yyval.ttype, empty_parms (), yyvsp[-1].ttype, yyvsp[0].ttype);
-		;
-    break;}
-case 100:
+    { (yyval.ttype) = begin_constructor_declarator ((yyvsp[(2) - (6)].ttype), (yyvsp[(3) - (6)].ttype));
+		  (yyval.ttype) = make_call_declarator ((yyval.ttype), empty_parms (), (yyvsp[(5) - (6)].ttype), (yyvsp[(6) - (6)].ttype));
+		}
+    break;
+
+  case 101:
+/* Line 1792 of yacc.c  */
 #line 672 "parse.y"
-{ yyval.ttype = begin_constructor_declarator (yyvsp[-2].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 101:
+    { (yyval.ttype) = begin_constructor_declarator ((yyvsp[(1) - (3)].ttype), (yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 102:
+/* Line 1792 of yacc.c  */
 #line 674 "parse.y"
-{ yyval.ttype = make_call_declarator (yyvsp[-4].ttype, yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 102:
+    { (yyval.ttype) = make_call_declarator ((yyvsp[(4) - (8)].ttype), (yyvsp[(5) - (8)].ttype), (yyvsp[(7) - (8)].ttype), (yyvsp[(8) - (8)].ttype)); }
+    break;
+
+  case 103:
+/* Line 1792 of yacc.c  */
 #line 676 "parse.y"
-{ yyval.ttype = begin_constructor_declarator (yyvsp[-4].ttype, yyvsp[-3].ttype);
-		  yyval.ttype = make_call_declarator (yyval.ttype, empty_parms (), yyvsp[-1].ttype, yyvsp[0].ttype);
-		;
-    break;}
-case 103:
+    { (yyval.ttype) = begin_constructor_declarator ((yyvsp[(1) - (5)].ttype), (yyvsp[(2) - (5)].ttype));
+		  (yyval.ttype) = make_call_declarator ((yyval.ttype), empty_parms (), (yyvsp[(4) - (5)].ttype), (yyvsp[(5) - (5)].ttype));
+		}
+    break;
+
+  case 104:
+/* Line 1792 of yacc.c  */
 #line 680 "parse.y"
-{ yyval.ttype = begin_constructor_declarator (yyvsp[-2].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 104:
+    { (yyval.ttype) = begin_constructor_declarator ((yyvsp[(2) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 105:
+/* Line 1792 of yacc.c  */
 #line 682 "parse.y"
-{ yyval.ttype = make_call_declarator (yyvsp[-4].ttype, yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 105:
+    { (yyval.ttype) = make_call_declarator ((yyvsp[(5) - (9)].ttype), (yyvsp[(6) - (9)].ttype), (yyvsp[(8) - (9)].ttype), (yyvsp[(9) - (9)].ttype)); }
+    break;
+
+  case 106:
+/* Line 1792 of yacc.c  */
 #line 684 "parse.y"
-{ yyval.ttype = begin_constructor_declarator (yyvsp[-4].ttype, yyvsp[-3].ttype); 
-		  yyval.ttype = make_call_declarator (yyval.ttype, empty_parms (), yyvsp[-1].ttype, yyvsp[0].ttype);
-		;
-    break;}
-case 106:
+    { (yyval.ttype) = begin_constructor_declarator ((yyvsp[(2) - (6)].ttype), (yyvsp[(3) - (6)].ttype)); 
+		  (yyval.ttype) = make_call_declarator ((yyval.ttype), empty_parms (), (yyvsp[(5) - (6)].ttype), (yyvsp[(6) - (6)].ttype));
+		}
+    break;
+
+  case 107:
+/* Line 1792 of yacc.c  */
 #line 691 "parse.y"
-{ if (!begin_function_definition (yyvsp[-1].ftype.t, yyvsp[0].ttype))
-		    YYERROR1; ;
-    break;}
-case 107:
+    { if (!begin_function_definition ((yyvsp[(1) - (2)].ftype).t, (yyvsp[(2) - (2)].ttype)))
+		    YYERROR1; }
+    break;
+
+  case 108:
+/* Line 1792 of yacc.c  */
 #line 694 "parse.y"
-{ if (!begin_function_definition (yyvsp[-1].ttype, yyvsp[0].ttype))
-		    YYERROR1; ;
-    break;}
-case 108:
+    { if (!begin_function_definition ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)))
+		    YYERROR1; }
+    break;
+
+  case 109:
+/* Line 1792 of yacc.c  */
 #line 697 "parse.y"
-{ if (!begin_function_definition (NULL_TREE, yyvsp[0].ttype))
-		    YYERROR1; ;
-    break;}
-case 109:
+    { if (!begin_function_definition (NULL_TREE, (yyvsp[(1) - (1)].ttype)))
+		    YYERROR1; }
+    break;
+
+  case 110:
+/* Line 1792 of yacc.c  */
 #line 700 "parse.y"
-{ if (!begin_function_definition (yyvsp[-1].ttype, yyvsp[0].ttype))
-		    YYERROR1; ;
-    break;}
-case 110:
+    { if (!begin_function_definition ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)))
+		    YYERROR1; }
+    break;
+
+  case 111:
+/* Line 1792 of yacc.c  */
 #line 703 "parse.y"
-{ if (!begin_function_definition (NULL_TREE, yyvsp[0].ttype))
-		    YYERROR1; ;
-    break;}
-case 111:
+    { if (!begin_function_definition (NULL_TREE, (yyvsp[(1) - (1)].ttype)))
+		    YYERROR1; }
+    break;
+
+  case 112:
+/* Line 1792 of yacc.c  */
 #line 709 "parse.y"
-{ yyval.ttype = make_call_declarator (yyvsp[-5].ttype, yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 112:
+    { (yyval.ttype) = make_call_declarator ((yyvsp[(1) - (6)].ttype), (yyvsp[(3) - (6)].ttype), (yyvsp[(5) - (6)].ttype), (yyvsp[(6) - (6)].ttype)); }
+    break;
+
+  case 113:
+/* Line 1792 of yacc.c  */
 #line 711 "parse.y"
-{ yyval.ttype = make_call_declarator (yyvsp[-3].ttype, empty_parms (), yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 113:
+    { (yyval.ttype) = make_call_declarator ((yyvsp[(1) - (4)].ttype), empty_parms (), (yyvsp[(3) - (4)].ttype), (yyvsp[(4) - (4)].ttype)); }
+    break;
+
+  case 114:
+/* Line 1792 of yacc.c  */
 #line 713 "parse.y"
-{ yyval.ttype = make_call_declarator (yyvsp[-5].ttype, yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 114:
+    { (yyval.ttype) = make_call_declarator ((yyvsp[(1) - (6)].ttype), (yyvsp[(3) - (6)].ttype), (yyvsp[(5) - (6)].ttype), (yyvsp[(6) - (6)].ttype)); }
+    break;
+
+  case 115:
+/* Line 1792 of yacc.c  */
 #line 715 "parse.y"
-{ yyval.ttype = make_call_declarator (yyvsp[-3].ttype, empty_parms (), yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 115:
+    { (yyval.ttype) = make_call_declarator ((yyvsp[(1) - (4)].ttype), empty_parms (), (yyvsp[(3) - (4)].ttype), (yyvsp[(4) - (4)].ttype)); }
+    break;
+
+  case 116:
+/* Line 1792 of yacc.c  */
 #line 722 "parse.y"
-{ tree specs, attrs;
-		  split_specs_attrs (yyvsp[-1].ttype, &specs, &attrs);
+    { tree specs, attrs;
+		  split_specs_attrs ((yyvsp[(1) - (2)].ttype), &specs, &attrs);
 		  attrs = build_tree_list (attrs, NULL_TREE);
-		  yyval.ttype = start_method (specs, yyvsp[0].ttype, attrs);
+		  (yyval.ttype) = start_method (specs, (yyvsp[(2) - (2)].ttype), attrs);
 		 rest_of_mdef:
-		  if (! yyval.ttype)
+		  if (! (yyval.ttype))
 		    YYERROR1;
 		  if (yychar == YYEMPTY)
 		    yychar = YYLEX;
-		  reinit_parse_for_method (yychar, yyval.ttype); ;
-    break;}
-case 116:
+		  reinit_parse_for_method (yychar, (yyval.ttype)); }
+    break;
+
+  case 117:
+/* Line 1792 of yacc.c  */
 #line 733 "parse.y"
-{ yyval.ttype = start_method (NULL_TREE, yyvsp[0].ttype, NULL_TREE); 
-		  goto rest_of_mdef; ;
-    break;}
-case 117:
+    { (yyval.ttype) = start_method (NULL_TREE, (yyvsp[(1) - (1)].ttype), NULL_TREE); 
+		  goto rest_of_mdef; }
+    break;
+
+  case 118:
+/* Line 1792 of yacc.c  */
 #line 736 "parse.y"
-{ tree specs, attrs;
-		  split_specs_attrs (yyvsp[-1].ftype.t, &specs, &attrs);
+    { tree specs, attrs;
+		  split_specs_attrs ((yyvsp[(1) - (2)].ftype).t, &specs, &attrs);
 		  attrs = build_tree_list (attrs, NULL_TREE);
-		  yyval.ttype = start_method (specs, yyvsp[0].ttype, attrs); goto rest_of_mdef; ;
-    break;}
-case 118:
+		  (yyval.ttype) = start_method (specs, (yyvsp[(2) - (2)].ttype), attrs); goto rest_of_mdef; }
+    break;
+
+  case 119:
+/* Line 1792 of yacc.c  */
 #line 741 "parse.y"
-{ tree specs, attrs;
-		  split_specs_attrs (yyvsp[-1].ttype, &specs, &attrs);
+    { tree specs, attrs;
+		  split_specs_attrs ((yyvsp[(1) - (2)].ttype), &specs, &attrs);
 		  attrs = build_tree_list (attrs, NULL_TREE);
-		  yyval.ttype = start_method (specs, yyvsp[0].ttype, attrs); goto rest_of_mdef; ;
-    break;}
-case 119:
+		  (yyval.ttype) = start_method (specs, (yyvsp[(2) - (2)].ttype), attrs); goto rest_of_mdef; }
+    break;
+
+  case 120:
+/* Line 1792 of yacc.c  */
 #line 746 "parse.y"
-{ yyval.ttype = start_method (NULL_TREE, yyval.ttype, NULL_TREE); 
-		  goto rest_of_mdef; ;
-    break;}
-case 120:
+    { (yyval.ttype) = start_method (NULL_TREE, (yyval.ttype), NULL_TREE); 
+		  goto rest_of_mdef; }
+    break;
+
+  case 121:
+/* Line 1792 of yacc.c  */
 #line 749 "parse.y"
-{ tree specs, attrs;
-		  split_specs_attrs (yyvsp[-1].ttype, &specs, &attrs);
+    { tree specs, attrs;
+		  split_specs_attrs ((yyvsp[(1) - (2)].ttype), &specs, &attrs);
 		  attrs = build_tree_list (attrs, NULL_TREE);
-		  yyval.ttype = start_method (specs, yyvsp[0].ttype, attrs); goto rest_of_mdef; ;
-    break;}
-case 121:
+		  (yyval.ttype) = start_method (specs, (yyvsp[(2) - (2)].ttype), attrs); goto rest_of_mdef; }
+    break;
+
+  case 122:
+/* Line 1792 of yacc.c  */
 #line 754 "parse.y"
-{ yyval.ttype = start_method (NULL_TREE, yyval.ttype, NULL_TREE); 
-		  goto rest_of_mdef; ;
-    break;}
-case 122:
+    { (yyval.ttype) = start_method (NULL_TREE, (yyval.ttype), NULL_TREE); 
+		  goto rest_of_mdef; }
+    break;
+
+  case 123:
+/* Line 1792 of yacc.c  */
 #line 760 "parse.y"
-{
+    {
 		  if (! current_function_parms_stored)
 		    store_parm_decls ();
-		  yyval.ttype = yyvsp[0].ttype;
-		;
-    break;}
-case 123:
+		  (yyval.ttype) = (yyvsp[(2) - (2)].ttype);
+		}
+    break;
+
+  case 124:
+/* Line 1792 of yacc.c  */
 #line 769 "parse.y"
-{ store_return_init (yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 124:
+    { store_return_init ((yyval.ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 125:
+/* Line 1792 of yacc.c  */
 #line 771 "parse.y"
-{ store_return_init (yyval.ttype, yyvsp[-1].ttype); ;
-    break;}
-case 125:
+    { store_return_init ((yyval.ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 126:
+/* Line 1792 of yacc.c  */
 #line 773 "parse.y"
-{ store_return_init (yyval.ttype, NULL_TREE); ;
-    break;}
-case 126:
+    { store_return_init ((yyval.ttype), NULL_TREE); }
+    break;
+
+  case 127:
+/* Line 1792 of yacc.c  */
 #line 778 "parse.y"
-{
-		  if (yyvsp[0].itype == 0)
+    {
+		  if ((yyvsp[(3) - (3)].itype) == 0)
 		    error ("no base initializers given following ':'");
 		  setup_vtbl_ptr ();
 		  /* Always keep the BLOCK node associated with the outermost
 		     pair of curley braces of a function.  These are needed
 		     for correct operation of dwarfout.c.  */
 		  keep_next_level ();
-		;
-    break;}
-case 127:
+		}
+    break;
+
+  case 128:
+/* Line 1792 of yacc.c  */
 #line 791 "parse.y"
-{
+    {
 		  if (! current_function_parms_stored)
 		    store_parm_decls ();
 
@@ -4942,211 +6084,299 @@ case 127:
 		    error ("base initializers not allowed for non-member functions");
 		  else if (! DECL_CONSTRUCTOR_P (current_function_decl))
 		    error ("only constructors take base initializers");
-		;
-    break;}
-case 128:
+		}
+    break;
+
+  case 129:
+/* Line 1792 of yacc.c  */
 #line 811 "parse.y"
-{ yyval.itype = 0; ;
-    break;}
-case 129:
+    { (yyval.itype) = 0; }
+    break;
+
+  case 130:
+/* Line 1792 of yacc.c  */
 #line 813 "parse.y"
-{ yyval.itype = 1; ;
-    break;}
-case 132:
+    { (yyval.itype) = 1; }
+    break;
+
+  case 133:
+/* Line 1792 of yacc.c  */
 #line 820 "parse.y"
-{
+    {
 		  if (current_class_name)
 		    pedwarn ("anachronistic old style base class initializer");
-		  expand_member_init (current_class_ref, NULL_TREE, yyvsp[-1].ttype);
-		;
-    break;}
-case 133:
+		  expand_member_init (current_class_ref, NULL_TREE, (yyvsp[(2) - (3)].ttype));
+		}
+    break;
+
+  case 134:
+/* Line 1792 of yacc.c  */
 #line 826 "parse.y"
-{
+    {
 		  if (current_class_name)
 		    pedwarn ("anachronistic old style base class initializer");
 		  expand_member_init (current_class_ref, NULL_TREE, void_type_node);
-		;
-    break;}
-case 134:
+		}
+    break;
+
+  case 135:
+/* Line 1792 of yacc.c  */
 #line 832 "parse.y"
-{ expand_member_init (current_class_ref, yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 135:
+    { expand_member_init (current_class_ref, (yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 136:
+/* Line 1792 of yacc.c  */
 #line 834 "parse.y"
-{ expand_member_init (current_class_ref, yyvsp[-1].ttype, void_type_node); ;
-    break;}
-case 136:
+    { expand_member_init (current_class_ref, (yyvsp[(1) - (2)].ttype), void_type_node); }
+    break;
+
+  case 137:
+/* Line 1792 of yacc.c  */
 #line 836 "parse.y"
-{ expand_member_init (current_class_ref, yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 137:
+    { expand_member_init (current_class_ref, (yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 138:
+/* Line 1792 of yacc.c  */
 #line 838 "parse.y"
-{ expand_member_init (current_class_ref, yyvsp[-1].ttype, void_type_node); ;
-    break;}
-case 138:
+    { expand_member_init (current_class_ref, (yyvsp[(1) - (2)].ttype), void_type_node); }
+    break;
+
+  case 139:
+/* Line 1792 of yacc.c  */
 #line 840 "parse.y"
-{ expand_member_init (current_class_ref, TYPE_MAIN_DECL (yyvsp[-3].ttype),
-				      yyvsp[-1].ttype); ;
-    break;}
-case 139:
+    { expand_member_init (current_class_ref, TYPE_MAIN_DECL ((yyvsp[(1) - (4)].ttype)),
+				      (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 140:
+/* Line 1792 of yacc.c  */
 #line 843 "parse.y"
-{ expand_member_init (current_class_ref, TYPE_MAIN_DECL (yyvsp[-1].ttype),
-				      void_type_node); ;
-    break;}
-case 151:
+    { expand_member_init (current_class_ref, TYPE_MAIN_DECL ((yyvsp[(1) - (2)].ttype)),
+				      void_type_node); }
+    break;
+
+  case 152:
+/* Line 1792 of yacc.c  */
 #line 869 "parse.y"
-{ do_type_instantiation (yyvsp[-1].ftype.t, NULL_TREE);
-		  yyungetc (';', 1); ;
-    break;}
-case 153:
+    { do_type_instantiation ((yyvsp[(3) - (4)].ftype).t, NULL_TREE);
+		  yyungetc (';', 1); }
+    break;
+
+  case 154:
+/* Line 1792 of yacc.c  */
 #line 873 "parse.y"
-{ tree specs = strip_attrs (yyvsp[-1].ftype.t);
-		  do_decl_instantiation (specs, yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 155:
+    { tree specs = strip_attrs ((yyvsp[(3) - (4)].ftype).t);
+		  do_decl_instantiation (specs, (yyvsp[(4) - (4)].ttype), NULL_TREE); }
+    break;
+
+  case 156:
+/* Line 1792 of yacc.c  */
 #line 877 "parse.y"
-{ do_decl_instantiation (NULL_TREE, yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 157:
+    { do_decl_instantiation (NULL_TREE, (yyvsp[(3) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 158:
+/* Line 1792 of yacc.c  */
 #line 880 "parse.y"
-{ do_decl_instantiation (NULL_TREE, yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 159:
+    { do_decl_instantiation (NULL_TREE, (yyvsp[(3) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 160:
+/* Line 1792 of yacc.c  */
 #line 883 "parse.y"
-{ do_type_instantiation (yyvsp[-1].ftype.t, yyvsp[-4].ttype);
-		  yyungetc (';', 1); ;
-    break;}
-case 161:
+    { do_type_instantiation ((yyvsp[(4) - (5)].ftype).t, (yyvsp[(1) - (5)].ttype));
+		  yyungetc (';', 1); }
+    break;
+
+  case 162:
+/* Line 1792 of yacc.c  */
 #line 888 "parse.y"
-{ tree specs = strip_attrs (yyvsp[-1].ftype.t);
-		  do_decl_instantiation (specs, yyvsp[0].ttype, yyvsp[-4].ttype); ;
-    break;}
-case 163:
+    { tree specs = strip_attrs ((yyvsp[(4) - (5)].ftype).t);
+		  do_decl_instantiation (specs, (yyvsp[(5) - (5)].ttype), (yyvsp[(1) - (5)].ttype)); }
+    break;
+
+  case 164:
+/* Line 1792 of yacc.c  */
 #line 892 "parse.y"
-{ do_decl_instantiation (NULL_TREE, yyvsp[0].ttype, yyvsp[-3].ttype); ;
-    break;}
-case 165:
+    { do_decl_instantiation (NULL_TREE, (yyvsp[(4) - (4)].ttype), (yyvsp[(1) - (4)].ttype)); }
+    break;
+
+  case 166:
+/* Line 1792 of yacc.c  */
 #line 895 "parse.y"
-{ do_decl_instantiation (NULL_TREE, yyvsp[0].ttype, yyvsp[-3].ttype); ;
-    break;}
-case 167:
+    { do_decl_instantiation (NULL_TREE, (yyvsp[(4) - (4)].ttype), (yyvsp[(1) - (4)].ttype)); }
+    break;
+
+  case 168:
+/* Line 1792 of yacc.c  */
 #line 900 "parse.y"
-{ begin_explicit_instantiation(); ;
-    break;}
-case 168:
+    { begin_explicit_instantiation(); }
+    break;
+
+  case 169:
+/* Line 1792 of yacc.c  */
 #line 903 "parse.y"
-{ end_explicit_instantiation(); ;
-    break;}
-case 169:
+    { end_explicit_instantiation(); }
+    break;
+
+  case 170:
+/* Line 1792 of yacc.c  */
 #line 912 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 170:
+    { (yyval.ttype) = (yyvsp[(5) - (5)].ttype); }
+    break;
+
+  case 171:
+/* Line 1792 of yacc.c  */
 #line 915 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 173:
+    { (yyval.ttype) = (yyvsp[(5) - (5)].ttype); }
+    break;
+
+  case 174:
+/* Line 1792 of yacc.c  */
 #line 923 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 174:
+    { (yyval.ttype) = (yyvsp[(5) - (5)].ttype); }
+    break;
+
+  case 175:
+/* Line 1792 of yacc.c  */
 #line 928 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 175:
+    { (yyval.ttype) = (yyvsp[(5) - (5)].ttype); }
+    break;
+
+  case 176:
+/* Line 1792 of yacc.c  */
 #line 932 "parse.y"
-{ 
+    { 
 		  if (yychar == YYEMPTY)
 		    yychar = YYLEX;
 
-		  yyval.ttype = finish_template_type (yyvsp[-3].ttype, yyvsp[-1].ttype, 
+		  (yyval.ttype) = finish_template_type ((yyvsp[(-3) - (0)].ttype), (yyvsp[(-1) - (0)].ttype), 
 					     yychar == SCOPE);
-		;
-    break;}
-case 177:
+		}
+    break;
+
+  case 178:
+/* Line 1792 of yacc.c  */
 #line 943 "parse.y"
-{
+    {
 		  /* Handle `Class<Class<Type>>' without space in the `>>' */
 		  pedwarn ("`>>' should be `> >' in template class name");
 		  yyungetc ('>', 1);
-		;
-    break;}
-case 178:
+		}
+    break;
+
+  case 179:
+/* Line 1792 of yacc.c  */
 #line 952 "parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 180:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 181:
+/* Line 1792 of yacc.c  */
 #line 958 "parse.y"
-{ yyval.ttype = build_tree_list (NULL_TREE, yyval.ttype); ;
-    break;}
-case 181:
+    { (yyval.ttype) = build_tree_list (NULL_TREE, (yyval.ttype)); }
+    break;
+
+  case 182:
+/* Line 1792 of yacc.c  */
 #line 960 "parse.y"
-{ yyval.ttype = chainon (yyval.ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;
-    break;}
-case 182:
+    { (yyval.ttype) = chainon ((yyval.ttype), build_tree_list (NULL_TREE, (yyvsp[(3) - (3)].ttype))); }
+    break;
+
+  case 183:
+/* Line 1792 of yacc.c  */
 #line 965 "parse.y"
-{ yyval.ttype = groktypename (yyvsp[0].ftype.t); ;
-    break;}
-case 183:
+    { (yyval.ttype) = groktypename ((yyvsp[(1) - (1)].ftype).t); }
+    break;
+
+  case 184:
+/* Line 1792 of yacc.c  */
 #line 967 "parse.y"
-{ yyval.ttype = lastiddecl; ;
-    break;}
-case 185:
+    { (yyval.ttype) = lastiddecl; }
+    break;
+
+  case 186:
+/* Line 1792 of yacc.c  */
 #line 973 "parse.y"
-{ yyval.code = NEGATE_EXPR; ;
-    break;}
-case 186:
+    { (yyval.code) = NEGATE_EXPR; }
+    break;
+
+  case 187:
+/* Line 1792 of yacc.c  */
 #line 975 "parse.y"
-{ yyval.code = CONVERT_EXPR; ;
-    break;}
-case 187:
+    { (yyval.code) = CONVERT_EXPR; }
+    break;
+
+  case 188:
+/* Line 1792 of yacc.c  */
 #line 977 "parse.y"
-{ yyval.code = PREINCREMENT_EXPR; ;
-    break;}
-case 188:
+    { (yyval.code) = PREINCREMENT_EXPR; }
+    break;
+
+  case 189:
+/* Line 1792 of yacc.c  */
 #line 979 "parse.y"
-{ yyval.code = PREDECREMENT_EXPR; ;
-    break;}
-case 189:
+    { (yyval.code) = PREDECREMENT_EXPR; }
+    break;
+
+  case 190:
+/* Line 1792 of yacc.c  */
 #line 981 "parse.y"
-{ yyval.code = TRUTH_NOT_EXPR; ;
-    break;}
-case 190:
+    { (yyval.code) = TRUTH_NOT_EXPR; }
+    break;
+
+  case 191:
+/* Line 1792 of yacc.c  */
 #line 986 "parse.y"
-{ yyval.ttype = build_x_compound_expr (yyval.ttype); ;
-    break;}
-case 192:
+    { (yyval.ttype) = build_x_compound_expr ((yyval.ttype)); }
+    break;
+
+  case 193:
+/* Line 1792 of yacc.c  */
 #line 992 "parse.y"
-{ error ("ANSI C++ forbids an empty condition for `%s'",
+    { error ("ANSI C++ forbids an empty condition for `%s'",
 			 cond_stmt_keyword);
-		  yyval.ttype = integer_zero_node; ;
-    break;}
-case 193:
+		  (yyval.ttype) = integer_zero_node; }
+    break;
+
+  case 194:
+/* Line 1792 of yacc.c  */
 #line 996 "parse.y"
-{ yyval.ttype = yyvsp[-1].ttype; ;
-    break;}
-case 194:
+    { (yyval.ttype) = (yyvsp[(2) - (3)].ttype); }
+    break;
+
+  case 195:
+/* Line 1792 of yacc.c  */
 #line 1001 "parse.y"
-{ error ("ANSI C++ forbids an empty condition for `%s'",
+    { error ("ANSI C++ forbids an empty condition for `%s'",
 			 cond_stmt_keyword);
-		  yyval.ttype = integer_zero_node; ;
-    break;}
-case 195:
+		  (yyval.ttype) = integer_zero_node; }
+    break;
+
+  case 196:
+/* Line 1792 of yacc.c  */
 #line 1005 "parse.y"
-{ yyval.ttype = yyvsp[-1].ttype; ;
-    break;}
-case 196:
+    { (yyval.ttype) = (yyvsp[(2) - (3)].ttype); }
+    break;
+
+  case 197:
+/* Line 1792 of yacc.c  */
 #line 1010 "parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 198:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 199:
+/* Line 1792 of yacc.c  */
 #line 1013 "parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 199:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 200:
+/* Line 1792 of yacc.c  */
 #line 1018 "parse.y"
-{ {
+    { {
 		  tree d;
 		  for (d = getdecls (); d; d = TREE_CHAIN (d))
 		    if (TREE_CODE (d) == TYPE_DECL) {
@@ -5157,451 +6387,629 @@ case 199:
 			cp_error ("definition of enum `%T' in condition", s);
 		    }
 		  }
-		  current_declspecs = yyvsp[-4].ftype.t;
-		  yyvsp[0].itype = suspend_momentary ();
-		  yyval.ttype = start_decl (yyvsp[-3].ttype, current_declspecs, 1,
-					  yyvsp[-1].ttype, /*prefix_attributes*/ NULL_TREE);
-		;
-    break;}
-case 200:
+		  current_declspecs = (yyvsp[(1) - (5)].ftype).t;
+		  (yyvsp[(5) - (5)].itype) = suspend_momentary ();
+		  (yyval.ttype) = start_decl ((yyvsp[(2) - (5)].ttype), current_declspecs, 1,
+					  (yyvsp[(4) - (5)].ttype), /*prefix_attributes*/ NULL_TREE);
+		}
+    break;
+
+  case 201:
+/* Line 1792 of yacc.c  */
 #line 1035 "parse.y"
-{ 
-		  cp_finish_decl (yyvsp[-1].ttype, yyvsp[0].ttype, yyvsp[-3].ttype, 1, LOOKUP_ONLYCONVERTING);
-		  resume_momentary (yyvsp[-2].itype);
-		  yyval.ttype = convert_from_reference (yyvsp[-1].ttype); 
-		  if (TREE_CODE (TREE_TYPE (yyval.ttype)) == ARRAY_TYPE)
-		    cp_error ("definition of array `%#D' in condition", yyval.ttype); 
-		;
-    break;}
-case 206:
+    { 
+		  cp_finish_decl ((yyvsp[(6) - (7)].ttype), (yyvsp[(7) - (7)].ttype), (yyvsp[(4) - (7)].ttype), 1, LOOKUP_ONLYCONVERTING);
+		  resume_momentary ((yyvsp[(5) - (7)].itype));
+		  (yyval.ttype) = convert_from_reference ((yyvsp[(6) - (7)].ttype)); 
+		  if (TREE_CODE (TREE_TYPE ((yyval.ttype))) == ARRAY_TYPE)
+		    cp_error ("definition of array `%#D' in condition", (yyval.ttype)); 
+		}
+    break;
+
+  case 207:
+/* Line 1792 of yacc.c  */
 #line 1054 "parse.y"
-{ yyval.ttype = begin_compound_stmt (1); ;
-    break;}
-case 207:
+    { (yyval.ttype) = begin_compound_stmt (1); }
+    break;
+
+  case 208:
+/* Line 1792 of yacc.c  */
 #line 1056 "parse.y"
-{ finish_compound_stmt (1, yyvsp[-1].ttype); ;
-    break;}
-case 209:
+    { finish_compound_stmt (1, (yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 210:
+/* Line 1792 of yacc.c  */
 #line 1063 "parse.y"
-{ yyval.ttype = expr_tree_cons (NULL_TREE, yyval.ttype, 
-		                  build_expr_list (NULL_TREE, yyvsp[0].ttype)); ;
-    break;}
-case 210:
+    { (yyval.ttype) = expr_tree_cons (NULL_TREE, (yyval.ttype), 
+		                  build_expr_list (NULL_TREE, (yyvsp[(3) - (3)].ttype))); }
+    break;
+
+  case 211:
+/* Line 1792 of yacc.c  */
 #line 1066 "parse.y"
-{ yyval.ttype = expr_tree_cons (NULL_TREE, yyval.ttype, 
-		                  build_expr_list (NULL_TREE, error_mark_node)); ;
-    break;}
-case 211:
+    { (yyval.ttype) = expr_tree_cons (NULL_TREE, (yyval.ttype), 
+		                  build_expr_list (NULL_TREE, error_mark_node)); }
+    break;
+
+  case 212:
+/* Line 1792 of yacc.c  */
 #line 1069 "parse.y"
-{ chainon (yyval.ttype, build_expr_list (NULL_TREE, yyvsp[0].ttype)); ;
-    break;}
-case 212:
+    { chainon ((yyval.ttype), build_expr_list (NULL_TREE, (yyvsp[(3) - (3)].ttype))); }
+    break;
+
+  case 213:
+/* Line 1792 of yacc.c  */
 #line 1071 "parse.y"
-{ chainon (yyval.ttype, build_expr_list (NULL_TREE, error_mark_node)); ;
-    break;}
-case 213:
+    { chainon ((yyval.ttype), build_expr_list (NULL_TREE, error_mark_node)); }
+    break;
+
+  case 214:
+/* Line 1792 of yacc.c  */
 #line 1076 "parse.y"
-{ yyval.ttype = build_expr_list (NULL_TREE, yyval.ttype); ;
-    break;}
-case 215:
+    { (yyval.ttype) = build_expr_list (NULL_TREE, (yyval.ttype)); }
+    break;
+
+  case 216:
+/* Line 1792 of yacc.c  */
 #line 1082 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 216:
+    { (yyval.ttype) = (yyvsp[(1) - (1)].ttype); }
+    break;
+
+  case 217:
+/* Line 1792 of yacc.c  */
 #line 1085 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype;
-		  pedantic = yyvsp[-1].itype; ;
-    break;}
-case 217:
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype);
+		  pedantic = (yyvsp[(1) - (2)].itype); }
+    break;
+
+  case 218:
+/* Line 1792 of yacc.c  */
 #line 1088 "parse.y"
-{ yyval.ttype = build_x_indirect_ref (yyvsp[0].ttype, "unary *"); ;
-    break;}
-case 218:
+    { (yyval.ttype) = build_x_indirect_ref ((yyvsp[(2) - (2)].ttype), "unary *"); }
+    break;
+
+  case 219:
+/* Line 1792 of yacc.c  */
 #line 1090 "parse.y"
-{ yyval.ttype = build_x_unary_op (ADDR_EXPR, yyvsp[0].ttype); ;
-    break;}
-case 219:
+    { (yyval.ttype) = build_x_unary_op (ADDR_EXPR, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 220:
+/* Line 1792 of yacc.c  */
 #line 1092 "parse.y"
-{ yyval.ttype = build_x_unary_op (BIT_NOT_EXPR, yyvsp[0].ttype); ;
-    break;}
-case 220:
+    { (yyval.ttype) = build_x_unary_op (BIT_NOT_EXPR, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 221:
+/* Line 1792 of yacc.c  */
 #line 1094 "parse.y"
-{ yyval.ttype = finish_unary_op_expr (yyvsp[-1].code, yyvsp[0].ttype); ;
-    break;}
-case 221:
+    { (yyval.ttype) = finish_unary_op_expr ((yyvsp[(1) - (2)].code), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 222:
+/* Line 1792 of yacc.c  */
 #line 1097 "parse.y"
-{ if (pedantic)
+    { if (pedantic)
 		    pedwarn ("ANSI C++ forbids `&&'");
-  		  yyval.ttype = finish_label_address_expr (yyvsp[0].ttype); ;
-    break;}
-case 222:
+  		  (yyval.ttype) = finish_label_address_expr ((yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 223:
+/* Line 1792 of yacc.c  */
 #line 1101 "parse.y"
-{ yyval.ttype = expr_sizeof (yyvsp[0].ttype); ;
-    break;}
-case 223:
+    { (yyval.ttype) = expr_sizeof ((yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 224:
+/* Line 1792 of yacc.c  */
 #line 1103 "parse.y"
-{ yyval.ttype = c_sizeof (groktypename (yyvsp[-1].ftype.t));
-		  check_for_new_type ("sizeof", yyvsp[-1].ftype); ;
-    break;}
-case 224:
+    { (yyval.ttype) = c_sizeof (groktypename ((yyvsp[(3) - (4)].ftype).t));
+		  check_for_new_type ("sizeof", (yyvsp[(3) - (4)].ftype)); }
+    break;
+
+  case 225:
+/* Line 1792 of yacc.c  */
 #line 1106 "parse.y"
-{ yyval.ttype = grok_alignof (yyvsp[0].ttype); ;
-    break;}
-case 225:
+    { (yyval.ttype) = grok_alignof ((yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 226:
+/* Line 1792 of yacc.c  */
 #line 1108 "parse.y"
-{ yyval.ttype = c_alignof (groktypename (yyvsp[-1].ftype.t)); 
-		  check_for_new_type ("alignof", yyvsp[-1].ftype); ;
-    break;}
-case 226:
+    { (yyval.ttype) = c_alignof (groktypename ((yyvsp[(3) - (4)].ftype).t)); 
+		  check_for_new_type ("alignof", (yyvsp[(3) - (4)].ftype)); }
+    break;
+
+  case 227:
+/* Line 1792 of yacc.c  */
 #line 1114 "parse.y"
-{ yyval.ttype = build_new (NULL_TREE, yyvsp[0].ftype.t, NULL_TREE, yyvsp[-1].itype); 
-		  check_for_new_type ("new", yyvsp[0].ftype); ;
-    break;}
-case 227:
+    { (yyval.ttype) = build_new (NULL_TREE, (yyvsp[(2) - (2)].ftype).t, NULL_TREE, (yyvsp[(1) - (2)].itype)); 
+		  check_for_new_type ("new", (yyvsp[(2) - (2)].ftype)); }
+    break;
+
+  case 228:
+/* Line 1792 of yacc.c  */
 #line 1117 "parse.y"
-{ yyval.ttype = build_new (NULL_TREE, yyvsp[-1].ftype.t, yyvsp[0].ttype, yyvsp[-2].itype); 
-		  check_for_new_type ("new", yyvsp[-1].ftype); ;
-    break;}
-case 228:
+    { (yyval.ttype) = build_new (NULL_TREE, (yyvsp[(2) - (3)].ftype).t, (yyvsp[(3) - (3)].ttype), (yyvsp[(1) - (3)].itype)); 
+		  check_for_new_type ("new", (yyvsp[(2) - (3)].ftype)); }
+    break;
+
+  case 229:
+/* Line 1792 of yacc.c  */
 #line 1120 "parse.y"
-{ yyval.ttype = build_new (yyvsp[-1].ttype, yyvsp[0].ftype.t, NULL_TREE, yyvsp[-2].itype); 
-		  check_for_new_type ("new", yyvsp[0].ftype); ;
-    break;}
-case 229:
+    { (yyval.ttype) = build_new ((yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ftype).t, NULL_TREE, (yyvsp[(1) - (3)].itype)); 
+		  check_for_new_type ("new", (yyvsp[(3) - (3)].ftype)); }
+    break;
+
+  case 230:
+/* Line 1792 of yacc.c  */
 #line 1123 "parse.y"
-{ yyval.ttype = build_new (yyvsp[-2].ttype, yyvsp[-1].ftype.t, yyvsp[0].ttype, yyvsp[-3].itype); 
-		  check_for_new_type ("new", yyvsp[-1].ftype); ;
-    break;}
-case 230:
+    { (yyval.ttype) = build_new ((yyvsp[(2) - (4)].ttype), (yyvsp[(3) - (4)].ftype).t, (yyvsp[(4) - (4)].ttype), (yyvsp[(1) - (4)].itype)); 
+		  check_for_new_type ("new", (yyvsp[(3) - (4)].ftype)); }
+    break;
+
+  case 231:
+/* Line 1792 of yacc.c  */
 #line 1136 "parse.y"
-{ yyval.ttype = build_new (NULL_TREE, groktypename(yyvsp[-1].ftype.t),
-				  NULL_TREE, yyvsp[-4].itype); 
-		  check_for_new_type ("new", yyvsp[-1].ftype); ;
-    break;}
-case 231:
+    { (yyval.ttype) = build_new (NULL_TREE, groktypename((yyvsp[(4) - (5)].ftype).t),
+				  NULL_TREE, (yyvsp[(1) - (5)].itype)); 
+		  check_for_new_type ("new", (yyvsp[(4) - (5)].ftype)); }
+    break;
+
+  case 232:
+/* Line 1792 of yacc.c  */
 #line 1141 "parse.y"
-{ yyval.ttype = build_new (NULL_TREE, groktypename(yyvsp[-2].ftype.t), yyvsp[0].ttype, yyvsp[-5].itype); 
-		  check_for_new_type ("new", yyvsp[-2].ftype); ;
-    break;}
-case 232:
+    { (yyval.ttype) = build_new (NULL_TREE, groktypename((yyvsp[(4) - (6)].ftype).t), (yyvsp[(6) - (6)].ttype), (yyvsp[(1) - (6)].itype)); 
+		  check_for_new_type ("new", (yyvsp[(4) - (6)].ftype)); }
+    break;
+
+  case 233:
+/* Line 1792 of yacc.c  */
 #line 1145 "parse.y"
-{ yyval.ttype = build_new (yyvsp[-4].ttype, groktypename(yyvsp[-1].ftype.t), NULL_TREE, yyvsp[-5].itype); 
-		  check_for_new_type ("new", yyvsp[-1].ftype); ;
-    break;}
-case 233:
+    { (yyval.ttype) = build_new ((yyvsp[(2) - (6)].ttype), groktypename((yyvsp[(5) - (6)].ftype).t), NULL_TREE, (yyvsp[(1) - (6)].itype)); 
+		  check_for_new_type ("new", (yyvsp[(5) - (6)].ftype)); }
+    break;
+
+  case 234:
+/* Line 1792 of yacc.c  */
 #line 1149 "parse.y"
-{ yyval.ttype = build_new (yyvsp[-5].ttype, groktypename(yyvsp[-2].ftype.t), yyvsp[0].ttype, yyvsp[-6].itype); 
-		  check_for_new_type ("new", yyvsp[-2].ftype); ;
-    break;}
-case 234:
+    { (yyval.ttype) = build_new ((yyvsp[(2) - (7)].ttype), groktypename((yyvsp[(5) - (7)].ftype).t), (yyvsp[(7) - (7)].ttype), (yyvsp[(1) - (7)].itype)); 
+		  check_for_new_type ("new", (yyvsp[(5) - (7)].ftype)); }
+    break;
+
+  case 235:
+/* Line 1792 of yacc.c  */
 #line 1153 "parse.y"
-{ yyval.ttype = delete_sanity (yyvsp[0].ttype, NULL_TREE, 0, yyvsp[-1].itype); ;
-    break;}
-case 235:
+    { (yyval.ttype) = delete_sanity ((yyvsp[(2) - (2)].ttype), NULL_TREE, 0, (yyvsp[(1) - (2)].itype)); }
+    break;
+
+  case 236:
+/* Line 1792 of yacc.c  */
 #line 1155 "parse.y"
-{ yyval.ttype = delete_sanity (yyvsp[0].ttype, NULL_TREE, 1, yyvsp[-3].itype);
+    { (yyval.ttype) = delete_sanity ((yyvsp[(4) - (4)].ttype), NULL_TREE, 1, (yyvsp[(1) - (4)].itype));
 		  if (yychar == YYEMPTY)
-		    yychar = YYLEX; ;
-    break;}
-case 236:
+		    yychar = YYLEX; }
+    break;
+
+  case 237:
+/* Line 1792 of yacc.c  */
 #line 1159 "parse.y"
-{ yyval.ttype = delete_sanity (yyvsp[0].ttype, yyvsp[-2].ttype, 2, yyvsp[-4].itype);
+    { (yyval.ttype) = delete_sanity ((yyvsp[(5) - (5)].ttype), (yyvsp[(3) - (5)].ttype), 2, (yyvsp[(1) - (5)].itype));
 		  if (yychar == YYEMPTY)
-		    yychar = YYLEX; ;
-    break;}
-case 237:
+		    yychar = YYLEX; }
+    break;
+
+  case 238:
+/* Line 1792 of yacc.c  */
 #line 1163 "parse.y"
-{ yyval.ttype = build_x_unary_op (REALPART_EXPR, yyvsp[0].ttype); ;
-    break;}
-case 238:
+    { (yyval.ttype) = build_x_unary_op (REALPART_EXPR, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 239:
+/* Line 1792 of yacc.c  */
 #line 1165 "parse.y"
-{ yyval.ttype = build_x_unary_op (IMAGPART_EXPR, yyvsp[0].ttype); ;
-    break;}
-case 239:
+    { (yyval.ttype) = build_x_unary_op (IMAGPART_EXPR, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 240:
+/* Line 1792 of yacc.c  */
 #line 1175 "parse.y"
-{ finish_new_placement (NULL_TREE, yyvsp[-2].itype); ;
-    break;}
-case 240:
+    { finish_new_placement (NULL_TREE, (yyvsp[(-1) - (1)].itype)); }
+    break;
+
+  case 241:
+/* Line 1792 of yacc.c  */
 #line 1178 "parse.y"
-{ yyval.itype = begin_new_placement (); ;
-    break;}
-case 241:
+    { (yyval.itype) = begin_new_placement (); }
+    break;
+
+  case 242:
+/* Line 1792 of yacc.c  */
 #line 1182 "parse.y"
-{ yyval.ttype = finish_new_placement (yyvsp[-1].ttype, yyvsp[-2].itype); ;
-    break;}
-case 242:
+    { (yyval.ttype) = finish_new_placement ((yyvsp[(3) - (4)].ttype), (yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 243:
+/* Line 1792 of yacc.c  */
 #line 1184 "parse.y"
-{ cp_pedwarn ("old style placement syntax, use () instead");
-		  yyval.ttype = finish_new_placement (yyvsp[-1].ttype, yyvsp[-2].itype); ;
-    break;}
-case 243:
+    { cp_pedwarn ("old style placement syntax, use () instead");
+		  (yyval.ttype) = finish_new_placement ((yyvsp[(3) - (4)].ttype), (yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 244:
+/* Line 1792 of yacc.c  */
 #line 1190 "parse.y"
-{ yyval.ttype = yyvsp[-1].ttype; ;
-    break;}
-case 244:
+    { (yyval.ttype) = (yyvsp[(2) - (3)].ttype); }
+    break;
+
+  case 245:
+/* Line 1792 of yacc.c  */
 #line 1192 "parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 245:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 246:
+/* Line 1792 of yacc.c  */
 #line 1194 "parse.y"
-{
-		  cp_error ("`%T' is not a valid expression", yyvsp[-1].ftype.t);
-		  yyval.ttype = error_mark_node;
-		;
-    break;}
-case 246:
+    {
+		  cp_error ("`%T' is not a valid expression", (yyvsp[(2) - (3)].ftype).t);
+		  (yyval.ttype) = error_mark_node;
+		}
+    break;
+
+  case 247:
+/* Line 1792 of yacc.c  */
 #line 1202 "parse.y"
-{
+    {
 		  if (pedantic)
 		    pedwarn ("ANSI C++ forbids initialization of new expression with `='");
-		  if (TREE_CODE (yyvsp[0].ttype) != TREE_LIST
-		      && TREE_CODE (yyvsp[0].ttype) != CONSTRUCTOR)
-		    yyval.ttype = build_expr_list (NULL_TREE, yyvsp[0].ttype);
+		  if (TREE_CODE ((yyvsp[(2) - (2)].ttype)) != TREE_LIST
+		      && TREE_CODE ((yyvsp[(2) - (2)].ttype)) != CONSTRUCTOR)
+		    (yyval.ttype) = build_expr_list (NULL_TREE, (yyvsp[(2) - (2)].ttype));
 		  else
-		    yyval.ttype = yyvsp[0].ttype;
-		;
-    break;}
-case 247:
+		    (yyval.ttype) = (yyvsp[(2) - (2)].ttype);
+		}
+    break;
+
+  case 248:
+/* Line 1792 of yacc.c  */
 #line 1216 "parse.y"
-{ yyvsp[-1].ftype.t = finish_parmlist (build_tree_list (NULL_TREE, yyvsp[-1].ftype.t), 0);
-		  yyval.ttype = make_call_declarator (NULL_TREE, yyvsp[-1].ftype.t, NULL_TREE, NULL_TREE);
-		  check_for_new_type ("cast", yyvsp[-1].ftype); ;
-    break;}
-case 248:
+    { (yyvsp[(2) - (3)].ftype).t = finish_parmlist (build_tree_list (NULL_TREE, (yyvsp[(2) - (3)].ftype).t), 0);
+		  (yyval.ttype) = make_call_declarator (NULL_TREE, (yyvsp[(2) - (3)].ftype).t, NULL_TREE, NULL_TREE);
+		  check_for_new_type ("cast", (yyvsp[(2) - (3)].ftype)); }
+    break;
+
+  case 249:
+/* Line 1792 of yacc.c  */
 #line 1220 "parse.y"
-{ yyvsp[-1].ftype.t = finish_parmlist (build_tree_list (NULL_TREE, yyvsp[-1].ftype.t), 0); 
-		  yyval.ttype = make_call_declarator (yyval.ttype, yyvsp[-1].ftype.t, NULL_TREE, NULL_TREE);
-		  check_for_new_type ("cast", yyvsp[-1].ftype); ;
-    break;}
-case 250:
+    { (yyvsp[(3) - (4)].ftype).t = finish_parmlist (build_tree_list (NULL_TREE, (yyvsp[(3) - (4)].ftype).t), 0); 
+		  (yyval.ttype) = make_call_declarator ((yyval.ttype), (yyvsp[(3) - (4)].ftype).t, NULL_TREE, NULL_TREE);
+		  check_for_new_type ("cast", (yyvsp[(3) - (4)].ftype)); }
+    break;
+
+  case 251:
+/* Line 1792 of yacc.c  */
 #line 1228 "parse.y"
-{ yyval.ttype = reparse_absdcl_as_casts (yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 251:
+    { (yyval.ttype) = reparse_absdcl_as_casts ((yyval.ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 252:
+/* Line 1792 of yacc.c  */
 #line 1230 "parse.y"
-{ 
+    { 
 		  tree init = build_nt (CONSTRUCTOR, NULL_TREE,
-					nreverse (yyvsp[-2].ttype)); 
+					nreverse ((yyvsp[(3) - (5)].ttype))); 
 		  if (pedantic)
 		    pedwarn ("ANSI C++ forbids constructor-expressions");
 		  /* Indicate that this was a GNU C constructor expression.  */
 		  TREE_HAS_CONSTRUCTOR (init) = 1;
 
-		  yyval.ttype = reparse_absdcl_as_casts (yyval.ttype, init);
-		;
-    break;}
-case 253:
+		  (yyval.ttype) = reparse_absdcl_as_casts ((yyval.ttype), init);
+		}
+    break;
+
+  case 254:
+/* Line 1792 of yacc.c  */
 #line 1246 "parse.y"
-{ yyval.ttype = build_x_binary_op (MEMBER_REF, yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 254:
+    { (yyval.ttype) = build_x_binary_op (MEMBER_REF, (yyval.ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 255:
+/* Line 1792 of yacc.c  */
 #line 1248 "parse.y"
-{ yyval.ttype = build_m_component_ref (yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 255:
+    { (yyval.ttype) = build_m_component_ref ((yyval.ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 256:
+/* Line 1792 of yacc.c  */
 #line 1250 "parse.y"
-{ yyval.ttype = build_x_binary_op (yyvsp[-1].code, yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 256:
+    { (yyval.ttype) = build_x_binary_op ((yyvsp[(2) - (3)].code), (yyval.ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 257:
+/* Line 1792 of yacc.c  */
 #line 1252 "parse.y"
-{ yyval.ttype = build_x_binary_op (yyvsp[-1].code, yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 257:
+    { (yyval.ttype) = build_x_binary_op ((yyvsp[(2) - (3)].code), (yyval.ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 258:
+/* Line 1792 of yacc.c  */
 #line 1254 "parse.y"
-{ yyval.ttype = build_x_binary_op (yyvsp[-1].code, yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 258:
+    { (yyval.ttype) = build_x_binary_op ((yyvsp[(2) - (3)].code), (yyval.ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 259:
+/* Line 1792 of yacc.c  */
 #line 1256 "parse.y"
-{ yyval.ttype = build_x_binary_op (yyvsp[-1].code, yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 259:
+    { (yyval.ttype) = build_x_binary_op ((yyvsp[(2) - (3)].code), (yyval.ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 260:
+/* Line 1792 of yacc.c  */
 #line 1258 "parse.y"
-{ yyval.ttype = build_x_binary_op (yyvsp[-1].code, yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 260:
+    { (yyval.ttype) = build_x_binary_op ((yyvsp[(2) - (3)].code), (yyval.ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 261:
+/* Line 1792 of yacc.c  */
 #line 1260 "parse.y"
-{ yyval.ttype = build_x_binary_op (yyvsp[-1].code, yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 261:
+    { (yyval.ttype) = build_x_binary_op ((yyvsp[(2) - (3)].code), (yyval.ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 262:
+/* Line 1792 of yacc.c  */
 #line 1262 "parse.y"
-{ yyval.ttype = build_x_binary_op (yyvsp[-1].code, yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 262:
+    { (yyval.ttype) = build_x_binary_op ((yyvsp[(2) - (3)].code), (yyval.ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 263:
+/* Line 1792 of yacc.c  */
 #line 1264 "parse.y"
-{ yyval.ttype = build_x_binary_op (yyvsp[-1].code, yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 263:
+    { (yyval.ttype) = build_x_binary_op ((yyvsp[(2) - (3)].code), (yyval.ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 264:
+/* Line 1792 of yacc.c  */
 #line 1266 "parse.y"
-{ yyval.ttype = build_x_binary_op (LT_EXPR, yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 264:
+    { (yyval.ttype) = build_x_binary_op (LT_EXPR, (yyval.ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 265:
+/* Line 1792 of yacc.c  */
 #line 1268 "parse.y"
-{ yyval.ttype = build_x_binary_op (GT_EXPR, yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 265:
+    { (yyval.ttype) = build_x_binary_op (GT_EXPR, (yyval.ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 266:
+/* Line 1792 of yacc.c  */
 #line 1270 "parse.y"
-{ yyval.ttype = build_x_binary_op (yyvsp[-1].code, yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 266:
+    { (yyval.ttype) = build_x_binary_op ((yyvsp[(2) - (3)].code), (yyval.ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 267:
+/* Line 1792 of yacc.c  */
 #line 1272 "parse.y"
-{ yyval.ttype = build_x_binary_op (yyvsp[-1].code, yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 267:
+    { (yyval.ttype) = build_x_binary_op ((yyvsp[(2) - (3)].code), (yyval.ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 268:
+/* Line 1792 of yacc.c  */
 #line 1274 "parse.y"
-{ yyval.ttype = build_x_binary_op (yyvsp[-1].code, yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 268:
+    { (yyval.ttype) = build_x_binary_op ((yyvsp[(2) - (3)].code), (yyval.ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 269:
+/* Line 1792 of yacc.c  */
 #line 1276 "parse.y"
-{ yyval.ttype = build_x_binary_op (yyvsp[-1].code, yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 269:
+    { (yyval.ttype) = build_x_binary_op ((yyvsp[(2) - (3)].code), (yyval.ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 270:
+/* Line 1792 of yacc.c  */
 #line 1278 "parse.y"
-{ yyval.ttype = build_x_binary_op (yyvsp[-1].code, yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 270:
+    { (yyval.ttype) = build_x_binary_op ((yyvsp[(2) - (3)].code), (yyval.ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 271:
+/* Line 1792 of yacc.c  */
 #line 1280 "parse.y"
-{ yyval.ttype = build_x_binary_op (TRUTH_ANDIF_EXPR, yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 271:
+    { (yyval.ttype) = build_x_binary_op (TRUTH_ANDIF_EXPR, (yyval.ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 272:
+/* Line 1792 of yacc.c  */
 #line 1282 "parse.y"
-{ yyval.ttype = build_x_binary_op (TRUTH_ORIF_EXPR, yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 272:
+    { (yyval.ttype) = build_x_binary_op (TRUTH_ORIF_EXPR, (yyval.ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 273:
+/* Line 1792 of yacc.c  */
 #line 1284 "parse.y"
-{ yyval.ttype = build_x_conditional_expr (yyval.ttype, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 273:
+    { (yyval.ttype) = build_x_conditional_expr ((yyval.ttype), (yyvsp[(3) - (5)].ttype), (yyvsp[(5) - (5)].ttype)); }
+    break;
+
+  case 274:
+/* Line 1792 of yacc.c  */
 #line 1286 "parse.y"
-{ yyval.ttype = build_x_modify_expr (yyval.ttype, NOP_EXPR, yyvsp[0].ttype);
-		  if (yyval.ttype != error_mark_node)
-                    C_SET_EXP_ORIGINAL_CODE (yyval.ttype, MODIFY_EXPR); ;
-    break;}
-case 274:
+    { (yyval.ttype) = build_x_modify_expr ((yyval.ttype), NOP_EXPR, (yyvsp[(3) - (3)].ttype));
+		  if ((yyval.ttype) != error_mark_node)
+                    C_SET_EXP_ORIGINAL_CODE ((yyval.ttype), MODIFY_EXPR); }
+    break;
+
+  case 275:
+/* Line 1792 of yacc.c  */
 #line 1290 "parse.y"
-{ yyval.ttype = build_x_modify_expr (yyval.ttype, yyvsp[-1].code, yyvsp[0].ttype); ;
-    break;}
-case 275:
+    { (yyval.ttype) = build_x_modify_expr ((yyval.ttype), (yyvsp[(2) - (3)].code), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 276:
+/* Line 1792 of yacc.c  */
 #line 1292 "parse.y"
-{ yyval.ttype = build_throw (NULL_TREE); ;
-    break;}
-case 276:
+    { (yyval.ttype) = build_throw (NULL_TREE); }
+    break;
+
+  case 277:
+/* Line 1792 of yacc.c  */
 #line 1294 "parse.y"
-{ yyval.ttype = build_throw (yyvsp[0].ttype); ;
-    break;}
-case 277:
+    { (yyval.ttype) = build_throw ((yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 278:
+/* Line 1792 of yacc.c  */
 #line 1312 "parse.y"
-{ yyval.ttype = build_parse_node (BIT_NOT_EXPR, yyvsp[0].ttype); ;
-    break;}
-case 278:
+    { (yyval.ttype) = build_parse_node (BIT_NOT_EXPR, (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 279:
+/* Line 1792 of yacc.c  */
 #line 1314 "parse.y"
-{ yyval.ttype = build_parse_node (BIT_NOT_EXPR, yyvsp[0].ttype); ;
-    break;}
-case 284:
+    { (yyval.ttype) = build_parse_node (BIT_NOT_EXPR, (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 285:
+/* Line 1792 of yacc.c  */
 #line 1323 "parse.y"
-{
+    {
 		  /* If lastiddecl is a TREE_LIST, it's a baselink, which
 		     means that we're in an expression like S::f<int>, so
 		     don't do_identifier; we only do that for unqualified
 		     identifiers.  */
 		  if (lastiddecl && TREE_CODE (lastiddecl) != TREE_LIST)
-		    yyval.ttype = do_identifier (yyvsp[-1].ttype, 1, NULL_TREE);
+		    (yyval.ttype) = do_identifier ((yyvsp[(-1) - (0)].ttype), 1, NULL_TREE);
 		  else
-		    yyval.ttype = yyvsp[-1].ttype;
-		;
-    break;}
-case 285:
+		    (yyval.ttype) = (yyvsp[(-1) - (0)].ttype);
+		}
+    break;
+
+  case 286:
+/* Line 1792 of yacc.c  */
 #line 1336 "parse.y"
-{ yyval.ttype = lookup_template_function (yyvsp[-2].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 286:
+    { (yyval.ttype) = lookup_template_function ((yyvsp[(3) - (5)].ttype), (yyvsp[(4) - (5)].ttype)); }
+    break;
+
+  case 287:
+/* Line 1792 of yacc.c  */
 #line 1338 "parse.y"
-{ yyval.ttype = lookup_template_function (yyvsp[-2].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 287:
+    { (yyval.ttype) = lookup_template_function ((yyvsp[(3) - (5)].ttype), (yyvsp[(4) - (5)].ttype)); }
+    break;
+
+  case 288:
+/* Line 1792 of yacc.c  */
 #line 1343 "parse.y"
-{ yyval.ttype = lookup_template_function (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 288:
+    { (yyval.ttype) = lookup_template_function ((yyvsp[(2) - (5)].ttype), (yyvsp[(4) - (5)].ttype)); }
+    break;
+
+  case 289:
+/* Line 1792 of yacc.c  */
 #line 1345 "parse.y"
-{ yyval.ttype = lookup_template_function (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 289:
+    { (yyval.ttype) = lookup_template_function ((yyvsp[(2) - (5)].ttype), (yyvsp[(4) - (5)].ttype)); }
+    break;
+
+  case 290:
+/* Line 1792 of yacc.c  */
 #line 1348 "parse.y"
-{ yyval.ttype = lookup_template_function (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 294:
+    { (yyval.ttype) = lookup_template_function ((yyvsp[(2) - (5)].ttype), (yyvsp[(4) - (5)].ttype)); }
+    break;
+
+  case 295:
+/* Line 1792 of yacc.c  */
 #line 1360 "parse.y"
-{
+    {
 		  /* Provide support for '(' attributes '*' declarator ')'
 		     etc */
-		  yyval.ttype = decl_tree_cons (yyvsp[-1].ttype, yyvsp[0].ttype, NULL_TREE);
-		;
-    break;}
-case 296:
+		  (yyval.ttype) = decl_tree_cons ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype), NULL_TREE);
+		}
+    break;
+
+  case 297:
+/* Line 1792 of yacc.c  */
 #line 1370 "parse.y"
-{ yyval.ttype = build_parse_node (INDIRECT_REF, yyvsp[0].ttype); ;
-    break;}
-case 297:
+    { (yyval.ttype) = build_parse_node (INDIRECT_REF, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 298:
+/* Line 1792 of yacc.c  */
 #line 1372 "parse.y"
-{ yyval.ttype = build_parse_node (ADDR_EXPR, yyvsp[0].ttype); ;
-    break;}
-case 298:
+    { (yyval.ttype) = build_parse_node (ADDR_EXPR, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 299:
+/* Line 1792 of yacc.c  */
 #line 1374 "parse.y"
-{ yyval.ttype = yyvsp[-1].ttype; ;
-    break;}
-case 299:
+    { (yyval.ttype) = (yyvsp[(2) - (3)].ttype); }
+    break;
+
+  case 300:
+/* Line 1792 of yacc.c  */
 #line 1379 "parse.y"
-{ yyval.ttype = lookup_template_function (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 300:
+    { (yyval.ttype) = lookup_template_function ((yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 301:
+/* Line 1792 of yacc.c  */
 #line 1381 "parse.y"
-{ yyval.ttype = lookup_template_function (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 304:
+    { (yyval.ttype) = lookup_template_function ((yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 305:
+/* Line 1792 of yacc.c  */
 #line 1391 "parse.y"
-{ yyval.ttype = finish_decl_parsing (yyvsp[-1].ttype); ;
-    break;}
-case 305:
+    { (yyval.ttype) = finish_decl_parsing ((yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 306:
+/* Line 1792 of yacc.c  */
 #line 1396 "parse.y"
-{
-		  if (TREE_CODE (yyvsp[0].ttype) == BIT_NOT_EXPR)
-		    yyval.ttype = build_x_unary_op (BIT_NOT_EXPR, TREE_OPERAND (yyvsp[0].ttype, 0));
+    {
+		  if (TREE_CODE ((yyvsp[(1) - (1)].ttype)) == BIT_NOT_EXPR)
+		    (yyval.ttype) = build_x_unary_op (BIT_NOT_EXPR, TREE_OPERAND ((yyvsp[(1) - (1)].ttype), 0));
 		  else 
-		    yyval.ttype = finish_id_expr (yyvsp[0].ttype);
-		;
-    break;}
-case 308:
+		    (yyval.ttype) = finish_id_expr ((yyvsp[(1) - (1)].ttype));
+		}
+    break;
+
+  case 309:
+/* Line 1792 of yacc.c  */
 #line 1405 "parse.y"
-{
+    {
 		  if (processing_template_decl)
 		    push_obstacks (&permanent_obstack, &permanent_obstack);
-		  yyval.ttype = combine_strings (yyval.ttype);
+		  (yyval.ttype) = combine_strings ((yyval.ttype));
 		  /* combine_strings doesn't set up TYPE_MAIN_VARIANT of
 		     a const array the way we want, so fix it.  */
 		  if (flag_const_strings)
-		    TREE_TYPE (yyval.ttype) = build_cplus_array_type
-		      (TREE_TYPE (TREE_TYPE (yyval.ttype)),
-		       TYPE_DOMAIN (TREE_TYPE (yyval.ttype)));
+		    TREE_TYPE ((yyval.ttype)) = build_cplus_array_type
+		      (TREE_TYPE (TREE_TYPE ((yyval.ttype))),
+		       TYPE_DOMAIN (TREE_TYPE ((yyval.ttype))));
 		  if (processing_template_decl)
 		    pop_obstacks ();
-		;
-    break;}
-case 309:
+		}
+    break;
+
+  case 310:
+/* Line 1792 of yacc.c  */
 #line 1419 "parse.y"
-{ yyval.ttype = finish_parenthesized_expr (yyvsp[-1].ttype); ;
-    break;}
-case 310:
+    { (yyval.ttype) = finish_parenthesized_expr ((yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 311:
+/* Line 1792 of yacc.c  */
 #line 1421 "parse.y"
-{ yyvsp[-1].ttype = reparse_decl_as_expr (NULL_TREE, yyvsp[-1].ttype);
-		  yyval.ttype = finish_parenthesized_expr (yyvsp[-1].ttype); ;
-    break;}
-case 311:
+    { (yyvsp[(2) - (3)].ttype) = reparse_decl_as_expr (NULL_TREE, (yyvsp[(2) - (3)].ttype));
+		  (yyval.ttype) = finish_parenthesized_expr ((yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 312:
+/* Line 1792 of yacc.c  */
 #line 1424 "parse.y"
-{ yyval.ttype = error_mark_node; ;
-    break;}
-case 312:
+    { (yyval.ttype) = error_mark_node; }
+    break;
+
+  case 313:
+/* Line 1792 of yacc.c  */
 #line 1426 "parse.y"
-{ tree scope = current_scope ();
+    { tree scope = current_scope ();
 		  if (!scope || TREE_CODE (scope) != FUNCTION_DECL)
 		    {
 		      error ("braced-group within expression allowed only inside a function");
@@ -5609,214 +7017,298 @@ case 312:
 		    }
 		  if (pedantic)
 		    pedwarn ("ANSI C++ forbids braced-groups within expressions");  
-		  yyval.ttype = begin_stmt_expr (); 
-		;
-    break;}
-case 313:
+		  (yyval.ttype) = begin_stmt_expr (); 
+		}
+    break;
+
+  case 314:
+/* Line 1792 of yacc.c  */
 #line 1437 "parse.y"
-{ yyval.ttype = finish_stmt_expr (yyvsp[-2].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 314:
+    { (yyval.ttype) = finish_stmt_expr ((yyvsp[(2) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 315:
+/* Line 1792 of yacc.c  */
 #line 1442 "parse.y"
-{ yyval.ttype = finish_call_expr (yyvsp[-3].ttype, yyvsp[-1].ttype, 1); ;
-    break;}
-case 315:
+    { (yyval.ttype) = finish_call_expr ((yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype), 1); }
+    break;
+
+  case 316:
+/* Line 1792 of yacc.c  */
 #line 1444 "parse.y"
-{ yyval.ttype = finish_call_expr (yyvsp[-1].ttype, NULL_TREE, 1); ;
-    break;}
-case 316:
+    { (yyval.ttype) = finish_call_expr ((yyvsp[(1) - (2)].ttype), NULL_TREE, 1); }
+    break;
+
+  case 317:
+/* Line 1792 of yacc.c  */
 #line 1446 "parse.y"
-{ yyval.ttype = finish_call_expr (yyvsp[-3].ttype, yyvsp[-1].ttype, 0); ;
-    break;}
-case 317:
+    { (yyval.ttype) = finish_call_expr ((yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype), 0); }
+    break;
+
+  case 318:
+/* Line 1792 of yacc.c  */
 #line 1448 "parse.y"
-{ yyval.ttype = finish_call_expr (yyvsp[-1].ttype, NULL_TREE, 0); ;
-    break;}
-case 318:
+    { (yyval.ttype) = finish_call_expr ((yyvsp[(1) - (2)].ttype), NULL_TREE, 0); }
+    break;
+
+  case 319:
+/* Line 1792 of yacc.c  */
 #line 1450 "parse.y"
-{ yyval.ttype = grok_array_decl (yyval.ttype, yyvsp[-1].ttype); ;
-    break;}
-case 319:
+    { (yyval.ttype) = grok_array_decl ((yyval.ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 320:
+/* Line 1792 of yacc.c  */
 #line 1452 "parse.y"
-{ yyval.ttype = finish_increment_expr (yyvsp[-1].ttype, POSTINCREMENT_EXPR); ;
-    break;}
-case 320:
+    { (yyval.ttype) = finish_increment_expr ((yyvsp[(1) - (2)].ttype), POSTINCREMENT_EXPR); }
+    break;
+
+  case 321:
+/* Line 1792 of yacc.c  */
 #line 1454 "parse.y"
-{ yyval.ttype = finish_increment_expr (yyvsp[-1].ttype, POSTDECREMENT_EXPR); ;
-    break;}
-case 321:
+    { (yyval.ttype) = finish_increment_expr ((yyvsp[(1) - (2)].ttype), POSTDECREMENT_EXPR); }
+    break;
+
+  case 322:
+/* Line 1792 of yacc.c  */
 #line 1457 "parse.y"
-{ yyval.ttype = finish_this_expr (); ;
-    break;}
-case 322:
+    { (yyval.ttype) = finish_this_expr (); }
+    break;
+
+  case 323:
+/* Line 1792 of yacc.c  */
 #line 1459 "parse.y"
-{
+    {
 		  /* This is a C cast in C++'s `functional' notation
 		     using the "implicit int" extension so that:
 		     `const (3)' is equivalent to `const int (3)'.  */
 		  tree type;
 
-		  if (yyvsp[-1].ttype == error_mark_node)
+		  if ((yyvsp[(3) - (4)].ttype) == error_mark_node)
 		    {
-		      yyval.ttype = error_mark_node;
+		      (yyval.ttype) = error_mark_node;
 		      break;
 		    }
 
 		  type = cp_build_qualified_type (integer_type_node,
-						  cp_type_qual_from_rid (yyvsp[-3].ttype));
-		  yyval.ttype = build_c_cast (type, build_compound_expr (yyvsp[-1].ttype));
-		;
-    break;}
-case 324:
+						  cp_type_qual_from_rid ((yyvsp[(1) - (4)].ttype)));
+		  (yyval.ttype) = build_c_cast (type, build_compound_expr ((yyvsp[(3) - (4)].ttype)));
+		}
+    break;
+
+  case 325:
+/* Line 1792 of yacc.c  */
 #line 1477 "parse.y"
-{ tree type = groktypename (yyvsp[-4].ftype.t);
-		  check_for_new_type ("dynamic_cast", yyvsp[-4].ftype);
-		  yyval.ttype = build_dynamic_cast (type, yyvsp[-1].ttype); ;
-    break;}
-case 325:
+    { tree type = groktypename ((yyvsp[(3) - (7)].ftype).t);
+		  check_for_new_type ("dynamic_cast", (yyvsp[(3) - (7)].ftype));
+		  (yyval.ttype) = build_dynamic_cast (type, (yyvsp[(6) - (7)].ttype)); }
+    break;
+
+  case 326:
+/* Line 1792 of yacc.c  */
 #line 1481 "parse.y"
-{ tree type = groktypename (yyvsp[-4].ftype.t);
-		  check_for_new_type ("static_cast", yyvsp[-4].ftype);
-		  yyval.ttype = build_static_cast (type, yyvsp[-1].ttype); ;
-    break;}
-case 326:
+    { tree type = groktypename ((yyvsp[(3) - (7)].ftype).t);
+		  check_for_new_type ("static_cast", (yyvsp[(3) - (7)].ftype));
+		  (yyval.ttype) = build_static_cast (type, (yyvsp[(6) - (7)].ttype)); }
+    break;
+
+  case 327:
+/* Line 1792 of yacc.c  */
 #line 1485 "parse.y"
-{ tree type = groktypename (yyvsp[-4].ftype.t);
-		  check_for_new_type ("reinterpret_cast", yyvsp[-4].ftype);
-		  yyval.ttype = build_reinterpret_cast (type, yyvsp[-1].ttype); ;
-    break;}
-case 327:
+    { tree type = groktypename ((yyvsp[(3) - (7)].ftype).t);
+		  check_for_new_type ("reinterpret_cast", (yyvsp[(3) - (7)].ftype));
+		  (yyval.ttype) = build_reinterpret_cast (type, (yyvsp[(6) - (7)].ttype)); }
+    break;
+
+  case 328:
+/* Line 1792 of yacc.c  */
 #line 1489 "parse.y"
-{ tree type = groktypename (yyvsp[-4].ftype.t);
-		  check_for_new_type ("const_cast", yyvsp[-4].ftype);
-		  yyval.ttype = build_const_cast (type, yyvsp[-1].ttype); ;
-    break;}
-case 328:
+    { tree type = groktypename ((yyvsp[(3) - (7)].ftype).t);
+		  check_for_new_type ("const_cast", (yyvsp[(3) - (7)].ftype));
+		  (yyval.ttype) = build_const_cast (type, (yyvsp[(6) - (7)].ttype)); }
+    break;
+
+  case 329:
+/* Line 1792 of yacc.c  */
 #line 1493 "parse.y"
-{ yyval.ttype = build_x_typeid (yyvsp[-1].ttype); ;
-    break;}
-case 329:
+    { (yyval.ttype) = build_x_typeid ((yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 330:
+/* Line 1792 of yacc.c  */
 #line 1495 "parse.y"
-{ tree type = groktypename (yyvsp[-1].ftype.t);
-		  check_for_new_type ("typeid", yyvsp[-1].ftype);
-		  yyval.ttype = get_typeid (TYPE_MAIN_VARIANT (type)); ;
-    break;}
-case 330:
+    { tree type = groktypename ((yyvsp[(3) - (4)].ftype).t);
+		  check_for_new_type ("typeid", (yyvsp[(3) - (4)].ftype));
+		  (yyval.ttype) = get_typeid (TYPE_MAIN_VARIANT (type)); }
+    break;
+
+  case 331:
+/* Line 1792 of yacc.c  */
 #line 1499 "parse.y"
-{ yyval.ttype = do_scoped_id (yyvsp[0].ttype, 1); ;
-    break;}
-case 331:
+    { (yyval.ttype) = do_scoped_id ((yyvsp[(2) - (2)].ttype), 1); }
+    break;
+
+  case 332:
+/* Line 1792 of yacc.c  */
 #line 1501 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 332:
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype); }
+    break;
+
+  case 333:
+/* Line 1792 of yacc.c  */
 #line 1503 "parse.y"
-{
+    {
 		  got_scope = NULL_TREE;
-		  if (TREE_CODE (yyvsp[0].ttype) == IDENTIFIER_NODE)
-		    yyval.ttype = do_scoped_id (yyvsp[0].ttype, 1);
+		  if (TREE_CODE ((yyvsp[(2) - (2)].ttype)) == IDENTIFIER_NODE)
+		    (yyval.ttype) = do_scoped_id ((yyvsp[(2) - (2)].ttype), 1);
 		  else
-		    yyval.ttype = yyvsp[0].ttype;
-		;
-    break;}
-case 333:
+		    (yyval.ttype) = (yyvsp[(2) - (2)].ttype);
+		}
+    break;
+
+  case 334:
+/* Line 1792 of yacc.c  */
 #line 1511 "parse.y"
-{ yyval.ttype = build_offset_ref (OP0 (yyval.ttype), OP1 (yyval.ttype)); ;
-    break;}
-case 334:
+    { (yyval.ttype) = build_offset_ref (OP0 ((yyval.ttype)), OP1 ((yyval.ttype))); }
+    break;
+
+  case 335:
+/* Line 1792 of yacc.c  */
 #line 1513 "parse.y"
-{ yyval.ttype = finish_qualified_call_expr (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 335:
+    { (yyval.ttype) = finish_qualified_call_expr ((yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 336:
+/* Line 1792 of yacc.c  */
 #line 1515 "parse.y"
-{ yyval.ttype = finish_qualified_call_expr (yyvsp[-1].ttype, NULL_TREE); ;
-    break;}
-case 336:
+    { (yyval.ttype) = finish_qualified_call_expr ((yyvsp[(1) - (2)].ttype), NULL_TREE); }
+    break;
+
+  case 337:
+/* Line 1792 of yacc.c  */
 #line 1517 "parse.y"
-{ 
-		  yyval.ttype = build_x_component_ref (yyval.ttype, yyvsp[0].ttype, NULL_TREE, 1); 
-		;
-    break;}
-case 337:
+    { 
+		  (yyval.ttype) = build_x_component_ref ((yyval.ttype), (yyvsp[(2) - (2)].ttype), NULL_TREE, 1); 
+		}
+    break;
+
+  case 338:
+/* Line 1792 of yacc.c  */
 #line 1521 "parse.y"
-{ yyval.ttype = finish_object_call_expr (yyvsp[-3].ttype, yyvsp[-4].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 338:
+    { (yyval.ttype) = finish_object_call_expr ((yyvsp[(2) - (5)].ttype), (yyvsp[(1) - (5)].ttype), (yyvsp[(4) - (5)].ttype)); }
+    break;
+
+  case 339:
+/* Line 1792 of yacc.c  */
 #line 1523 "parse.y"
-{ yyval.ttype = finish_object_call_expr (yyvsp[-1].ttype, yyvsp[-2].ttype, NULL_TREE); ;
-    break;}
-case 339:
+    { (yyval.ttype) = finish_object_call_expr ((yyvsp[(2) - (3)].ttype), (yyvsp[(1) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 340:
+/* Line 1792 of yacc.c  */
 #line 1525 "parse.y"
-{ yyval.ttype = build_x_component_ref (yyval.ttype, yyvsp[0].ttype, NULL_TREE, 1); ;
-    break;}
-case 340:
+    { (yyval.ttype) = build_x_component_ref ((yyval.ttype), (yyvsp[(2) - (2)].ttype), NULL_TREE, 1); }
+    break;
+
+  case 341:
+/* Line 1792 of yacc.c  */
 #line 1527 "parse.y"
-{ if (processing_template_decl)
-		    yyval.ttype = build_min_nt (COMPONENT_REF, yyvsp[-1].ttype, copy_to_permanent (yyvsp[0].ttype));
+    { if (processing_template_decl)
+		    (yyval.ttype) = build_min_nt (COMPONENT_REF, (yyvsp[(1) - (2)].ttype), copy_to_permanent ((yyvsp[(2) - (2)].ttype)));
 		  else
-		    yyval.ttype = build_object_ref (yyval.ttype, OP0 (yyvsp[0].ttype), OP1 (yyvsp[0].ttype)); ;
-    break;}
-case 341:
+		    (yyval.ttype) = build_object_ref ((yyval.ttype), OP0 ((yyvsp[(2) - (2)].ttype)), OP1 ((yyvsp[(2) - (2)].ttype))); }
+    break;
+
+  case 342:
+/* Line 1792 of yacc.c  */
 #line 1532 "parse.y"
-{ yyval.ttype = finish_object_call_expr (yyvsp[-3].ttype, yyvsp[-4].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 342:
+    { (yyval.ttype) = finish_object_call_expr ((yyvsp[(2) - (5)].ttype), (yyvsp[(1) - (5)].ttype), (yyvsp[(4) - (5)].ttype)); }
+    break;
+
+  case 343:
+/* Line 1792 of yacc.c  */
 #line 1534 "parse.y"
-{ yyval.ttype = finish_object_call_expr (yyvsp[-1].ttype, yyvsp[-2].ttype, NULL_TREE); ;
-    break;}
-case 343:
+    { (yyval.ttype) = finish_object_call_expr ((yyvsp[(2) - (3)].ttype), (yyvsp[(1) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 344:
+/* Line 1792 of yacc.c  */
 #line 1536 "parse.y"
-{ yyval.ttype = finish_qualified_object_call_expr (yyvsp[-3].ttype, yyvsp[-4].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 344:
+    { (yyval.ttype) = finish_qualified_object_call_expr ((yyvsp[(2) - (5)].ttype), (yyvsp[(1) - (5)].ttype), (yyvsp[(4) - (5)].ttype)); }
+    break;
+
+  case 345:
+/* Line 1792 of yacc.c  */
 #line 1538 "parse.y"
-{ yyval.ttype = finish_qualified_object_call_expr (yyvsp[-1].ttype, yyvsp[-2].ttype, NULL_TREE); ;
-    break;}
-case 345:
+    { (yyval.ttype) = finish_qualified_object_call_expr ((yyvsp[(2) - (3)].ttype), (yyvsp[(1) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 346:
+/* Line 1792 of yacc.c  */
 #line 1541 "parse.y"
-{ yyval.ttype = finish_pseudo_destructor_call_expr (yyvsp[-3].ttype, NULL_TREE, yyvsp[-1].ttype); ;
-    break;}
-case 346:
+    { (yyval.ttype) = finish_pseudo_destructor_call_expr ((yyvsp[(1) - (4)].ttype), NULL_TREE, (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 347:
+/* Line 1792 of yacc.c  */
 #line 1543 "parse.y"
-{ yyval.ttype = finish_pseudo_destructor_call_expr (yyvsp[-5].ttype, yyvsp[-4].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 347:
+    { (yyval.ttype) = finish_pseudo_destructor_call_expr ((yyvsp[(1) - (6)].ttype), (yyvsp[(2) - (6)].ttype), (yyvsp[(5) - (6)].ttype)); }
+    break;
+
+  case 348:
+/* Line 1792 of yacc.c  */
 #line 1545 "parse.y"
-{
-		  yyval.ttype = error_mark_node;
-		;
-    break;}
-case 348:
+    {
+		  (yyval.ttype) = error_mark_node;
+		}
+    break;
+
+  case 349:
+/* Line 1792 of yacc.c  */
 #line 1590 "parse.y"
-{ yyval.itype = 0; ;
-    break;}
-case 349:
+    { (yyval.itype) = 0; }
+    break;
+
+  case 350:
+/* Line 1792 of yacc.c  */
 #line 1592 "parse.y"
-{ got_scope = NULL_TREE; yyval.itype = 1; ;
-    break;}
-case 350:
+    { got_scope = NULL_TREE; (yyval.itype) = 1; }
+    break;
+
+  case 351:
+/* Line 1792 of yacc.c  */
 #line 1597 "parse.y"
-{ yyval.itype = 0; ;
-    break;}
-case 351:
+    { (yyval.itype) = 0; }
+    break;
+
+  case 352:
+/* Line 1792 of yacc.c  */
 #line 1599 "parse.y"
-{ got_scope = NULL_TREE; yyval.itype = 1; ;
-    break;}
-case 352:
+    { got_scope = NULL_TREE; (yyval.itype) = 1; }
+    break;
+
+  case 353:
+/* Line 1792 of yacc.c  */
 #line 1604 "parse.y"
-{ yyval.ttype = boolean_true_node; ;
-    break;}
-case 353:
+    { (yyval.ttype) = boolean_true_node; }
+    break;
+
+  case 354:
+/* Line 1792 of yacc.c  */
 #line 1606 "parse.y"
-{ yyval.ttype = boolean_false_node; ;
-    break;}
-case 355:
+    { (yyval.ttype) = boolean_false_node; }
+    break;
+
+  case 356:
+/* Line 1792 of yacc.c  */
 #line 1613 "parse.y"
-{ yyval.ttype = chainon (yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 356:
+    { (yyval.ttype) = chainon ((yyval.ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 357:
+/* Line 1792 of yacc.c  */
 #line 1618 "parse.y"
-{
+    {
 		  if (! current_function_parms_stored)
 		    store_parm_decls ();
 		  setup_vtbl_ptr ();
@@ -5824,930 +7316,1240 @@ case 356:
 		     pair of curley braces of a function.  These are needed
 		     for correct operation of dwarfout.c.  */
 		  keep_next_level ();
-		;
-    break;}
-case 357:
+		}
+    break;
+
+  case 358:
+/* Line 1792 of yacc.c  */
 #line 1631 "parse.y"
-{ got_object = TREE_TYPE (yyval.ttype); ;
-    break;}
-case 358:
+    { got_object = TREE_TYPE ((yyval.ttype)); }
+    break;
+
+  case 359:
+/* Line 1792 of yacc.c  */
 #line 1633 "parse.y"
-{
-		  yyval.ttype = build_x_arrow (yyval.ttype); 
-		  got_object = TREE_TYPE (yyval.ttype);
-		;
-    break;}
-case 359:
+    {
+		  (yyval.ttype) = build_x_arrow ((yyval.ttype)); 
+		  got_object = TREE_TYPE ((yyval.ttype));
+		}
+    break;
+
+  case 360:
+/* Line 1792 of yacc.c  */
 #line 1641 "parse.y"
-{
-		  resume_momentary (yyvsp[-1].itype);
-		  if (yyvsp[-2].ftype.t && IS_AGGR_TYPE_CODE (TREE_CODE (yyvsp[-2].ftype.t)))
-		    note_got_semicolon (yyvsp[-2].ftype.t);
-		;
-    break;}
-case 360:
+    {
+		  resume_momentary ((yyvsp[(2) - (3)].itype));
+		  if ((yyvsp[(1) - (3)].ftype).t && IS_AGGR_TYPE_CODE (TREE_CODE ((yyvsp[(1) - (3)].ftype).t)))
+		    note_got_semicolon ((yyvsp[(1) - (3)].ftype).t);
+		}
+    break;
+
+  case 361:
+/* Line 1792 of yacc.c  */
 #line 1647 "parse.y"
-{
-		  resume_momentary (yyvsp[-1].itype);
-		  note_list_got_semicolon (yyvsp[-2].ftype.t);
-		;
-    break;}
-case 361:
+    {
+		  resume_momentary ((yyvsp[(2) - (3)].itype));
+		  note_list_got_semicolon ((yyvsp[(1) - (3)].ftype).t);
+		}
+    break;
+
+  case 362:
+/* Line 1792 of yacc.c  */
 #line 1652 "parse.y"
-{ resume_momentary (yyvsp[-1].itype); ;
-    break;}
-case 362:
+    { resume_momentary ((yyvsp[(2) - (3)].itype)); }
+    break;
+
+  case 363:
+/* Line 1792 of yacc.c  */
 #line 1654 "parse.y"
-{
-		  shadow_tag (yyvsp[-1].ftype.t);
-		  note_list_got_semicolon (yyvsp[-1].ftype.t);
-		;
-    break;}
-case 363:
+    {
+		  shadow_tag ((yyvsp[(1) - (2)].ftype).t);
+		  note_list_got_semicolon ((yyvsp[(1) - (2)].ftype).t);
+		}
+    break;
+
+  case 364:
+/* Line 1792 of yacc.c  */
 #line 1659 "parse.y"
-{ warning ("empty declaration"); ;
-    break;}
-case 364:
+    { warning ("empty declaration"); }
+    break;
+
+  case 365:
+/* Line 1792 of yacc.c  */
 #line 1661 "parse.y"
-{ pedantic = yyvsp[-1].itype; ;
-    break;}
-case 367:
+    { pedantic = (yyvsp[(1) - (2)].itype); }
+    break;
+
+  case 368:
+/* Line 1792 of yacc.c  */
 #line 1675 "parse.y"
-{ yyval.ttype = make_call_declarator (NULL_TREE, empty_parms (),
-					     NULL_TREE, NULL_TREE); ;
-    break;}
-case 368:
+    { (yyval.ttype) = make_call_declarator (NULL_TREE, empty_parms (),
+					     NULL_TREE, NULL_TREE); }
+    break;
+
+  case 369:
+/* Line 1792 of yacc.c  */
 #line 1678 "parse.y"
-{ yyval.ttype = make_call_declarator (yyval.ttype, empty_parms (), NULL_TREE,
-					     NULL_TREE); ;
-    break;}
-case 369:
+    { (yyval.ttype) = make_call_declarator ((yyval.ttype), empty_parms (), NULL_TREE,
+					     NULL_TREE); }
+    break;
+
+  case 370:
+/* Line 1792 of yacc.c  */
 #line 1685 "parse.y"
-{ yyval.ftype.t = build_decl_list (yyvsp[-1].ftype.t, yyvsp[0].ttype); 
-		  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;
-    break;}
-case 370:
+    { (yyval.ftype).t = build_decl_list ((yyvsp[(1) - (2)].ftype).t, (yyvsp[(2) - (2)].ttype)); 
+		  (yyval.ftype).new_type_flag = (yyvsp[(1) - (2)].ftype).new_type_flag; }
+    break;
+
+  case 371:
+/* Line 1792 of yacc.c  */
 #line 1688 "parse.y"
-{ yyval.ftype.t = build_decl_list (yyvsp[-1].ftype.t, yyvsp[0].ttype); 
-		  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;
-    break;}
-case 371:
+    { (yyval.ftype).t = build_decl_list ((yyvsp[(1) - (2)].ftype).t, (yyvsp[(2) - (2)].ttype)); 
+		  (yyval.ftype).new_type_flag = (yyvsp[(1) - (2)].ftype).new_type_flag; }
+    break;
+
+  case 372:
+/* Line 1792 of yacc.c  */
 #line 1691 "parse.y"
-{ yyval.ftype.t = build_decl_list (build_decl_list (NULL_TREE, yyvsp[-1].ftype.t),
-					  yyvsp[0].ttype); 
-		  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;
-    break;}
-case 372:
+    { (yyval.ftype).t = build_decl_list (build_decl_list (NULL_TREE, (yyvsp[(1) - (2)].ftype).t),
+					  (yyvsp[(2) - (2)].ttype)); 
+		  (yyval.ftype).new_type_flag = (yyvsp[(1) - (2)].ftype).new_type_flag; }
+    break;
+
+  case 373:
+/* Line 1792 of yacc.c  */
 #line 1695 "parse.y"
-{ yyval.ftype.t = build_decl_list (yyvsp[0].ftype.t, NULL_TREE);
-		  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag;  ;
-    break;}
-case 373:
+    { (yyval.ftype).t = build_decl_list ((yyvsp[(1) - (1)].ftype).t, NULL_TREE);
+		  (yyval.ftype).new_type_flag = (yyvsp[(1) - (1)].ftype).new_type_flag;  }
+    break;
+
+  case 374:
+/* Line 1792 of yacc.c  */
 #line 1698 "parse.y"
-{ yyval.ftype.t = build_decl_list (yyvsp[0].ftype.t, NULL_TREE); 
-		  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag; ;
-    break;}
-case 376:
+    { (yyval.ftype).t = build_decl_list ((yyvsp[(1) - (1)].ftype).t, NULL_TREE); 
+		  (yyval.ftype).new_type_flag = (yyvsp[(1) - (1)].ftype).new_type_flag; }
+    break;
+
+  case 377:
+/* Line 1792 of yacc.c  */
 #line 1714 "parse.y"
-{ yyval.ftype.t = decl_tree_cons (NULL_TREE, yyvsp[0].ftype.t, yyvsp[-1].ttype); 
-		  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag; ;
-    break;}
-case 377:
+    { (yyval.ftype).t = decl_tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ftype).t, (yyvsp[(1) - (2)].ttype)); 
+		  (yyval.ftype).new_type_flag = (yyvsp[(2) - (2)].ftype).new_type_flag; }
+    break;
+
+  case 378:
+/* Line 1792 of yacc.c  */
 #line 1717 "parse.y"
-{ yyval.ftype.t = decl_tree_cons (NULL_TREE, yyvsp[-1].ftype.t, yyvsp[0].ttype); 
-		  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;
-    break;}
-case 378:
+    { (yyval.ftype).t = decl_tree_cons (NULL_TREE, (yyvsp[(1) - (2)].ftype).t, (yyvsp[(2) - (2)].ttype)); 
+		  (yyval.ftype).new_type_flag = (yyvsp[(1) - (2)].ftype).new_type_flag; }
+    break;
+
+  case 379:
+/* Line 1792 of yacc.c  */
 #line 1720 "parse.y"
-{ yyval.ftype.t = decl_tree_cons (NULL_TREE, yyvsp[-2].ftype.t, chainon (yyvsp[-1].ttype, yyvsp[0].ttype)); 
-		  yyval.ftype.new_type_flag = yyvsp[-2].ftype.new_type_flag; ;
-    break;}
-case 379:
+    { (yyval.ftype).t = decl_tree_cons (NULL_TREE, (yyvsp[(1) - (3)].ftype).t, chainon ((yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype))); 
+		  (yyval.ftype).new_type_flag = (yyvsp[(1) - (3)].ftype).new_type_flag; }
+    break;
+
+  case 380:
+/* Line 1792 of yacc.c  */
 #line 1723 "parse.y"
-{ yyval.ftype.t = decl_tree_cons (NULL_TREE, yyvsp[-1].ftype.t, chainon (yyvsp[0].ttype, yyvsp[-2].ttype)); 
-		  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;
-    break;}
-case 380:
+    { (yyval.ftype).t = decl_tree_cons (NULL_TREE, (yyvsp[(2) - (3)].ftype).t, chainon ((yyvsp[(3) - (3)].ttype), (yyvsp[(1) - (3)].ttype))); 
+		  (yyval.ftype).new_type_flag = (yyvsp[(2) - (3)].ftype).new_type_flag; }
+    break;
+
+  case 381:
+/* Line 1792 of yacc.c  */
 #line 1726 "parse.y"
-{ yyval.ftype.t = decl_tree_cons (NULL_TREE, yyvsp[-1].ftype.t, chainon (yyvsp[0].ttype, yyvsp[-2].ttype)); 
-		  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;
-    break;}
-case 381:
+    { (yyval.ftype).t = decl_tree_cons (NULL_TREE, (yyvsp[(2) - (3)].ftype).t, chainon ((yyvsp[(3) - (3)].ttype), (yyvsp[(1) - (3)].ttype))); 
+		  (yyval.ftype).new_type_flag = (yyvsp[(2) - (3)].ftype).new_type_flag; }
+    break;
+
+  case 382:
+/* Line 1792 of yacc.c  */
 #line 1729 "parse.y"
-{ yyval.ftype.t = decl_tree_cons (NULL_TREE, yyvsp[-2].ftype.t,
-					 chainon (yyvsp[-1].ttype, chainon (yyvsp[0].ttype, yyvsp[-3].ttype))); 
-		  yyval.ftype.new_type_flag = yyvsp[-2].ftype.new_type_flag; ;
-    break;}
-case 382:
+    { (yyval.ftype).t = decl_tree_cons (NULL_TREE, (yyvsp[(2) - (4)].ftype).t,
+					 chainon ((yyvsp[(3) - (4)].ttype), chainon ((yyvsp[(4) - (4)].ttype), (yyvsp[(1) - (4)].ttype)))); 
+		  (yyval.ftype).new_type_flag = (yyvsp[(2) - (4)].ftype).new_type_flag; }
+    break;
+
+  case 383:
+/* Line 1792 of yacc.c  */
 #line 1736 "parse.y"
-{ if (extra_warnings)
+    { if (extra_warnings)
 		    warning ("`%s' is not at beginning of declaration",
-			     IDENTIFIER_POINTER (yyval.ttype));
-		  yyval.ttype = build_decl_list (NULL_TREE, yyval.ttype); ;
-    break;}
-case 383:
+			     IDENTIFIER_POINTER ((yyval.ttype)));
+		  (yyval.ttype) = build_decl_list (NULL_TREE, (yyval.ttype)); }
+    break;
+
+  case 384:
+/* Line 1792 of yacc.c  */
 #line 1741 "parse.y"
-{ yyval.ttype = decl_tree_cons (NULL_TREE, yyvsp[0].ftype.t, yyval.ttype); ;
-    break;}
-case 384:
+    { (yyval.ttype) = decl_tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ftype).t, (yyval.ttype)); }
+    break;
+
+  case 385:
+/* Line 1792 of yacc.c  */
 #line 1743 "parse.y"
-{ if (extra_warnings)
+    { if (extra_warnings)
 		    warning ("`%s' is not at beginning of declaration",
-			     IDENTIFIER_POINTER (yyvsp[0].ttype));
-		  yyval.ttype = decl_tree_cons (NULL_TREE, yyvsp[0].ttype, yyval.ttype); ;
-    break;}
-case 385:
+			     IDENTIFIER_POINTER ((yyvsp[(2) - (2)].ttype)));
+		  (yyval.ttype) = decl_tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyval.ttype)); }
+    break;
+
+  case 386:
+/* Line 1792 of yacc.c  */
 #line 1748 "parse.y"
-{ yyval.ttype = decl_tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype); ;
-    break;}
-case 386:
+    { (yyval.ttype) = decl_tree_cons ((yyvsp[(2) - (2)].ttype), NULL_TREE, (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 387:
+/* Line 1792 of yacc.c  */
 #line 1750 "parse.y"
-{ yyval.ttype = decl_tree_cons (yyvsp[0].ttype, NULL_TREE, NULL_TREE); ;
-    break;}
-case 387:
+    { (yyval.ttype) = decl_tree_cons ((yyvsp[(1) - (1)].ttype), NULL_TREE, NULL_TREE); }
+    break;
+
+  case 388:
+/* Line 1792 of yacc.c  */
 #line 1769 "parse.y"
-{ yyval.ttype = yyvsp[0].ftype.t; TREE_STATIC (yyval.ttype) = 1; ;
-    break;}
-case 388:
+    { (yyval.ttype) = (yyvsp[(1) - (1)].ftype).t; TREE_STATIC ((yyval.ttype)) = 1; }
+    break;
+
+  case 389:
+/* Line 1792 of yacc.c  */
 #line 1771 "parse.y"
-{ yyval.ttype = hash_tree_cons (NULL_TREE, yyval.ttype, NULL_TREE); ;
-    break;}
-case 389:
+    { (yyval.ttype) = hash_tree_cons (NULL_TREE, (yyval.ttype), NULL_TREE); }
+    break;
+
+  case 390:
+/* Line 1792 of yacc.c  */
 #line 1773 "parse.y"
-{ yyval.ttype = hash_tree_cons (NULL_TREE, yyvsp[0].ttype, yyval.ttype);
-		  TREE_STATIC (yyval.ttype) = 1; ;
-    break;}
-case 390:
+    { (yyval.ttype) = hash_tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyval.ttype));
+		  TREE_STATIC ((yyval.ttype)) = 1; }
+    break;
+
+  case 391:
+/* Line 1792 of yacc.c  */
 #line 1776 "parse.y"
-{ if (extra_warnings && TREE_STATIC (yyval.ttype))
+    { if (extra_warnings && TREE_STATIC ((yyval.ttype)))
 		    warning ("`%s' is not at beginning of declaration",
-			     IDENTIFIER_POINTER (yyvsp[0].ttype));
-		  yyval.ttype = hash_tree_cons (NULL_TREE, yyvsp[0].ttype, yyval.ttype);
-		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
-    break;}
-case 391:
+			     IDENTIFIER_POINTER ((yyvsp[(2) - (2)].ttype)));
+		  (yyval.ttype) = hash_tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyval.ttype));
+		  TREE_STATIC ((yyval.ttype)) = TREE_STATIC ((yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 392:
+/* Line 1792 of yacc.c  */
 #line 1782 "parse.y"
-{ yyval.ttype = hash_tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype); ;
-    break;}
-case 392:
+    { (yyval.ttype) = hash_tree_cons ((yyvsp[(2) - (2)].ttype), NULL_TREE, (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 393:
+/* Line 1792 of yacc.c  */
 #line 1784 "parse.y"
-{ yyval.ttype = hash_tree_cons (yyvsp[0].ttype, NULL_TREE, NULL_TREE); ;
-    break;}
-case 393:
+    { (yyval.ttype) = hash_tree_cons ((yyvsp[(1) - (1)].ttype), NULL_TREE, NULL_TREE); }
+    break;
+
+  case 394:
+/* Line 1792 of yacc.c  */
 #line 1795 "parse.y"
-{ yyval.ftype.t = build_decl_list (NULL_TREE, yyvsp[0].ftype.t); 
-		  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag; ;
-    break;}
-case 394:
+    { (yyval.ftype).t = build_decl_list (NULL_TREE, (yyvsp[(1) - (1)].ftype).t); 
+		  (yyval.ftype).new_type_flag = (yyvsp[(1) - (1)].ftype).new_type_flag; }
+    break;
+
+  case 395:
+/* Line 1792 of yacc.c  */
 #line 1798 "parse.y"
-{ yyval.ftype.t = decl_tree_cons (NULL_TREE, yyvsp[0].ftype.t, yyvsp[-1].ftype.t); 
-		  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag; ;
-    break;}
-case 395:
+    { (yyval.ftype).t = decl_tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ftype).t, (yyvsp[(1) - (2)].ftype).t); 
+		  (yyval.ftype).new_type_flag = (yyvsp[(2) - (2)].ftype).new_type_flag; }
+    break;
+
+  case 396:
+/* Line 1792 of yacc.c  */
 #line 1801 "parse.y"
-{ yyval.ftype.t = decl_tree_cons (NULL_TREE, yyvsp[-1].ftype.t, yyvsp[0].ttype); 
-		  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;
-    break;}
-case 396:
+    { (yyval.ftype).t = decl_tree_cons (NULL_TREE, (yyvsp[(1) - (2)].ftype).t, (yyvsp[(2) - (2)].ttype)); 
+		  (yyval.ftype).new_type_flag = (yyvsp[(1) - (2)].ftype).new_type_flag; }
+    break;
+
+  case 397:
+/* Line 1792 of yacc.c  */
 #line 1804 "parse.y"
-{ yyval.ftype.t = decl_tree_cons (NULL_TREE, yyvsp[-1].ftype.t, chainon (yyvsp[0].ttype, yyvsp[-2].ftype.t)); 
-		  yyval.ftype.new_type_flag = yyvsp[-2].ftype.new_type_flag; ;
-    break;}
-case 397:
+    { (yyval.ftype).t = decl_tree_cons (NULL_TREE, (yyvsp[(2) - (3)].ftype).t, chainon ((yyvsp[(3) - (3)].ttype), (yyvsp[(1) - (3)].ftype).t)); 
+		  (yyval.ftype).new_type_flag = (yyvsp[(1) - (3)].ftype).new_type_flag; }
+    break;
+
+  case 398:
+/* Line 1792 of yacc.c  */
 #line 1810 "parse.y"
-{ yyval.ttype = build_decl_list (NULL_TREE, yyvsp[0].ftype.t); ;
-    break;}
-case 398:
+    { (yyval.ttype) = build_decl_list (NULL_TREE, (yyvsp[(1) - (1)].ftype).t); }
+    break;
+
+  case 399:
+/* Line 1792 of yacc.c  */
 #line 1812 "parse.y"
-{ yyval.ttype = decl_tree_cons (NULL_TREE, yyvsp[0].ftype.t, yyvsp[-1].ttype); ;
-    break;}
-case 400:
+    { (yyval.ttype) = decl_tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ftype).t, (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 401:
+/* Line 1792 of yacc.c  */
 #line 1822 "parse.y"
-{ yyval.ftype.t = yyvsp[0].ttype; yyval.ftype.new_type_flag = 0; ;
-    break;}
-case 401:
+    { (yyval.ftype).t = (yyvsp[(1) - (1)].ttype); (yyval.ftype).new_type_flag = 0; }
+    break;
+
+  case 402:
+/* Line 1792 of yacc.c  */
 #line 1824 "parse.y"
-{ yyval.ftype.t = yyvsp[0].ttype; yyval.ftype.new_type_flag = 0; ;
-    break;}
-case 402:
+    { (yyval.ftype).t = (yyvsp[(1) - (1)].ttype); (yyval.ftype).new_type_flag = 0; }
+    break;
+
+  case 403:
+/* Line 1792 of yacc.c  */
 #line 1826 "parse.y"
-{ yyval.ftype.t = finish_typeof (yyvsp[-1].ttype);
-		  yyval.ftype.new_type_flag = 0; ;
-    break;}
-case 403:
+    { (yyval.ftype).t = finish_typeof ((yyvsp[(3) - (4)].ttype));
+		  (yyval.ftype).new_type_flag = 0; }
+    break;
+
+  case 404:
+/* Line 1792 of yacc.c  */
 #line 1829 "parse.y"
-{ yyval.ftype.t = groktypename (yyvsp[-1].ftype.t);
-		  yyval.ftype.new_type_flag = 0; ;
-    break;}
-case 404:
+    { (yyval.ftype).t = groktypename ((yyvsp[(3) - (4)].ftype).t);
+		  (yyval.ftype).new_type_flag = 0; }
+    break;
+
+  case 405:
+/* Line 1792 of yacc.c  */
 #line 1832 "parse.y"
-{ tree type = TREE_TYPE (yyvsp[-1].ttype);
+    { tree type = TREE_TYPE ((yyvsp[(3) - (4)].ttype));
 
-                  yyval.ftype.new_type_flag = 0;
+                  (yyval.ftype).new_type_flag = 0;
 		  if (IS_AGGR_TYPE (type))
 		    {
 		      sorry ("sigof type specifier");
-		      yyval.ftype.t = type;
+		      (yyval.ftype).t = type;
 		    }
 		  else
 		    {
 		      error ("`sigof' applied to non-aggregate expression");
-		      yyval.ftype.t = error_mark_node;
+		      (yyval.ftype).t = error_mark_node;
 		    }
-		;
-    break;}
-case 405:
+		}
+    break;
+
+  case 406:
+/* Line 1792 of yacc.c  */
 #line 1847 "parse.y"
-{ tree type = groktypename (yyvsp[-1].ftype.t);
+    { tree type = groktypename ((yyvsp[(3) - (4)].ftype).t);
 
-                  yyval.ftype.new_type_flag = 0;
+                  (yyval.ftype).new_type_flag = 0;
 		  if (IS_AGGR_TYPE (type))
 		    {
 		      sorry ("sigof type specifier");
-		      yyval.ftype.t = type;
+		      (yyval.ftype).t = type;
 		    }
 		  else
 		    {
 		      error("`sigof' applied to non-aggregate type");
-		      yyval.ftype.t = error_mark_node;
+		      (yyval.ftype).t = error_mark_node;
 		    }
-		;
-    break;}
-case 406:
+		}
+    break;
+
+  case 407:
+/* Line 1792 of yacc.c  */
 #line 1867 "parse.y"
-{ yyval.ftype.t = yyvsp[0].ttype; yyval.ftype.new_type_flag = 0; ;
-    break;}
-case 407:
+    { (yyval.ftype).t = (yyvsp[(1) - (1)].ttype); (yyval.ftype).new_type_flag = 0; }
+    break;
+
+  case 408:
+/* Line 1792 of yacc.c  */
 #line 1869 "parse.y"
-{ yyval.ftype.t = yyvsp[0].ttype; yyval.ftype.new_type_flag = 0; ;
-    break;}
-case 410:
+    { (yyval.ftype).t = (yyvsp[(1) - (1)].ttype); (yyval.ftype).new_type_flag = 0; }
+    break;
+
+  case 411:
+/* Line 1792 of yacc.c  */
 #line 1876 "parse.y"
-{ check_multiple_declarators (); ;
-    break;}
-case 412:
+    { check_multiple_declarators (); }
+    break;
+
+  case 413:
+/* Line 1792 of yacc.c  */
 #line 1882 "parse.y"
-{ check_multiple_declarators (); ;
-    break;}
-case 414:
+    { check_multiple_declarators (); }
+    break;
+
+  case 415:
+/* Line 1792 of yacc.c  */
 #line 1888 "parse.y"
-{ check_multiple_declarators (); ;
-    break;}
-case 415:
+    { check_multiple_declarators (); }
+    break;
+
+  case 416:
+/* Line 1792 of yacc.c  */
 #line 1893 "parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 416:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 417:
+/* Line 1792 of yacc.c  */
 #line 1895 "parse.y"
-{ if (TREE_CHAIN (yyvsp[-1].ttype)) yyvsp[-1].ttype = combine_strings (yyvsp[-1].ttype); yyval.ttype = yyvsp[-1].ttype; ;
-    break;}
-case 417:
+    { if (TREE_CHAIN ((yyvsp[(3) - (4)].ttype))) (yyvsp[(3) - (4)].ttype) = combine_strings ((yyvsp[(3) - (4)].ttype)); (yyval.ttype) = (yyvsp[(3) - (4)].ttype); }
+    break;
+
+  case 418:
+/* Line 1792 of yacc.c  */
 #line 1900 "parse.y"
-{ yyval.ttype = start_decl (yyvsp[-3].ttype, current_declspecs, 1,
-					  yyvsp[-1].ttype, prefix_attributes); ;
-    break;}
-case 418:
+    { (yyval.ttype) = start_decl ((yyvsp[(1) - (4)].ttype), current_declspecs, 1,
+					  (yyvsp[(3) - (4)].ttype), prefix_attributes); }
+    break;
+
+  case 419:
+/* Line 1792 of yacc.c  */
 #line 1904 "parse.y"
-{ cp_finish_decl (yyvsp[-1].ttype, yyvsp[0].ttype, yyvsp[-4].ttype, 1, LOOKUP_ONLYCONVERTING); ;
-    break;}
-case 419:
+    { cp_finish_decl ((yyvsp[(5) - (6)].ttype), (yyvsp[(6) - (6)].ttype), (yyvsp[(2) - (6)].ttype), 1, LOOKUP_ONLYCONVERTING); }
+    break;
+
+  case 420:
+/* Line 1792 of yacc.c  */
 #line 1906 "parse.y"
-{ yyval.ttype = start_decl (yyvsp[-2].ttype, current_declspecs, 0,
-					  yyvsp[0].ttype, prefix_attributes);
-		  cp_finish_decl (yyval.ttype, NULL_TREE, yyvsp[-1].ttype, 1, 0); ;
-    break;}
-case 420:
+    { (yyval.ttype) = start_decl ((yyvsp[(1) - (3)].ttype), current_declspecs, 0,
+					  (yyvsp[(3) - (3)].ttype), prefix_attributes);
+		  cp_finish_decl ((yyval.ttype), NULL_TREE, (yyvsp[(2) - (3)].ttype), 1, 0); }
+    break;
+
+  case 421:
+/* Line 1792 of yacc.c  */
 #line 1919 "parse.y"
-{ yyvsp[0].itype = parse_decl (yyvsp[-3].ttype, yyvsp[-4].ttype, 
-					   yyvsp[-1].ttype, 1, &yyval.ttype); ;
-    break;}
-case 421:
+    { (yyvsp[(2) - (2)].itype) = parse_decl ((yyvsp[(-1) - (2)].ttype), (yyvsp[(-2) - (2)].ttype), 
+					   (yyvsp[(1) - (2)].ttype), 1, &(yyval.ttype)); }
+    break;
+
+  case 422:
+/* Line 1792 of yacc.c  */
 #line 1924 "parse.y"
-{ cp_finish_decl (yyvsp[-1].ttype, yyvsp[0].ttype, yyvsp[-4].ttype, 1,
+    { cp_finish_decl ((yyvsp[(3) - (4)].ttype), (yyvsp[(4) - (4)].ttype), (yyvsp[(0) - (4)].ttype), 1,
 				  LOOKUP_ONLYCONVERTING);
-		  yyval.itype = yyvsp[-2].itype; ;
-    break;}
-case 422:
+		  (yyval.itype) = (yyvsp[(2) - (4)].itype); }
+    break;
+
+  case 423:
+/* Line 1792 of yacc.c  */
 #line 1928 "parse.y"
-{ tree d;
-		  yyval.itype = parse_decl (yyvsp[-2].ttype, yyvsp[-3].ttype, yyvsp[0].ttype, 0, &d);
-		  cp_finish_decl (d, NULL_TREE, yyvsp[-1].ttype, 1, 0); ;
-    break;}
-case 423:
+    { tree d;
+		  (yyval.itype) = parse_decl ((yyvsp[(-1) - (1)].ttype), (yyvsp[(-2) - (1)].ttype), (yyvsp[(1) - (1)].ttype), 0, &d);
+		  cp_finish_decl (d, NULL_TREE, (yyvsp[(0) - (1)].ttype), 1, 0); }
+    break;
+
+  case 424:
+/* Line 1792 of yacc.c  */
 #line 1935 "parse.y"
-{ yyval.itype = yyvsp[0].itype; ;
-    break;}
-case 424:
+    { (yyval.itype) = (yyvsp[(3) - (3)].itype); }
+    break;
+
+  case 425:
+/* Line 1792 of yacc.c  */
 #line 1939 "parse.y"
-{ yyval.itype = yyvsp[0].itype; ;
-    break;}
-case 425:
+    { (yyval.itype) = (yyvsp[(3) - (3)].itype); }
+    break;
+
+  case 426:
+/* Line 1792 of yacc.c  */
 #line 1944 "parse.y"
-{ /* Set things up as initdcl0_innards expects.  */
-	      yyvsp[0].ttype = yyvsp[-1].ttype; 
-              yyvsp[-1].ttype = NULL_TREE; ;
-    break;}
-case 426:
+    { /* Set things up as initdcl0_innards expects.  */
+	      (yyvsp[(2) - (2)].ttype) = (yyvsp[(1) - (2)].ttype); 
+              (yyvsp[(1) - (2)].ttype) = NULL_TREE; }
+    break;
+
+  case 427:
+/* Line 1792 of yacc.c  */
 #line 1948 "parse.y"
-{;
-    break;}
-case 427:
+    {}
+    break;
+
+  case 428:
+/* Line 1792 of yacc.c  */
 #line 1950 "parse.y"
-{ tree d;
-		  parse_decl(yyvsp[-2].ttype, NULL_TREE, yyvsp[0].ttype, 0, &d);
-		  cp_finish_decl (d, NULL_TREE, yyvsp[-1].ttype, 1, 0); ;
-    break;}
-case 428:
+    { tree d;
+		  parse_decl((yyvsp[(1) - (3)].ttype), NULL_TREE, (yyvsp[(3) - (3)].ttype), 0, &d);
+		  cp_finish_decl (d, NULL_TREE, (yyvsp[(2) - (3)].ttype), 1, 0); }
+    break;
+
+  case 429:
+/* Line 1792 of yacc.c  */
 #line 1959 "parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 429:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 430:
+/* Line 1792 of yacc.c  */
 #line 1961 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 430:
+    { (yyval.ttype) = (yyvsp[(1) - (1)].ttype); }
+    break;
+
+  case 431:
+/* Line 1792 of yacc.c  */
 #line 1966 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 431:
+    { (yyval.ttype) = (yyvsp[(1) - (1)].ttype); }
+    break;
+
+  case 432:
+/* Line 1792 of yacc.c  */
 #line 1968 "parse.y"
-{ yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 432:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 433:
+/* Line 1792 of yacc.c  */
 #line 1973 "parse.y"
-{ yyval.ttype = yyvsp[-2].ttype; ;
-    break;}
-case 433:
+    { (yyval.ttype) = (yyvsp[(4) - (6)].ttype); }
+    break;
+
+  case 434:
+/* Line 1792 of yacc.c  */
 #line 1978 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 434:
+    { (yyval.ttype) = (yyvsp[(1) - (1)].ttype); }
+    break;
+
+  case 435:
+/* Line 1792 of yacc.c  */
 #line 1980 "parse.y"
-{ yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 435:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 436:
+/* Line 1792 of yacc.c  */
 #line 1985 "parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 436:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 437:
+/* Line 1792 of yacc.c  */
 #line 1987 "parse.y"
-{ yyval.ttype = build_tree_list (yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 437:
+    { (yyval.ttype) = build_tree_list ((yyvsp[(1) - (1)].ttype), NULL_TREE); }
+    break;
+
+  case 438:
+/* Line 1792 of yacc.c  */
 #line 1989 "parse.y"
-{ yyval.ttype = build_tree_list (yyvsp[-3].ttype, build_tree_list (NULL_TREE, yyvsp[-1].ttype)); ;
-    break;}
-case 438:
+    { (yyval.ttype) = build_tree_list ((yyvsp[(1) - (4)].ttype), build_tree_list (NULL_TREE, (yyvsp[(3) - (4)].ttype))); }
+    break;
+
+  case 439:
+/* Line 1792 of yacc.c  */
 #line 1991 "parse.y"
-{ yyval.ttype = build_tree_list (yyvsp[-5].ttype, tree_cons (NULL_TREE, yyvsp[-3].ttype, yyvsp[-1].ttype)); ;
-    break;}
-case 439:
+    { (yyval.ttype) = build_tree_list ((yyvsp[(1) - (6)].ttype), tree_cons (NULL_TREE, (yyvsp[(3) - (6)].ttype), (yyvsp[(5) - (6)].ttype))); }
+    break;
+
+  case 440:
+/* Line 1792 of yacc.c  */
 #line 1993 "parse.y"
-{ yyval.ttype = build_tree_list (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 444:
+    { (yyval.ttype) = build_tree_list ((yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 445:
+/* Line 1792 of yacc.c  */
 #line 2009 "parse.y"
-{ yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;
-    break;}
-case 445:
+    { (yyval.ttype) = build_tree_list (NULL_TREE, (yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 446:
+/* Line 1792 of yacc.c  */
 #line 2011 "parse.y"
-{ yyval.ttype = chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;
-    break;}
-case 446:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (3)].ttype), build_tree_list (NULL_TREE, (yyvsp[(3) - (3)].ttype))); }
+    break;
+
+  case 447:
+/* Line 1792 of yacc.c  */
 #line 2016 "parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 447:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 448:
+/* Line 1792 of yacc.c  */
 #line 2018 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 449:
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype); }
+    break;
+
+  case 450:
+/* Line 1792 of yacc.c  */
 #line 2026 "parse.y"
-{ yyval.ttype = build_nt (CONSTRUCTOR, NULL_TREE, NULL_TREE);
-		  TREE_HAS_CONSTRUCTOR (yyval.ttype) = 1; ;
-    break;}
-case 450:
+    { (yyval.ttype) = build_nt (CONSTRUCTOR, NULL_TREE, NULL_TREE);
+		  TREE_HAS_CONSTRUCTOR ((yyval.ttype)) = 1; }
+    break;
+
+  case 451:
+/* Line 1792 of yacc.c  */
 #line 2029 "parse.y"
-{ yyval.ttype = build_nt (CONSTRUCTOR, NULL_TREE, nreverse (yyvsp[-1].ttype));
-		  TREE_HAS_CONSTRUCTOR (yyval.ttype) = 1; ;
-    break;}
-case 451:
+    { (yyval.ttype) = build_nt (CONSTRUCTOR, NULL_TREE, nreverse ((yyvsp[(2) - (3)].ttype)));
+		  TREE_HAS_CONSTRUCTOR ((yyval.ttype)) = 1; }
+    break;
+
+  case 452:
+/* Line 1792 of yacc.c  */
 #line 2032 "parse.y"
-{ yyval.ttype = build_nt (CONSTRUCTOR, NULL_TREE, nreverse (yyvsp[-2].ttype));
-		  TREE_HAS_CONSTRUCTOR (yyval.ttype) = 1; ;
-    break;}
-case 452:
+    { (yyval.ttype) = build_nt (CONSTRUCTOR, NULL_TREE, nreverse ((yyvsp[(2) - (4)].ttype)));
+		  TREE_HAS_CONSTRUCTOR ((yyval.ttype)) = 1; }
+    break;
+
+  case 453:
+/* Line 1792 of yacc.c  */
 #line 2035 "parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 453:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 454:
+/* Line 1792 of yacc.c  */
 #line 2042 "parse.y"
-{ yyval.ttype = build_tree_list (NULL_TREE, yyval.ttype); ;
-    break;}
-case 454:
+    { (yyval.ttype) = build_tree_list (NULL_TREE, (yyval.ttype)); }
+    break;
+
+  case 455:
+/* Line 1792 of yacc.c  */
 #line 2044 "parse.y"
-{ yyval.ttype = expr_tree_cons (NULL_TREE, yyvsp[0].ttype, yyval.ttype); ;
-    break;}
-case 455:
+    { (yyval.ttype) = expr_tree_cons (NULL_TREE, (yyvsp[(3) - (3)].ttype), (yyval.ttype)); }
+    break;
+
+  case 456:
+/* Line 1792 of yacc.c  */
 #line 2047 "parse.y"
-{ yyval.ttype = build_expr_list (yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 456:
+    { (yyval.ttype) = build_expr_list ((yyvsp[(2) - (4)].ttype), (yyvsp[(4) - (4)].ttype)); }
+    break;
+
+  case 457:
+/* Line 1792 of yacc.c  */
 #line 2049 "parse.y"
-{ yyval.ttype = build_expr_list (yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 457:
+    { (yyval.ttype) = build_expr_list ((yyval.ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 458:
+/* Line 1792 of yacc.c  */
 #line 2051 "parse.y"
-{ yyval.ttype = expr_tree_cons (yyvsp[-2].ttype, yyvsp[0].ttype, yyval.ttype); ;
-    break;}
-case 458:
+    { (yyval.ttype) = expr_tree_cons ((yyvsp[(3) - (5)].ttype), (yyvsp[(5) - (5)].ttype), (yyval.ttype)); }
+    break;
+
+  case 459:
+/* Line 1792 of yacc.c  */
 #line 2056 "parse.y"
-{ start_function (NULL_TREE, TREE_VALUE (yyvsp[0].ttype),
+    { start_function (NULL_TREE, TREE_VALUE ((yyvsp[(1) - (1)].ttype)),
 				  NULL_TREE, 2);
-		  reinit_parse_for_function (); ;
-    break;}
-case 459:
+		  reinit_parse_for_function (); }
+    break;
+
+  case 460:
+/* Line 1792 of yacc.c  */
 #line 2062 "parse.y"
-{
+    {
 		  int nested = (hack_decl_function_context
 				(current_function_decl) != NULL_TREE);
-		  finish_function (lineno, (int)yyvsp[-1].itype | 2, nested);
-		  process_next_inline (yyvsp[-3].ttype);
-		;
-    break;}
-case 460:
+		  finish_function (lineno, (int)(yyvsp[(3) - (4)].itype) | 2, nested);
+		  process_next_inline ((yyvsp[(1) - (4)].ttype));
+		}
+    break;
+
+  case 461:
+/* Line 1792 of yacc.c  */
 #line 2069 "parse.y"
-{ 
+    { 
 		  int nested = (hack_decl_function_context
 				(current_function_decl) != NULL_TREE);
-		  finish_function (lineno, (int)yyvsp[0].itype | 2, nested); 
-                  process_next_inline (yyvsp[-2].ttype);
-		;
-    break;}
-case 461:
+		  finish_function (lineno, (int)(yyvsp[(3) - (3)].itype) | 2, nested); 
+                  process_next_inline ((yyvsp[(1) - (3)].ttype));
+		}
+    break;
+
+  case 462:
+/* Line 1792 of yacc.c  */
 #line 2076 "parse.y"
-{ process_next_inline (yyvsp[-2].ttype); ;
-    break;}
-case 464:
+    { process_next_inline ((yyvsp[(1) - (3)].ttype)); }
+    break;
+
+  case 465:
+/* Line 1792 of yacc.c  */
 #line 2088 "parse.y"
-{ replace_defarg (yyvsp[-2].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 465:
+    { replace_defarg ((yyvsp[(1) - (3)].ttype), (yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 466:
+/* Line 1792 of yacc.c  */
 #line 2090 "parse.y"
-{ replace_defarg (yyvsp[-2].ttype, error_mark_node); ;
-    break;}
-case 467:
+    { replace_defarg ((yyvsp[(1) - (3)].ttype), error_mark_node); }
+    break;
+
+  case 468:
+/* Line 1792 of yacc.c  */
 #line 2095 "parse.y"
-{ do_pending_defargs (); ;
-    break;}
-case 468:
+    { do_pending_defargs (); }
+    break;
+
+  case 469:
+/* Line 1792 of yacc.c  */
 #line 2097 "parse.y"
-{ do_pending_defargs (); ;
-    break;}
-case 469:
+    { do_pending_defargs (); }
+    break;
+
+  case 470:
+/* Line 1792 of yacc.c  */
 #line 2102 "parse.y"
-{ yyvsp[0].itype = suspend_momentary ();
-		  yyval.ttype = current_enum_type;
-		  current_enum_type = start_enum (yyvsp[-1].ttype); ;
-    break;}
-case 470:
+    { (yyvsp[(3) - (3)].itype) = suspend_momentary ();
+		  (yyval.ttype) = current_enum_type;
+		  current_enum_type = start_enum ((yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 471:
+/* Line 1792 of yacc.c  */
 #line 2106 "parse.y"
-{ TYPE_VALUES (current_enum_type) = yyvsp[-2].ttype;
-		  yyval.ftype.t = finish_enum (current_enum_type);
-		  yyval.ftype.new_type_flag = 1;
-		  current_enum_type = yyvsp[-3].ttype;
-		  resume_momentary ((int) yyvsp[-4].itype);
-		  check_for_missing_semicolon (yyval.ftype.t); ;
-    break;}
-case 471:
+    { TYPE_VALUES (current_enum_type) = (yyvsp[(5) - (7)].ttype);
+		  (yyval.ftype).t = finish_enum (current_enum_type);
+		  (yyval.ftype).new_type_flag = 1;
+		  current_enum_type = (yyvsp[(4) - (7)].ttype);
+		  resume_momentary ((int) (yyvsp[(3) - (7)].itype));
+		  check_for_missing_semicolon ((yyval.ftype).t); }
+    break;
+
+  case 472:
+/* Line 1792 of yacc.c  */
 #line 2113 "parse.y"
-{ yyval.ftype.t = finish_enum (start_enum (yyvsp[-2].ttype));
-		  yyval.ftype.new_type_flag = 1;
-		  check_for_missing_semicolon (yyval.ftype.t); ;
-    break;}
-case 472:
+    { (yyval.ftype).t = finish_enum (start_enum ((yyvsp[(2) - (4)].ttype)));
+		  (yyval.ftype).new_type_flag = 1;
+		  check_for_missing_semicolon ((yyval.ftype).t); }
+    break;
+
+  case 473:
+/* Line 1792 of yacc.c  */
 #line 2117 "parse.y"
-{ yyvsp[0].itype = suspend_momentary ();
-		  yyval.ttype = current_enum_type;
-		  current_enum_type = start_enum (make_anon_name ()); ;
-    break;}
-case 473:
+    { (yyvsp[(2) - (2)].itype) = suspend_momentary ();
+		  (yyval.ttype) = current_enum_type;
+		  current_enum_type = start_enum (make_anon_name ()); }
+    break;
+
+  case 474:
+/* Line 1792 of yacc.c  */
 #line 2121 "parse.y"
-{ TYPE_VALUES (current_enum_type) = yyvsp[-2].ttype;
-		  yyval.ftype.t = finish_enum (current_enum_type);
-		  yyval.ftype.new_type_flag = 1;
-		  current_enum_type = yyvsp[-3].ttype;
-		  resume_momentary ((int) yyvsp[-5].itype);
-		  check_for_missing_semicolon (yyval.ftype.t); ;
-    break;}
-case 474:
+    { TYPE_VALUES (current_enum_type) = (yyvsp[(4) - (6)].ttype);
+		  (yyval.ftype).t = finish_enum (current_enum_type);
+		  (yyval.ftype).new_type_flag = 1;
+		  current_enum_type = (yyvsp[(3) - (6)].ttype);
+		  resume_momentary ((int) (yyvsp[(1) - (6)].itype));
+		  check_for_missing_semicolon ((yyval.ftype).t); }
+    break;
+
+  case 475:
+/* Line 1792 of yacc.c  */
 #line 2128 "parse.y"
-{ yyval.ftype.t = finish_enum (start_enum (make_anon_name()));
-		  yyval.ftype.new_type_flag = 1;
-		  check_for_missing_semicolon (yyval.ftype.t); ;
-    break;}
-case 475:
+    { (yyval.ftype).t = finish_enum (start_enum (make_anon_name()));
+		  (yyval.ftype).new_type_flag = 1;
+		  check_for_missing_semicolon ((yyval.ftype).t); }
+    break;
+
+  case 476:
+/* Line 1792 of yacc.c  */
 #line 2132 "parse.y"
-{ yyval.ftype.t = xref_tag (enum_type_node, yyvsp[0].ttype, 1); 
-		  yyval.ftype.new_type_flag = 0; ;
-    break;}
-case 476:
+    { (yyval.ftype).t = xref_tag (enum_type_node, (yyvsp[(2) - (2)].ttype), 1); 
+		  (yyval.ftype).new_type_flag = 0; }
+    break;
+
+  case 477:
+/* Line 1792 of yacc.c  */
 #line 2135 "parse.y"
-{ yyval.ftype.t = xref_tag (enum_type_node, yyvsp[0].ttype, 1); 
-		  yyval.ftype.new_type_flag = 0; ;
-    break;}
-case 477:
+    { (yyval.ftype).t = xref_tag (enum_type_node, (yyvsp[(2) - (2)].ttype), 1); 
+		  (yyval.ftype).new_type_flag = 0; }
+    break;
+
+  case 478:
+/* Line 1792 of yacc.c  */
 #line 2138 "parse.y"
-{ yyval.ftype.t = yyvsp[0].ttype;
-		  yyval.ftype.new_type_flag = 0; 
+    { (yyval.ftype).t = (yyvsp[(2) - (2)].ttype);
+		  (yyval.ftype).new_type_flag = 0; 
 		  if (!processing_template_decl)
-		    cp_pedwarn ("using `typename' outside of template"); ;
-    break;}
-case 478:
+		    cp_pedwarn ("using `typename' outside of template"); }
+    break;
+
+  case 479:
+/* Line 1792 of yacc.c  */
 #line 2144 "parse.y"
-{ yyvsp[-1].ftype.t = begin_class_definition (yyvsp[-1].ftype.t); ;
-    break;}
-case 479:
+    { (yyvsp[(1) - (2)].ftype).t = begin_class_definition ((yyvsp[(1) - (2)].ftype).t); }
+    break;
+
+  case 480:
+/* Line 1792 of yacc.c  */
 #line 2146 "parse.y"
-{ 
+    { 
 		  int semi;
 
 		  if (yychar == YYEMPTY)
 		    yychar = YYLEX;
 		  semi = yychar == ';';
 
-		  yyval.ttype = finish_class_definition (yyvsp[-5].ftype.t, yyvsp[0].ttype, semi,
-						       yyvsp[-5].ftype.new_type_flag); 
-		;
-    break;}
-case 480:
+		  (yyval.ttype) = finish_class_definition ((yyvsp[(1) - (6)].ftype).t, (yyvsp[(6) - (6)].ttype), semi,
+						       (yyvsp[(1) - (6)].ftype).new_type_flag); 
+		}
+    break;
+
+  case 481:
+/* Line 1792 of yacc.c  */
 #line 2157 "parse.y"
-{
+    {
 		  begin_inline_definitions ();
-		;
-    break;}
-case 481:
+		}
+    break;
+
+  case 482:
+/* Line 1792 of yacc.c  */
 #line 2161 "parse.y"
-{
+    {
 		  finish_inline_definitions ();
-		  yyval.ftype.t = yyvsp[-3].ttype;
-		  yyval.ftype.new_type_flag = 1; 
-		;
-    break;}
-case 482:
+		  (yyval.ftype).t = (yyvsp[(7) - (10)].ttype);
+		  (yyval.ftype).new_type_flag = 1; 
+		}
+    break;
+
+  case 483:
+/* Line 1792 of yacc.c  */
 #line 2167 "parse.y"
-{
-		  if (yyvsp[0].ftype.new_type_flag)
-		    pop_scope (CP_DECL_CONTEXT (TYPE_MAIN_DECL (yyvsp[0].ftype.t)));
-		  yyval.ftype.new_type_flag = 0;
-		  if (TYPE_BINFO (yyvsp[0].ftype.t) == NULL_TREE)
+    {
+		  if ((yyvsp[(1) - (1)].ftype).new_type_flag)
+		    pop_scope (CP_DECL_CONTEXT (TYPE_MAIN_DECL ((yyvsp[(1) - (1)].ftype).t)));
+		  (yyval.ftype).new_type_flag = 0;
+		  if (TYPE_BINFO ((yyvsp[(1) - (1)].ftype).t) == NULL_TREE)
 		    {
-		      cp_error ("%T is not a class type", yyvsp[0].ftype.t);
-		      yyval.ftype.t = error_mark_node;
+		      cp_error ("%T is not a class type", (yyvsp[(1) - (1)].ftype).t);
+		      (yyval.ftype).t = error_mark_node;
 		    } 
 		  else
 		    {
-		      yyval.ftype.t = yyvsp[0].ftype.t;
+		      (yyval.ftype).t = (yyvsp[(1) - (1)].ftype).t;
 		      /* struct B: public A; is not accepted by the WP grammar.  */
-		      if (TYPE_BINFO_BASETYPES (yyval.ftype.t) && !TYPE_SIZE (yyval.ftype.t)
-			  && ! TYPE_BEING_DEFINED (yyval.ftype.t))
+		      if (TYPE_BINFO_BASETYPES ((yyval.ftype).t) && !TYPE_SIZE ((yyval.ftype).t)
+			  && ! TYPE_BEING_DEFINED ((yyval.ftype).t))
 			cp_error ("base clause without member specification for `%#T'",
-				  yyval.ftype.t);
+				  (yyval.ftype).t);
 		    }
-		;
-    break;}
-case 486:
+		}
+    break;
+
+  case 487:
+/* Line 1792 of yacc.c  */
 #line 2196 "parse.y"
-{ if (pedantic && !in_system_header)
-		    pedwarn ("comma at end of enumerator list"); ;
-    break;}
-case 488:
+    { if (pedantic && !in_system_header)
+		    pedwarn ("comma at end of enumerator list"); }
+    break;
+
+  case 489:
+/* Line 1792 of yacc.c  */
 #line 2203 "parse.y"
-{ error ("storage class specifier `%s' not allowed after struct or class", IDENTIFIER_POINTER (yyvsp[0].ttype)); ;
-    break;}
-case 489:
+    { error ("storage class specifier `%s' not allowed after struct or class", IDENTIFIER_POINTER ((yyvsp[(2) - (2)].ttype))); }
+    break;
+
+  case 490:
+/* Line 1792 of yacc.c  */
 #line 2205 "parse.y"
-{ error ("type specifier `%s' not allowed after struct or class", IDENTIFIER_POINTER (yyvsp[0].ttype)); ;
-    break;}
-case 490:
+    { error ("type specifier `%s' not allowed after struct or class", IDENTIFIER_POINTER ((yyvsp[(2) - (2)].ttype))); }
+    break;
+
+  case 491:
+/* Line 1792 of yacc.c  */
 #line 2207 "parse.y"
-{ error ("type qualifier `%s' not allowed after struct or class", IDENTIFIER_POINTER (yyvsp[0].ttype)); ;
-    break;}
-case 491:
+    { error ("type qualifier `%s' not allowed after struct or class", IDENTIFIER_POINTER ((yyvsp[(2) - (2)].ttype))); }
+    break;
+
+  case 492:
+/* Line 1792 of yacc.c  */
 #line 2209 "parse.y"
-{ error ("no body nor ';' separates two class, struct or union declarations"); ;
-    break;}
-case 492:
+    { error ("no body nor ';' separates two class, struct or union declarations"); }
+    break;
+
+  case 493:
+/* Line 1792 of yacc.c  */
 #line 2211 "parse.y"
-{ yyval.ttype = build_decl_list (yyvsp[0].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 493:
+    { (yyval.ttype) = build_decl_list ((yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 494:
+/* Line 1792 of yacc.c  */
 #line 2216 "parse.y"
-{ 
-		  current_aggr = yyvsp[-1].ttype; 
-		  yyval.ttype = yyvsp[0].ttype; 
-		;
-    break;}
-case 494:
+    { 
+		  current_aggr = (yyvsp[(1) - (2)].ttype); 
+		  (yyval.ttype) = (yyvsp[(2) - (2)].ttype); 
+		}
+    break;
+
+  case 495:
+/* Line 1792 of yacc.c  */
 #line 2224 "parse.y"
-{ current_aggr = yyval.ttype; yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 495:
+    { current_aggr = (yyval.ttype); (yyval.ttype) = (yyvsp[(2) - (2)].ttype); }
+    break;
+
+  case 496:
+/* Line 1792 of yacc.c  */
 #line 2226 "parse.y"
-{ yyungetc ('{', 1); ;
-    break;}
-case 496:
+    { yyungetc ('{', 1); }
+    break;
+
+  case 497:
+/* Line 1792 of yacc.c  */
 #line 2228 "parse.y"
-{ yyungetc (':', 1); ;
-    break;}
-case 497:
+    { yyungetc (':', 1); }
+    break;
+
+  case 498:
+/* Line 1792 of yacc.c  */
 #line 2233 "parse.y"
-{
-		  current_aggr = yyvsp[-2].ttype;
-		  yyval.ftype.t = handle_class_head (yyvsp[-2].ttype, yyvsp[-1].ttype, yyvsp[0].ttype);
-		  yyval.ftype.new_type_flag = 1;
-		;
-    break;}
-case 498:
+    {
+		  current_aggr = (yyvsp[(1) - (3)].ttype);
+		  (yyval.ftype).t = handle_class_head ((yyvsp[(1) - (3)].ttype), (yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype));
+		  (yyval.ftype).new_type_flag = 1;
+		}
+    break;
+
+  case 499:
+/* Line 1792 of yacc.c  */
 #line 2239 "parse.y"
-{
-		  current_aggr = yyvsp[-3].ttype;
-		  yyval.ftype.t = handle_class_head (yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[0].ttype);
-		  yyval.ftype.new_type_flag = 1;
-		;
-    break;}
-case 499:
+    {
+		  current_aggr = (yyvsp[(1) - (4)].ttype);
+		  (yyval.ftype).t = handle_class_head ((yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype), (yyvsp[(4) - (4)].ttype));
+		  (yyval.ftype).new_type_flag = 1;
+		}
+    break;
+
+  case 500:
+/* Line 1792 of yacc.c  */
 #line 2245 "parse.y"
-{
-		  current_aggr = yyvsp[-2].ttype;
-		  yyval.ftype.t = handle_class_head (yyvsp[-2].ttype, NULL_TREE, yyvsp[0].ttype);
-		  yyval.ftype.new_type_flag = 1;
-		;
-    break;}
-case 500:
+    {
+		  current_aggr = (yyvsp[(1) - (3)].ttype);
+		  (yyval.ftype).t = handle_class_head ((yyvsp[(1) - (3)].ttype), NULL_TREE, (yyvsp[(3) - (3)].ttype));
+		  (yyval.ftype).new_type_flag = 1;
+		}
+    break;
+
+  case 501:
+/* Line 1792 of yacc.c  */
 #line 2251 "parse.y"
-{ 
-		  current_aggr = yyvsp[-1].ttype; 
-		  yyval.ftype.t = yyvsp[0].ttype;
-		  yyval.ftype.new_type_flag = 0;
-		;
-    break;}
-case 501:
+    { 
+		  current_aggr = (yyvsp[(1) - (2)].ttype); 
+		  (yyval.ftype).t = (yyvsp[(2) - (2)].ttype);
+		  (yyval.ftype).new_type_flag = 0;
+		}
+    break;
+
+  case 502:
+/* Line 1792 of yacc.c  */
 #line 2257 "parse.y"
-{ 
-		  current_aggr = yyvsp[-2].ttype; 
-		  yyval.ftype.t = yyvsp[0].ttype;
-		  if (CP_DECL_CONTEXT (yyval.ftype.t))
-		    push_scope (CP_DECL_CONTEXT (yyval.ftype.t));
-		  yyval.ftype.new_type_flag = 1;
-		;
-    break;}
-case 502:
+    { 
+		  current_aggr = (yyvsp[(1) - (3)].ttype); 
+		  (yyval.ftype).t = (yyvsp[(3) - (3)].ttype);
+		  if (CP_DECL_CONTEXT ((yyval.ftype).t))
+		    push_scope (CP_DECL_CONTEXT ((yyval.ftype).t));
+		  (yyval.ftype).new_type_flag = 1;
+		}
+    break;
+
+  case 503:
+/* Line 1792 of yacc.c  */
 #line 2268 "parse.y"
-{ 
-		  yyval.ftype.t = xref_tag (current_aggr, yyvsp[0].ttype, 1); 
-		  yyval.ftype.new_type_flag = 0;
-		;
-    break;}
-case 503:
+    { 
+		  (yyval.ftype).t = xref_tag (current_aggr, (yyvsp[(1) - (1)].ttype), 1); 
+		  (yyval.ftype).new_type_flag = 0;
+		}
+    break;
+
+  case 504:
+/* Line 1792 of yacc.c  */
 #line 2273 "parse.y"
-{ yyval.ttype = xref_tag (current_aggr, yyvsp[0].ttype, 0); ;
-    break;}
-case 504:
+    { (yyval.ttype) = xref_tag (current_aggr, (yyvsp[(1) - (1)].ttype), 0); }
+    break;
+
+  case 505:
+/* Line 1792 of yacc.c  */
 #line 2277 "parse.y"
-{ 
-		  yyval.ftype.t = yyvsp[-1].ttype;
-		  yyval.ftype.new_type_flag = 0;
-		  if (yyvsp[0].ttype)
-                    xref_basetypes (current_aggr, yyvsp[-2].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); 
-		;
-    break;}
-case 505:
+    { 
+		  (yyval.ftype).t = (yyvsp[(2) - (3)].ttype);
+		  (yyval.ftype).new_type_flag = 0;
+		  if ((yyvsp[(3) - (3)].ttype))
+                    xref_basetypes (current_aggr, (yyvsp[(1) - (3)].ttype), (yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); 
+		}
+    break;
+
+  case 506:
+/* Line 1792 of yacc.c  */
 #line 2285 "parse.y"
-{ 
-		  if (yyvsp[-1].ftype.t != error_mark_node)
+    { 
+		  if ((yyvsp[(1) - (2)].ftype).t != error_mark_node)
 		    {
-		      yyval.ftype.t = TREE_TYPE (yyvsp[-1].ftype.t);
-		      yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag;
+		      (yyval.ftype).t = TREE_TYPE ((yyvsp[(1) - (2)].ftype).t);
+		      (yyval.ftype).new_type_flag = (yyvsp[(1) - (2)].ftype).new_type_flag;
 		      if (current_aggr == union_type_node
-			  && TREE_CODE (yyval.ftype.t) != UNION_TYPE)
+			  && TREE_CODE ((yyval.ftype).t) != UNION_TYPE)
 			cp_pedwarn ("`union' tag used in declaring `%#T'", 
-				    yyval.ftype.t);
-		      else if (TREE_CODE (yyval.ftype.t) == UNION_TYPE
+				    (yyval.ftype).t);
+		      else if (TREE_CODE ((yyval.ftype).t) == UNION_TYPE
 			       && current_aggr != union_type_node)
-			cp_pedwarn ("non-`union' tag used in declaring `%#T'", yyval.ftype);
-		      else if (TREE_CODE (yyval.ftype.t) == RECORD_TYPE)
+			cp_pedwarn ("non-`union' tag used in declaring `%#T'", (yyval.ftype));
+		      else if (TREE_CODE ((yyval.ftype).t) == RECORD_TYPE)
 			/* We might be specializing a template with a different
 			   class-key; deal.  */
-			CLASSTYPE_DECLARED_CLASS (yyval.ftype.t) 
+			CLASSTYPE_DECLARED_CLASS ((yyval.ftype).t) 
 			  = (current_aggr == class_type_node);
-		      if (yyvsp[0].ttype)
+		      if ((yyvsp[(2) - (2)].ttype))
 			{
-			  maybe_process_partial_specialization (yyval.ftype.t);
-			  xref_basetypes (current_aggr, yyvsp[-1].ftype.t, yyval.ftype.t, yyvsp[0].ttype); 
+			  maybe_process_partial_specialization ((yyval.ftype).t);
+			  xref_basetypes (current_aggr, (yyvsp[(1) - (2)].ftype).t, (yyval.ftype).t, (yyvsp[(2) - (2)].ttype)); 
 			}
 		    }
-		;
-    break;}
-case 506:
+		}
+    break;
+
+  case 507:
+/* Line 1792 of yacc.c  */
 #line 2313 "parse.y"
-{ yyval.ttype = xref_tag (yyval.ttype, make_anon_name (), 0);
-		  yyungetc ('{', 1); ;
-    break;}
-case 507:
+    { (yyval.ttype) = xref_tag ((yyval.ttype), make_anon_name (), 0);
+		  yyungetc ('{', 1); }
+    break;
+
+  case 508:
+/* Line 1792 of yacc.c  */
 #line 2323 "parse.y"
-{
-		  yyval.ftype.t = yyvsp[0].ttype;
-		  yyval.ftype.new_type_flag = 0;
-		;
-    break;}
-case 509:
+    {
+		  (yyval.ftype).t = (yyvsp[(1) - (1)].ttype);
+		  (yyval.ftype).new_type_flag = 0;
+		}
+    break;
+
+  case 510:
+/* Line 1792 of yacc.c  */
 #line 2332 "parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 510:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 511:
+/* Line 1792 of yacc.c  */
 #line 2334 "parse.y"
-{ yyungetc(':', 1); yyval.ttype = NULL_TREE; ;
-    break;}
-case 511:
+    { yyungetc(':', 1); (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 512:
+/* Line 1792 of yacc.c  */
 #line 2336 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 513:
+    { (yyval.ttype) = (yyvsp[(3) - (3)].ttype); }
+    break;
+
+  case 514:
+/* Line 1792 of yacc.c  */
 #line 2342 "parse.y"
-{ yyval.ttype = chainon (yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 514:
+    { (yyval.ttype) = chainon ((yyval.ttype), (yyvsp[(4) - (4)].ttype)); }
+    break;
+
+  case 515:
+/* Line 1792 of yacc.c  */
 #line 2347 "parse.y"
-{ yyval.ttype = finish_base_specifier (access_default_node, yyvsp[0].ttype,
+    { (yyval.ttype) = finish_base_specifier (access_default_node, (yyvsp[(1) - (1)].ttype),
 					      current_aggr 
-					      == signature_type_node); ;
-    break;}
-case 515:
+					      == signature_type_node); }
+    break;
+
+  case 516:
+/* Line 1792 of yacc.c  */
 #line 2351 "parse.y"
-{ yyval.ttype = finish_base_specifier (yyvsp[-2].ttype, yyvsp[0].ttype, 
+    { (yyval.ttype) = finish_base_specifier ((yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype), 
 					      current_aggr 
-					      == signature_type_node); ;
-    break;}
-case 516:
+					      == signature_type_node); }
+    break;
+
+  case 517:
+/* Line 1792 of yacc.c  */
 #line 2358 "parse.y"
-{ if (yyval.ttype != error_mark_node) yyval.ttype = TYPE_MAIN_DECL (yyvsp[0].ttype); ;
-    break;}
-case 518:
+    { if ((yyval.ttype) != error_mark_node) (yyval.ttype) = TYPE_MAIN_DECL ((yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 519:
+/* Line 1792 of yacc.c  */
 #line 2361 "parse.y"
-{
+    {
 		  if (current_aggr == signature_type_node)
 		    {
-		      if (IS_AGGR_TYPE (TREE_TYPE (yyvsp[-1].ttype)))
+		      if (IS_AGGR_TYPE (TREE_TYPE ((yyvsp[(3) - (4)].ttype))))
 			{
 			  sorry ("`sigof' as base signature specifier");
-			  yyval.ttype = TREE_TYPE (yyvsp[-1].ttype);
+			  (yyval.ttype) = TREE_TYPE ((yyvsp[(3) - (4)].ttype));
 			}
 		      else
 			{
 			  error ("`sigof' applied to non-aggregate expression");
-			  yyval.ttype = error_mark_node;
+			  (yyval.ttype) = error_mark_node;
 			}
 		    }
 		  else
 		    {
 		      error ("`sigof' in struct or class declaration");
-		      yyval.ttype = error_mark_node;
+		      (yyval.ttype) = error_mark_node;
 		    }
-		;
-    break;}
-case 519:
+		}
+    break;
+
+  case 520:
+/* Line 1792 of yacc.c  */
 #line 2382 "parse.y"
-{
+    {
 		  if (current_aggr == signature_type_node)
 		    {
-		      if (IS_AGGR_TYPE (groktypename (yyvsp[-1].ftype.t)))
+		      if (IS_AGGR_TYPE (groktypename ((yyvsp[(3) - (4)].ftype).t)))
 			{
 			  sorry ("`sigof' as base signature specifier");
-			  yyval.ttype = groktypename (yyvsp[-1].ftype.t);
+			  (yyval.ttype) = groktypename ((yyvsp[(3) - (4)].ftype).t);
 			}
 		      else
 			{
 			  error ("`sigof' applied to non-aggregate expression");
-			  yyval.ttype = error_mark_node;
+			  (yyval.ttype) = error_mark_node;
 			}
 		    }
 		  else
 		    {
 		      error ("`sigof' in struct or class declaration");
-		      yyval.ttype = error_mark_node;
+		      (yyval.ttype) = error_mark_node;
 		    }
-		;
-    break;}
-case 521:
+		}
+    break;
+
+  case 522:
+/* Line 1792 of yacc.c  */
 #line 2407 "parse.y"
-{ if (yyvsp[-1].ttype != ridpointers[(int)RID_VIRTUAL])
-		    cp_error ("`%D' access", yyvsp[-1].ttype);
-		  yyval.ttype = access_default_virtual_node; ;
-    break;}
-case 522:
+    { if ((yyvsp[(1) - (2)].ttype) != ridpointers[(int)RID_VIRTUAL])
+		    cp_error ("`%D' access", (yyvsp[(1) - (2)].ttype));
+		  (yyval.ttype) = access_default_virtual_node; }
+    break;
+
+  case 523:
+/* Line 1792 of yacc.c  */
 #line 2411 "parse.y"
-{
-		  if (yyvsp[-2].ttype != access_default_virtual_node)
+    {
+		  if ((yyvsp[(1) - (3)].ttype) != access_default_virtual_node)
 		    error ("multiple access specifiers");
-		  else if (yyvsp[-1].ttype == access_public_node)
-		    yyval.ttype = access_public_virtual_node;
-		  else if (yyvsp[-1].ttype == access_protected_node)
-		    yyval.ttype = access_protected_virtual_node;
+		  else if ((yyvsp[(2) - (3)].ttype) == access_public_node)
+		    (yyval.ttype) = access_public_virtual_node;
+		  else if ((yyvsp[(2) - (3)].ttype) == access_protected_node)
+		    (yyval.ttype) = access_protected_virtual_node;
 		  else /* $2 == access_private_node */
-		    yyval.ttype = access_private_virtual_node;
-		;
-    break;}
-case 523:
+		    (yyval.ttype) = access_private_virtual_node;
+		}
+    break;
+
+  case 524:
+/* Line 1792 of yacc.c  */
 #line 2422 "parse.y"
-{ if (yyvsp[-1].ttype != ridpointers[(int)RID_VIRTUAL])
-		    cp_error ("`%D' access", yyvsp[-1].ttype);
-		  else if (yyval.ttype == access_public_node)
-		    yyval.ttype = access_public_virtual_node;
-		  else if (yyval.ttype == access_protected_node)
-		    yyval.ttype = access_protected_virtual_node;
-		  else if (yyval.ttype == access_private_node)
-		    yyval.ttype = access_private_virtual_node;
+    { if ((yyvsp[(2) - (3)].ttype) != ridpointers[(int)RID_VIRTUAL])
+		    cp_error ("`%D' access", (yyvsp[(2) - (3)].ttype));
+		  else if ((yyval.ttype) == access_public_node)
+		    (yyval.ttype) = access_public_virtual_node;
+		  else if ((yyval.ttype) == access_protected_node)
+		    (yyval.ttype) = access_protected_virtual_node;
+		  else if ((yyval.ttype) == access_private_node)
+		    (yyval.ttype) = access_private_virtual_node;
 		  else
 		    error ("multiple `virtual' specifiers");
-		;
-    break;}
-case 528:
+		}
+    break;
+
+  case 529:
+/* Line 1792 of yacc.c  */
 #line 2443 "parse.y"
-{
+    {
 		  if (current_aggr == signature_type_node)
 		    {
 		      error ("access specifier not allowed in signature");
-		      yyvsp[-1].ttype = access_public_node;
+		      (yyvsp[(1) - (2)].ttype) = access_public_node;
 		    }
 
-		  current_access_specifier = yyvsp[-1].ttype;
-                ;
-    break;}
-case 529:
+		  current_access_specifier = (yyvsp[(1) - (2)].ttype);
+                }
+    break;
+
+  case 530:
+/* Line 1792 of yacc.c  */
 #line 2458 "parse.y"
-{ 
-		  finish_member_declaration (yyvsp[0].ttype);
-		;
-    break;}
-case 530:
+    { 
+		  finish_member_declaration ((yyvsp[(1) - (1)].ttype));
+		}
+    break;
+
+  case 531:
+/* Line 1792 of yacc.c  */
 #line 2462 "parse.y"
-{ 
-		  finish_member_declaration (yyvsp[0].ttype);
-		;
-    break;}
-case 532:
+    { 
+		  finish_member_declaration ((yyvsp[(2) - (2)].ttype));
+		}
+    break;
+
+  case 533:
+/* Line 1792 of yacc.c  */
 #line 2470 "parse.y"
-{ error ("missing ';' before right brace");
-		  yyungetc ('}', 0); ;
-    break;}
-case 533:
+    { error ("missing ';' before right brace");
+		  yyungetc ('}', 0); }
+    break;
+
+  case 534:
+/* Line 1792 of yacc.c  */
 #line 2475 "parse.y"
-{ yyval.ttype = finish_method (yyval.ttype); ;
-    break;}
-case 534:
+    { (yyval.ttype) = finish_method ((yyval.ttype)); }
+    break;
+
+  case 535:
+/* Line 1792 of yacc.c  */
 #line 2477 "parse.y"
-{ yyval.ttype = finish_method (yyval.ttype); ;
-    break;}
-case 535:
+    { (yyval.ttype) = finish_method ((yyval.ttype)); }
+    break;
+
+  case 536:
+/* Line 1792 of yacc.c  */
 #line 2479 "parse.y"
-{ yyval.ttype = finish_method (yyval.ttype); ;
-    break;}
-case 536:
+    { (yyval.ttype) = finish_method ((yyval.ttype)); }
+    break;
+
+  case 537:
+/* Line 1792 of yacc.c  */
 #line 2481 "parse.y"
-{ yyval.ttype = finish_method (yyval.ttype); ;
-    break;}
-case 537:
+    { (yyval.ttype) = finish_method ((yyval.ttype)); }
+    break;
+
+  case 538:
+/* Line 1792 of yacc.c  */
 #line 2483 "parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 538:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 539:
+/* Line 1792 of yacc.c  */
 #line 2485 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype;
-		  pedantic = yyvsp[-1].itype; ;
-    break;}
-case 539:
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype);
+		  pedantic = (yyvsp[(1) - (2)].itype); }
+    break;
+
+  case 540:
+/* Line 1792 of yacc.c  */
 #line 2488 "parse.y"
-{  
-		  if (yyvsp[0].ttype)
-		    yyval.ttype = finish_member_template_decl (yyvsp[0].ttype);
+    {  
+		  if ((yyvsp[(2) - (2)].ttype))
+		    (yyval.ttype) = finish_member_template_decl ((yyvsp[(2) - (2)].ttype));
 		  else
 		    /* The component was already processed.  */
-		    yyval.ttype = NULL_TREE;
+		    (yyval.ttype) = NULL_TREE;
 
-		  finish_template_decl (yyvsp[-1].ttype);
-		;
-    break;}
-case 540:
+		  finish_template_decl ((yyvsp[(1) - (2)].ttype));
+		}
+    break;
+
+  case 541:
+/* Line 1792 of yacc.c  */
 #line 2498 "parse.y"
-{ 
-		  yyval.ttype = finish_member_class_template (yyvsp[-1].ftype.t); 
-		  finish_template_decl (yyvsp[-2].ttype);
-		;
-    break;}
-case 541:
+    { 
+		  (yyval.ttype) = finish_member_class_template ((yyvsp[(2) - (3)].ftype).t); 
+		  finish_template_decl ((yyvsp[(1) - (3)].ttype));
+		}
+    break;
+
+  case 542:
+/* Line 1792 of yacc.c  */
 #line 2509 "parse.y"
-{
+    {
 		  /* Most of the productions for component_decl only
 		     allow the creation of one new member, so we call
 		     finish_member_declaration in component_decl_list.
@@ -6763,1623 +8565,2222 @@ case 541:
 		     components more than once, we send NULL_TREE up
 		     here; that lets finish_member_declaration know
 		     that there is nothing to do.  */
-		  if (!yyvsp[0].itype)
-		    grok_x_components (yyvsp[-1].ftype.t);
-		  yyval.ttype = NULL_TREE;
-		;
-    break;}
-case 542:
+		  if (!(yyvsp[(2) - (2)].itype))
+		    grok_x_components ((yyvsp[(1) - (2)].ftype).t);
+		  (yyval.ttype) = NULL_TREE;
+		}
+    break;
+
+  case 543:
+/* Line 1792 of yacc.c  */
 #line 2530 "parse.y"
-{ 
-		  if (!yyvsp[0].itype)
-		    grok_x_components (yyvsp[-1].ttype);
-		  yyval.ttype = NULL_TREE; 
-		;
-    break;}
-case 543:
+    { 
+		  if (!(yyvsp[(2) - (2)].itype))
+		    grok_x_components ((yyvsp[(1) - (2)].ttype));
+		  (yyval.ttype) = NULL_TREE; 
+		}
+    break;
+
+  case 544:
+/* Line 1792 of yacc.c  */
 #line 2536 "parse.y"
-{ yyval.ttype = grokfield (yyval.ttype, NULL_TREE, yyvsp[0].ttype, yyvsp[-2].ttype,
-				  build_tree_list (yyvsp[-1].ttype, NULL_TREE)); ;
-    break;}
-case 544:
+    { (yyval.ttype) = grokfield ((yyval.ttype), NULL_TREE, (yyvsp[(4) - (4)].ttype), (yyvsp[(2) - (4)].ttype),
+				  build_tree_list ((yyvsp[(3) - (4)].ttype), NULL_TREE)); }
+    break;
+
+  case 545:
+/* Line 1792 of yacc.c  */
 #line 2539 "parse.y"
-{ yyval.ttype = grokfield (yyval.ttype, NULL_TREE, yyvsp[0].ttype, yyvsp[-2].ttype,
-				  build_tree_list (yyvsp[-1].ttype, NULL_TREE)); ;
-    break;}
-case 545:
+    { (yyval.ttype) = grokfield ((yyval.ttype), NULL_TREE, (yyvsp[(4) - (4)].ttype), (yyvsp[(2) - (4)].ttype),
+				  build_tree_list ((yyvsp[(3) - (4)].ttype), NULL_TREE)); }
+    break;
+
+  case 546:
+/* Line 1792 of yacc.c  */
 #line 2542 "parse.y"
-{ yyval.ttype = grokbitfield (NULL_TREE, NULL_TREE, yyvsp[0].ttype); ;
-    break;}
-case 546:
+    { (yyval.ttype) = grokbitfield (NULL_TREE, NULL_TREE, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 547:
+/* Line 1792 of yacc.c  */
 #line 2544 "parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 547:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 548:
+/* Line 1792 of yacc.c  */
 #line 2555 "parse.y"
-{ tree specs, attrs;
-		  split_specs_attrs (yyvsp[-4].ttype, &specs, &attrs);
-		  yyval.ttype = grokfield (yyvsp[-3].ttype, specs, yyvsp[0].ttype, yyvsp[-2].ttype,
-				  build_tree_list (yyvsp[-1].ttype, attrs)); ;
-    break;}
-case 548:
+    { tree specs, attrs;
+		  split_specs_attrs ((yyvsp[(1) - (5)].ttype), &specs, &attrs);
+		  (yyval.ttype) = grokfield ((yyvsp[(2) - (5)].ttype), specs, (yyvsp[(5) - (5)].ttype), (yyvsp[(3) - (5)].ttype),
+				  build_tree_list ((yyvsp[(4) - (5)].ttype), attrs)); }
+    break;
+
+  case 549:
+/* Line 1792 of yacc.c  */
 #line 2560 "parse.y"
-{ yyval.ttype = grokfield (yyval.ttype, NULL_TREE, yyvsp[0].ttype, yyvsp[-2].ttype,
-				  build_tree_list (yyvsp[-1].ttype, NULL_TREE)); ;
-    break;}
-case 549:
+    { (yyval.ttype) = grokfield ((yyval.ttype), NULL_TREE, (yyvsp[(4) - (4)].ttype), (yyvsp[(2) - (4)].ttype),
+				  build_tree_list ((yyvsp[(3) - (4)].ttype), NULL_TREE)); }
+    break;
+
+  case 550:
+/* Line 1792 of yacc.c  */
 #line 2563 "parse.y"
-{ yyval.ttype = do_class_using_decl (yyvsp[0].ttype); ;
-    break;}
-case 550:
+    { (yyval.ttype) = do_class_using_decl ((yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 551:
+/* Line 1792 of yacc.c  */
 #line 2569 "parse.y"
-{ yyval.itype = 0; ;
-    break;}
-case 551:
+    { (yyval.itype) = 0; }
+    break;
+
+  case 552:
+/* Line 1792 of yacc.c  */
 #line 2571 "parse.y"
-{ 
+    { 
 		  if (PROCESSING_REAL_TEMPLATE_DECL_P ())
-		    yyvsp[0].ttype = finish_member_template_decl (yyvsp[0].ttype);
-		  finish_member_declaration (yyvsp[0].ttype); 
-		  yyval.itype = 1;
-		;
-    break;}
-case 552:
+		    (yyvsp[(1) - (1)].ttype) = finish_member_template_decl ((yyvsp[(1) - (1)].ttype));
+		  finish_member_declaration ((yyvsp[(1) - (1)].ttype)); 
+		  (yyval.itype) = 1;
+		}
+    break;
+
+  case 553:
+/* Line 1792 of yacc.c  */
 #line 2578 "parse.y"
-{ 
+    { 
 		  check_multiple_declarators ();
 		  if (PROCESSING_REAL_TEMPLATE_DECL_P ())
-		    yyvsp[0].ttype = finish_member_template_decl (yyvsp[0].ttype);
-		  finish_member_declaration (yyvsp[0].ttype);
-		  yyval.itype = 2;
-		;
-    break;}
-case 553:
+		    (yyvsp[(3) - (3)].ttype) = finish_member_template_decl ((yyvsp[(3) - (3)].ttype));
+		  finish_member_declaration ((yyvsp[(3) - (3)].ttype));
+		  (yyval.itype) = 2;
+		}
+    break;
+
+  case 554:
+/* Line 1792 of yacc.c  */
 #line 2589 "parse.y"
-{ yyval.itype = 0; ;
-    break;}
-case 554:
+    { (yyval.itype) = 0; }
+    break;
+
+  case 555:
+/* Line 1792 of yacc.c  */
 #line 2591 "parse.y"
-{ 
+    { 
 		  if (PROCESSING_REAL_TEMPLATE_DECL_P ())
-		    yyvsp[0].ttype = finish_member_template_decl (yyvsp[0].ttype);
-		  finish_member_declaration (yyvsp[0].ttype);
-		  yyval.itype = 1;
-		;
-    break;}
-case 555:
+		    (yyvsp[(1) - (1)].ttype) = finish_member_template_decl ((yyvsp[(1) - (1)].ttype));
+		  finish_member_declaration ((yyvsp[(1) - (1)].ttype));
+		  (yyval.itype) = 1;
+		}
+    break;
+
+  case 556:
+/* Line 1792 of yacc.c  */
 #line 2598 "parse.y"
-{ 
+    { 
 		  check_multiple_declarators ();
 		  if (PROCESSING_REAL_TEMPLATE_DECL_P ())
-		    yyvsp[0].ttype = finish_member_template_decl (yyvsp[0].ttype);
-		  finish_member_declaration (yyvsp[0].ttype); 
-		  yyval.itype = 2;
-		;
-    break;}
-case 560:
+		    (yyvsp[(3) - (3)].ttype) = finish_member_template_decl ((yyvsp[(3) - (3)].ttype));
+		  finish_member_declaration ((yyvsp[(3) - (3)].ttype)); 
+		  (yyval.itype) = 2;
+		}
+    break;
+
+  case 561:
+/* Line 1792 of yacc.c  */
 #line 2619 "parse.y"
-{ split_specs_attrs (yyvsp[-4].ttype, &current_declspecs,
+    { split_specs_attrs ((yyvsp[(0) - (4)].ttype), &current_declspecs,
 				     &prefix_attributes);
-		  yyvsp[-4].ttype = current_declspecs;
-		  yyval.ttype = grokfield (yyval.ttype, current_declspecs, yyvsp[0].ttype, yyvsp[-2].ttype,
-				  build_tree_list (yyvsp[-1].ttype, prefix_attributes)); ;
-    break;}
-case 561:
+		  (yyvsp[(0) - (4)].ttype) = current_declspecs;
+		  (yyval.ttype) = grokfield ((yyval.ttype), current_declspecs, (yyvsp[(4) - (4)].ttype), (yyvsp[(2) - (4)].ttype),
+				  build_tree_list ((yyvsp[(3) - (4)].ttype), prefix_attributes)); }
+    break;
+
+  case 562:
+/* Line 1792 of yacc.c  */
 #line 2625 "parse.y"
-{ split_specs_attrs (yyvsp[-4].ttype, &current_declspecs,
+    { split_specs_attrs ((yyvsp[(0) - (4)].ttype), &current_declspecs,
 				     &prefix_attributes);
-		  yyvsp[-4].ttype = current_declspecs;
-		  yyval.ttype = grokbitfield (yyval.ttype, current_declspecs, yyvsp[-1].ttype);
-		  cplus_decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;
-    break;}
-case 562:
+		  (yyvsp[(0) - (4)].ttype) = current_declspecs;
+		  (yyval.ttype) = grokbitfield ((yyval.ttype), current_declspecs, (yyvsp[(3) - (4)].ttype));
+		  cplus_decl_attributes ((yyval.ttype), (yyvsp[(4) - (4)].ttype), prefix_attributes); }
+    break;
+
+  case 563:
+/* Line 1792 of yacc.c  */
 #line 2634 "parse.y"
-{ split_specs_attrs (yyvsp[-4].ttype, &current_declspecs,
+    { split_specs_attrs ((yyvsp[(0) - (4)].ttype), &current_declspecs,
 				     &prefix_attributes);
-		  yyvsp[-4].ttype = current_declspecs;
-		  yyval.ttype = grokfield (yyval.ttype, current_declspecs, yyvsp[0].ttype, yyvsp[-2].ttype,
-				  build_tree_list (yyvsp[-1].ttype, prefix_attributes)); ;
-    break;}
-case 563:
+		  (yyvsp[(0) - (4)].ttype) = current_declspecs;
+		  (yyval.ttype) = grokfield ((yyval.ttype), current_declspecs, (yyvsp[(4) - (4)].ttype), (yyvsp[(2) - (4)].ttype),
+				  build_tree_list ((yyvsp[(3) - (4)].ttype), prefix_attributes)); }
+    break;
+
+  case 564:
+/* Line 1792 of yacc.c  */
 #line 2640 "parse.y"
-{ split_specs_attrs (yyvsp[-4].ttype, &current_declspecs,
+    { split_specs_attrs ((yyvsp[(0) - (4)].ttype), &current_declspecs,
 				     &prefix_attributes);
-		  yyvsp[-4].ttype = current_declspecs;
-		  yyval.ttype = grokfield (yyval.ttype, current_declspecs, yyvsp[0].ttype, yyvsp[-2].ttype,
-				  build_tree_list (yyvsp[-1].ttype, prefix_attributes)); ;
-    break;}
-case 564:
+		  (yyvsp[(0) - (4)].ttype) = current_declspecs;
+		  (yyval.ttype) = grokfield ((yyval.ttype), current_declspecs, (yyvsp[(4) - (4)].ttype), (yyvsp[(2) - (4)].ttype),
+				  build_tree_list ((yyvsp[(3) - (4)].ttype), prefix_attributes)); }
+    break;
+
+  case 565:
+/* Line 1792 of yacc.c  */
 #line 2646 "parse.y"
-{ split_specs_attrs (yyvsp[-4].ttype, &current_declspecs,
+    { split_specs_attrs ((yyvsp[(0) - (4)].ttype), &current_declspecs,
 				     &prefix_attributes);
-		  yyvsp[-4].ttype = current_declspecs;
-		  yyval.ttype = grokbitfield (yyval.ttype, current_declspecs, yyvsp[-1].ttype);
-		  cplus_decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;
-    break;}
-case 565:
+		  (yyvsp[(0) - (4)].ttype) = current_declspecs;
+		  (yyval.ttype) = grokbitfield ((yyval.ttype), current_declspecs, (yyvsp[(3) - (4)].ttype));
+		  cplus_decl_attributes ((yyval.ttype), (yyvsp[(4) - (4)].ttype), prefix_attributes); }
+    break;
+
+  case 566:
+/* Line 1792 of yacc.c  */
 #line 2652 "parse.y"
-{ split_specs_attrs (yyvsp[-3].ttype, &current_declspecs,
+    { split_specs_attrs ((yyvsp[(0) - (3)].ttype), &current_declspecs,
 				     &prefix_attributes);
-		  yyvsp[-3].ttype = current_declspecs;
-		  yyval.ttype = grokbitfield (NULL_TREE, current_declspecs, yyvsp[-1].ttype);
-		  cplus_decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;
-    break;}
-case 566:
+		  (yyvsp[(0) - (3)].ttype) = current_declspecs;
+		  (yyval.ttype) = grokbitfield (NULL_TREE, current_declspecs, (yyvsp[(2) - (3)].ttype));
+		  cplus_decl_attributes ((yyval.ttype), (yyvsp[(3) - (3)].ttype), prefix_attributes); }
+    break;
+
+  case 567:
+/* Line 1792 of yacc.c  */
 #line 2661 "parse.y"
-{ yyval.ttype = grokfield (yyval.ttype, current_declspecs, yyvsp[0].ttype, yyvsp[-2].ttype,
-				  build_tree_list (yyvsp[-1].ttype, prefix_attributes)); ;
-    break;}
-case 567:
+    { (yyval.ttype) = grokfield ((yyval.ttype), current_declspecs, (yyvsp[(4) - (4)].ttype), (yyvsp[(2) - (4)].ttype),
+				  build_tree_list ((yyvsp[(3) - (4)].ttype), prefix_attributes)); }
+    break;
+
+  case 568:
+/* Line 1792 of yacc.c  */
 #line 2664 "parse.y"
-{ yyval.ttype = grokbitfield (yyval.ttype, current_declspecs, yyvsp[-1].ttype);
-		  cplus_decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;
-    break;}
-case 568:
+    { (yyval.ttype) = grokbitfield ((yyval.ttype), current_declspecs, (yyvsp[(3) - (4)].ttype));
+		  cplus_decl_attributes ((yyval.ttype), (yyvsp[(4) - (4)].ttype), prefix_attributes); }
+    break;
+
+  case 569:
+/* Line 1792 of yacc.c  */
 #line 2670 "parse.y"
-{ yyval.ttype = grokfield (yyval.ttype, current_declspecs, yyvsp[0].ttype, yyvsp[-2].ttype,
-				  build_tree_list (yyvsp[-1].ttype, prefix_attributes)); ;
-    break;}
-case 569:
+    { (yyval.ttype) = grokfield ((yyval.ttype), current_declspecs, (yyvsp[(4) - (4)].ttype), (yyvsp[(2) - (4)].ttype),
+				  build_tree_list ((yyvsp[(3) - (4)].ttype), prefix_attributes)); }
+    break;
+
+  case 570:
+/* Line 1792 of yacc.c  */
 #line 2673 "parse.y"
-{ yyval.ttype = grokbitfield (yyval.ttype, current_declspecs, yyvsp[-1].ttype);
-		  cplus_decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;
-    break;}
-case 570:
+    { (yyval.ttype) = grokbitfield ((yyval.ttype), current_declspecs, (yyvsp[(3) - (4)].ttype));
+		  cplus_decl_attributes ((yyval.ttype), (yyvsp[(4) - (4)].ttype), prefix_attributes); }
+    break;
+
+  case 571:
+/* Line 1792 of yacc.c  */
 #line 2676 "parse.y"
-{ yyval.ttype = grokbitfield (NULL_TREE, current_declspecs, yyvsp[-1].ttype);
-		  cplus_decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;
-    break;}
-case 572:
+    { (yyval.ttype) = grokbitfield (NULL_TREE, current_declspecs, (yyvsp[(2) - (3)].ttype));
+		  cplus_decl_attributes ((yyval.ttype), (yyvsp[(3) - (3)].ttype), prefix_attributes); }
+    break;
+
+  case 573:
+/* Line 1792 of yacc.c  */
 #line 2687 "parse.y"
-{ TREE_CHAIN (yyvsp[0].ttype) = yyval.ttype; yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 573:
+    { TREE_CHAIN ((yyvsp[(3) - (3)].ttype)) = (yyval.ttype); (yyval.ttype) = (yyvsp[(3) - (3)].ttype); }
+    break;
+
+  case 574:
+/* Line 1792 of yacc.c  */
 #line 2692 "parse.y"
-{ yyval.ttype = build_enumerator (yyval.ttype, NULL_TREE, current_enum_type); ;
-    break;}
-case 574:
+    { (yyval.ttype) = build_enumerator ((yyval.ttype), NULL_TREE, current_enum_type); }
+    break;
+
+  case 575:
+/* Line 1792 of yacc.c  */
 #line 2694 "parse.y"
-{ yyval.ttype = build_enumerator (yyval.ttype, yyvsp[0].ttype, current_enum_type); ;
-    break;}
-case 575:
+    { (yyval.ttype) = build_enumerator ((yyval.ttype), (yyvsp[(3) - (3)].ttype), current_enum_type); }
+    break;
+
+  case 576:
+/* Line 1792 of yacc.c  */
 #line 2700 "parse.y"
-{ yyval.ftype.t = build_decl_list (yyvsp[-1].ftype.t, yyvsp[0].ttype); 
-		  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;
-    break;}
-case 576:
+    { (yyval.ftype).t = build_decl_list ((yyvsp[(1) - (2)].ftype).t, (yyvsp[(2) - (2)].ttype)); 
+		  (yyval.ftype).new_type_flag = (yyvsp[(1) - (2)].ftype).new_type_flag; }
+    break;
+
+  case 577:
+/* Line 1792 of yacc.c  */
 #line 2703 "parse.y"
-{ yyval.ftype.t = build_decl_list (yyvsp[0].ftype.t, NULL_TREE); 
-		  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag; ;
-    break;}
-case 577:
+    { (yyval.ftype).t = build_decl_list ((yyvsp[(1) - (1)].ftype).t, NULL_TREE); 
+		  (yyval.ftype).new_type_flag = (yyvsp[(1) - (1)].ftype).new_type_flag; }
+    break;
+
+  case 578:
+/* Line 1792 of yacc.c  */
 #line 2710 "parse.y"
-{
+    {
 		  if (pedantic)
 		    pedwarn ("ANSI C++ forbids array dimensions with parenthesized type in new");
-		  yyval.ftype.t = build_parse_node (ARRAY_REF, TREE_VALUE (yyvsp[-4].ftype.t), yyvsp[-1].ttype);
-		  yyval.ftype.t = build_decl_list (TREE_PURPOSE (yyvsp[-4].ftype.t), yyval.ftype.t);
-		  yyval.ftype.new_type_flag = yyvsp[-4].ftype.new_type_flag;
-		;
-    break;}
-case 578:
+		  (yyval.ftype).t = build_parse_node (ARRAY_REF, TREE_VALUE ((yyvsp[(3) - (7)].ftype).t), (yyvsp[(6) - (7)].ttype));
+		  (yyval.ftype).t = build_decl_list (TREE_PURPOSE ((yyvsp[(3) - (7)].ftype).t), (yyval.ftype).t);
+		  (yyval.ftype).new_type_flag = (yyvsp[(3) - (7)].ftype).new_type_flag;
+		}
+    break;
+
+  case 579:
+/* Line 1792 of yacc.c  */
 #line 2721 "parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 579:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 580:
+/* Line 1792 of yacc.c  */
 #line 2723 "parse.y"
-{ yyval.ttype = decl_tree_cons (NULL_TREE, yyvsp[0].ttype, yyval.ttype); ;
-    break;}
-case 580:
+    { (yyval.ttype) = decl_tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyval.ttype)); }
+    break;
+
+  case 581:
+/* Line 1792 of yacc.c  */
 #line 2728 "parse.y"
-{ yyval.ftype.t = hash_tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE);
-		  yyval.ftype.new_type_flag = 0; ;
-    break;}
-case 581:
+    { (yyval.ftype).t = hash_tree_cons (NULL_TREE, (yyvsp[(1) - (1)].ttype), NULL_TREE);
+		  (yyval.ftype).new_type_flag = 0; }
+    break;
+
+  case 582:
+/* Line 1792 of yacc.c  */
 #line 2731 "parse.y"
-{ yyval.ftype.t = hash_tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ftype.t); 
-		  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;
-    break;}
-case 582:
+    { (yyval.ftype).t = hash_tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ftype).t); 
+		  (yyval.ftype).new_type_flag = (yyvsp[(1) - (2)].ftype).new_type_flag; }
+    break;
+
+  case 583:
+/* Line 1792 of yacc.c  */
 #line 2740 "parse.y"
-{ yyval.itype = suspend_momentary (); ;
-    break;}
-case 583:
+    { (yyval.itype) = suspend_momentary (); }
+    break;
+
+  case 584:
+/* Line 1792 of yacc.c  */
 #line 2745 "parse.y"
-{ resume_momentary ((int) yyvsp[-1].itype); yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 584:
+    { resume_momentary ((int) (yyvsp[(1) - (2)].itype)); (yyval.ttype) = (yyvsp[(2) - (2)].ttype); }
+    break;
+
+  case 585:
+/* Line 1792 of yacc.c  */
 #line 2751 "parse.y"
-{ resume_momentary ((int) yyvsp[-3].itype); yyval.ttype = yyvsp[-1].ttype; ;
-    break;}
-case 585:
+    { resume_momentary ((int) (yyvsp[(1) - (4)].itype)); (yyval.ttype) = (yyvsp[(3) - (4)].ttype); }
+    break;
+
+  case 586:
+/* Line 1792 of yacc.c  */
 #line 2753 "parse.y"
-{ resume_momentary ((int) yyvsp[-3].itype); yyval.ttype = yyvsp[-1].ttype; ;
-    break;}
-case 586:
+    { resume_momentary ((int) (yyvsp[(1) - (4)].itype)); (yyval.ttype) = (yyvsp[(3) - (4)].ttype); }
+    break;
+
+  case 587:
+/* Line 1792 of yacc.c  */
 #line 2755 "parse.y"
-{ resume_momentary ((int) yyvsp[-1].itype); yyval.ttype = empty_parms (); ;
-    break;}
-case 587:
+    { resume_momentary ((int) (yyvsp[(1) - (2)].itype)); (yyval.ttype) = empty_parms (); }
+    break;
+
+  case 588:
+/* Line 1792 of yacc.c  */
 #line 2757 "parse.y"
-{ resume_momentary ((int) yyvsp[-3].itype); yyval.ttype = NULL_TREE; ;
-    break;}
-case 589:
+    { resume_momentary ((int) (yyvsp[(1) - (4)].itype)); (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 590:
+/* Line 1792 of yacc.c  */
 #line 2765 "parse.y"
-{
+    {
 		  /* Provide support for '(' attributes '*' declarator ')'
 		     etc */
-		  yyval.ttype = decl_tree_cons (yyvsp[-1].ttype, yyvsp[0].ttype, NULL_TREE);
-		;
-    break;}
-case 590:
+		  (yyval.ttype) = decl_tree_cons ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype), NULL_TREE);
+		}
+    break;
+
+  case 591:
+/* Line 1792 of yacc.c  */
 #line 2775 "parse.y"
-{ yyval.ttype = make_pointer_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;
-    break;}
-case 591:
+    { (yyval.ttype) = make_pointer_declarator ((yyvsp[(2) - (3)].ftype).t, (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 592:
+/* Line 1792 of yacc.c  */
 #line 2777 "parse.y"
-{ yyval.ttype = make_reference_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;
-    break;}
-case 592:
+    { (yyval.ttype) = make_reference_declarator ((yyvsp[(2) - (3)].ftype).t, (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 593:
+/* Line 1792 of yacc.c  */
 #line 2779 "parse.y"
-{ yyval.ttype = make_pointer_declarator (NULL_TREE, yyvsp[0].ttype); ;
-    break;}
-case 593:
+    { (yyval.ttype) = make_pointer_declarator (NULL_TREE, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 594:
+/* Line 1792 of yacc.c  */
 #line 2781 "parse.y"
-{ yyval.ttype = make_reference_declarator (NULL_TREE, yyvsp[0].ttype); ;
-    break;}
-case 594:
+    { (yyval.ttype) = make_reference_declarator (NULL_TREE, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 595:
+/* Line 1792 of yacc.c  */
 #line 2783 "parse.y"
-{ tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);
-		  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);
-		;
-    break;}
-case 596:
+    { tree arg = make_pointer_declarator ((yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype));
+		  (yyval.ttype) = build_parse_node (SCOPE_REF, (yyvsp[(1) - (3)].ttype), arg);
+		}
+    break;
+
+  case 597:
+/* Line 1792 of yacc.c  */
 #line 2791 "parse.y"
-{ yyval.ttype = make_call_declarator (yyval.ttype, yyvsp[-2].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 597:
+    { (yyval.ttype) = make_call_declarator ((yyval.ttype), (yyvsp[(2) - (4)].ttype), (yyvsp[(3) - (4)].ttype), (yyvsp[(4) - (4)].ttype)); }
+    break;
+
+  case 598:
+/* Line 1792 of yacc.c  */
 #line 2793 "parse.y"
-{ yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, yyvsp[-1].ttype); ;
-    break;}
-case 598:
+    { (yyval.ttype) = build_parse_node (ARRAY_REF, (yyval.ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 599:
+/* Line 1792 of yacc.c  */
 #line 2795 "parse.y"
-{ yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, NULL_TREE); ;
-    break;}
-case 599:
+    { (yyval.ttype) = build_parse_node (ARRAY_REF, (yyval.ttype), NULL_TREE); }
+    break;
+
+  case 600:
+/* Line 1792 of yacc.c  */
 #line 2797 "parse.y"
-{ yyval.ttype = yyvsp[-1].ttype; ;
-    break;}
-case 600:
+    { (yyval.ttype) = (yyvsp[(2) - (3)].ttype); }
+    break;
+
+  case 601:
+/* Line 1792 of yacc.c  */
 #line 2799 "parse.y"
-{ push_nested_class (yyvsp[-1].ttype, 3);
-		  yyval.ttype = build_parse_node (SCOPE_REF, yyval.ttype, yyvsp[0].ttype);
-		  TREE_COMPLEXITY (yyval.ttype) = current_class_depth; ;
-    break;}
-case 602:
+    { push_nested_class ((yyvsp[(1) - (2)].ttype), 3);
+		  (yyval.ttype) = build_parse_node (SCOPE_REF, (yyval.ttype), (yyvsp[(2) - (2)].ttype));
+		  TREE_COMPLEXITY ((yyval.ttype)) = current_class_depth; }
+    break;
+
+  case 603:
+/* Line 1792 of yacc.c  */
 #line 2807 "parse.y"
-{
-		  if (TREE_CODE (yyvsp[0].ttype) == IDENTIFIER_NODE)
+    {
+		  if (TREE_CODE ((yyvsp[(1) - (1)].ttype)) == IDENTIFIER_NODE)
 		    {
-		      yyval.ttype = lookup_name (yyvsp[0].ttype, 1);
-		      maybe_note_name_used_in_class (yyvsp[0].ttype, yyval.ttype);
+		      (yyval.ttype) = lookup_name ((yyvsp[(1) - (1)].ttype), 1);
+		      maybe_note_name_used_in_class ((yyvsp[(1) - (1)].ttype), (yyval.ttype));
 		    }
 		  else
-		    yyval.ttype = yyvsp[0].ttype;
-		;
-    break;}
-case 603:
+		    (yyval.ttype) = (yyvsp[(1) - (1)].ttype);
+		}
+    break;
+
+  case 604:
+/* Line 1792 of yacc.c  */
 #line 2817 "parse.y"
-{
-		  if (TREE_CODE (yyvsp[0].ttype) == IDENTIFIER_NODE)
-		    yyval.ttype = IDENTIFIER_GLOBAL_VALUE (yyvsp[0].ttype);
+    {
+		  if (TREE_CODE ((yyvsp[(2) - (2)].ttype)) == IDENTIFIER_NODE)
+		    (yyval.ttype) = IDENTIFIER_GLOBAL_VALUE ((yyvsp[(2) - (2)].ttype));
 		  else
-		    yyval.ttype = yyvsp[0].ttype;
+		    (yyval.ttype) = (yyvsp[(2) - (2)].ttype);
 		  got_scope = NULL_TREE;
-		;
-    break;}
-case 606:
+		}
+    break;
+
+  case 607:
+/* Line 1792 of yacc.c  */
 #line 2830 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 607:
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype); }
+    break;
+
+  case 608:
+/* Line 1792 of yacc.c  */
 #line 2835 "parse.y"
-{ yyval.ttype = get_type_decl (yyvsp[0].ttype); ;
-    break;}
-case 609:
+    { (yyval.ttype) = get_type_decl ((yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 610:
+/* Line 1792 of yacc.c  */
 #line 2844 "parse.y"
-{
+    {
 		  /* Provide support for '(' attributes '*' declarator ')'
 		     etc */
-		  yyval.ttype = decl_tree_cons (yyvsp[-1].ttype, yyvsp[0].ttype, NULL_TREE);
-		;
-    break;}
-case 610:
+		  (yyval.ttype) = decl_tree_cons ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype), NULL_TREE);
+		}
+    break;
+
+  case 611:
+/* Line 1792 of yacc.c  */
 #line 2853 "parse.y"
-{ yyval.ttype = make_pointer_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;
-    break;}
-case 611:
+    { (yyval.ttype) = make_pointer_declarator ((yyvsp[(2) - (3)].ftype).t, (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 612:
+/* Line 1792 of yacc.c  */
 #line 2855 "parse.y"
-{ yyval.ttype = make_reference_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;
-    break;}
-case 612:
+    { (yyval.ttype) = make_reference_declarator ((yyvsp[(2) - (3)].ftype).t, (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 613:
+/* Line 1792 of yacc.c  */
 #line 2857 "parse.y"
-{ yyval.ttype = make_pointer_declarator (NULL_TREE, yyvsp[0].ttype); ;
-    break;}
-case 613:
+    { (yyval.ttype) = make_pointer_declarator (NULL_TREE, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 614:
+/* Line 1792 of yacc.c  */
 #line 2859 "parse.y"
-{ yyval.ttype = make_reference_declarator (NULL_TREE, yyvsp[0].ttype); ;
-    break;}
-case 614:
+    { (yyval.ttype) = make_reference_declarator (NULL_TREE, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 615:
+/* Line 1792 of yacc.c  */
 #line 2861 "parse.y"
-{ tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);
-		  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);
-		;
-    break;}
-case 616:
+    { tree arg = make_pointer_declarator ((yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype));
+		  (yyval.ttype) = build_parse_node (SCOPE_REF, (yyvsp[(1) - (3)].ttype), arg);
+		}
+    break;
+
+  case 617:
+/* Line 1792 of yacc.c  */
 #line 2869 "parse.y"
-{ yyval.ttype = make_pointer_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;
-    break;}
-case 617:
+    { (yyval.ttype) = make_pointer_declarator ((yyvsp[(2) - (3)].ftype).t, (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 618:
+/* Line 1792 of yacc.c  */
 #line 2871 "parse.y"
-{ yyval.ttype = make_reference_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;
-    break;}
-case 618:
+    { (yyval.ttype) = make_reference_declarator ((yyvsp[(2) - (3)].ftype).t, (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 619:
+/* Line 1792 of yacc.c  */
 #line 2873 "parse.y"
-{ yyval.ttype = make_pointer_declarator (NULL_TREE, yyvsp[0].ttype); ;
-    break;}
-case 619:
+    { (yyval.ttype) = make_pointer_declarator (NULL_TREE, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 620:
+/* Line 1792 of yacc.c  */
 #line 2875 "parse.y"
-{ yyval.ttype = make_reference_declarator (NULL_TREE, yyvsp[0].ttype); ;
-    break;}
-case 620:
+    { (yyval.ttype) = make_reference_declarator (NULL_TREE, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 621:
+/* Line 1792 of yacc.c  */
 #line 2877 "parse.y"
-{ tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);
-		  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);
-		;
-    break;}
-case 622:
+    { tree arg = make_pointer_declarator ((yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype));
+		  (yyval.ttype) = build_parse_node (SCOPE_REF, (yyvsp[(1) - (3)].ttype), arg);
+		}
+    break;
+
+  case 623:
+/* Line 1792 of yacc.c  */
 #line 2885 "parse.y"
-{ yyval.ttype = make_call_declarator (yyval.ttype, yyvsp[-2].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 623:
+    { (yyval.ttype) = make_call_declarator ((yyval.ttype), (yyvsp[(2) - (4)].ttype), (yyvsp[(3) - (4)].ttype), (yyvsp[(4) - (4)].ttype)); }
+    break;
+
+  case 624:
+/* Line 1792 of yacc.c  */
 #line 2887 "parse.y"
-{ yyval.ttype = yyvsp[-1].ttype; ;
-    break;}
-case 624:
+    { (yyval.ttype) = (yyvsp[(2) - (3)].ttype); }
+    break;
+
+  case 625:
+/* Line 1792 of yacc.c  */
 #line 2889 "parse.y"
-{ yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, yyvsp[-1].ttype); ;
-    break;}
-case 625:
+    { (yyval.ttype) = build_parse_node (ARRAY_REF, (yyval.ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 626:
+/* Line 1792 of yacc.c  */
 #line 2891 "parse.y"
-{ yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, NULL_TREE); ;
-    break;}
-case 626:
+    { (yyval.ttype) = build_parse_node (ARRAY_REF, (yyval.ttype), NULL_TREE); }
+    break;
+
+  case 627:
+/* Line 1792 of yacc.c  */
 #line 2893 "parse.y"
-{ enter_scope_of (yyvsp[0].ttype); ;
-    break;}
-case 627:
+    { enter_scope_of ((yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 628:
+/* Line 1792 of yacc.c  */
 #line 2895 "parse.y"
-{ got_scope = NULL_TREE;
-		  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, yyvsp[0].ttype);
-		  enter_scope_of (yyval.ttype);
-		;
-    break;}
-case 628:
+    { got_scope = NULL_TREE;
+		  (yyval.ttype) = build_parse_node (SCOPE_REF, (yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype));
+		  enter_scope_of ((yyval.ttype));
+		}
+    break;
+
+  case 629:
+/* Line 1792 of yacc.c  */
 #line 2903 "parse.y"
-{ got_scope = NULL_TREE;
-		  yyval.ttype = build_parse_node (SCOPE_REF, yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 629:
+    { got_scope = NULL_TREE;
+		  (yyval.ttype) = build_parse_node (SCOPE_REF, (yyval.ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 630:
+/* Line 1792 of yacc.c  */
 #line 2906 "parse.y"
-{ got_scope = NULL_TREE;
- 		  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 630:
+    { got_scope = NULL_TREE;
+ 		  (yyval.ttype) = build_parse_node (SCOPE_REF, (yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 631:
+/* Line 1792 of yacc.c  */
 #line 2912 "parse.y"
-{ got_scope = NULL_TREE;
-		  yyval.ttype = build_parse_node (SCOPE_REF, yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 631:
+    { got_scope = NULL_TREE;
+		  (yyval.ttype) = build_parse_node (SCOPE_REF, (yyval.ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 632:
+/* Line 1792 of yacc.c  */
 #line 2915 "parse.y"
-{ got_scope = NULL_TREE;
-		  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 633:
+    { got_scope = NULL_TREE;
+		  (yyval.ttype) = build_parse_node (SCOPE_REF, (yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 634:
+/* Line 1792 of yacc.c  */
 #line 2922 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 634:
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype); }
+    break;
+
+  case 635:
+/* Line 1792 of yacc.c  */
 #line 2927 "parse.y"
-{ yyval.ttype = build_functional_cast (yyvsp[-3].ftype.t, yyvsp[-1].ttype); ;
-    break;}
-case 635:
+    { (yyval.ttype) = build_functional_cast ((yyvsp[(1) - (4)].ftype).t, (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 636:
+/* Line 1792 of yacc.c  */
 #line 2929 "parse.y"
-{ yyval.ttype = reparse_decl_as_expr (yyvsp[-3].ftype.t, yyvsp[-1].ttype); ;
-    break;}
-case 636:
+    { (yyval.ttype) = reparse_decl_as_expr ((yyvsp[(1) - (4)].ftype).t, (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 637:
+/* Line 1792 of yacc.c  */
 #line 2931 "parse.y"
-{ yyval.ttype = reparse_absdcl_as_expr (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;
-    break;}
-case 641:
+    { (yyval.ttype) = reparse_absdcl_as_expr ((yyvsp[(1) - (2)].ftype).t, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 642:
+/* Line 1792 of yacc.c  */
 #line 2942 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 642:
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype); }
+    break;
+
+  case 643:
+/* Line 1792 of yacc.c  */
 #line 2944 "parse.y"
-{ got_scope = yyval.ttype = make_typename_type (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 643:
+    { got_scope = (yyval.ttype) = make_typename_type ((yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 644:
+/* Line 1792 of yacc.c  */
 #line 2951 "parse.y"
-{
-		  if (TREE_CODE (yyvsp[-1].ttype) == IDENTIFIER_NODE)
+    {
+		  if (TREE_CODE ((yyvsp[(1) - (2)].ttype)) == IDENTIFIER_NODE)
 		    {
-		      yyval.ttype = lastiddecl;
-		      maybe_note_name_used_in_class (yyvsp[-1].ttype, yyval.ttype);
+		      (yyval.ttype) = lastiddecl;
+		      maybe_note_name_used_in_class ((yyvsp[(1) - (2)].ttype), (yyval.ttype));
 		    }
-		  got_scope = yyval.ttype =
-		    complete_type (TYPE_MAIN_VARIANT (TREE_TYPE (yyval.ttype)));
-		;
-    break;}
-case 644:
+		  got_scope = (yyval.ttype) =
+		    complete_type (TYPE_MAIN_VARIANT (TREE_TYPE ((yyval.ttype))));
+		}
+    break;
+
+  case 645:
+/* Line 1792 of yacc.c  */
 #line 2961 "parse.y"
-{
-		  if (TREE_CODE (yyvsp[-1].ttype) == IDENTIFIER_NODE)
-		    yyval.ttype = lastiddecl;
-		  got_scope = yyval.ttype = TREE_TYPE (yyval.ttype);
-		;
-    break;}
-case 645:
+    {
+		  if (TREE_CODE ((yyvsp[(1) - (2)].ttype)) == IDENTIFIER_NODE)
+		    (yyval.ttype) = lastiddecl;
+		  got_scope = (yyval.ttype) = TREE_TYPE ((yyval.ttype));
+		}
+    break;
+
+  case 646:
+/* Line 1792 of yacc.c  */
 #line 2967 "parse.y"
-{
-		  if (TREE_CODE (yyval.ttype) == IDENTIFIER_NODE)
-		    yyval.ttype = lastiddecl;
-		  got_scope = yyval.ttype;
-		;
-    break;}
-case 646:
+    {
+		  if (TREE_CODE ((yyval.ttype)) == IDENTIFIER_NODE)
+		    (yyval.ttype) = lastiddecl;
+		  got_scope = (yyval.ttype);
+		}
+    break;
+
+  case 647:
+/* Line 1792 of yacc.c  */
 #line 2973 "parse.y"
-{ got_scope = yyval.ttype = complete_type (TREE_TYPE (yyvsp[-1].ttype)); ;
-    break;}
-case 648:
+    { got_scope = (yyval.ttype) = complete_type (TREE_TYPE ((yyvsp[(1) - (2)].ttype))); }
+    break;
+
+  case 649:
+/* Line 1792 of yacc.c  */
 #line 2989 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 649:
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype); }
+    break;
+
+  case 650:
+/* Line 1792 of yacc.c  */
 #line 2994 "parse.y"
-{
-		  if (TREE_CODE_CLASS (TREE_CODE (yyvsp[-1].ttype)) == 't')
-		    yyval.ttype = make_typename_type (yyvsp[-1].ttype, yyvsp[0].ttype);
-		  else if (TREE_CODE (yyvsp[0].ttype) == IDENTIFIER_NODE)
-		    cp_error ("`%T' is not a class or namespace", yyvsp[0].ttype);
+    {
+		  if (TREE_CODE_CLASS (TREE_CODE ((yyvsp[(1) - (2)].ttype))) == 't')
+		    (yyval.ttype) = make_typename_type ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype));
+		  else if (TREE_CODE ((yyvsp[(2) - (2)].ttype)) == IDENTIFIER_NODE)
+		    cp_error ("`%T' is not a class or namespace", (yyvsp[(2) - (2)].ttype));
 		  else
 		    {
-		      yyval.ttype = yyvsp[0].ttype;
-		      if (TREE_CODE (yyval.ttype) == TYPE_DECL)
-			yyval.ttype = TREE_TYPE (yyval.ttype);
+		      (yyval.ttype) = (yyvsp[(2) - (2)].ttype);
+		      if (TREE_CODE ((yyval.ttype)) == TYPE_DECL)
+			(yyval.ttype) = TREE_TYPE ((yyval.ttype));
 		    }
-		;
-    break;}
-case 650:
+		}
+    break;
+
+  case 651:
+/* Line 1792 of yacc.c  */
 #line 3007 "parse.y"
-{ yyval.ttype = TREE_TYPE (yyvsp[0].ttype); ;
-    break;}
-case 651:
+    { (yyval.ttype) = TREE_TYPE ((yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 652:
+/* Line 1792 of yacc.c  */
 #line 3009 "parse.y"
-{ yyval.ttype = make_typename_type (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 652:
+    { (yyval.ttype) = make_typename_type ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 653:
+/* Line 1792 of yacc.c  */
 #line 3011 "parse.y"
-{ yyval.ttype = make_typename_type (yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 653:
+    { (yyval.ttype) = make_typename_type ((yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 654:
+/* Line 1792 of yacc.c  */
 #line 3016 "parse.y"
-{
-		  if (TREE_CODE (yyvsp[0].ttype) == IDENTIFIER_NODE)
-		    cp_error ("`%T' is not a class or namespace", yyvsp[0].ttype);
-		;
-    break;}
-case 654:
+    {
+		  if (TREE_CODE ((yyvsp[(1) - (1)].ttype)) == IDENTIFIER_NODE)
+		    cp_error ("`%T' is not a class or namespace", (yyvsp[(1) - (1)].ttype));
+		}
+    break;
+
+  case 655:
+/* Line 1792 of yacc.c  */
 #line 3021 "parse.y"
-{
-		  if (TREE_CODE_CLASS (TREE_CODE (yyvsp[-1].ttype)) == 't')
-		    yyval.ttype = make_typename_type (yyvsp[-1].ttype, yyvsp[0].ttype);
-		  else if (TREE_CODE (yyvsp[0].ttype) == IDENTIFIER_NODE)
-		    cp_error ("`%T' is not a class or namespace", yyvsp[0].ttype);
+    {
+		  if (TREE_CODE_CLASS (TREE_CODE ((yyvsp[(1) - (2)].ttype))) == 't')
+		    (yyval.ttype) = make_typename_type ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype));
+		  else if (TREE_CODE ((yyvsp[(2) - (2)].ttype)) == IDENTIFIER_NODE)
+		    cp_error ("`%T' is not a class or namespace", (yyvsp[(2) - (2)].ttype));
 		  else
 		    {
-		      yyval.ttype = yyvsp[0].ttype;
-		      if (TREE_CODE (yyval.ttype) == TYPE_DECL)
-			yyval.ttype = TREE_TYPE (yyval.ttype);
+		      (yyval.ttype) = (yyvsp[(2) - (2)].ttype);
+		      if (TREE_CODE ((yyval.ttype)) == TYPE_DECL)
+			(yyval.ttype) = TREE_TYPE ((yyval.ttype));
 		    }
-		;
-    break;}
-case 655:
+		}
+    break;
+
+  case 656:
+/* Line 1792 of yacc.c  */
 #line 3034 "parse.y"
-{ got_scope = yyval.ttype = make_typename_type (yyvsp[-2].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 656:
+    { got_scope = (yyval.ttype) = make_typename_type ((yyvsp[(1) - (3)].ttype), (yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 657:
+/* Line 1792 of yacc.c  */
 #line 3036 "parse.y"
-{ got_scope = yyval.ttype = make_typename_type (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 657:
+    { got_scope = (yyval.ttype) = make_typename_type ((yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 658:
+/* Line 1792 of yacc.c  */
 #line 3041 "parse.y"
-{
-		  if (TREE_CODE (yyvsp[-1].ttype) != IDENTIFIER_NODE)
-		    yyvsp[-1].ttype = lastiddecl;
+    {
+		  if (TREE_CODE ((yyvsp[(1) - (2)].ttype)) != IDENTIFIER_NODE)
+		    (yyvsp[(1) - (2)].ttype) = lastiddecl;
 
 		  /* Retrieve the type for the identifier, which might involve
 		     some computation. */
-		  got_scope = yyval.ttype = complete_type (IDENTIFIER_TYPE_VALUE (yyvsp[-1].ttype));
+		  got_scope = (yyval.ttype) = complete_type (IDENTIFIER_TYPE_VALUE ((yyvsp[(1) - (2)].ttype)));
+
+		  if ((yyval.ttype) == error_mark_node)
+		    cp_error ("`%T' is not a class or namespace", (yyvsp[(1) - (2)].ttype));
+		}
+    break;
 
-		  if (yyval.ttype == error_mark_node)
-		    cp_error ("`%T' is not a class or namespace", yyvsp[-1].ttype);
-		;
-    break;}
-case 658:
+  case 659:
+/* Line 1792 of yacc.c  */
 #line 3053 "parse.y"
-{
-		  if (TREE_CODE (yyvsp[-1].ttype) != IDENTIFIER_NODE)
-		    yyval.ttype = lastiddecl;
-		  got_scope = yyval.ttype = complete_type (TREE_TYPE (yyval.ttype));
-		;
-    break;}
-case 659:
+    {
+		  if (TREE_CODE ((yyvsp[(1) - (2)].ttype)) != IDENTIFIER_NODE)
+		    (yyval.ttype) = lastiddecl;
+		  got_scope = (yyval.ttype) = complete_type (TREE_TYPE ((yyval.ttype)));
+		}
+    break;
+
+  case 660:
+/* Line 1792 of yacc.c  */
 #line 3059 "parse.y"
-{ got_scope = yyval.ttype = complete_type (TREE_TYPE (yyval.ttype)); ;
-    break;}
-case 662:
+    { got_scope = (yyval.ttype) = complete_type (TREE_TYPE ((yyval.ttype))); }
+    break;
+
+  case 663:
+/* Line 1792 of yacc.c  */
 #line 3063 "parse.y"
-{
-		  if (TREE_CODE (yyval.ttype) == IDENTIFIER_NODE)
-		    yyval.ttype = lastiddecl;
-		  got_scope = yyval.ttype;
-		;
-    break;}
-case 663:
+    {
+		  if (TREE_CODE ((yyval.ttype)) == IDENTIFIER_NODE)
+		    (yyval.ttype) = lastiddecl;
+		  got_scope = (yyval.ttype);
+		}
+    break;
+
+  case 664:
+/* Line 1792 of yacc.c  */
 #line 3072 "parse.y"
-{ yyval.ttype = build_min_nt (TEMPLATE_ID_EXPR, yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 664:
+    { (yyval.ttype) = build_min_nt (TEMPLATE_ID_EXPR, (yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 665:
+/* Line 1792 of yacc.c  */
 #line 3077 "parse.y"
-{
-		  if (TREE_CODE (yyvsp[0].ttype) == IDENTIFIER_NODE)
-		    yyval.ttype = IDENTIFIER_GLOBAL_VALUE (yyvsp[0].ttype);
+    {
+		  if (TREE_CODE ((yyvsp[(2) - (2)].ttype)) == IDENTIFIER_NODE)
+		    (yyval.ttype) = IDENTIFIER_GLOBAL_VALUE ((yyvsp[(2) - (2)].ttype));
 		  else
-		    yyval.ttype = yyvsp[0].ttype;
+		    (yyval.ttype) = (yyvsp[(2) - (2)].ttype);
 		  got_scope = NULL_TREE;
-		;
-    break;}
-case 666:
+		}
+    break;
+
+  case 667:
+/* Line 1792 of yacc.c  */
 #line 3086 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 667:
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype); }
+    break;
+
+  case 668:
+/* Line 1792 of yacc.c  */
 #line 3091 "parse.y"
-{ got_scope = NULL_TREE; ;
-    break;}
-case 668:
+    { got_scope = NULL_TREE; }
+    break;
+
+  case 669:
+/* Line 1792 of yacc.c  */
 #line 3093 "parse.y"
-{ yyval.ttype = yyvsp[-1].ttype; got_scope = NULL_TREE; ;
-    break;}
-case 669:
+    { (yyval.ttype) = (yyvsp[(2) - (3)].ttype); got_scope = NULL_TREE; }
+    break;
+
+  case 670:
+/* Line 1792 of yacc.c  */
 #line 3100 "parse.y"
-{ got_scope = void_type_node; ;
-    break;}
-case 670:
+    { got_scope = void_type_node; }
+    break;
+
+  case 671:
+/* Line 1792 of yacc.c  */
 #line 3106 "parse.y"
-{ yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 671:
+    { (yyval.ttype) = make_pointer_declarator ((yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 672:
+/* Line 1792 of yacc.c  */
 #line 3108 "parse.y"
-{ yyval.ttype = make_pointer_declarator (yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 672:
+    { (yyval.ttype) = make_pointer_declarator ((yyvsp[(2) - (2)].ttype), NULL_TREE); }
+    break;
+
+  case 673:
+/* Line 1792 of yacc.c  */
 #line 3110 "parse.y"
-{ yyval.ttype = make_reference_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 673:
+    { (yyval.ttype) = make_reference_declarator ((yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 674:
+/* Line 1792 of yacc.c  */
 #line 3112 "parse.y"
-{ yyval.ttype = make_reference_declarator (yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 674:
+    { (yyval.ttype) = make_reference_declarator ((yyvsp[(2) - (2)].ttype), NULL_TREE); }
+    break;
+
+  case 675:
+/* Line 1792 of yacc.c  */
 #line 3114 "parse.y"
-{ tree arg = make_pointer_declarator (yyvsp[0].ttype, NULL_TREE);
-		  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, arg);
-		;
-    break;}
-case 675:
+    { tree arg = make_pointer_declarator ((yyvsp[(2) - (2)].ttype), NULL_TREE);
+		  (yyval.ttype) = build_parse_node (SCOPE_REF, (yyvsp[(1) - (2)].ttype), arg);
+		}
+    break;
+
+  case 676:
+/* Line 1792 of yacc.c  */
 #line 3118 "parse.y"
-{ tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);
-		  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);
-		;
-    break;}
-case 677:
+    { tree arg = make_pointer_declarator ((yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype));
+		  (yyval.ttype) = build_parse_node (SCOPE_REF, (yyvsp[(1) - (3)].ttype), arg);
+		}
+    break;
+
+  case 678:
+/* Line 1792 of yacc.c  */
 #line 3127 "parse.y"
-{ yyval.ttype = build_parse_node (ARRAY_REF, NULL_TREE, yyvsp[-1].ttype); ;
-    break;}
-case 678:
+    { (yyval.ttype) = build_parse_node (ARRAY_REF, NULL_TREE, (yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 679:
+/* Line 1792 of yacc.c  */
 #line 3129 "parse.y"
-{ yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, yyvsp[-1].ttype); ;
-    break;}
-case 680:
+    { (yyval.ttype) = build_parse_node (ARRAY_REF, (yyval.ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 681:
+/* Line 1792 of yacc.c  */
 #line 3135 "parse.y"
-{
+    {
 		  /* Provide support for '(' attributes '*' declarator ')'
 		     etc */
-		  yyval.ttype = decl_tree_cons (yyvsp[-1].ttype, yyvsp[0].ttype, NULL_TREE);
-		;
-    break;}
-case 681:
+		  (yyval.ttype) = decl_tree_cons ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype), NULL_TREE);
+		}
+    break;
+
+  case 682:
+/* Line 1792 of yacc.c  */
 #line 3145 "parse.y"
-{ yyval.ttype = make_pointer_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;
-    break;}
-case 682:
+    { (yyval.ttype) = make_pointer_declarator ((yyvsp[(2) - (3)].ftype).t, (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 683:
+/* Line 1792 of yacc.c  */
 #line 3147 "parse.y"
-{ yyval.ttype = make_pointer_declarator (NULL_TREE, yyvsp[0].ttype); ;
-    break;}
-case 683:
+    { (yyval.ttype) = make_pointer_declarator (NULL_TREE, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 684:
+/* Line 1792 of yacc.c  */
 #line 3149 "parse.y"
-{ yyval.ttype = make_pointer_declarator (yyvsp[0].ftype.t, NULL_TREE); ;
-    break;}
-case 684:
+    { (yyval.ttype) = make_pointer_declarator ((yyvsp[(2) - (2)].ftype).t, NULL_TREE); }
+    break;
+
+  case 685:
+/* Line 1792 of yacc.c  */
 #line 3151 "parse.y"
-{ yyval.ttype = make_pointer_declarator (NULL_TREE, NULL_TREE); ;
-    break;}
-case 685:
+    { (yyval.ttype) = make_pointer_declarator (NULL_TREE, NULL_TREE); }
+    break;
+
+  case 686:
+/* Line 1792 of yacc.c  */
 #line 3153 "parse.y"
-{ yyval.ttype = make_reference_declarator (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;
-    break;}
-case 686:
+    { (yyval.ttype) = make_reference_declarator ((yyvsp[(2) - (3)].ftype).t, (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 687:
+/* Line 1792 of yacc.c  */
 #line 3155 "parse.y"
-{ yyval.ttype = make_reference_declarator (NULL_TREE, yyvsp[0].ttype); ;
-    break;}
-case 687:
+    { (yyval.ttype) = make_reference_declarator (NULL_TREE, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 688:
+/* Line 1792 of yacc.c  */
 #line 3157 "parse.y"
-{ yyval.ttype = make_reference_declarator (yyvsp[0].ftype.t, NULL_TREE); ;
-    break;}
-case 688:
+    { (yyval.ttype) = make_reference_declarator ((yyvsp[(2) - (2)].ftype).t, NULL_TREE); }
+    break;
+
+  case 689:
+/* Line 1792 of yacc.c  */
 #line 3159 "parse.y"
-{ yyval.ttype = make_reference_declarator (NULL_TREE, NULL_TREE); ;
-    break;}
-case 689:
+    { (yyval.ttype) = make_reference_declarator (NULL_TREE, NULL_TREE); }
+    break;
+
+  case 690:
+/* Line 1792 of yacc.c  */
 #line 3161 "parse.y"
-{ tree arg = make_pointer_declarator (yyvsp[0].ttype, NULL_TREE);
-		  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-1].ttype, arg);
-		;
-    break;}
-case 690:
+    { tree arg = make_pointer_declarator ((yyvsp[(2) - (2)].ttype), NULL_TREE);
+		  (yyval.ttype) = build_parse_node (SCOPE_REF, (yyvsp[(1) - (2)].ttype), arg);
+		}
+    break;
+
+  case 691:
+/* Line 1792 of yacc.c  */
 #line 3165 "parse.y"
-{ tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);
-		  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);
-		;
-    break;}
-case 692:
+    { tree arg = make_pointer_declarator ((yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype));
+		  (yyval.ttype) = build_parse_node (SCOPE_REF, (yyvsp[(1) - (3)].ttype), arg);
+		}
+    break;
+
+  case 693:
+/* Line 1792 of yacc.c  */
 #line 3174 "parse.y"
-{ yyval.ttype = yyvsp[-1].ttype; ;
-    break;}
-case 694:
+    { (yyval.ttype) = (yyvsp[(2) - (3)].ttype); }
+    break;
+
+  case 695:
+/* Line 1792 of yacc.c  */
 #line 3178 "parse.y"
-{ yyval.ttype = make_call_declarator (yyval.ttype, yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 695:
+    { (yyval.ttype) = make_call_declarator ((yyval.ttype), (yyvsp[(3) - (6)].ttype), (yyvsp[(5) - (6)].ttype), (yyvsp[(6) - (6)].ttype)); }
+    break;
+
+  case 696:
+/* Line 1792 of yacc.c  */
 #line 3180 "parse.y"
-{ yyval.ttype = make_call_declarator (yyval.ttype, empty_parms (), yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 696:
+    { (yyval.ttype) = make_call_declarator ((yyval.ttype), empty_parms (), (yyvsp[(3) - (4)].ttype), (yyvsp[(4) - (4)].ttype)); }
+    break;
+
+  case 697:
+/* Line 1792 of yacc.c  */
 #line 3182 "parse.y"
-{ yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, yyvsp[-1].ttype); ;
-    break;}
-case 697:
+    { (yyval.ttype) = build_parse_node (ARRAY_REF, (yyval.ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 698:
+/* Line 1792 of yacc.c  */
 #line 3184 "parse.y"
-{ yyval.ttype = build_parse_node (ARRAY_REF, yyval.ttype, NULL_TREE); ;
-    break;}
-case 698:
+    { (yyval.ttype) = build_parse_node (ARRAY_REF, (yyval.ttype), NULL_TREE); }
+    break;
+
+  case 699:
+/* Line 1792 of yacc.c  */
 #line 3186 "parse.y"
-{ yyval.ttype = make_call_declarator (NULL_TREE, yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 699:
+    { (yyval.ttype) = make_call_declarator (NULL_TREE, (yyvsp[(2) - (5)].ttype), (yyvsp[(4) - (5)].ttype), (yyvsp[(5) - (5)].ttype)); }
+    break;
+
+  case 700:
+/* Line 1792 of yacc.c  */
 #line 3188 "parse.y"
-{ set_quals_and_spec (yyval.ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 700:
+    { set_quals_and_spec ((yyval.ttype), (yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 701:
+/* Line 1792 of yacc.c  */
 #line 3190 "parse.y"
-{ set_quals_and_spec (yyval.ttype, yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 701:
+    { set_quals_and_spec ((yyval.ttype), (yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 702:
+/* Line 1792 of yacc.c  */
 #line 3192 "parse.y"
-{ yyval.ttype = build_parse_node (ARRAY_REF, NULL_TREE, yyvsp[-1].ttype); ;
-    break;}
-case 702:
+    { (yyval.ttype) = build_parse_node (ARRAY_REF, NULL_TREE, (yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 703:
+/* Line 1792 of yacc.c  */
 #line 3194 "parse.y"
-{ yyval.ttype = build_parse_node (ARRAY_REF, NULL_TREE, NULL_TREE); ;
-    break;}
-case 709:
+    { (yyval.ttype) = build_parse_node (ARRAY_REF, NULL_TREE, NULL_TREE); }
+    break;
+
+  case 710:
+/* Line 1792 of yacc.c  */
 #line 3217 "parse.y"
-{ if (pedantic)
-		    pedwarn ("ANSI C++ forbids label declarations"); ;
-    break;}
-case 712:
+    { if (pedantic)
+		    pedwarn ("ANSI C++ forbids label declarations"); }
+    break;
+
+  case 713:
+/* Line 1792 of yacc.c  */
 #line 3228 "parse.y"
-{ tree link;
-		  for (link = yyvsp[-1].ttype; link; link = TREE_CHAIN (link))
+    { tree link;
+		  for (link = (yyvsp[(2) - (3)].ttype); link; link = TREE_CHAIN (link))
 		    {
 		      tree label = shadow_label (TREE_VALUE (link));
 		      C_DECLARED_LABEL_FLAG (label) = 1;
 		      declare_nonlocal_label (label);
 		    }
-		;
-    break;}
-case 713:
+		}
+    break;
+
+  case 714:
+/* Line 1792 of yacc.c  */
 #line 3242 "parse.y"
-{;
-    break;}
-case 715:
+    {}
+    break;
+
+  case 716:
+/* Line 1792 of yacc.c  */
 #line 3248 "parse.y"
-{ yyval.ttype = begin_compound_stmt (0); ;
-    break;}
-case 716:
+    { (yyval.ttype) = begin_compound_stmt (0); }
+    break;
+
+  case 717:
+/* Line 1792 of yacc.c  */
 #line 3250 "parse.y"
-{ yyval.ttype = finish_compound_stmt (0, yyvsp[-1].ttype); ;
-    break;}
-case 717:
+    { (yyval.ttype) = finish_compound_stmt (0, (yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 718:
+/* Line 1792 of yacc.c  */
 #line 3255 "parse.y"
-{
-		  yyval.ttype = begin_if_stmt ();
+    {
+		  (yyval.ttype) = begin_if_stmt ();
 		  cond_stmt_keyword = "if";
-		;
-    break;}
-case 718:
+		}
+    break;
+
+  case 719:
+/* Line 1792 of yacc.c  */
 #line 3260 "parse.y"
-{ finish_if_stmt_cond (yyvsp[0].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 719:
+    { finish_if_stmt_cond ((yyvsp[(3) - (3)].ttype), (yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 720:
+/* Line 1792 of yacc.c  */
 #line 3262 "parse.y"
-{ yyval.ttype = finish_then_clause (yyvsp[-3].ttype); ;
-    break;}
-case 721:
+    { (yyval.ttype) = finish_then_clause ((yyvsp[(2) - (5)].ttype)); }
+    break;
+
+  case 722:
+/* Line 1792 of yacc.c  */
 #line 3267 "parse.y"
-{ yyval.ttype = begin_compound_stmt (0); ;
-    break;}
-case 722:
+    { (yyval.ttype) = begin_compound_stmt (0); }
+    break;
+
+  case 723:
+/* Line 1792 of yacc.c  */
 #line 3269 "parse.y"
-{ yyval.ttype = finish_compound_stmt (0, yyvsp[-1].ttype); ;
-    break;}
-case 723:
+    { (yyval.ttype) = finish_compound_stmt (0, (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 724:
+/* Line 1792 of yacc.c  */
 #line 3274 "parse.y"
-{;
-    break;}
-case 725:
+    {}
+    break;
+
+  case 726:
+/* Line 1792 of yacc.c  */
 #line 3280 "parse.y"
-{ finish_stmt (); ;
-    break;}
-case 726:
+    { finish_stmt (); }
+    break;
+
+  case 727:
+/* Line 1792 of yacc.c  */
 #line 3282 "parse.y"
-{ finish_expr_stmt (yyvsp[-1].ttype); ;
-    break;}
-case 727:
+    { finish_expr_stmt ((yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 728:
+/* Line 1792 of yacc.c  */
 #line 3284 "parse.y"
-{ begin_else_clause (); ;
-    break;}
-case 728:
+    { begin_else_clause (); }
+    break;
+
+  case 729:
+/* Line 1792 of yacc.c  */
 #line 3286 "parse.y"
-{ 
-		  finish_else_clause (yyvsp[-3].ttype); 
+    { 
+		  finish_else_clause ((yyvsp[(1) - (4)].ttype)); 
 		  finish_if_stmt ();
-		;
-    break;}
-case 729:
+		}
+    break;
+
+  case 730:
+/* Line 1792 of yacc.c  */
 #line 3291 "parse.y"
-{ finish_if_stmt (); ;
-    break;}
-case 730:
+    { finish_if_stmt (); }
+    break;
+
+  case 731:
+/* Line 1792 of yacc.c  */
 #line 3293 "parse.y"
-{
-		  yyval.ttype = begin_while_stmt ();
+    {
+		  (yyval.ttype) = begin_while_stmt ();
 		  cond_stmt_keyword = "while";
-		;
-    break;}
-case 731:
+		}
+    break;
+
+  case 732:
+/* Line 1792 of yacc.c  */
 #line 3298 "parse.y"
-{ finish_while_stmt_cond (yyvsp[0].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 732:
+    { finish_while_stmt_cond ((yyvsp[(3) - (3)].ttype), (yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 733:
+/* Line 1792 of yacc.c  */
 #line 3300 "parse.y"
-{ finish_while_stmt (yyvsp[-3].ttype); ;
-    break;}
-case 733:
+    { finish_while_stmt ((yyvsp[(2) - (5)].ttype)); }
+    break;
+
+  case 734:
+/* Line 1792 of yacc.c  */
 #line 3302 "parse.y"
-{ yyval.ttype = begin_do_stmt (); ;
-    break;}
-case 734:
+    { (yyval.ttype) = begin_do_stmt (); }
+    break;
+
+  case 735:
+/* Line 1792 of yacc.c  */
 #line 3304 "parse.y"
-{
-		  finish_do_body (yyvsp[-2].ttype);
+    {
+		  finish_do_body ((yyvsp[(2) - (4)].ttype));
 		  cond_stmt_keyword = "do";
-		;
-    break;}
-case 735:
+		}
+    break;
+
+  case 736:
+/* Line 1792 of yacc.c  */
 #line 3309 "parse.y"
-{ finish_do_stmt (yyvsp[-1].ttype, yyvsp[-5].ttype); ;
-    break;}
-case 736:
+    { finish_do_stmt ((yyvsp[(6) - (7)].ttype), (yyvsp[(2) - (7)].ttype)); }
+    break;
+
+  case 737:
+/* Line 1792 of yacc.c  */
 #line 3311 "parse.y"
-{ yyval.ttype = begin_for_stmt (); ;
-    break;}
-case 737:
+    { (yyval.ttype) = begin_for_stmt (); }
+    break;
+
+  case 738:
+/* Line 1792 of yacc.c  */
 #line 3313 "parse.y"
-{ finish_for_init_stmt (yyvsp[-2].ttype); ;
-    break;}
-case 738:
+    { finish_for_init_stmt ((yyvsp[(2) - (4)].ttype)); }
+    break;
+
+  case 739:
+/* Line 1792 of yacc.c  */
 #line 3315 "parse.y"
-{ finish_for_cond (yyvsp[-1].ttype, yyvsp[-5].ttype); ;
-    break;}
-case 739:
+    { finish_for_cond ((yyvsp[(6) - (7)].ttype), (yyvsp[(2) - (7)].ttype)); }
+    break;
+
+  case 740:
+/* Line 1792 of yacc.c  */
 #line 3317 "parse.y"
-{ finish_for_expr (yyvsp[-1].ttype, yyvsp[-8].ttype); ;
-    break;}
-case 740:
+    { finish_for_expr ((yyvsp[(9) - (10)].ttype), (yyvsp[(2) - (10)].ttype)); }
+    break;
+
+  case 741:
+/* Line 1792 of yacc.c  */
 #line 3319 "parse.y"
-{ finish_for_stmt (yyvsp[-3].ttype, yyvsp[-10].ttype); ;
-    break;}
-case 741:
+    { finish_for_stmt ((yyvsp[(9) - (12)].ttype), (yyvsp[(2) - (12)].ttype)); }
+    break;
+
+  case 742:
+/* Line 1792 of yacc.c  */
 #line 3321 "parse.y"
-{ begin_switch_stmt (); ;
-    break;}
-case 742:
+    { begin_switch_stmt (); }
+    break;
+
+  case 743:
+/* Line 1792 of yacc.c  */
 #line 3323 "parse.y"
-{ yyval.ttype = finish_switch_cond (yyvsp[-1].ttype); ;
-    break;}
-case 743:
+    { (yyval.ttype) = finish_switch_cond ((yyvsp[(4) - (5)].ttype)); }
+    break;
+
+  case 744:
+/* Line 1792 of yacc.c  */
 #line 3325 "parse.y"
-{ finish_switch_stmt (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 744:
+    { finish_switch_stmt ((yyvsp[(4) - (7)].ttype), (yyvsp[(6) - (7)].ttype)); }
+    break;
+
+  case 745:
+/* Line 1792 of yacc.c  */
 #line 3327 "parse.y"
-{ finish_case_label (yyvsp[-1].ttype, NULL_TREE); ;
-    break;}
-case 746:
+    { finish_case_label ((yyvsp[(2) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 747:
+/* Line 1792 of yacc.c  */
 #line 3330 "parse.y"
-{ finish_case_label (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 748:
+    { finish_case_label ((yyvsp[(2) - (5)].ttype), (yyvsp[(4) - (5)].ttype)); }
+    break;
+
+  case 749:
+/* Line 1792 of yacc.c  */
 #line 3333 "parse.y"
-{ finish_case_label (NULL_TREE, NULL_TREE); ;
-    break;}
-case 750:
+    { finish_case_label (NULL_TREE, NULL_TREE); }
+    break;
+
+  case 751:
+/* Line 1792 of yacc.c  */
 #line 3336 "parse.y"
-{ finish_break_stmt (); ;
-    break;}
-case 751:
+    { finish_break_stmt (); }
+    break;
+
+  case 752:
+/* Line 1792 of yacc.c  */
 #line 3338 "parse.y"
-{ finish_continue_stmt (); ;
-    break;}
-case 752:
+    { finish_continue_stmt (); }
+    break;
+
+  case 753:
+/* Line 1792 of yacc.c  */
 #line 3340 "parse.y"
-{ finish_return_stmt (NULL_TREE); ;
-    break;}
-case 753:
+    { finish_return_stmt (NULL_TREE); }
+    break;
+
+  case 754:
+/* Line 1792 of yacc.c  */
 #line 3342 "parse.y"
-{ finish_return_stmt (yyvsp[-1].ttype); ;
-    break;}
-case 754:
+    { finish_return_stmt ((yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 755:
+/* Line 1792 of yacc.c  */
 #line 3344 "parse.y"
-{ 
-		  finish_asm_stmt (yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE, NULL_TREE,
+    { 
+		  finish_asm_stmt ((yyvsp[(2) - (6)].ttype), (yyvsp[(4) - (6)].ttype), NULL_TREE, NULL_TREE,
 				   NULL_TREE); 
-		;
-    break;}
-case 755:
+		}
+    break;
+
+  case 756:
+/* Line 1792 of yacc.c  */
 #line 3350 "parse.y"
-{ 
-		  finish_asm_stmt (yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE,
+    { 
+		  finish_asm_stmt ((yyvsp[(2) - (8)].ttype), (yyvsp[(4) - (8)].ttype), (yyvsp[(6) - (8)].ttype), NULL_TREE,
 				   NULL_TREE); 
-		;
-    break;}
-case 756:
+		}
+    break;
+
+  case 757:
+/* Line 1792 of yacc.c  */
 #line 3356 "parse.y"
-{ finish_asm_stmt (yyvsp[-8].ttype, yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE); ;
-    break;}
-case 757:
+    { finish_asm_stmt ((yyvsp[(2) - (10)].ttype), (yyvsp[(4) - (10)].ttype), (yyvsp[(6) - (10)].ttype), (yyvsp[(8) - (10)].ttype), NULL_TREE); }
+    break;
+
+  case 758:
+/* Line 1792 of yacc.c  */
 #line 3360 "parse.y"
-{ finish_asm_stmt (yyvsp[-10].ttype, yyvsp[-8].ttype, yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype); ;
-    break;}
-case 758:
+    { finish_asm_stmt ((yyvsp[(2) - (12)].ttype), (yyvsp[(4) - (12)].ttype), (yyvsp[(6) - (12)].ttype), (yyvsp[(8) - (12)].ttype), (yyvsp[(10) - (12)].ttype)); }
+    break;
+
+  case 759:
+/* Line 1792 of yacc.c  */
 #line 3362 "parse.y"
-{ 
+    { 
 		  if (pedantic)
 		    pedwarn ("ANSI C++ forbids computed gotos");
-		  finish_goto_stmt (yyvsp[-1].ttype);
-		;
-    break;}
-case 759:
+		  finish_goto_stmt ((yyvsp[(3) - (4)].ttype));
+		}
+    break;
+
+  case 760:
+/* Line 1792 of yacc.c  */
 #line 3368 "parse.y"
-{ finish_goto_stmt (yyvsp[-1].ttype); ;
-    break;}
-case 760:
+    { finish_goto_stmt ((yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 761:
+/* Line 1792 of yacc.c  */
 #line 3370 "parse.y"
-{ finish_stmt (); ;
-    break;}
-case 761:
+    { finish_stmt (); }
+    break;
+
+  case 762:
+/* Line 1792 of yacc.c  */
 #line 3372 "parse.y"
-{ error ("label must be followed by statement");
+    { error ("label must be followed by statement");
 		  yyungetc ('}', 0);
-		  finish_stmt (); ;
-    break;}
-case 762:
+		  finish_stmt (); }
+    break;
+
+  case 763:
+/* Line 1792 of yacc.c  */
 #line 3376 "parse.y"
-{ finish_stmt (); ;
-    break;}
-case 765:
+    { finish_stmt (); }
+    break;
+
+  case 766:
+/* Line 1792 of yacc.c  */
 #line 3380 "parse.y"
-{ do_local_using_decl (yyvsp[0].ttype); ;
-    break;}
-case 767:
+    { do_local_using_decl ((yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 768:
+/* Line 1792 of yacc.c  */
 #line 3386 "parse.y"
-{
+    {
 		  if (! current_function_parms_stored)
 		    store_parm_decls ();
 		  expand_start_early_try_stmts ();
-		;
-    break;}
-case 768:
+		}
+    break;
+
+  case 769:
+/* Line 1792 of yacc.c  */
 #line 3392 "parse.y"
-{ 
+    { 
 		  end_protect_partials ();
                   expand_start_all_catch (); 
-                ;
-    break;}
-case 769:
+                }
+    break;
+
+  case 770:
+/* Line 1792 of yacc.c  */
 #line 3397 "parse.y"
-{
+    {
 		  expand_end_all_catch ();
-		  yyval.itype = yyvsp[-3].itype;
-		;
-    break;}
-case 770:
+		  (yyval.itype) = (yyvsp[(3) - (6)].itype);
+		}
+    break;
+
+  case 771:
+/* Line 1792 of yacc.c  */
 #line 3405 "parse.y"
-{ yyval.ttype = begin_try_block (); ;
-    break;}
-case 771:
+    { (yyval.ttype) = begin_try_block (); }
+    break;
+
+  case 772:
+/* Line 1792 of yacc.c  */
 #line 3407 "parse.y"
-{ finish_try_block (yyvsp[-1].ttype); ;
-    break;}
-case 772:
+    { finish_try_block ((yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 773:
+/* Line 1792 of yacc.c  */
 #line 3409 "parse.y"
-{ finish_handler_sequence (yyvsp[-3].ttype); ;
-    break;}
-case 775:
+    { finish_handler_sequence ((yyvsp[(2) - (5)].ttype)); }
+    break;
+
+  case 776:
+/* Line 1792 of yacc.c  */
 #line 3419 "parse.y"
-{ yyval.ttype = begin_handler(); ;
-    break;}
-case 776:
+    { (yyval.ttype) = begin_handler(); }
+    break;
+
+  case 777:
+/* Line 1792 of yacc.c  */
 #line 3421 "parse.y"
-{ finish_handler_parms (yyvsp[-1].ttype); ;
-    break;}
-case 777:
+    { finish_handler_parms ((yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 778:
+/* Line 1792 of yacc.c  */
 #line 3423 "parse.y"
-{ finish_handler (yyvsp[-3].ttype); ;
-    break;}
-case 780:
+    { finish_handler ((yyvsp[(2) - (5)].ttype)); }
+    break;
+
+  case 781:
+/* Line 1792 of yacc.c  */
 #line 3433 "parse.y"
-{ expand_start_catch_block (NULL_TREE, NULL_TREE); ;
-    break;}
-case 781:
+    { expand_start_catch_block (NULL_TREE, NULL_TREE); }
+    break;
+
+  case 782:
+/* Line 1792 of yacc.c  */
 #line 3449 "parse.y"
-{ check_for_new_type ("inside exception declarations", yyvsp[-1].ftype);
-		  expand_start_catch_block (TREE_PURPOSE (yyvsp[-1].ftype.t),
-					    TREE_VALUE (yyvsp[-1].ftype.t)); ;
-    break;}
-case 782:
+    { check_for_new_type ("inside exception declarations", (yyvsp[(2) - (3)].ftype));
+		  expand_start_catch_block (TREE_PURPOSE ((yyvsp[(2) - (3)].ftype).t),
+					    TREE_VALUE ((yyvsp[(2) - (3)].ftype).t)); }
+    break;
+
+  case 783:
+/* Line 1792 of yacc.c  */
 #line 3456 "parse.y"
-{ tree label;
+    { tree label;
 		do_label:
-		  label = define_label (input_filename, lineno, yyvsp[-1].ttype);
+		  label = define_label (input_filename, lineno, (yyvsp[(1) - (2)].ttype));
 		  if (label && ! minimal_parse_mode)
 		    expand_label (label);
-		;
-    break;}
-case 783:
+		}
+    break;
+
+  case 784:
+/* Line 1792 of yacc.c  */
 #line 3463 "parse.y"
-{ goto do_label; ;
-    break;}
-case 784:
+    { goto do_label; }
+    break;
+
+  case 785:
+/* Line 1792 of yacc.c  */
 #line 3465 "parse.y"
-{ goto do_label; ;
-    break;}
-case 785:
+    { goto do_label; }
+    break;
+
+  case 786:
+/* Line 1792 of yacc.c  */
 #line 3467 "parse.y"
-{ goto do_label; ;
-    break;}
-case 786:
+    { goto do_label; }
+    break;
+
+  case 787:
+/* Line 1792 of yacc.c  */
 #line 3472 "parse.y"
-{ if (yyvsp[-1].ttype) cplus_expand_expr_stmt (yyvsp[-1].ttype); ;
-    break;}
-case 788:
+    { if ((yyvsp[(1) - (2)].ttype)) cplus_expand_expr_stmt ((yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 789:
+/* Line 1792 of yacc.c  */
 #line 3475 "parse.y"
-{ if (pedantic)
+    { if (pedantic)
 		    pedwarn ("ANSI C++ forbids compound statements inside for initializations");
-		;
-    break;}
-case 789:
+		}
+    break;
+
+  case 790:
+/* Line 1792 of yacc.c  */
 #line 3484 "parse.y"
-{ emit_line_note (input_filename, lineno);
-		  yyval.ttype = NULL_TREE; ;
-    break;}
-case 790:
+    { emit_line_note (input_filename, lineno);
+		  (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 791:
+/* Line 1792 of yacc.c  */
 #line 3487 "parse.y"
-{ emit_line_note (input_filename, lineno); ;
-    break;}
-case 791:
+    { emit_line_note (input_filename, lineno); }
+    break;
+
+  case 792:
+/* Line 1792 of yacc.c  */
 #line 3492 "parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 793:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 794:
+/* Line 1792 of yacc.c  */
 #line 3495 "parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 794:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 795:
+/* Line 1792 of yacc.c  */
 #line 3502 "parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 797:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 798:
+/* Line 1792 of yacc.c  */
 #line 3509 "parse.y"
-{ yyval.ttype = chainon (yyval.ttype, yyvsp[0].ttype); ;
-    break;}
-case 798:
+    { (yyval.ttype) = chainon ((yyval.ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 799:
+/* Line 1792 of yacc.c  */
 #line 3514 "parse.y"
-{ yyval.ttype = build_tree_list (yyval.ttype, yyvsp[-1].ttype); ;
-    break;}
-case 799:
+    { (yyval.ttype) = build_tree_list ((yyval.ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 800:
+/* Line 1792 of yacc.c  */
 #line 3519 "parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyval.ttype, NULL_TREE); ;
-    break;}
-case 800:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyval.ttype), NULL_TREE); }
+    break;
+
+  case 801:
+/* Line 1792 of yacc.c  */
 #line 3521 "parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyval.ttype); ;
-    break;}
-case 801:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(3) - (3)].ttype), (yyval.ttype)); }
+    break;
+
+  case 802:
+/* Line 1792 of yacc.c  */
 #line 3532 "parse.y"
-{
-		  yyval.ttype = empty_parms();
-		;
-    break;}
-case 803:
+    {
+		  (yyval.ttype) = empty_parms();
+		}
+    break;
+
+  case 804:
+/* Line 1792 of yacc.c  */
 #line 3537 "parse.y"
-{ yyval.ttype = finish_parmlist (build_tree_list (NULL_TREE, yyvsp[0].ftype.t), 0);
-		  check_for_new_type ("inside parameter list", yyvsp[0].ftype); ;
-    break;}
-case 804:
+    { (yyval.ttype) = finish_parmlist (build_tree_list (NULL_TREE, (yyvsp[(1) - (1)].ftype).t), 0);
+		  check_for_new_type ("inside parameter list", (yyvsp[(1) - (1)].ftype)); }
+    break;
+
+  case 805:
+/* Line 1792 of yacc.c  */
 #line 3545 "parse.y"
-{ yyval.ttype = finish_parmlist (yyval.ttype, 0); ;
-    break;}
-case 805:
+    { (yyval.ttype) = finish_parmlist ((yyval.ttype), 0); }
+    break;
+
+  case 806:
+/* Line 1792 of yacc.c  */
 #line 3547 "parse.y"
-{ yyval.ttype = finish_parmlist (yyvsp[-1].ttype, 1); ;
-    break;}
-case 806:
+    { (yyval.ttype) = finish_parmlist ((yyvsp[(1) - (2)].ttype), 1); }
+    break;
+
+  case 807:
+/* Line 1792 of yacc.c  */
 #line 3550 "parse.y"
-{ yyval.ttype = finish_parmlist (yyvsp[-1].ttype, 1); ;
-    break;}
-case 807:
+    { (yyval.ttype) = finish_parmlist ((yyvsp[(1) - (2)].ttype), 1); }
+    break;
+
+  case 808:
+/* Line 1792 of yacc.c  */
 #line 3552 "parse.y"
-{ yyval.ttype = finish_parmlist (build_tree_list (NULL_TREE,
-							 yyvsp[-1].ftype.t), 1); ;
-    break;}
-case 808:
+    { (yyval.ttype) = finish_parmlist (build_tree_list (NULL_TREE,
+							 (yyvsp[(1) - (2)].ftype).t), 1); }
+    break;
+
+  case 809:
+/* Line 1792 of yacc.c  */
 #line 3555 "parse.y"
-{ yyval.ttype = finish_parmlist (NULL_TREE, 1); ;
-    break;}
-case 809:
+    { (yyval.ttype) = finish_parmlist (NULL_TREE, 1); }
+    break;
+
+  case 810:
+/* Line 1792 of yacc.c  */
 #line 3557 "parse.y"
-{
+    {
 		  /* This helps us recover from really nasty
 		     parse errors, for example, a missing right
 		     parenthesis.  */
 		  yyerror ("possibly missing ')'");
-		  yyval.ttype = finish_parmlist (yyvsp[-1].ttype, 0);
+		  (yyval.ttype) = finish_parmlist ((yyvsp[(1) - (2)].ttype), 0);
 		  yyungetc (':', 0);
 		  yychar = ')';
-		;
-    break;}
-case 810:
+		}
+    break;
+
+  case 811:
+/* Line 1792 of yacc.c  */
 #line 3567 "parse.y"
-{
+    {
 		  /* This helps us recover from really nasty
 		     parse errors, for example, a missing right
 		     parenthesis.  */
 		  yyerror ("possibly missing ')'");
-		  yyval.ttype = finish_parmlist (build_tree_list (NULL_TREE,
-							 yyvsp[-1].ftype.t), 0); 
+		  (yyval.ttype) = finish_parmlist (build_tree_list (NULL_TREE,
+							 (yyvsp[(1) - (2)].ftype).t), 0); 
 		  yyungetc (':', 0);
 		  yychar = ')';
-		;
-    break;}
-case 811:
+		}
+    break;
+
+  case 812:
+/* Line 1792 of yacc.c  */
 #line 3582 "parse.y"
-{ maybe_snarf_defarg (); ;
-    break;}
-case 812:
+    { maybe_snarf_defarg (); }
+    break;
+
+  case 813:
+/* Line 1792 of yacc.c  */
 #line 3584 "parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 815:
+    { (yyval.ttype) = (yyvsp[(3) - (3)].ttype); }
+    break;
+
+  case 816:
+/* Line 1792 of yacc.c  */
 #line 3595 "parse.y"
-{ check_for_new_type ("in a parameter list", yyvsp[0].ftype);
-		  yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ftype.t); ;
-    break;}
-case 816:
+    { check_for_new_type ("in a parameter list", (yyvsp[(1) - (1)].ftype));
+		  (yyval.ttype) = build_tree_list (NULL_TREE, (yyvsp[(1) - (1)].ftype).t); }
+    break;
+
+  case 817:
+/* Line 1792 of yacc.c  */
 #line 3598 "parse.y"
-{ check_for_new_type ("in a parameter list", yyvsp[-1].ftype);
-		  yyval.ttype = build_tree_list (yyvsp[0].ttype, yyvsp[-1].ftype.t); ;
-    break;}
-case 817:
+    { check_for_new_type ("in a parameter list", (yyvsp[(1) - (2)].ftype));
+		  (yyval.ttype) = build_tree_list ((yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ftype).t); }
+    break;
+
+  case 818:
+/* Line 1792 of yacc.c  */
 #line 3601 "parse.y"
-{ check_for_new_type ("in a parameter list", yyvsp[0].ftype);
-		  yyval.ttype = chainon (yyval.ttype, yyvsp[0].ftype.t); ;
-    break;}
-case 818:
+    { check_for_new_type ("in a parameter list", (yyvsp[(2) - (2)].ftype));
+		  (yyval.ttype) = chainon ((yyval.ttype), (yyvsp[(2) - (2)].ftype).t); }
+    break;
+
+  case 819:
+/* Line 1792 of yacc.c  */
 #line 3604 "parse.y"
-{ yyval.ttype = chainon (yyval.ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;
-    break;}
-case 819:
+    { (yyval.ttype) = chainon ((yyval.ttype), build_tree_list (NULL_TREE, (yyvsp[(2) - (2)].ttype))); }
+    break;
+
+  case 820:
+/* Line 1792 of yacc.c  */
 #line 3606 "parse.y"
-{ yyval.ttype = chainon (yyval.ttype, build_tree_list (yyvsp[0].ttype, yyvsp[-2].ttype)); ;
-    break;}
-case 821:
+    { (yyval.ttype) = chainon ((yyval.ttype), build_tree_list ((yyvsp[(4) - (4)].ttype), (yyvsp[(2) - (4)].ttype))); }
+    break;
+
+  case 822:
+/* Line 1792 of yacc.c  */
 #line 3612 "parse.y"
-{ check_for_new_type ("in a parameter list", yyvsp[-1].ftype);
-		  yyval.ttype = build_tree_list (NULL_TREE, yyvsp[-1].ftype.t); ;
-    break;}
-case 822:
+    { check_for_new_type ("in a parameter list", (yyvsp[(1) - (2)].ftype));
+		  (yyval.ttype) = build_tree_list (NULL_TREE, (yyvsp[(1) - (2)].ftype).t); }
+    break;
+
+  case 823:
+/* Line 1792 of yacc.c  */
 #line 3622 "parse.y"
-{ tree specs = strip_attrs (yyvsp[-1].ftype.t);
-		  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag;
-		  yyval.ftype.t = build_tree_list (specs, yyvsp[0].ttype); ;
-    break;}
-case 823:
+    { tree specs = strip_attrs ((yyvsp[(1) - (2)].ftype).t);
+		  (yyval.ftype).new_type_flag = (yyvsp[(1) - (2)].ftype).new_type_flag;
+		  (yyval.ftype).t = build_tree_list (specs, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 824:
+/* Line 1792 of yacc.c  */
 #line 3626 "parse.y"
-{ yyval.ftype.t = build_tree_list (yyvsp[-1].ftype.t, yyvsp[0].ttype); 
-		  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;
-    break;}
-case 824:
+    { (yyval.ftype).t = build_tree_list ((yyvsp[(1) - (2)].ftype).t, (yyvsp[(2) - (2)].ttype)); 
+		  (yyval.ftype).new_type_flag = (yyvsp[(1) - (2)].ftype).new_type_flag; }
+    break;
+
+  case 825:
+/* Line 1792 of yacc.c  */
 #line 3629 "parse.y"
-{ yyval.ftype.t = build_tree_list (build_decl_list (NULL_TREE, yyvsp[-1].ftype.t),
-					  yyvsp[0].ttype); 
-		  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;
-    break;}
-case 825:
+    { (yyval.ftype).t = build_tree_list (build_decl_list (NULL_TREE, (yyvsp[(1) - (2)].ftype).t),
+					  (yyvsp[(2) - (2)].ttype)); 
+		  (yyval.ftype).new_type_flag = (yyvsp[(1) - (2)].ftype).new_type_flag; }
+    break;
+
+  case 826:
+/* Line 1792 of yacc.c  */
 #line 3633 "parse.y"
-{ tree specs = strip_attrs (yyvsp[-1].ftype.t);
-		  yyval.ftype.t = build_tree_list (specs, yyvsp[0].ttype);
-		  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag; ;
-    break;}
-case 826:
+    { tree specs = strip_attrs ((yyvsp[(1) - (2)].ftype).t);
+		  (yyval.ftype).t = build_tree_list (specs, (yyvsp[(2) - (2)].ttype));
+		  (yyval.ftype).new_type_flag = (yyvsp[(1) - (2)].ftype).new_type_flag; }
+    break;
+
+  case 827:
+/* Line 1792 of yacc.c  */
 #line 3637 "parse.y"
-{ tree specs = strip_attrs (yyvsp[0].ftype.t);
-		  yyval.ftype.t = build_tree_list (specs, NULL_TREE); 
-		  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag; ;
-    break;}
-case 827:
+    { tree specs = strip_attrs ((yyvsp[(1) - (1)].ftype).t);
+		  (yyval.ftype).t = build_tree_list (specs, NULL_TREE); 
+		  (yyval.ftype).new_type_flag = (yyvsp[(1) - (1)].ftype).new_type_flag; }
+    break;
+
+  case 828:
+/* Line 1792 of yacc.c  */
 #line 3641 "parse.y"
-{ tree specs = strip_attrs (yyvsp[-1].ttype);
-		  yyval.ftype.t = build_tree_list (specs, yyvsp[0].ttype); 
-		  yyval.ftype.new_type_flag = 0; ;
-    break;}
-case 828:
+    { tree specs = strip_attrs ((yyvsp[(1) - (2)].ttype));
+		  (yyval.ftype).t = build_tree_list (specs, (yyvsp[(2) - (2)].ttype)); 
+		  (yyval.ftype).new_type_flag = 0; }
+    break;
+
+  case 829:
+/* Line 1792 of yacc.c  */
 #line 3648 "parse.y"
-{ yyval.ftype.t = build_tree_list (NULL_TREE, yyvsp[0].ftype.t);
-		  yyval.ftype.new_type_flag = yyvsp[0].ftype.new_type_flag;  ;
-    break;}
-case 829:
+    { (yyval.ftype).t = build_tree_list (NULL_TREE, (yyvsp[(1) - (1)].ftype).t);
+		  (yyval.ftype).new_type_flag = (yyvsp[(1) - (1)].ftype).new_type_flag;  }
+    break;
+
+  case 830:
+/* Line 1792 of yacc.c  */
 #line 3651 "parse.y"
-{ yyval.ftype.t = build_tree_list (yyvsp[0].ttype, yyvsp[-1].ftype.t);
-		  yyval.ftype.new_type_flag = yyvsp[-1].ftype.new_type_flag;  ;
-    break;}
-case 832:
+    { (yyval.ftype).t = build_tree_list ((yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ftype).t);
+		  (yyval.ftype).new_type_flag = (yyvsp[(1) - (2)].ftype).new_type_flag;  }
+    break;
+
+  case 833:
+/* Line 1792 of yacc.c  */
 #line 3662 "parse.y"
-{ see_typename (); ;
-    break;}
-case 833:
+    { see_typename (); }
+    break;
+
+  case 834:
+/* Line 1792 of yacc.c  */
 #line 3667 "parse.y"
-{
+    {
 		  error ("type specifier omitted for parameter");
-		  yyval.ttype = build_tree_list (integer_type_node, NULL_TREE);
-		;
-    break;}
-case 834:
+		  (yyval.ttype) = build_tree_list (integer_type_node, NULL_TREE);
+		}
+    break;
+
+  case 835:
+/* Line 1792 of yacc.c  */
 #line 3672 "parse.y"
-{
+    {
 		  error ("type specifier omitted for parameter");
-		  if (TREE_CODE (yyval.ttype) == SCOPE_REF
-		      && (TREE_CODE (TREE_OPERAND (yyval.ttype, 0)) == TEMPLATE_TYPE_PARM
-			  || TREE_CODE (TREE_OPERAND (yyval.ttype, 0)) == TEMPLATE_TEMPLATE_PARM))
-		    cp_error ("  perhaps you want `typename %E' to make it a type", yyval.ttype);
-		  yyval.ttype = build_tree_list (integer_type_node, yyval.ttype);
-		;
-    break;}
-case 835:
+		  if (TREE_CODE ((yyval.ttype)) == SCOPE_REF
+		      && (TREE_CODE (TREE_OPERAND ((yyval.ttype), 0)) == TEMPLATE_TYPE_PARM
+			  || TREE_CODE (TREE_OPERAND ((yyval.ttype), 0)) == TEMPLATE_TEMPLATE_PARM))
+		    cp_error ("  perhaps you want `typename %E' to make it a type", (yyval.ttype));
+		  (yyval.ttype) = build_tree_list (integer_type_node, (yyval.ttype));
+		}
+    break;
+
+  case 836:
+/* Line 1792 of yacc.c  */
 #line 3684 "parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 836:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 837:
+/* Line 1792 of yacc.c  */
 #line 3686 "parse.y"
-{ yyval.ttype = yyvsp[-1].ttype; ;
-    break;}
-case 837:
+    { (yyval.ttype) = (yyvsp[(3) - (4)].ttype); }
+    break;
+
+  case 838:
+/* Line 1792 of yacc.c  */
 #line 3688 "parse.y"
-{ yyval.ttype = build_decl_list (NULL_TREE, NULL_TREE); ;
-    break;}
-case 838:
+    { (yyval.ttype) = build_decl_list (NULL_TREE, NULL_TREE); }
+    break;
+
+  case 839:
+/* Line 1792 of yacc.c  */
 #line 3693 "parse.y"
-{ yyval.ttype = build_decl_list (NULL_TREE, groktypename(yyvsp[0].ftype.t)); ;
-    break;}
-case 840:
+    { (yyval.ttype) = build_decl_list (NULL_TREE, groktypename((yyvsp[(1) - (1)].ftype).t)); }
+    break;
+
+  case 841:
+/* Line 1792 of yacc.c  */
 #line 3699 "parse.y"
-{
-		  TREE_CHAIN (yyvsp[0].ttype) = yyval.ttype;
-		  yyval.ttype = yyvsp[0].ttype;
-		;
-    break;}
-case 841:
+    {
+		  TREE_CHAIN ((yyvsp[(3) - (3)].ttype)) = (yyval.ttype);
+		  (yyval.ttype) = (yyvsp[(3) - (3)].ttype);
+		}
+    break;
+
+  case 842:
+/* Line 1792 of yacc.c  */
 #line 3707 "parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 842:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 843:
+/* Line 1792 of yacc.c  */
 #line 3709 "parse.y"
-{ yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 843:
+    { (yyval.ttype) = make_pointer_declarator ((yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 844:
+/* Line 1792 of yacc.c  */
 #line 3711 "parse.y"
-{ yyval.ttype = make_reference_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 844:
+    { (yyval.ttype) = make_reference_declarator ((yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 845:
+/* Line 1792 of yacc.c  */
 #line 3713 "parse.y"
-{ tree arg = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype);
-		  yyval.ttype = build_parse_node (SCOPE_REF, yyvsp[-2].ttype, arg);
-		;
-    break;}
-case 845:
+    { tree arg = make_pointer_declarator ((yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype));
+		  (yyval.ttype) = build_parse_node (SCOPE_REF, (yyvsp[(1) - (3)].ttype), arg);
+		}
+    break;
+
+  case 846:
+/* Line 1792 of yacc.c  */
 #line 3720 "parse.y"
-{ got_scope = NULL_TREE; ;
-    break;}
-case 846:
+    { got_scope = NULL_TREE; }
+    break;
+
+  case 847:
+/* Line 1792 of yacc.c  */
 #line 3725 "parse.y"
-{ yyval.ttype = ansi_opname[MULT_EXPR]; ;
-    break;}
-case 847:
+    { (yyval.ttype) = ansi_opname[MULT_EXPR]; }
+    break;
+
+  case 848:
+/* Line 1792 of yacc.c  */
 #line 3727 "parse.y"
-{ yyval.ttype = ansi_opname[TRUNC_DIV_EXPR]; ;
-    break;}
-case 848:
+    { (yyval.ttype) = ansi_opname[TRUNC_DIV_EXPR]; }
+    break;
+
+  case 849:
+/* Line 1792 of yacc.c  */
 #line 3729 "parse.y"
-{ yyval.ttype = ansi_opname[TRUNC_MOD_EXPR]; ;
-    break;}
-case 849:
+    { (yyval.ttype) = ansi_opname[TRUNC_MOD_EXPR]; }
+    break;
+
+  case 850:
+/* Line 1792 of yacc.c  */
 #line 3731 "parse.y"
-{ yyval.ttype = ansi_opname[PLUS_EXPR]; ;
-    break;}
-case 850:
+    { (yyval.ttype) = ansi_opname[PLUS_EXPR]; }
+    break;
+
+  case 851:
+/* Line 1792 of yacc.c  */
 #line 3733 "parse.y"
-{ yyval.ttype = ansi_opname[MINUS_EXPR]; ;
-    break;}
-case 851:
+    { (yyval.ttype) = ansi_opname[MINUS_EXPR]; }
+    break;
+
+  case 852:
+/* Line 1792 of yacc.c  */
 #line 3735 "parse.y"
-{ yyval.ttype = ansi_opname[BIT_AND_EXPR]; ;
-    break;}
-case 852:
+    { (yyval.ttype) = ansi_opname[BIT_AND_EXPR]; }
+    break;
+
+  case 853:
+/* Line 1792 of yacc.c  */
 #line 3737 "parse.y"
-{ yyval.ttype = ansi_opname[BIT_IOR_EXPR]; ;
-    break;}
-case 853:
+    { (yyval.ttype) = ansi_opname[BIT_IOR_EXPR]; }
+    break;
+
+  case 854:
+/* Line 1792 of yacc.c  */
 #line 3739 "parse.y"
-{ yyval.ttype = ansi_opname[BIT_XOR_EXPR]; ;
-    break;}
-case 854:
+    { (yyval.ttype) = ansi_opname[BIT_XOR_EXPR]; }
+    break;
+
+  case 855:
+/* Line 1792 of yacc.c  */
 #line 3741 "parse.y"
-{ yyval.ttype = ansi_opname[BIT_NOT_EXPR]; ;
-    break;}
-case 855:
+    { (yyval.ttype) = ansi_opname[BIT_NOT_EXPR]; }
+    break;
+
+  case 856:
+/* Line 1792 of yacc.c  */
 #line 3743 "parse.y"
-{ yyval.ttype = ansi_opname[COMPOUND_EXPR]; ;
-    break;}
-case 856:
+    { (yyval.ttype) = ansi_opname[COMPOUND_EXPR]; }
+    break;
+
+  case 857:
+/* Line 1792 of yacc.c  */
 #line 3745 "parse.y"
-{ yyval.ttype = ansi_opname[yyvsp[0].code]; ;
-    break;}
-case 857:
+    { (yyval.ttype) = ansi_opname[(yyvsp[(2) - (2)].code)]; }
+    break;
+
+  case 858:
+/* Line 1792 of yacc.c  */
 #line 3747 "parse.y"
-{ yyval.ttype = ansi_opname[LT_EXPR]; ;
-    break;}
-case 858:
+    { (yyval.ttype) = ansi_opname[LT_EXPR]; }
+    break;
+
+  case 859:
+/* Line 1792 of yacc.c  */
 #line 3749 "parse.y"
-{ yyval.ttype = ansi_opname[GT_EXPR]; ;
-    break;}
-case 859:
+    { (yyval.ttype) = ansi_opname[GT_EXPR]; }
+    break;
+
+  case 860:
+/* Line 1792 of yacc.c  */
 #line 3751 "parse.y"
-{ yyval.ttype = ansi_opname[yyvsp[0].code]; ;
-    break;}
-case 860:
+    { (yyval.ttype) = ansi_opname[(yyvsp[(2) - (2)].code)]; }
+    break;
+
+  case 861:
+/* Line 1792 of yacc.c  */
 #line 3753 "parse.y"
-{ yyval.ttype = ansi_assopname[yyvsp[0].code]; ;
-    break;}
-case 861:
+    { (yyval.ttype) = ansi_assopname[(yyvsp[(2) - (2)].code)]; }
+    break;
+
+  case 862:
+/* Line 1792 of yacc.c  */
 #line 3755 "parse.y"
-{ yyval.ttype = ansi_opname [MODIFY_EXPR]; ;
-    break;}
-case 862:
+    { (yyval.ttype) = ansi_opname [MODIFY_EXPR]; }
+    break;
+
+  case 863:
+/* Line 1792 of yacc.c  */
 #line 3757 "parse.y"
-{ yyval.ttype = ansi_opname[yyvsp[0].code]; ;
-    break;}
-case 863:
+    { (yyval.ttype) = ansi_opname[(yyvsp[(2) - (2)].code)]; }
+    break;
+
+  case 864:
+/* Line 1792 of yacc.c  */
 #line 3759 "parse.y"
-{ yyval.ttype = ansi_opname[yyvsp[0].code]; ;
-    break;}
-case 864:
+    { (yyval.ttype) = ansi_opname[(yyvsp[(2) - (2)].code)]; }
+    break;
+
+  case 865:
+/* Line 1792 of yacc.c  */
 #line 3761 "parse.y"
-{ yyval.ttype = ansi_opname[POSTINCREMENT_EXPR]; ;
-    break;}
-case 865:
+    { (yyval.ttype) = ansi_opname[POSTINCREMENT_EXPR]; }
+    break;
+
+  case 866:
+/* Line 1792 of yacc.c  */
 #line 3763 "parse.y"
-{ yyval.ttype = ansi_opname[PREDECREMENT_EXPR]; ;
-    break;}
-case 866:
+    { (yyval.ttype) = ansi_opname[PREDECREMENT_EXPR]; }
+    break;
+
+  case 867:
+/* Line 1792 of yacc.c  */
 #line 3765 "parse.y"
-{ yyval.ttype = ansi_opname[TRUTH_ANDIF_EXPR]; ;
-    break;}
-case 867:
+    { (yyval.ttype) = ansi_opname[TRUTH_ANDIF_EXPR]; }
+    break;
+
+  case 868:
+/* Line 1792 of yacc.c  */
 #line 3767 "parse.y"
-{ yyval.ttype = ansi_opname[TRUTH_ORIF_EXPR]; ;
-    break;}
-case 868:
+    { (yyval.ttype) = ansi_opname[TRUTH_ORIF_EXPR]; }
+    break;
+
+  case 869:
+/* Line 1792 of yacc.c  */
 #line 3769 "parse.y"
-{ yyval.ttype = ansi_opname[TRUTH_NOT_EXPR]; ;
-    break;}
-case 869:
+    { (yyval.ttype) = ansi_opname[TRUTH_NOT_EXPR]; }
+    break;
+
+  case 870:
+/* Line 1792 of yacc.c  */
 #line 3771 "parse.y"
-{ yyval.ttype = ansi_opname[COND_EXPR]; ;
-    break;}
-case 870:
+    { (yyval.ttype) = ansi_opname[COND_EXPR]; }
+    break;
+
+  case 871:
+/* Line 1792 of yacc.c  */
 #line 3773 "parse.y"
-{ yyval.ttype = ansi_opname[yyvsp[0].code]; ;
-    break;}
-case 871:
+    { (yyval.ttype) = ansi_opname[(yyvsp[(2) - (2)].code)]; }
+    break;
+
+  case 872:
+/* Line 1792 of yacc.c  */
 #line 3775 "parse.y"
-{ yyval.ttype = ansi_opname[COMPONENT_REF]; ;
-    break;}
-case 872:
+    { (yyval.ttype) = ansi_opname[COMPONENT_REF]; }
+    break;
+
+  case 873:
+/* Line 1792 of yacc.c  */
 #line 3777 "parse.y"
-{ yyval.ttype = ansi_opname[MEMBER_REF]; ;
-    break;}
-case 873:
+    { (yyval.ttype) = ansi_opname[MEMBER_REF]; }
+    break;
+
+  case 874:
+/* Line 1792 of yacc.c  */
 #line 3779 "parse.y"
-{ yyval.ttype = ansi_opname[CALL_EXPR]; ;
-    break;}
-case 874:
+    { (yyval.ttype) = ansi_opname[CALL_EXPR]; }
+    break;
+
+  case 875:
+/* Line 1792 of yacc.c  */
 #line 3781 "parse.y"
-{ yyval.ttype = ansi_opname[ARRAY_REF]; ;
-    break;}
-case 875:
+    { (yyval.ttype) = ansi_opname[ARRAY_REF]; }
+    break;
+
+  case 876:
+/* Line 1792 of yacc.c  */
 #line 3783 "parse.y"
-{ yyval.ttype = ansi_opname[NEW_EXPR]; ;
-    break;}
-case 876:
+    { (yyval.ttype) = ansi_opname[NEW_EXPR]; }
+    break;
+
+  case 877:
+/* Line 1792 of yacc.c  */
 #line 3785 "parse.y"
-{ yyval.ttype = ansi_opname[DELETE_EXPR]; ;
-    break;}
-case 877:
+    { (yyval.ttype) = ansi_opname[DELETE_EXPR]; }
+    break;
+
+  case 878:
+/* Line 1792 of yacc.c  */
 #line 3787 "parse.y"
-{ yyval.ttype = ansi_opname[VEC_NEW_EXPR]; ;
-    break;}
-case 878:
+    { (yyval.ttype) = ansi_opname[VEC_NEW_EXPR]; }
+    break;
+
+  case 879:
+/* Line 1792 of yacc.c  */
 #line 3789 "parse.y"
-{ yyval.ttype = ansi_opname[VEC_DELETE_EXPR]; ;
-    break;}
-case 879:
+    { (yyval.ttype) = ansi_opname[VEC_DELETE_EXPR]; }
+    break;
+
+  case 880:
+/* Line 1792 of yacc.c  */
 #line 3792 "parse.y"
-{ yyval.ttype = grokoptypename (yyvsp[-1].ftype.t, yyvsp[0].ttype); ;
-    break;}
-case 880:
+    { (yyval.ttype) = grokoptypename ((yyvsp[(2) - (3)].ftype).t, (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 881:
+/* Line 1792 of yacc.c  */
 #line 3794 "parse.y"
-{ yyval.ttype = ansi_opname[ERROR_MARK]; ;
-    break;}
-}
-   /* the action file gets copied in in place of this dollarsign */
-#line 498 "/usr/cygnus/gnupro-98r2/share/bison.simple"
-
-  yyvsp -= yylen;
-  yyssp -= yylen;
-#ifdef YYLSP_NEEDED
-  yylsp -= yylen;
-#endif
+    { (yyval.ttype) = ansi_opname[ERROR_MARK]; }
+    break;
 
-#if YYDEBUG != 0
-  if (yydebug)
-    {
-      short *ssp1 = yyss - 1;
-      fprintf (stderr, "state stack now");
-      while (ssp1 != yyssp)
-	fprintf (stderr, " %d", *++ssp1);
-      fprintf (stderr, "\n");
+
+/* Line 1792 of yacc.c  */
+#line 10553 "parse.c"
+      default: break;
     }
-#endif
+  /* User semantic actions sometimes alter yychar, and that requires
+     that yytoken be updated with the new translation.  We take the
+     approach of translating immediately before every use of yytoken.
+     One alternative is translating here after every semantic action,
+     but that translation would be missed if the semantic action invokes
+     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
+     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
+     incorrect destructor might then be invoked immediately.  In the
+     case of YYERROR or YYBACKUP, subsequent parser actions might lead
+     to an incorrect destructor call or verbose syntax error message
+     before the lookahead is translated.  */
+  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
+
+  YYPOPSTACK (yylen);
+  yylen = 0;
+  YY_STACK_PRINT (yyss, yyssp);
 
   *++yyvsp = yyval;
 
-#ifdef YYLSP_NEEDED
-  yylsp++;
-  if (yylen == 0)
-    {
-      yylsp->first_line = yylloc.first_line;
-      yylsp->first_column = yylloc.first_column;
-      yylsp->last_line = (yylsp-1)->last_line;
-      yylsp->last_column = (yylsp-1)->last_column;
-      yylsp->text = 0;
-    }
-  else
-    {
-      yylsp->last_line = (yylsp+yylen-1)->last_line;
-      yylsp->last_column = (yylsp+yylen-1)->last_column;
-    }
-#endif
-
-  /* Now "shift" the result of the reduction.
-     Determine what state that goes to,
-     based on the state we popped back to
-     and the rule number reduced by.  */
+  /* Now `shift' the result of the reduction.  Determine what state
+     that goes to, based on the state we popped back to and the rule
+     number reduced by.  */
 
   yyn = yyr1[yyn];
 
-  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
-  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
+  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
+  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
     yystate = yytable[yystate];
   else
-    yystate = yydefgoto[yyn - YYNTBASE];
+    yystate = yydefgoto[yyn - YYNTOKENS];
 
   goto yynewstate;
 
-yyerrlab:   /* here on detecting error */
 
-  if (! yyerrstatus)
-    /* If not already recovering from an error, report this error.  */
+/*------------------------------------.
+| yyerrlab -- here on detecting error |
+`------------------------------------*/
+yyerrlab:
+  /* Make sure we have latest lookahead translation.  See comments at
+     user semantic actions for why this is necessary.  */
+  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);
+
+  /* If not already recovering from an error, report this error.  */
+  if (!yyerrstatus)
     {
       ++yynerrs;
+#if ! YYERROR_VERBOSE
+      yyerror (YY_("syntax error"));
+#else
+# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
+                                        yyssp, yytoken)
+      {
+        char const *yymsgp = YY_("syntax error");
+        int yysyntax_error_status;
+        yysyntax_error_status = YYSYNTAX_ERROR;
+        if (yysyntax_error_status == 0)
+          yymsgp = yymsg;
+        else if (yysyntax_error_status == 1)
+          {
+            if (yymsg != yymsgbuf)
+              YYSTACK_FREE (yymsg);
+            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
+            if (!yymsg)
+              {
+                yymsg = yymsgbuf;
+                yymsg_alloc = sizeof yymsgbuf;
+                yysyntax_error_status = 2;
+              }
+            else
+              {
+                yysyntax_error_status = YYSYNTAX_ERROR;
+                yymsgp = yymsg;
+              }
+          }
+        yyerror (yymsgp);
+        if (yysyntax_error_status == 2)
+          goto yyexhaustedlab;
+      }
+# undef YYSYNTAX_ERROR
+#endif
+    }
 
-#ifdef YYERROR_VERBOSE
-      yyn = yypact[yystate];
 
-      if (yyn > YYFLAG && yyn < YYLAST)
+
+  if (yyerrstatus == 3)
+    {
+      /* If just tried and failed to reuse lookahead token after an
+	 error, discard it.  */
+
+      if (yychar <= YYEOF)
 	{
-	  int size = 0;
-	  char *msg;
-	  int x, count;
-
-	  count = 0;
-	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
-	  for (x = (yyn < 0 ? -yyn : 0);
-	       x < (sizeof(yytname) / sizeof(char *)); x++)
-	    if (yycheck[x + yyn] == x)
-	      size += strlen(yytname[x]) + 15, count++;
-	  msg = (char *) malloc(size + 15);
-	  if (msg != 0)
-	    {
-	      strcpy(msg, "parse error");
-
-	      if (count < 5)
-		{
-		  count = 0;
-		  for (x = (yyn < 0 ? -yyn : 0);
-		       x < (sizeof(yytname) / sizeof(char *)); x++)
-		    if (yycheck[x + yyn] == x)
-		      {
-			strcat(msg, count == 0 ? ", expecting `" : " or `");
-			strcat(msg, yytname[x]);
-			strcat(msg, "'");
-			count++;
-		      }
-		}
-	      yyerror(msg);
-	      free(msg);
-	    }
-	  else
-	    yyerror ("parse error; also virtual memory exceeded");
+	  /* Return failure if at end of input.  */
+	  if (yychar == YYEOF)
+	    YYABORT;
 	}
       else
-#endif /* YYERROR_VERBOSE */
-	yyerror("parse error");
+	{
+	  yydestruct ("Error: discarding",
+		      yytoken, &yylval);
+	  yychar = YYEMPTY;
+	}
     }
 
+  /* Else will try to reuse lookahead token after shifting the error
+     token.  */
   goto yyerrlab1;
-yyerrlab1:   /* here on error raised explicitly by an action */
 
-  if (yyerrstatus == 3)
+
+/*---------------------------------------------------.
+| yyerrorlab -- error raised explicitly by YYERROR.  |
+`---------------------------------------------------*/
+yyerrorlab:
+
+  /* Pacify compilers like GCC when the user code never invokes
+     YYERROR and the label yyerrorlab therefore never appears in user
+     code.  */
+  if (/*CONSTCOND*/ 0)
+     goto yyerrorlab;
+
+  /* Do not reclaim the symbols of the rule which action triggered
+     this YYERROR.  */
+  YYPOPSTACK (yylen);
+  yylen = 0;
+  YY_STACK_PRINT (yyss, yyssp);
+  yystate = *yyssp;
+  goto yyerrlab1;
+
+
+/*-------------------------------------------------------------.
+| yyerrlab1 -- common code for both syntax error and YYERROR.  |
+`-------------------------------------------------------------*/
+yyerrlab1:
+  yyerrstatus = 3;	/* Each real token shifted decrements this.  */
+
+  for (;;)
     {
-      /* if just tried and failed to reuse lookahead token after an error, discard it.  */
+      yyn = yypact[yystate];
+      if (!yypact_value_is_default (yyn))
+	{
+	  yyn += YYTERROR;
+	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
+	    {
+	      yyn = yytable[yyn];
+	      if (0 < yyn)
+		break;
+	    }
+	}
 
-      /* return failure if at end of input */
-      if (yychar == YYEOF)
+      /* Pop the current state because it cannot handle the error token.  */
+      if (yyssp == yyss)
 	YYABORT;
 
-#if YYDEBUG != 0
-      if (yydebug)
-	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
-#endif
 
-      yychar = YYEMPTY;
+      yydestruct ("Error: popping",
+		  yystos[yystate], yyvsp);
+      YYPOPSTACK (1);
+      yystate = *yyssp;
+      YY_STACK_PRINT (yyss, yyssp);
     }
 
-  /* Else will try to reuse lookahead token
-     after shifting the error token.  */
-
-  yyerrstatus = 3;		/* Each real token shifted decrements this */
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  *++yyvsp = yylval;
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
 
-  goto yyerrhandle;
 
-yyerrdefault:  /* current state does not do anything special for the error token. */
+  /* Shift the error token.  */
+  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);
 
-#if 0
-  /* This is wrong; only states that explicitly want error tokens
-     should shift them.  */
-  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
-  if (yyn) goto yydefault;
-#endif
+  yystate = yyn;
+  goto yynewstate;
 
-yyerrpop:   /* pop the current state because it cannot handle the error token */
 
-  if (yyssp == yyss) YYABORT;
-  yyvsp--;
-  yystate = *--yyssp;
-#ifdef YYLSP_NEEDED
-  yylsp--;
+/*-------------------------------------.
+| yyacceptlab -- YYACCEPT comes here.  |
+`-------------------------------------*/
+yyacceptlab:
+  yyresult = 0;
+  goto yyreturn;
+
+/*-----------------------------------.
+| yyabortlab -- YYABORT comes here.  |
+`-----------------------------------*/
+yyabortlab:
+  yyresult = 1;
+  goto yyreturn;
+
+#if !defined yyoverflow || YYERROR_VERBOSE
+/*-------------------------------------------------.
+| yyexhaustedlab -- memory exhaustion comes here.  |
+`-------------------------------------------------*/
+yyexhaustedlab:
+  yyerror (YY_("memory exhausted"));
+  yyresult = 2;
+  /* Fall through.  */
 #endif
 
-#if YYDEBUG != 0
-  if (yydebug)
+yyreturn:
+  if (yychar != YYEMPTY)
     {
-      short *ssp1 = yyss - 1;
-      fprintf (stderr, "Error: state stack now");
-      while (ssp1 != yyssp)
-	fprintf (stderr, " %d", *++ssp1);
-      fprintf (stderr, "\n");
+      /* Make sure we have latest lookahead translation.  See comments at
+         user semantic actions for why this is necessary.  */
+      yytoken = YYTRANSLATE (yychar);
+      yydestruct ("Cleanup: discarding lookahead",
+                  yytoken, &yylval);
     }
-#endif
-
-yyerrhandle:
-
-  yyn = yypact[yystate];
-  if (yyn == YYFLAG)
-    goto yyerrdefault;
-
-  yyn += YYTERROR;
-  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
-    goto yyerrdefault;
-
-  yyn = yytable[yyn];
-  if (yyn < 0)
+  /* Do not reclaim the symbols of the rule which action triggered
+     this YYABORT or YYACCEPT.  */
+  YYPOPSTACK (yylen);
+  YY_STACK_PRINT (yyss, yyssp);
+  while (yyssp != yyss)
     {
-      if (yyn == YYFLAG)
-	goto yyerrpop;
-      yyn = -yyn;
-      goto yyreduce;
+      yydestruct ("Cleanup: popping",
+		  yystos[*yyssp], yyvsp);
+      YYPOPSTACK (1);
     }
-  else if (yyn == 0)
-    goto yyerrpop;
-
-  if (yyn == YYFINAL)
-    YYACCEPT;
-
-#if YYDEBUG != 0
-  if (yydebug)
-    fprintf(stderr, "Shifting error token, ");
+#ifndef yyoverflow
+  if (yyss != yyssa)
+    YYSTACK_FREE (yyss);
 #endif
-
-  *++yyvsp = yylval;
-#ifdef YYLSP_NEEDED
-  *++yylsp = yylloc;
+#if YYERROR_VERBOSE
+  if (yymsg != yymsgbuf)
+    YYSTACK_FREE (yymsg);
 #endif
-
-  yystate = yyn;
-  goto yynewstate;
+  /* Make sure YYID is used.  */
+  return YYID (yyresult);
 }
+
+
+/* Line 2055 of yacc.c  */
 #line 3797 "parse.y"
 
 
diff --git a/gcc/cp/parse.h b/gcc/cp/parse.h
index c3615429efe..ad0f0c4b80b 100644
--- a/gcc/cp/parse.h
+++ b/gcc/cp/parse.h
@@ -1,90 +1,169 @@
-typedef union {long itype; tree ttype; char *strtype; enum tree_code code; flagged_type_tree ftype; } YYSTYPE;
-#define	IDENTIFIER	258
-#define	TYPENAME	259
-#define	SELFNAME	260
-#define	PFUNCNAME	261
-#define	SCSPEC	262
-#define	TYPESPEC	263
-#define	CV_QUALIFIER	264
-#define	CONSTANT	265
-#define	STRING	266
-#define	ELLIPSIS	267
-#define	SIZEOF	268
-#define	ENUM	269
-#define	IF	270
-#define	ELSE	271
-#define	WHILE	272
-#define	DO	273
-#define	FOR	274
-#define	SWITCH	275
-#define	CASE	276
-#define	DEFAULT	277
-#define	BREAK	278
-#define	CONTINUE	279
-#define	RETURN_KEYWORD	280
-#define	GOTO	281
-#define	ASM_KEYWORD	282
-#define	TYPEOF	283
-#define	ALIGNOF	284
-#define	SIGOF	285
-#define	ATTRIBUTE	286
-#define	EXTENSION	287
-#define	LABEL	288
-#define	REALPART	289
-#define	IMAGPART	290
-#define	AGGR	291
-#define	VISSPEC	292
-#define	DELETE	293
-#define	NEW	294
-#define	THIS	295
-#define	OPERATOR	296
-#define	CXX_TRUE	297
-#define	CXX_FALSE	298
-#define	NAMESPACE	299
-#define	TYPENAME_KEYWORD	300
-#define	USING	301
-#define	LEFT_RIGHT	302
-#define	TEMPLATE	303
-#define	TYPEID	304
-#define	DYNAMIC_CAST	305
-#define	STATIC_CAST	306
-#define	REINTERPRET_CAST	307
-#define	CONST_CAST	308
-#define	SCOPE	309
-#define	EMPTY	310
-#define	PTYPENAME	311
-#define	NSNAME	312
-#define	THROW	313
-#define	ASSIGN	314
-#define	OROR	315
-#define	ANDAND	316
-#define	MIN_MAX	317
-#define	EQCOMPARE	318
-#define	ARITHCOMPARE	319
-#define	LSHIFT	320
-#define	RSHIFT	321
-#define	POINTSAT_STAR	322
-#define	DOT_STAR	323
-#define	UNARY	324
-#define	PLUSPLUS	325
-#define	MINUSMINUS	326
-#define	HYPERUNARY	327
-#define	PAREN_STAR_PAREN	328
-#define	POINTSAT	329
-#define	TRY	330
-#define	CATCH	331
-#define	PRE_PARSED_FUNCTION_DECL	332
-#define	EXTERN_LANG_STRING	333
-#define	ALL	334
-#define	PRE_PARSED_CLASS_DECL	335
-#define	DEFARG	336
-#define	DEFARG_MARKER	337
-#define	TYPENAME_DEFN	338
-#define	IDENTIFIER_DEFN	339
-#define	PTYPENAME_DEFN	340
-#define	END_OF_LINE	341
-#define	END_OF_SAVED_INPUT	342
+/* A Bison parser, made by GNU Bison 2.7.  */
 
+/* Bison interface for Yacc-like parsers in C
+   
+      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.
+   
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+   
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+   
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+/* As a special exception, you may create a larger work that contains
+   part or all of the Bison parser skeleton and distribute that work
+   under terms of your choice, so long as that work isn't itself a
+   parser generator using the skeleton or a modified version thereof
+   as a parser skeleton.  Alternatively, if you modify or redistribute
+   the parser skeleton itself, you may (at your option) remove this
+   special exception, which will cause the skeleton and the resulting
+   Bison output files to be licensed under the GNU General Public
+   License without this special exception.
+   
+   This special exception was added by the Free Software Foundation in
+   version 2.2 of Bison.  */
+
+#ifndef YY_YY_PARSE_H_INCLUDED
+# define YY_YY_PARSE_H_INCLUDED
+/* Enabling traces.  */
+#ifndef YYDEBUG
+# define YYDEBUG 0
+#endif
+#if YYDEBUG
+extern int yydebug;
+#endif
+
+/* Tokens.  */
+#ifndef YYTOKENTYPE
+# define YYTOKENTYPE
+   /* Put the tokens into the symbol table, so that GDB and other debuggers
+      know about them.  */
+   enum yytokentype {
+     IDENTIFIER = 258,
+     TYPENAME_ID = 259,
+     SELFNAME = 260,
+     PFUNCNAME = 261,
+     SCSPEC = 262,
+     TYPESPEC = 263,
+     CV_QUALIFIER = 264,
+     CONSTANT = 265,
+     STRING = 266,
+     ELLIPSIS = 267,
+     SIZEOF = 268,
+     ENUM = 269,
+     IF = 270,
+     ELSE = 271,
+     WHILE = 272,
+     DO = 273,
+     FOR = 274,
+     SWITCH = 275,
+     CASE = 276,
+     DEFAULT = 277,
+     BREAK = 278,
+     CONTINUE = 279,
+     RETURN_KEYWORD = 280,
+     GOTO = 281,
+     ASM_KEYWORD = 282,
+     TYPEOF = 283,
+     ALIGNOF = 284,
+     SIGOF = 285,
+     ATTRIBUTE = 286,
+     EXTENSION = 287,
+     LABEL = 288,
+     REALPART = 289,
+     IMAGPART = 290,
+     AGGR = 291,
+     VISSPEC = 292,
+     DELETE = 293,
+     NEW = 294,
+     THIS = 295,
+     OPERATOR = 296,
+     CXX_TRUE = 297,
+     CXX_FALSE = 298,
+     NAMESPACE = 299,
+     TYPENAME_KEYWORD = 300,
+     USING = 301,
+     LEFT_RIGHT = 302,
+     TEMPLATE = 303,
+     TYPEID = 304,
+     DYNAMIC_CAST = 305,
+     STATIC_CAST = 306,
+     REINTERPRET_CAST = 307,
+     CONST_CAST = 308,
+     SCOPE = 309,
+     EMPTY = 310,
+     NSNAME = 311,
+     PTYPENAME = 312,
+     THROW = 313,
+     ASSIGN = 314,
+     OROR = 315,
+     ANDAND = 316,
+     MIN_MAX = 317,
+     EQCOMPARE = 318,
+     ARITHCOMPARE = 319,
+     RSHIFT = 320,
+     LSHIFT = 321,
+     DOT_STAR = 322,
+     POINTSAT_STAR = 323,
+     MINUSMINUS = 324,
+     PLUSPLUS = 325,
+     UNARY = 326,
+     HYPERUNARY = 327,
+     PAREN_STAR_PAREN = 328,
+     POINTSAT = 329,
+     CATCH = 330,
+     TRY = 331,
+     PRE_PARSED_FUNCTION_DECL = 332,
+     EXTERN_LANG_STRING = 333,
+     ALL = 334,
+     PRE_PARSED_CLASS_DECL = 335,
+     DEFARG = 336,
+     DEFARG_MARKER = 337,
+     TYPENAME_DEFN = 338,
+     IDENTIFIER_DEFN = 339,
+     PTYPENAME_DEFN = 340,
+     END_OF_LINE = 341,
+     END_OF_SAVED_INPUT = 342
+   };
+#endif
+
+
+#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
+typedef union YYSTYPE
+{
+/* Line 2058 of yacc.c  */
+#line 93 "parse.y"
+long itype; tree ttype; char *strtype; enum tree_code code; flagged_type_tree ftype; 
+
+/* Line 2058 of yacc.c  */
+#line 147 "parse.h"
+} YYSTYPE;
+# define YYSTYPE_IS_TRIVIAL 1
+# define yystype YYSTYPE /* obsolescent; will be withdrawn */
+# define YYSTYPE_IS_DECLARED 1
+#endif
 
 extern YYSTYPE yylval;
-#define YYEMPTY		-2
+
+#ifdef YYPARSE_PARAM
+#if defined __STDC__ || defined __cplusplus
+int yyparse (void *YYPARSE_PARAM);
+#else
+int yyparse ();
+#endif
+#else /* ! YYPARSE_PARAM */
+#if defined __STDC__ || defined __cplusplus
+int yyparse (void);
+#else
+int yyparse ();
+#endif
+#endif /* ! YYPARSE_PARAM */
+
+#endif /* !YY_YY_PARSE_H_INCLUDED  */
diff --git a/gcc/cp/parse.y b/gcc/cp/parse.y
index 7b5d3bdede9..c3d0a21d37c 100644
--- a/gcc/cp/parse.y
+++ b/gcc/cp/parse.y
@@ -99,7 +99,7 @@ empty_parms ()
 /* All identifiers that are declared typedefs in the current block.
    In some contexts, they are treated just like IDENTIFIER,
    but they can also serve as typespecs in declarations.  */
-%token TYPENAME
+%token TYPENAME_ID
 %token SELFNAME
 
 /* A template function.  */
@@ -157,7 +157,7 @@ empty_parms ()
 %nonassoc IF
 %nonassoc ELSE
 
-%left IDENTIFIER PFUNCNAME TYPENAME SELFNAME PTYPENAME SCSPEC TYPESPEC CV_QUALIFIER ENUM AGGR ELLIPSIS TYPEOF SIGOF OPERATOR NSNAME TYPENAME_KEYWORD
+%left IDENTIFIER PFUNCNAME TYPENAME_ID SELFNAME PTYPENAME SCSPEC TYPESPEC CV_QUALIFIER ENUM AGGR ELLIPSIS TYPEOF SIGOF OPERATOR NSNAME TYPENAME_KEYWORD
 
 %left '{' ',' ';'
 
@@ -187,7 +187,7 @@ empty_parms ()
 
 %type <code> unop
 
-%type <ttype> identifier IDENTIFIER TYPENAME CONSTANT expr nonnull_exprlist
+%type <ttype> identifier IDENTIFIER TYPENAME_ID CONSTANT expr nonnull_exprlist
 %type <ttype> PFUNCNAME maybe_identifier
 %type <ttype> paren_expr_or_null nontrivial_exprlist SELFNAME
 %type <ttype> expr_no_commas cast_expr unary_expr primary string STRING
@@ -653,7 +653,7 @@ fndef:
 
 constructor_declarator:
 	  nested_name_specifier SELFNAME '(' 
-                { $$ = begin_constructor_declarator ($1, $2); }
+                { $<ttype>$ = begin_constructor_declarator ($1, $2); }
 	  parmlist ')' cv_qualifiers exception_specification_opt
 		{ $$ = make_call_declarator ($<ttype>4, $5, $7, $8); }
 	| nested_name_specifier SELFNAME LEFT_RIGHT cv_qualifiers exception_specification_opt
@@ -661,7 +661,7 @@ constructor_declarator:
 		  $$ = make_call_declarator ($$, empty_parms (), $4, $5);
 		}
 	| global_scope nested_name_specifier SELFNAME '(' 
-                { $$ = begin_constructor_declarator ($2, $3); }
+                { $<ttype>$ = begin_constructor_declarator ($2, $3); }
 	 parmlist ')' cv_qualifiers exception_specification_opt
 		{ $$ = make_call_declarator ($<ttype>5, $6, $8, $9); }
 	| global_scope nested_name_specifier SELFNAME LEFT_RIGHT cv_qualifiers exception_specification_opt
@@ -669,7 +669,7 @@ constructor_declarator:
 		  $$ = make_call_declarator ($$, empty_parms (), $5, $6);
 		}
 	| nested_name_specifier self_template_type '(' 
-                { $$ = begin_constructor_declarator ($1, $2); }
+                { $<ttype>$ = begin_constructor_declarator ($1, $2); }
 	  parmlist ')' cv_qualifiers exception_specification_opt
 		{ $$ = make_call_declarator ($<ttype>4, $5, $7, $8); }
 	| nested_name_specifier self_template_type LEFT_RIGHT cv_qualifiers exception_specification_opt
@@ -677,7 +677,7 @@ constructor_declarator:
 		  $$ = make_call_declarator ($$, empty_parms (), $4, $5);
 		}
 	| global_scope nested_name_specifier self_template_type '(' 
-                { $$ = begin_constructor_declarator ($2, $3); }
+                { $<ttype>$ = begin_constructor_declarator ($2, $3); }
 	 parmlist ')' cv_qualifiers exception_specification_opt
 		{ $$ = make_call_declarator ($<ttype>5, $6, $8, $9); }
 	| global_scope nested_name_specifier self_template_type LEFT_RIGHT cv_qualifiers exception_specification_opt
@@ -846,7 +846,7 @@ member_init:
 
 identifier:
 	  IDENTIFIER
-	| TYPENAME
+	| TYPENAME_ID
 	| SELFNAME
 	| PTYPENAME
 	| NSNAME
@@ -902,7 +902,7 @@ begin_explicit_instantiation:
 end_explicit_instantiation: 
       { end_explicit_instantiation(); }
 
-/* The TYPENAME expansions are to deal with use of a template class name as
+/* The TYPENAME_ID expansions are to deal with use of a template class name as
   a template within the class itself, where the template decl is hidden by
   a type decl.  Got all that?  */
 
@@ -910,7 +910,7 @@ template_type:
 	  PTYPENAME '<' template_arg_list_opt template_close_bracket
 	    .finish_template_type
                 { $$ = $5; }
-	| TYPENAME  '<' template_arg_list_opt template_close_bracket
+	| TYPENAME_ID  '<' template_arg_list_opt template_close_bracket
 	    .finish_template_type
                 { $$ = $5; }
 	| self_template_type
@@ -1350,7 +1350,7 @@ object_template_id:
 
 unqualified_id:
 	  notype_unqualified_id
-	| TYPENAME
+	| TYPENAME_ID
 	| SELFNAME
 	;
 
@@ -2621,7 +2621,7 @@ after_type_component_declarator0:
 		  $<ttype>0 = current_declspecs;
 		  $$ = grokfield ($$, current_declspecs, $4, $2,
 				  build_tree_list ($3, prefix_attributes)); }
-	| TYPENAME ':' expr_no_commas maybe_attribute
+	| TYPENAME_ID ':' expr_no_commas maybe_attribute
 		{ split_specs_attrs ($<ttype>0, &current_declspecs,
 				     &prefix_attributes);
 		  $<ttype>0 = current_declspecs;
@@ -2660,7 +2660,7 @@ after_type_component_declarator:
 	  after_type_declarator maybeasm maybe_attribute maybe_init
 		{ $$ = grokfield ($$, current_declspecs, $4, $2,
 				  build_tree_list ($3, prefix_attributes)); }
-	| TYPENAME ':' expr_no_commas maybe_attribute
+	| TYPENAME_ID ':' expr_no_commas maybe_attribute
 		{ $$ = grokbitfield ($$, current_declspecs, $3);
 		  cplus_decl_attributes ($$, $4, prefix_attributes); }
 	;
@@ -2931,7 +2931,7 @@ functional_cast:
 		{ $$ = reparse_absdcl_as_expr ($1.t, $2); }
 	;
 type_name:
-	  TYPENAME
+	  TYPENAME_ID
 	| SELFNAME
 	| template_type  %prec EMPTY
 	;
@@ -2947,7 +2947,7 @@ nested_name_specifier:
 /* Why the @#$%^& do type_name and notype_identifier need to be expanded
    inline here?!?  (jason) */
 nested_name_specifier_1:
-	  TYPENAME SCOPE
+	  TYPENAME_ID SCOPE
 		{
 		  if (TREE_CODE ($1) == IDENTIFIER_NODE)
 		    {
@@ -3037,7 +3037,7 @@ typename_sub1:
 	;
 
 typename_sub2:
-	  TYPENAME SCOPE
+	  TYPENAME_ID SCOPE
 		{
 		  if (TREE_CODE ($1) != IDENTIFIER_NODE)
 		    $1 = lastiddecl;
@@ -3461,7 +3461,7 @@ label_colon:
 		}
 	| PTYPENAME ':'
 		{ goto do_label; }
-	| TYPENAME ':'
+	| TYPENAME_ID ':'
 		{ goto do_label; }
 	| SELFNAME ':'
 		{ goto do_label; }
diff --git a/gcc/cp/spew.c b/gcc/cp/spew.c
index a573cbac2b0..0c98f83577b 100644
--- a/gcc/cp/spew.c
+++ b/gcc/cp/spew.c
@@ -60,7 +60,7 @@ static int debug_yychar PROTO((int));
 
 /* From lex.c: */
 /* the declaration found for the last IDENTIFIER token read in.
-   yylex must look this up to detect typedefs, which get token type TYPENAME,
+   yylex must look this up to detect typedefs, which get token type TYPENAME_ID,
    so it is left around in case the identifier is not a typedef but is
    used in a context which makes it a reference to a variable.  */
 extern tree lastiddecl;		/* let our brains leak out here too */
@@ -323,7 +323,7 @@ yylex ()
 	  tmp_token.yychar = identifier_type (trrr);
 	  switch (tmp_token.yychar)
 	    {
-	    case TYPENAME:
+	    case TYPENAME_ID:
 	    case SELFNAME:
 	    case NSNAME:
 	    case PTYPENAME:
@@ -349,7 +349,7 @@ yylex ()
       got_scope = NULL_TREE;
       /* and fall through to...  */
     case IDENTIFIER_DEFN:
-    case TYPENAME:
+    case TYPENAME_ID:
     case TYPENAME_DEFN:
     case PTYPENAME:
     case PTYPENAME_DEFN:
@@ -418,7 +418,7 @@ yylex ()
 }
 
 /* token[0] == AGGR (struct/union/enum)
-   Thus, token[1] is either a TYPENAME or a TYPENAME_DEFN.
+   Thus, token[1] is either a TYPENAME_ID or a TYPENAME_DEFN.
    If token[2] == '{' or ':' then it's TYPENAME_DEFN.
    It's also a definition if it's a forward declaration (as in 'struct Foo;')
    which we can tell if token[2] == ';' *and* token[-1] != FRIEND or NEW.  */
@@ -430,7 +430,7 @@ do_aggr ()
   
   scan_tokens (2);
   yc1 = nth_token (1)->yychar;
-  if (yc1 != TYPENAME && yc1 != IDENTIFIER && yc1 != PTYPENAME)
+  if (yc1 != TYPENAME_ID && yc1 != IDENTIFIER && yc1 != PTYPENAME)
     return 0;
   yc2 = nth_token (2)->yychar;
   if (yc2 == ';')
@@ -451,7 +451,7 @@ do_aggr ()
 
   switch (yc1)
     {
-    case TYPENAME:
+    case TYPENAME_ID:
       nth_token (1)->yychar = TYPENAME_DEFN;
       break;
     case PTYPENAME:
diff --git a/gcc/objc/objc-parse.c b/gcc/objc/objc-parse.c
index b95312d8708..248ea95a557 100644
--- a/gcc/objc/objc-parse.c
+++ b/gcc/objc/objc-parse.c
@@ -1,70 +1,68 @@
+/* A Bison parser, made by GNU Bison 2.7.  */
 
-/*  A Bison parser, made from objc-parse.y
- by  GNU Bison version 1.25
-  */
+/* Bison implementation for Yacc-like parsers in C
+   
+      Copyright (C) 1984, 1989-1990, 2000-2012 Free Software Foundation, Inc.
+   
+   This program is free software: you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation, either version 3 of the License, or
+   (at your option) any later version.
+   
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+   
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+/* As a special exception, you may create a larger work that contains
+   part or all of the Bison parser skeleton and distribute that work
+   under terms of your choice, so long as that work isn't itself a
+   parser generator using the skeleton or a modified version thereof
+   as a parser skeleton.  Alternatively, if you modify or redistribute
+   the parser skeleton itself, you may (at your option) remove this
+   special exception, which will cause the skeleton and the resulting
+   Bison output files to be licensed under the GNU General Public
+   License without this special exception.
+   
+   This special exception was added by the Free Software Foundation in
+   version 2.2 of Bison.  */
+
+/* C LALR(1) parser skeleton written by Richard Stallman, by
+   simplifying the original so-called "semantic" parser.  */
+
+/* All symbols defined below should begin with yy or YY, to avoid
+   infringing on user name space.  This should be done even for local
+   variables, as they might otherwise be expanded by user macros.
+   There are some unavoidable exceptions within include files to
+   define necessary library symbols; they are noted "INFRINGES ON
+   USER NAME SPACE" below.  */
+
+/* Identify Bison output.  */
+#define YYBISON 1
+
+/* Bison version.  */
+#define YYBISON_VERSION "2.7"
+
+/* Skeleton name.  */
+#define YYSKELETON_NAME "yacc.c"
+
+/* Pure parsers.  */
+#define YYPURE 0
+
+/* Push parsers.  */
+#define YYPUSH 0
+
+/* Pull parsers.  */
+#define YYPULL 1
 
-#define YYBISON 1  /* Identify Bison output.  */
-
-#define	IDENTIFIER	258
-#define	TYPENAME	259
-#define	SCSPEC	260
-#define	TYPESPEC	261
-#define	TYPE_QUAL	262
-#define	CONSTANT	263
-#define	STRING	264
-#define	ELLIPSIS	265
-#define	SIZEOF	266
-#define	ENUM	267
-#define	STRUCT	268
-#define	UNION	269
-#define	IF	270
-#define	ELSE	271
-#define	WHILE	272
-#define	DO	273
-#define	FOR	274
-#define	SWITCH	275
-#define	CASE	276
-#define	DEFAULT	277
-#define	BREAK	278
-#define	CONTINUE	279
-#define	RETURN	280
-#define	GOTO	281
-#define	ASM_KEYWORD	282
-#define	TYPEOF	283
-#define	ALIGNOF	284
-#define	ATTRIBUTE	285
-#define	EXTENSION	286
-#define	LABEL	287
-#define	REALPART	288
-#define	IMAGPART	289
-#define	ASSIGN	290
-#define	OROR	291
-#define	ANDAND	292
-#define	EQCOMPARE	293
-#define	ARITHCOMPARE	294
-#define	LSHIFT	295
-#define	RSHIFT	296
-#define	UNARY	297
-#define	PLUSPLUS	298
-#define	MINUSMINUS	299
-#define	HYPERUNARY	300
-#define	POINTSAT	301
-#define	INTERFACE	302
-#define	IMPLEMENTATION	303
-#define	END	304
-#define	SELECTOR	305
-#define	DEFS	306
-#define	ENCODE	307
-#define	CLASSNAME	308
-#define	PUBLIC	309
-#define	PRIVATE	310
-#define	PROTECTED	311
-#define	PROTOCOL	312
-#define	OBJECTNAME	313
-#define	CLASS	314
-#define	ALIAS	315
-#define	OBJC_STRING	316
 
+
+
+/* Copy the first part of user declarations.  */
+/* Line 371 of yacc.c  */
 #line 33 "objc-parse.y"
 
 #include "config.h"
@@ -95,9 +93,142 @@ char *language_string = "GNU Obj-C";
 /* Cause the `yydebug' variable to be defined.  */
 #define YYDEBUG 1
 
+/* Line 371 of yacc.c  */
+#line 98 "objc-parse.c"
+
+# ifndef YY_NULL
+#  if defined __cplusplus && 201103L <= __cplusplus
+#   define YY_NULL nullptr
+#  else
+#   define YY_NULL 0
+#  endif
+# endif
+
+/* Enabling verbose error messages.  */
+#ifdef YYERROR_VERBOSE
+# undef YYERROR_VERBOSE
+# define YYERROR_VERBOSE 1
+#else
+# define YYERROR_VERBOSE 0
+#endif
+
+/* In a future release of Bison, this section will be replaced
+   by #include "objc-parse.h".  */
+#ifndef YY_YY_OBJC_PARSE_H_INCLUDED
+# define YY_YY_OBJC_PARSE_H_INCLUDED
+/* Enabling traces.  */
+#ifndef YYDEBUG
+# define YYDEBUG 0
+#endif
+#if YYDEBUG
+extern int yydebug;
+#endif
+
+/* Tokens.  */
+#ifndef YYTOKENTYPE
+# define YYTOKENTYPE
+   /* Put the tokens into the symbol table, so that GDB and other debuggers
+      know about them.  */
+   enum yytokentype {
+     IDENTIFIER = 258,
+     TYPENAME = 259,
+     SCSPEC = 260,
+     TYPESPEC = 261,
+     TYPE_QUAL = 262,
+     CONSTANT = 263,
+     STRING = 264,
+     ELLIPSIS = 265,
+     SIZEOF = 266,
+     ENUM = 267,
+     STRUCT = 268,
+     UNION = 269,
+     IF = 270,
+     ELSE = 271,
+     WHILE = 272,
+     DO = 273,
+     FOR = 274,
+     SWITCH = 275,
+     CASE = 276,
+     DEFAULT = 277,
+     BREAK = 278,
+     CONTINUE = 279,
+     RETURN_KEYWORD = 280,
+     GOTO = 281,
+     ASM_KEYWORD = 282,
+     TYPEOF = 283,
+     ALIGNOF = 284,
+     ATTRIBUTE = 285,
+     EXTENSION = 286,
+     LABEL = 287,
+     REALPART = 288,
+     IMAGPART = 289,
+     ASSIGN = 290,
+     OROR = 291,
+     ANDAND = 292,
+     EQCOMPARE = 293,
+     ARITHCOMPARE = 294,
+     RSHIFT = 295,
+     LSHIFT = 296,
+     MINUSMINUS = 297,
+     PLUSPLUS = 298,
+     UNARY = 299,
+     HYPERUNARY = 300,
+     POINTSAT = 301,
+     INTERFACE = 302,
+     IMPLEMENTATION = 303,
+     END = 304,
+     SELECTOR = 305,
+     DEFS = 306,
+     ENCODE = 307,
+     CLASSNAME = 308,
+     PUBLIC = 309,
+     PRIVATE = 310,
+     PROTECTED = 311,
+     PROTOCOL = 312,
+     OBJECTNAME = 313,
+     CLASS = 314,
+     ALIAS = 315,
+     OBJC_STRING = 316
+   };
+#endif
+
+
+#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
+typedef union YYSTYPE
+{
+/* Line 387 of yacc.c  */
 #line 65 "objc-parse.y"
-typedef union {long itype; tree ttype; enum tree_code code;
-	char *filename; int lineno; int ends_in_label; } YYSTYPE;
+long itype; tree ttype; enum tree_code code;
+	char *filename; int lineno; int ends_in_label; 
+
+/* Line 387 of yacc.c  */
+#line 206 "objc-parse.c"
+} YYSTYPE;
+# define YYSTYPE_IS_TRIVIAL 1
+# define yystype YYSTYPE /* obsolescent; will be withdrawn */
+# define YYSTYPE_IS_DECLARED 1
+#endif
+
+extern YYSTYPE yylval;
+
+#ifdef YYPARSE_PARAM
+#if defined __STDC__ || defined __cplusplus
+int yyparse (void *YYPARSE_PARAM);
+#else
+int yyparse ();
+#endif
+#else /* ! YYPARSE_PARAM */
+#if defined __STDC__ || defined __cplusplus
+int yyparse (void);
+#else
+int yyparse ();
+#endif
+#endif /* ! YYPARSE_PARAM */
+
+#endif /* !YY_YY_OBJC_PARSE_H_INCLUDED  */
+
+/* Copy the second part of user declarations.  */
+/* Line 390 of yacc.c  */
 #line 193 "objc-parse.y"
 
 /* Number of statements (loosely speaking) and compound statements 
@@ -136,2083 +267,2763 @@ int objc_public_flag;
 
 #define YYPRINT(FILE,YYCHAR,YYLVAL) yyprint(FILE,YYCHAR,YYLVAL)
 extern void yyprint			PROTO ((FILE *, int, YYSTYPE));
-#include <stdio.h>
 
-#ifndef __cplusplus
-#ifndef __STDC__
-#define const
+/* Line 390 of yacc.c  */
+#line 273 "objc-parse.c"
+
+#ifdef short
+# undef short
+#endif
+
+#ifdef YYTYPE_UINT8
+typedef YYTYPE_UINT8 yytype_uint8;
+#else
+typedef unsigned char yytype_uint8;
 #endif
+
+#ifdef YYTYPE_INT8
+typedef YYTYPE_INT8 yytype_int8;
+#elif (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+typedef signed char yytype_int8;
+#else
+typedef short int yytype_int8;
 #endif
 
+#ifdef YYTYPE_UINT16
+typedef YYTYPE_UINT16 yytype_uint16;
+#else
+typedef unsigned short int yytype_uint16;
+#endif
 
+#ifdef YYTYPE_INT16
+typedef YYTYPE_INT16 yytype_int16;
+#else
+typedef short int yytype_int16;
+#endif
 
-#define	YYFINAL		955
-#define	YYFLAG		-32768
-#define	YYNTBASE	84
-
-#define YYTRANSLATE(x) ((unsigned)(x) <= 316 ? yytranslate[x] : 311)
-
-static const char yytranslate[] = {     0,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,    80,     2,     2,     2,    52,    43,     2,    59,
-    76,    50,    48,    81,    49,    58,    51,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,    38,    77,     2,
-    36,     2,    37,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-    60,     2,    83,    42,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,    82,    41,    78,    79,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
-     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
-    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-    39,    40,    44,    45,    46,    47,    53,    54,    55,    56,
-    57,    61,    62,    63,    64,    65,    66,    67,    68,    69,
-    70,    71,    72,    73,    74,    75
-};
+#ifndef YYSIZE_T
+# ifdef __SIZE_TYPE__
+#  define YYSIZE_T __SIZE_TYPE__
+# elif defined size_t
+#  define YYSIZE_T size_t
+# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYSIZE_T size_t
+# else
+#  define YYSIZE_T unsigned int
+# endif
+#endif
 
-#if YYDEBUG != 0
-static const short yyprhs[] = {     0,
-     0,     1,     3,     4,     7,     8,    12,    14,    16,    18,
-    24,    27,    31,    36,    41,    44,    47,    50,    53,    55,
-    56,    57,    65,    70,    71,    72,    80,    85,    86,    87,
-    94,    98,   100,   102,   104,   106,   108,   110,   112,   114,
-   116,   118,   120,   122,   123,   125,   127,   131,   133,   136,
-   139,   142,   145,   148,   153,   156,   161,   164,   167,   169,
-   171,   173,   178,   179,   187,   189,   193,   197,   201,   205,
-   209,   213,   217,   221,   225,   229,   233,   237,   238,   243,
-   244,   249,   250,   251,   259,   260,   266,   270,   274,   276,
-   278,   280,   284,   288,   289,   294,   299,   304,   308,   312,
-   315,   318,   320,   322,   324,   326,   328,   330,   333,   335,
-   338,   339,   341,   344,   348,   350,   352,   355,   358,   363,
-   368,   371,   374,   378,   380,   382,   385,   388,   389,   390,
-   395,   400,   404,   408,   411,   414,   417,   420,   424,   425,
-   428,   431,   434,   437,   441,   442,   445,   448,   450,   452,
-   455,   458,   460,   462,   465,   468,   471,   475,   476,   479,
-   481,   483,   485,   488,   491,   493,   498,   503,   505,   507,
-   509,   511,   515,   517,   521,   522,   527,   528,   535,   539,
-   540,   547,   551,   552,   554,   556,   559,   566,   568,   572,
-   573,   575,   580,   587,   592,   594,   596,   598,   600,   602,
-   603,   608,   610,   611,   614,   616,   620,   624,   627,   628,
-   633,   635,   636,   641,   643,   645,   647,   650,   653,   654,
-   655,   661,   662,   663,   669,   671,   673,   677,   681,   686,
-   690,   694,   698,   700,   702,   706,   711,   715,   719,   723,
-   725,   729,   733,   737,   742,   746,   750,   752,   754,   757,
-   759,   762,   764,   767,   768,   776,   782,   785,   786,   794,
-   800,   803,   804,   813,   814,   822,   825,   826,   828,   829,
-   831,   833,   836,   837,   841,   844,   849,   853,   855,   859,
-   861,   863,   866,   868,   872,   877,   884,   890,   892,   896,
-   898,   900,   904,   907,   910,   911,   913,   915,   918,   919,
-   922,   926,   930,   933,   937,   942,   946,   949,   953,   956,
-   960,   962,   964,   967,   970,   971,   973,   976,   977,   978,
-   980,   982,   985,   989,   991,   994,   996,   999,  1006,  1012,
-  1018,  1021,  1024,  1029,  1030,  1035,  1036,  1037,  1041,  1046,
-  1050,  1052,  1054,  1056,  1058,  1061,  1062,  1067,  1069,  1073,
-  1074,  1075,  1083,  1089,  1092,  1093,  1094,  1095,  1108,  1109,
-  1116,  1119,  1122,  1125,  1129,  1136,  1145,  1156,  1169,  1173,
-  1178,  1180,  1182,  1183,  1190,  1194,  1200,  1203,  1207,  1208,
-  1210,  1211,  1213,  1214,  1216,  1218,  1222,  1227,  1229,  1233,
-  1234,  1237,  1240,  1241,  1246,  1249,  1250,  1252,  1254,  1258,
-  1260,  1264,  1269,  1274,  1279,  1284,  1289,  1290,  1293,  1295,
-  1298,  1300,  1304,  1306,  1310,  1312,  1314,  1316,  1318,  1320,
-  1322,  1324,  1326,  1330,  1334,  1339,  1340,  1341,  1352,  1353,
-  1360,  1361,  1362,  1375,  1376,  1385,  1386,  1393,  1396,  1397,
-  1406,  1411,  1412,  1422,  1428,  1429,  1436,  1437,  1439,  1443,
-  1447,  1449,  1451,  1453,  1455,  1456,  1460,  1463,  1467,  1471,
-  1473,  1474,  1476,  1480,  1482,  1486,  1489,  1490,  1491,  1492,
-  1500,  1501,  1502,  1503,  1511,  1512,  1513,  1516,  1518,  1520,
-  1523,  1524,  1528,  1530,  1532,  1533,  1534,  1540,  1541,  1542,
-  1548,  1553,  1555,  1561,  1564,  1565,  1568,  1569,  1571,  1573,
-  1575,  1578,  1581,  1586,  1589,  1592,  1594,  1598,  1601,  1604,
-  1607,  1608,  1611,  1612,  1616,  1618,  1620,  1623,  1625,  1627,
-  1629,  1631,  1633,  1635,  1637,  1639,  1641,  1643,  1645,  1647,
-  1649,  1651,  1653,  1655,  1657,  1659,  1661,  1663,  1665,  1667,
-  1669,  1671,  1673,  1680,  1684,  1690,  1693,  1695,  1697,  1699,
-  1702,  1704,  1708,  1711,  1713,  1715,  1716,  1717,  1724,  1726,
-  1728,  1730,  1733,  1736,  1738,  1743,  1748
-};
+#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)
+
+#ifndef YY_
+# if defined YYENABLE_NLS && YYENABLE_NLS
+#  if ENABLE_NLS
+#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
+#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
+#  endif
+# endif
+# ifndef YY_
+#  define YY_(Msgid) Msgid
+# endif
+#endif
 
-static const short yyrhs[] = {    -1,
-    85,     0,     0,    86,    88,     0,     0,    85,    87,    88,
-     0,    90,     0,    89,     0,   242,     0,    27,    59,    99,
-    76,    77,     0,   241,    88,     0,   123,   137,    77,     0,
-   130,   123,   137,    77,     0,   126,   123,   136,    77,     0,
-   130,    77,     0,   126,    77,     0,     1,    77,     0,     1,
-    78,     0,    77,     0,     0,     0,   126,   123,   165,    91,
-   117,    92,   199,     0,   126,   123,   165,     1,     0,     0,
-     0,   130,   123,   168,    93,   117,    94,   199,     0,   130,
-   123,   168,     1,     0,     0,     0,   123,   168,    95,   117,
-    96,   199,     0,   123,   168,     1,     0,     3,     0,     4,
-     0,    72,     0,    67,     0,    43,     0,    49,     0,    48,
-     0,    54,     0,    55,     0,    79,     0,    80,     0,   101,
-     0,     0,   101,     0,   107,     0,   101,    81,   107,     0,
-   113,     0,    50,   105,     0,   241,   105,     0,    98,   105,
-     0,    40,    97,     0,   103,   102,     0,   103,    59,   186,
-    76,     0,   104,   102,     0,   104,    59,   186,    76,     0,
-    33,   105,     0,    34,   105,     0,    11,     0,    29,     0,
-   102,     0,    59,   186,    76,   105,     0,     0,    59,   186,
-    76,    82,   106,   151,    78,     0,   105,     0,   107,    48,
-   107,     0,   107,    49,   107,     0,   107,    50,   107,     0,
-   107,    51,   107,     0,   107,    52,   107,     0,   107,    46,
-   107,     0,   107,    47,   107,     0,   107,    45,   107,     0,
-   107,    44,   107,     0,   107,    43,   107,     0,   107,    41,
-   107,     0,   107,    42,   107,     0,     0,   107,    40,   108,
-   107,     0,     0,   107,    39,   109,   107,     0,     0,     0,
-   107,    37,   110,    99,    38,   111,   107,     0,     0,   107,
-    37,   112,    38,   107,     0,   107,    36,   107,     0,   107,
-    35,   107,     0,     3,     0,     8,     0,   115,     0,    59,
-    99,    76,     0,    59,     1,    76,     0,     0,    59,   114,
-   201,    76,     0,   113,    59,   100,    76,     0,   113,    60,
-    99,    83,     0,   113,    58,    97,     0,   113,    57,    97,
-     0,   113,    54,     0,   113,    55,     0,   302,     0,   308,
-     0,   309,     0,   310,     0,   116,     0,     9,     0,   115,
-     9,     0,    75,     0,   116,    75,     0,     0,   119,     0,
-   119,    10,     0,   206,   207,   120,     0,   118,     0,   194,
-     0,   119,   118,     0,   118,   194,     0,   128,   123,   136,
-    77,     0,   131,   123,   137,    77,     0,   128,    77,     0,
-   131,    77,     0,   206,   207,   125,     0,   121,     0,   194,
-     0,   122,   121,     0,   121,   194,     0,     0,     0,   126,
-   123,   136,    77,     0,   130,   123,   137,    77,     0,   126,
-   123,   159,     0,   130,   123,   162,     0,   126,    77,     0,
-   130,    77,     0,   241,   125,     0,   134,   127,     0,   130,
-   134,   127,     0,     0,   127,   135,     0,   127,     5,     0,
-   127,   144,     0,   134,   129,     0,   131,   134,   129,     0,
-     0,   129,   135,     0,   129,     5,     0,   131,     0,   144,
-     0,   130,   131,     0,   130,   144,     0,     7,     0,     5,
-     0,   131,     7,     0,   131,     5,     0,   134,   133,     0,
-   188,   134,   133,     0,     0,   133,   135,     0,     6,     0,
-   172,     0,     4,     0,    67,   258,     0,    72,   258,     0,
-   259,     0,    28,    59,    99,    76,     0,    28,    59,   186,
-    76,     0,     6,     0,     7,     0,   172,     0,   139,     0,
-   136,    81,   139,     0,   141,     0,   137,    81,   139,     0,
-     0,    27,    59,   115,    76,     0,     0,   165,   138,   143,
-    36,   140,   149,     0,   165,   138,   143,     0,     0,   168,
-   138,   143,    36,   142,   149,     0,   168,   138,   143,     0,
-     0,   144,     0,   145,     0,   144,   145,     0,    30,    59,
-    59,   146,    76,    76,     0,   147,     0,   146,    81,   147,
-     0,     0,   148,     0,   148,    59,     3,    76,     0,   148,
-    59,     3,    81,   101,    76,     0,   148,    59,   100,    76,
-     0,    97,     0,     5,     0,     6,     0,     7,     0,   107,
-     0,     0,    82,   150,   151,    78,     0,     1,     0,     0,
-   152,   177,     0,   153,     0,   152,    81,   153,     0,   157,
-    36,   155,     0,   158,   155,     0,     0,    97,    38,   154,
-   155,     0,   155,     0,     0,    82,   156,   151,    78,     0,
-   107,     0,     1,     0,   158,     0,   157,   158,     0,    58,
-    97,     0,     0,     0,   165,   160,   117,   161,   201,     0,
-     0,     0,   168,   163,   117,   164,   201,     0,   166,     0,
-   168,     0,    59,   166,    76,     0,   166,    59,   236,     0,
-   166,    60,    99,    83,     0,   166,    60,    83,     0,    50,
-   189,   166,     0,   144,   124,   166,     0,     4,     0,    72,
-     0,   167,    59,   236,     0,   167,    60,    99,    83,     0,
-   167,    60,    83,     0,    50,   189,   167,     0,   144,   124,
-   167,     0,     4,     0,   168,    59,   236,     0,    59,   168,
-    76,     0,    50,   189,   168,     0,   168,    60,    99,    83,
-     0,   168,    60,    83,     0,   144,   124,   168,     0,     3,
-     0,    13,     0,    13,   144,     0,    14,     0,    14,   144,
-     0,    12,     0,    12,   144,     0,     0,   169,    97,    82,
-   173,   179,    78,   143,     0,   169,    82,   179,    78,   143,
-     0,   169,    97,     0,     0,   170,    97,    82,   174,   179,
-    78,   143,     0,   170,    82,   179,    78,   143,     0,   170,
-    97,     0,     0,   171,    97,    82,   175,   184,   178,    78,
-   143,     0,     0,   171,    82,   176,   184,   178,    78,   143,
-     0,   171,    97,     0,     0,    81,     0,     0,    81,     0,
-   180,     0,   180,   181,     0,     0,   180,   181,    77,     0,
-   180,    77,     0,    65,    59,    67,    76,     0,   132,   123,
-   182,     0,   132,     0,   188,   123,   182,     0,   188,     0,
-     1,     0,   241,   181,     0,   183,     0,   182,    81,   183,
-     0,   206,   207,   165,   143,     0,   206,   207,   165,    38,
-   107,   143,     0,   206,   207,    38,   107,   143,     0,   185,
-     0,   184,    81,   185,     0,     1,     0,    97,     0,    97,
-    36,   107,     0,   132,   187,     0,   188,   187,     0,     0,
-   190,     0,     7,     0,   188,     7,     0,     0,   189,     7,
-     0,    59,   190,    76,     0,    50,   189,   190,     0,    50,
-   189,     0,   190,    59,   229,     0,   190,    60,    99,    83,
-     0,   190,    60,    83,     0,    59,   229,     0,    60,    99,
-    83,     0,    60,    83,     0,   144,   124,   190,     0,   192,
-     0,   209,     0,   192,   209,     0,   192,   194,     0,     0,
-   191,     0,     1,    77,     0,     0,     0,   197,     0,   198,
-     0,   197,   198,     0,    32,   240,    77,     0,   201,     0,
-     1,   201,     0,    82,     0,   200,    78,     0,   200,   195,
-   196,   122,   193,    78,     0,   200,   195,   196,     1,    78,
-     0,   200,   195,   196,   191,    78,     0,   203,   208,     0,
-   203,     1,     0,    15,    59,    99,    76,     0,     0,    18,
-   205,   208,    17,     0,     0,     0,   206,   207,   211,     0,
-   206,   207,   222,   208,     0,   206,   207,   210,     0,   211,
-     0,   222,     0,   201,     0,   219,     0,    99,    77,     0,
-     0,   202,    16,   212,   208,     0,   202,     0,   202,    16,
-     1,     0,     0,     0,    17,   213,    59,    99,    76,   214,
-   208,     0,   204,    59,    99,    76,    77,     0,   204,     1,
-     0,     0,     0,     0,    19,    59,   224,    77,   215,   224,
-    77,   216,   224,    76,   217,   208,     0,     0,    20,    59,
-    99,    76,   218,   208,     0,    23,    77,     0,    24,    77,
-     0,    25,    77,     0,    25,    99,    77,     0,    27,   223,
-    59,    99,    76,    77,     0,    27,   223,    59,    99,    38,
-   225,    76,    77,     0,    27,   223,    59,    99,    38,   225,
-    38,   225,    76,    77,     0,    27,   223,    59,    99,    38,
-   225,    38,   225,    38,   228,    76,    77,     0,    26,    97,
-    77,     0,    26,    50,    99,    77,     0,    77,     0,   220,
-     0,     0,    19,    59,   113,    76,   221,   208,     0,    21,
-   107,    38,     0,    21,   107,    10,   107,    38,     0,    22,
-    38,     0,    97,    38,   143,     0,     0,     7,     0,     0,
-    99,     0,     0,   226,     0,   227,     0,   226,    81,   227,
-     0,     9,    59,    99,    76,     0,   115,     0,   228,    81,
-   115,     0,     0,   230,   231,     0,   233,    76,     0,     0,
-   234,    77,   232,   231,     0,     1,    76,     0,     0,    10,
-     0,   234,     0,   234,    81,    10,     0,   235,     0,   234,
-    81,   235,     0,   126,   123,   167,   143,     0,   126,   123,
-   168,   143,     0,   126,   123,   187,   143,     0,   130,   123,
-   168,   143,     0,   130,   123,   187,   143,     0,     0,   237,
-   238,     0,   231,     0,   239,    76,     0,     3,     0,   239,
-    81,     3,     0,    97,     0,   240,    81,    97,     0,    31,
-     0,   246,     0,   244,     0,   245,     0,   256,     0,   266,
-     0,    63,     0,    97,     0,   243,    81,    97,     0,    73,
-   243,    77,     0,    74,    97,    97,    77,     0,     0,     0,
-    61,    97,   258,    82,   247,   260,    78,   248,   273,    63,
-     0,     0,    61,    97,   258,   249,   273,    63,     0,     0,
-     0,    61,    97,    38,    97,   258,    82,   250,   260,    78,
-   251,   273,    63,     0,     0,    61,    97,    38,    97,   258,
-   252,   273,    63,     0,     0,    62,    97,    82,   253,   260,
-    78,     0,    62,    97,     0,     0,    62,    97,    38,    97,
-    82,   254,   260,    78,     0,    62,    97,    38,    97,     0,
-     0,    61,    97,    59,    97,    76,   258,   255,   273,    63,
-     0,    62,    97,    59,    97,    76,     0,     0,    71,    97,
-   258,   257,   273,    63,     0,     0,   259,     0,    45,   243,
-    45,     0,   260,   261,   262,     0,   262,     0,    69,     0,
-    70,     0,    68,     0,     0,   262,   263,    77,     0,   262,
-    77,     0,   132,   123,   264,     0,   188,   123,   264,     0,
-     1,     0,     0,   265,     0,   264,    81,   265,     0,   165,
-     0,   165,    38,   107,     0,    38,   107,     0,     0,     0,
-     0,    48,   267,   283,   268,   284,   269,   199,     0,     0,
-     0,     0,    49,   270,   283,   271,   284,   272,   199,     0,
-     0,     0,   274,   275,     0,   278,     0,    89,     0,   275,
-   278,     0,     0,   275,   276,    89,     0,    77,     0,     1,
-     0,     0,     0,    48,   279,   283,   280,   277,     0,     0,
-     0,    49,   281,   283,   282,   277,     0,    59,   186,    76,
-   292,     0,   292,     0,    59,   186,    76,   293,   290,     0,
-   293,   290,     0,     0,    77,   285,     0,     0,   286,     0,
-   287,     0,   194,     0,   286,   287,     0,   287,   194,     0,
-   126,   123,   288,    77,     0,   126,    77,     0,   130,    77,
-     0,   289,     0,   288,    81,   289,     0,   167,   143,     0,
-   168,   143,     0,   187,   143,     0,     0,    81,    10,     0,
-     0,    81,   291,   233,     0,   294,     0,   296,     0,   293,
-   296,     0,     3,     0,     4,     0,    72,     0,   295,     0,
-    12,     0,    13,     0,    14,     0,    15,     0,    16,     0,
-    17,     0,    18,     0,    19,     0,    20,     0,    21,     0,
-    22,     0,    23,     0,    24,     0,    25,     0,    26,     0,
-    27,     0,    11,     0,    28,     0,    29,     0,     6,     0,
-     7,     0,   294,    38,    59,   186,    76,    97,     0,   294,
-    38,    97,     0,    38,    59,   186,    76,    97,     0,    38,
-    97,     0,   294,     0,   298,     0,   300,     0,   298,   300,
-     0,   101,     0,   294,    38,   299,     0,    38,   299,     0,
-    99,     0,    67,     0,     0,     0,    60,   303,   301,   304,
-   297,    83,     0,   294,     0,   306,     0,   307,     0,   306,
-   307,     0,   294,    38,     0,    38,     0,    64,    59,   305,
-    76,     0,    71,    59,    97,    76,     0,    66,    59,   186,
-    76,     0
-};
+/* Suppress unused-variable warnings by "using" E.  */
+#if ! defined lint || defined __GNUC__
+# define YYUSE(E) ((void) (E))
+#else
+# define YYUSE(E) /* empty */
+#endif
 
+/* Identity function, used to suppress warnings about constant conditions.  */
+#ifndef lint
+# define YYID(N) (N)
+#else
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static int
+YYID (int yyi)
+#else
+static int
+YYID (yyi)
+    int yyi;
+#endif
+{
+  return yyi;
+}
 #endif
 
-#if YYDEBUG != 0
-static const short yyrline[] = { 0,
-   233,   238,   252,   254,   254,   255,   257,   259,   260,   261,
-   269,   273,   284,   289,   294,   296,   298,   299,   300,   305,
-   312,   314,   319,   324,   330,   332,   337,   342,   348,   350,
-   355,   362,   364,   365,   366,   369,   371,   373,   375,   377,
-   379,   381,   385,   389,   392,   395,   398,   402,   404,   407,
-   410,   414,   442,   448,   451,   454,   457,   459,   463,   467,
-   471,   473,   476,   480,   507,   509,   511,   513,   515,   517,
-   519,   521,   523,   525,   527,   529,   531,   533,   537,   539,
-   543,   545,   548,   552,   554,   561,   564,   572,   583,   743,
-   744,   746,   752,   754,   768,   791,   793,   795,   807,   821,
-   823,   825,   827,   829,   831,   833,   838,   840,   846,   848,
-   852,   854,   855,   865,   870,   872,   873,   874,   881,   887,
-   892,   895,   903,   908,   910,   911,   912,   919,   930,   934,
-   940,   945,   950,   955,   957,   959,   968,   971,   975,   977,
-   979,   984,   988,   991,   995,   998,  1000,  1012,  1015,  1017,
-  1019,  1023,  1027,  1029,  1032,  1045,  1048,  1052,  1054,  1062,
-  1063,  1064,  1068,  1070,  1075,  1077,  1079,  1085,  1086,  1087,
-  1090,  1092,  1095,  1097,  1100,  1103,  1109,  1116,  1118,  1125,
-  1132,  1135,  1142,  1145,  1149,  1152,  1156,  1161,  1164,  1168,
-  1171,  1173,  1175,  1177,  1184,  1186,  1187,  1188,  1193,  1195,
-  1200,  1208,  1213,  1217,  1220,  1222,  1227,  1229,  1230,  1233,
-  1233,  1236,  1239,  1241,  1243,  1246,  1248,  1251,  1259,  1270,
-  1278,  1282,  1293,  1301,  1308,  1310,  1315,  1318,  1323,  1325,
-  1327,  1334,  1336,  1337,  1345,  1351,  1353,  1355,  1362,  1364,
-  1370,  1376,  1378,  1380,  1382,  1389,  1391,  1394,  1397,  1401,
-  1404,  1408,  1411,  1415,  1420,  1422,  1426,  1428,  1430,  1432,
-  1436,  1438,  1441,  1444,  1447,  1450,  1454,  1456,  1459,  1461,
-  1466,  1469,  1474,  1476,  1478,  1482,  1506,  1513,  1518,  1524,
-  1529,  1531,  1536,  1538,  1542,  1546,  1550,  1560,  1562,  1567,
-  1572,  1575,  1579,  1582,  1586,  1589,  1592,  1595,  1599,  1602,
-  1606,  1610,  1612,  1614,  1616,  1618,  1620,  1622,  1624,  1628,
-  1636,  1644,  1646,  1648,  1652,  1654,  1657,  1660,  1673,  1675,
-  1680,  1682,  1685,  1699,  1702,  1705,  1707,  1709,  1717,  1725,
-  1736,  1741,  1744,  1758,  1767,  1771,  1775,  1779,  1785,  1789,
-  1794,  1797,  1802,  1805,  1806,  1823,  1828,  1831,  1843,  1845,
-  1855,  1865,  1866,  1874,  1877,  1889,  1893,  1910,  1920,  1929,
-  1934,  1939,  1944,  1948,  1952,  1963,  1970,  1977,  1984,  1995,
-  2001,  2004,  2009,  2032,  2066,  2097,  2128,  2143,  2157,  2161,
-  2165,  2168,  2173,  2175,  2178,  2180,  2184,  2189,  2192,  2198,
-  2203,  2208,  2210,  2219,  2220,  2226,  2228,  2238,  2240,  2244,
-  2247,  2253,  2263,  2272,  2281,  2291,  2305,  2310,  2315,  2317,
-  2326,  2329,  2334,  2337,  2341,  2349,  2351,  2352,  2353,  2354,
-  2355,  2369,  2372,  2376,  2382,  2388,  2395,  2400,  2406,  2413,
-  2419,  2425,  2430,  2436,  2443,  2449,  2455,  2461,  2469,  2475,
-  2481,  2489,  2496,  2502,  2511,  2518,  2526,  2531,  2534,  2544,
-  2546,  2549,  2551,  2552,  2555,  2560,  2561,  2578,  2585,  2591,
-  2595,  2598,  2599,  2602,  2610,  2616,  2625,  2635,  2642,  2646,
-  2651,  2660,  2667,  2671,  2681,  2683,  2684,  2686,  2688,  2689,
-  2690,  2691,  2693,  2695,  2698,  2706,  2713,  2713,  2720,  2726,
-  2728,  2734,  2739,  2744,  2753,  2755,  2761,  2763,  2766,  2768,
-  2769,  2770,  2773,  2779,  2781,  2785,  2788,  2795,  2801,  2806,
-  2813,  2818,  2823,  2828,  2835,  2839,  2842,  2848,  2850,  2851,
-  2852,  2855,  2857,  2858,  2859,  2860,  2861,  2862,  2863,  2864,
-  2865,  2866,  2867,  2868,  2869,  2870,  2871,  2872,  2873,  2874,
-  2875,  2875,  2878,  2884,  2889,  2894,  2900,  2902,  2905,  2907,
-  2914,  2926,  2931,  2937,  2939,  2945,  2949,  2950,  2956,  2958,
-  2961,  2963,  2969,  2974,  2980,  2987,  2996
+#if ! defined yyoverflow || YYERROR_VERBOSE
+
+/* The parser invokes alloca or malloc; define the necessary symbols.  */
+
+# ifdef YYSTACK_USE_ALLOCA
+#  if YYSTACK_USE_ALLOCA
+#   ifdef __GNUC__
+#    define YYSTACK_ALLOC __builtin_alloca
+#   elif defined __BUILTIN_VA_ARG_INCR
+#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
+#   elif defined _AIX
+#    define YYSTACK_ALLOC __alloca
+#   elif defined _MSC_VER
+#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
+#    define alloca _alloca
+#   else
+#    define YYSTACK_ALLOC alloca
+#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
+#     ifndef EXIT_SUCCESS
+#      define EXIT_SUCCESS 0
+#     endif
+#    endif
+#   endif
+#  endif
+# endif
+
+# ifdef YYSTACK_ALLOC
+   /* Pacify GCC's `empty if-body' warning.  */
+#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
+#  ifndef YYSTACK_ALLOC_MAXIMUM
+    /* The OS might guarantee only one guard page at the bottom of the stack,
+       and a page size can be as small as 4096 bytes.  So we cannot safely
+       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
+       to allow for a few compiler-allocated temporary stack slots.  */
+#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
+#  endif
+# else
+#  define YYSTACK_ALLOC YYMALLOC
+#  define YYSTACK_FREE YYFREE
+#  ifndef YYSTACK_ALLOC_MAXIMUM
+#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
+#  endif
+#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
+       && ! ((defined YYMALLOC || defined malloc) \
+	     && (defined YYFREE || defined free)))
+#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+#   ifndef EXIT_SUCCESS
+#    define EXIT_SUCCESS 0
+#   endif
+#  endif
+#  ifndef YYMALLOC
+#   define YYMALLOC malloc
+#   if ! defined malloc && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
+#   endif
+#  endif
+#  ifndef YYFREE
+#   define YYFREE free
+#   if ! defined free && ! defined EXIT_SUCCESS && (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+void free (void *); /* INFRINGES ON USER NAME SPACE */
+#   endif
+#  endif
+# endif
+#endif /* ! defined yyoverflow || YYERROR_VERBOSE */
+
+
+#if (! defined yyoverflow \
+     && (! defined __cplusplus \
+	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
+
+/* A type that is properly aligned for any stack member.  */
+union yyalloc
+{
+  yytype_int16 yyss_alloc;
+  YYSTYPE yyvs_alloc;
 };
+
+/* The size of the maximum gap between one aligned stack and the next.  */
+# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)
+
+/* The size of an array large to enough to hold all stacks, each with
+   N elements.  */
+# define YYSTACK_BYTES(N) \
+     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
+      + YYSTACK_GAP_MAXIMUM)
+
+# define YYCOPY_NEEDED 1
+
+/* Relocate STACK from its old location to the new one.  The
+   local variables YYSIZE and YYSTACKSIZE give the old and new number of
+   elements in the stack, and YYPTR gives the new location of the
+   stack.  Advance YYPTR to a properly aligned location for the next
+   stack.  */
+# define YYSTACK_RELOCATE(Stack_alloc, Stack)				\
+    do									\
+      {									\
+	YYSIZE_T yynewbytes;						\
+	YYCOPY (&yyptr->Stack_alloc, Stack, yysize);			\
+	Stack = &yyptr->Stack_alloc;					\
+	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
+	yyptr += yynewbytes / sizeof (*yyptr);				\
+      }									\
+    while (YYID (0))
+
 #endif
 
+#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
+/* Copy COUNT objects from SRC to DST.  The source and destination do
+   not overlap.  */
+# ifndef YYCOPY
+#  if defined __GNUC__ && 1 < __GNUC__
+#   define YYCOPY(Dst, Src, Count) \
+      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
+#  else
+#   define YYCOPY(Dst, Src, Count)              \
+      do                                        \
+        {                                       \
+          YYSIZE_T yyi;                         \
+          for (yyi = 0; yyi < (Count); yyi++)   \
+            (Dst)[yyi] = (Src)[yyi];            \
+        }                                       \
+      while (YYID (0))
+#  endif
+# endif
+#endif /* !YYCOPY_NEEDED */
+
+/* YYFINAL -- State number of the termination state.  */
+#define YYFINAL  4
+/* YYLAST -- Last index in YYTABLE.  */
+#define YYLAST   3649
+
+/* YYNTOKENS -- Number of terminals.  */
+#define YYNTOKENS  84
+/* YYNNTS -- Number of nonterminals.  */
+#define YYNNTS  228
+/* YYNRULES -- Number of rules.  */
+#define YYNRULES  568
+/* YYNRULES -- Number of states.  */
+#define YYNSTATES  955
+
+/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
+#define YYUNDEFTOK  2
+#define YYMAXUTOK   316
+
+#define YYTRANSLATE(YYX)						\
+  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
+
+/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
+static const yytype_uint8 yytranslate[] =
+{
+       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,    80,     2,     2,     2,    52,    43,     2,
+      58,    76,    50,    48,    81,    49,    57,    51,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,    38,    77,
+       2,    35,     2,    37,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,    59,     2,    83,    42,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,    82,    41,    78,    79,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
+       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+      36,    39,    40,    44,    45,    46,    47,    53,    54,    55,
+      56,    60,    61,    62,    63,    64,    65,    66,    67,    68,
+      69,    70,    71,    72,    73,    74,    75
+};
+
+#if YYDEBUG
+/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
+   YYRHS.  */
+static const yytype_uint16 yyprhs[] =
+{
+       0,     0,     3,     4,     6,     7,    10,    11,    15,    17,
+      19,    21,    27,    30,    34,    39,    44,    47,    50,    53,
+      56,    58,    59,    60,    68,    73,    74,    75,    83,    88,
+      89,    90,    97,   101,   103,   105,   107,   109,   111,   113,
+     115,   117,   119,   121,   123,   125,   126,   128,   130,   134,
+     136,   139,   142,   145,   148,   151,   156,   159,   164,   167,
+     170,   172,   174,   176,   181,   182,   190,   192,   196,   200,
+     204,   208,   212,   216,   220,   224,   228,   232,   236,   240,
+     241,   246,   247,   252,   253,   254,   262,   263,   269,   273,
+     277,   279,   281,   283,   287,   291,   292,   297,   302,   307,
+     311,   315,   318,   321,   323,   325,   327,   329,   331,   333,
+     336,   338,   341,   342,   344,   347,   351,   353,   355,   358,
+     361,   366,   371,   374,   377,   381,   383,   385,   388,   391,
+     392,   393,   398,   403,   407,   411,   414,   417,   420,   423,
+     427,   428,   431,   434,   437,   440,   444,   445,   448,   451,
+     453,   455,   458,   461,   463,   465,   468,   471,   474,   478,
+     479,   482,   484,   486,   488,   491,   494,   496,   501,   506,
+     508,   510,   512,   514,   518,   520,   524,   525,   530,   531,
+     538,   542,   543,   550,   554,   555,   557,   559,   562,   569,
+     571,   575,   576,   578,   583,   590,   595,   597,   599,   601,
+     603,   605,   606,   611,   613,   614,   617,   619,   623,   627,
+     630,   631,   636,   638,   639,   644,   646,   648,   650,   653,
+     656,   657,   658,   664,   665,   666,   672,   674,   676,   680,
+     684,   689,   693,   697,   701,   703,   705,   709,   714,   718,
+     722,   726,   728,   732,   736,   740,   745,   749,   753,   755,
+     757,   760,   762,   765,   767,   770,   771,   779,   785,   788,
+     789,   797,   803,   806,   807,   816,   817,   825,   828,   829,
+     831,   832,   834,   836,   839,   840,   844,   847,   852,   856,
+     858,   862,   864,   866,   869,   871,   875,   880,   887,   893,
+     895,   899,   901,   903,   907,   910,   913,   914,   916,   918,
+     921,   922,   925,   929,   933,   936,   940,   945,   949,   952,
+     956,   959,   963,   965,   967,   970,   973,   974,   976,   979,
+     980,   981,   983,   985,   988,   992,   994,   997,   999,  1002,
+    1009,  1015,  1021,  1024,  1027,  1032,  1033,  1038,  1039,  1040,
+    1044,  1049,  1053,  1055,  1057,  1059,  1061,  1064,  1065,  1070,
+    1072,  1076,  1077,  1078,  1086,  1092,  1095,  1096,  1097,  1098,
+    1111,  1112,  1119,  1122,  1125,  1128,  1132,  1139,  1148,  1159,
+    1172,  1176,  1181,  1183,  1185,  1186,  1193,  1197,  1203,  1206,
+    1210,  1211,  1213,  1214,  1216,  1217,  1219,  1221,  1225,  1230,
+    1232,  1236,  1237,  1240,  1243,  1244,  1249,  1252,  1253,  1255,
+    1257,  1261,  1263,  1267,  1272,  1277,  1282,  1287,  1292,  1293,
+    1296,  1298,  1301,  1303,  1307,  1309,  1313,  1315,  1317,  1319,
+    1321,  1323,  1325,  1327,  1329,  1333,  1337,  1342,  1343,  1344,
+    1355,  1356,  1363,  1364,  1365,  1378,  1379,  1388,  1389,  1396,
+    1399,  1400,  1409,  1414,  1415,  1425,  1431,  1432,  1439,  1440,
+    1442,  1446,  1450,  1452,  1454,  1456,  1458,  1459,  1463,  1466,
+    1470,  1474,  1476,  1477,  1479,  1483,  1485,  1489,  1492,  1493,
+    1494,  1495,  1503,  1504,  1505,  1506,  1514,  1515,  1516,  1519,
+    1521,  1523,  1526,  1527,  1531,  1533,  1535,  1536,  1537,  1543,
+    1544,  1545,  1551,  1556,  1558,  1564,  1567,  1568,  1571,  1572,
+    1574,  1576,  1578,  1581,  1584,  1589,  1592,  1595,  1597,  1601,
+    1604,  1607,  1610,  1611,  1614,  1615,  1619,  1621,  1623,  1626,
+    1628,  1630,  1632,  1634,  1636,  1638,  1640,  1642,  1644,  1646,
+    1648,  1650,  1652,  1654,  1656,  1658,  1660,  1662,  1664,  1666,
+    1668,  1670,  1672,  1674,  1676,  1683,  1687,  1693,  1696,  1698,
+    1700,  1702,  1705,  1707,  1711,  1714,  1716,  1718,  1719,  1720,
+    1727,  1729,  1731,  1733,  1736,  1739,  1741,  1746,  1751
+};
+
+/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
+static const yytype_int16 yyrhs[] =
+{
+      85,     0,    -1,    -1,    86,    -1,    -1,    87,    89,    -1,
+      -1,    86,    88,    89,    -1,    91,    -1,    90,    -1,   243,
+      -1,    27,    58,   100,    76,    77,    -1,   242,    89,    -1,
+     124,   138,    77,    -1,   131,   124,   138,    77,    -1,   127,
+     124,   137,    77,    -1,   131,    77,    -1,   127,    77,    -1,
+       1,    77,    -1,     1,    78,    -1,    77,    -1,    -1,    -1,
+     127,   124,   166,    92,   118,    93,   200,    -1,   127,   124,
+     166,     1,    -1,    -1,    -1,   131,   124,   169,    94,   118,
+      95,   200,    -1,   131,   124,   169,     1,    -1,    -1,    -1,
+     124,   169,    96,   118,    97,   200,    -1,   124,   169,     1,
+      -1,     3,    -1,     4,    -1,    72,    -1,    67,    -1,    43,
+      -1,    49,    -1,    48,    -1,    54,    -1,    53,    -1,    79,
+      -1,    80,    -1,   102,    -1,    -1,   102,    -1,   108,    -1,
+     102,    81,   108,    -1,   114,    -1,    50,   106,    -1,   242,
+     106,    -1,    99,   106,    -1,    40,    98,    -1,   104,   103,
+      -1,   104,    58,   187,    76,    -1,   105,   103,    -1,   105,
+      58,   187,    76,    -1,    33,   106,    -1,    34,   106,    -1,
+      11,    -1,    29,    -1,   103,    -1,    58,   187,    76,   106,
+      -1,    -1,    58,   187,    76,    82,   107,   152,    78,    -1,
+     106,    -1,   108,    48,   108,    -1,   108,    49,   108,    -1,
+     108,    50,   108,    -1,   108,    51,   108,    -1,   108,    52,
+     108,    -1,   108,    47,   108,    -1,   108,    46,   108,    -1,
+     108,    45,   108,    -1,   108,    44,   108,    -1,   108,    43,
+     108,    -1,   108,    41,   108,    -1,   108,    42,   108,    -1,
+      -1,   108,    40,   109,   108,    -1,    -1,   108,    39,   110,
+     108,    -1,    -1,    -1,   108,    37,   111,   100,    38,   112,
+     108,    -1,    -1,   108,    37,   113,    38,   108,    -1,   108,
+      35,   108,    -1,   108,    36,   108,    -1,     3,    -1,     8,
+      -1,   116,    -1,    58,   100,    76,    -1,    58,     1,    76,
+      -1,    -1,    58,   115,   202,    76,    -1,   114,    58,   101,
+      76,    -1,   114,    59,   100,    83,    -1,   114,    57,    98,
+      -1,   114,    60,    98,    -1,   114,    54,    -1,   114,    53,
+      -1,   303,    -1,   309,    -1,   310,    -1,   311,    -1,   117,
+      -1,     9,    -1,   116,     9,    -1,    75,    -1,   117,    75,
+      -1,    -1,   120,    -1,   120,    10,    -1,   207,   208,   121,
+      -1,   119,    -1,   195,    -1,   120,   119,    -1,   119,   195,
+      -1,   129,   124,   137,    77,    -1,   132,   124,   138,    77,
+      -1,   129,    77,    -1,   132,    77,    -1,   207,   208,   126,
+      -1,   122,    -1,   195,    -1,   123,   122,    -1,   122,   195,
+      -1,    -1,    -1,   127,   124,   137,    77,    -1,   131,   124,
+     138,    77,    -1,   127,   124,   160,    -1,   131,   124,   163,
+      -1,   127,    77,    -1,   131,    77,    -1,   242,   126,    -1,
+     135,   128,    -1,   131,   135,   128,    -1,    -1,   128,   136,
+      -1,   128,     5,    -1,   128,   145,    -1,   135,   130,    -1,
+     132,   135,   130,    -1,    -1,   130,   136,    -1,   130,     5,
+      -1,   132,    -1,   145,    -1,   131,   132,    -1,   131,   145,
+      -1,     7,    -1,     5,    -1,   132,     7,    -1,   132,     5,
+      -1,   135,   134,    -1,   189,   135,   134,    -1,    -1,   134,
+     136,    -1,     6,    -1,   173,    -1,     4,    -1,    67,   259,
+      -1,    72,   259,    -1,   260,    -1,    28,    58,   100,    76,
+      -1,    28,    58,   187,    76,    -1,     6,    -1,     7,    -1,
+     173,    -1,   140,    -1,   137,    81,   140,    -1,   142,    -1,
+     138,    81,   140,    -1,    -1,    27,    58,   116,    76,    -1,
+      -1,   166,   139,   144,    35,   141,   150,    -1,   166,   139,
+     144,    -1,    -1,   169,   139,   144,    35,   143,   150,    -1,
+     169,   139,   144,    -1,    -1,   145,    -1,   146,    -1,   145,
+     146,    -1,    30,    58,    58,   147,    76,    76,    -1,   148,
+      -1,   147,    81,   148,    -1,    -1,   149,    -1,   149,    58,
+       3,    76,    -1,   149,    58,     3,    81,   102,    76,    -1,
+     149,    58,   101,    76,    -1,    98,    -1,     5,    -1,     6,
+      -1,     7,    -1,   108,    -1,    -1,    82,   151,   152,    78,
+      -1,     1,    -1,    -1,   153,   178,    -1,   154,    -1,   153,
+      81,   154,    -1,   158,    35,   156,    -1,   159,   156,    -1,
+      -1,    98,    38,   155,   156,    -1,   156,    -1,    -1,    82,
+     157,   152,    78,    -1,   108,    -1,     1,    -1,   159,    -1,
+     158,   159,    -1,    57,    98,    -1,    -1,    -1,   166,   161,
+     118,   162,   202,    -1,    -1,    -1,   169,   164,   118,   165,
+     202,    -1,   167,    -1,   169,    -1,    58,   167,    76,    -1,
+     167,    58,   237,    -1,   167,    59,   100,    83,    -1,   167,
+      59,    83,    -1,    50,   190,   167,    -1,   145,   125,   167,
+      -1,     4,    -1,    72,    -1,   168,    58,   237,    -1,   168,
+      59,   100,    83,    -1,   168,    59,    83,    -1,    50,   190,
+     168,    -1,   145,   125,   168,    -1,     4,    -1,   169,    58,
+     237,    -1,    58,   169,    76,    -1,    50,   190,   169,    -1,
+     169,    59,   100,    83,    -1,   169,    59,    83,    -1,   145,
+     125,   169,    -1,     3,    -1,    13,    -1,    13,   145,    -1,
+      14,    -1,    14,   145,    -1,    12,    -1,    12,   145,    -1,
+      -1,   170,    98,    82,   174,   180,    78,   144,    -1,   170,
+      82,   180,    78,   144,    -1,   170,    98,    -1,    -1,   171,
+      98,    82,   175,   180,    78,   144,    -1,   171,    82,   180,
+      78,   144,    -1,   171,    98,    -1,    -1,   172,    98,    82,
+     176,   185,   179,    78,   144,    -1,    -1,   172,    82,   177,
+     185,   179,    78,   144,    -1,   172,    98,    -1,    -1,    81,
+      -1,    -1,    81,    -1,   181,    -1,   181,   182,    -1,    -1,
+     181,   182,    77,    -1,   181,    77,    -1,    65,    58,    67,
+      76,    -1,   133,   124,   183,    -1,   133,    -1,   189,   124,
+     183,    -1,   189,    -1,     1,    -1,   242,   182,    -1,   184,
+      -1,   183,    81,   184,    -1,   207,   208,   166,   144,    -1,
+     207,   208,   166,    38,   108,   144,    -1,   207,   208,    38,
+     108,   144,    -1,   186,    -1,   185,    81,   186,    -1,     1,
+      -1,    98,    -1,    98,    35,   108,    -1,   133,   188,    -1,
+     189,   188,    -1,    -1,   191,    -1,     7,    -1,   189,     7,
+      -1,    -1,   190,     7,    -1,    58,   191,    76,    -1,    50,
+     190,   191,    -1,    50,   190,    -1,   191,    58,   230,    -1,
+     191,    59,   100,    83,    -1,   191,    59,    83,    -1,    58,
+     230,    -1,    59,   100,    83,    -1,    59,    83,    -1,   145,
+     125,   191,    -1,   193,    -1,   210,    -1,   193,   210,    -1,
+     193,   195,    -1,    -1,   192,    -1,     1,    77,    -1,    -1,
+      -1,   198,    -1,   199,    -1,   198,   199,    -1,    32,   241,
+      77,    -1,   202,    -1,     1,   202,    -1,    82,    -1,   201,
+      78,    -1,   201,   196,   197,   123,   194,    78,    -1,   201,
+     196,   197,     1,    78,    -1,   201,   196,   197,   192,    78,
+      -1,   204,   209,    -1,   204,     1,    -1,    15,    58,   100,
+      76,    -1,    -1,    18,   206,   209,    17,    -1,    -1,    -1,
+     207,   208,   212,    -1,   207,   208,   223,   209,    -1,   207,
+     208,   211,    -1,   212,    -1,   223,    -1,   202,    -1,   220,
+      -1,   100,    77,    -1,    -1,   203,    16,   213,   209,    -1,
+     203,    -1,   203,    16,     1,    -1,    -1,    -1,    17,   214,
+      58,   100,    76,   215,   209,    -1,   205,    58,   100,    76,
+      77,    -1,   205,     1,    -1,    -1,    -1,    -1,    19,    58,
+     225,    77,   216,   225,    77,   217,   225,    76,   218,   209,
+      -1,    -1,    20,    58,   100,    76,   219,   209,    -1,    23,
+      77,    -1,    24,    77,    -1,    25,    77,    -1,    25,   100,
+      77,    -1,    27,   224,    58,   100,    76,    77,    -1,    27,
+     224,    58,   100,    38,   226,    76,    77,    -1,    27,   224,
+      58,   100,    38,   226,    38,   226,    76,    77,    -1,    27,
+     224,    58,   100,    38,   226,    38,   226,    38,   229,    76,
+      77,    -1,    26,    98,    77,    -1,    26,    50,   100,    77,
+      -1,    77,    -1,   221,    -1,    -1,    19,    58,   114,    76,
+     222,   209,    -1,    21,   108,    38,    -1,    21,   108,    10,
+     108,    38,    -1,    22,    38,    -1,    98,    38,   144,    -1,
+      -1,     7,    -1,    -1,   100,    -1,    -1,   227,    -1,   228,
+      -1,   227,    81,   228,    -1,     9,    58,   100,    76,    -1,
+     116,    -1,   229,    81,   116,    -1,    -1,   231,   232,    -1,
+     234,    76,    -1,    -1,   235,    77,   233,   232,    -1,     1,
+      76,    -1,    -1,    10,    -1,   235,    -1,   235,    81,    10,
+      -1,   236,    -1,   235,    81,   236,    -1,   127,   124,   168,
+     144,    -1,   127,   124,   169,   144,    -1,   127,   124,   188,
+     144,    -1,   131,   124,   169,   144,    -1,   131,   124,   188,
+     144,    -1,    -1,   238,   239,    -1,   232,    -1,   240,    76,
+      -1,     3,    -1,   240,    81,     3,    -1,    98,    -1,   241,
+      81,    98,    -1,    31,    -1,   247,    -1,   245,    -1,   246,
+      -1,   257,    -1,   267,    -1,    63,    -1,    98,    -1,   244,
+      81,    98,    -1,    73,   244,    77,    -1,    74,    98,    98,
+      77,    -1,    -1,    -1,    61,    98,   259,    82,   248,   261,
+      78,   249,   274,    63,    -1,    -1,    61,    98,   259,   250,
+     274,    63,    -1,    -1,    -1,    61,    98,    38,    98,   259,
+      82,   251,   261,    78,   252,   274,    63,    -1,    -1,    61,
+      98,    38,    98,   259,   253,   274,    63,    -1,    -1,    62,
+      98,    82,   254,   261,    78,    -1,    62,    98,    -1,    -1,
+      62,    98,    38,    98,    82,   255,   261,    78,    -1,    62,
+      98,    38,    98,    -1,    -1,    61,    98,    58,    98,    76,
+     259,   256,   274,    63,    -1,    62,    98,    58,    98,    76,
+      -1,    -1,    71,    98,   259,   258,   274,    63,    -1,    -1,
+     260,    -1,    45,   244,    45,    -1,   261,   262,   263,    -1,
+     263,    -1,    69,    -1,    70,    -1,    68,    -1,    -1,   263,
+     264,    77,    -1,   263,    77,    -1,   133,   124,   265,    -1,
+     189,   124,   265,    -1,     1,    -1,    -1,   266,    -1,   265,
+      81,   266,    -1,   166,    -1,   166,    38,   108,    -1,    38,
+     108,    -1,    -1,    -1,    -1,    48,   268,   284,   269,   285,
+     270,   200,    -1,    -1,    -1,    -1,    49,   271,   284,   272,
+     285,   273,   200,    -1,    -1,    -1,   275,   276,    -1,   279,
+      -1,    90,    -1,   276,   279,    -1,    -1,   276,   277,    90,
+      -1,    77,    -1,     1,    -1,    -1,    -1,    48,   280,   284,
+     281,   278,    -1,    -1,    -1,    49,   282,   284,   283,   278,
+      -1,    58,   187,    76,   293,    -1,   293,    -1,    58,   187,
+      76,   294,   291,    -1,   294,   291,    -1,    -1,    77,   286,
+      -1,    -1,   287,    -1,   288,    -1,   195,    -1,   287,   288,
+      -1,   288,   195,    -1,   127,   124,   289,    77,    -1,   127,
+      77,    -1,   131,    77,    -1,   290,    -1,   289,    81,   290,
+      -1,   168,   144,    -1,   169,   144,    -1,   188,   144,    -1,
+      -1,    81,    10,    -1,    -1,    81,   292,   234,    -1,   295,
+      -1,   297,    -1,   294,   297,    -1,     3,    -1,     4,    -1,
+      72,    -1,   296,    -1,    12,    -1,    13,    -1,    14,    -1,
+      15,    -1,    16,    -1,    17,    -1,    18,    -1,    19,    -1,
+      20,    -1,    21,    -1,    22,    -1,    23,    -1,    24,    -1,
+      25,    -1,    26,    -1,    27,    -1,    11,    -1,    28,    -1,
+      29,    -1,     6,    -1,     7,    -1,   295,    38,    58,   187,
+      76,    98,    -1,   295,    38,    98,    -1,    38,    58,   187,
+      76,    98,    -1,    38,    98,    -1,   295,    -1,   299,    -1,
+     301,    -1,   299,   301,    -1,   102,    -1,   295,    38,   300,
+      -1,    38,   300,    -1,   100,    -1,    67,    -1,    -1,    -1,
+      59,   304,   302,   305,   298,    83,    -1,   295,    -1,   307,
+      -1,   308,    -1,   307,   308,    -1,   295,    38,    -1,    38,
+      -1,    64,    58,   306,    76,    -1,    71,    58,    98,    76,
+      -1,    66,    58,   187,    76,    -1
+};
 
-#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)
-
-static const char * const yytname[] = {   "$","error","$undefined.","IDENTIFIER",
-"TYPENAME","SCSPEC","TYPESPEC","TYPE_QUAL","CONSTANT","STRING","ELLIPSIS","SIZEOF",
-"ENUM","STRUCT","UNION","IF","ELSE","WHILE","DO","FOR","SWITCH","CASE","DEFAULT",
-"BREAK","CONTINUE","RETURN","GOTO","ASM_KEYWORD","TYPEOF","ALIGNOF","ATTRIBUTE",
-"EXTENSION","LABEL","REALPART","IMAGPART","ASSIGN","'='","'?'","':'","OROR",
-"ANDAND","'|'","'^'","'&'","EQCOMPARE","ARITHCOMPARE","LSHIFT","RSHIFT","'+'",
-"'-'","'*'","'/'","'%'","UNARY","PLUSPLUS","MINUSMINUS","HYPERUNARY","POINTSAT",
-"'.'","'('","'['","INTERFACE","IMPLEMENTATION","END","SELECTOR","DEFS","ENCODE",
-"CLASSNAME","PUBLIC","PRIVATE","PROTECTED","PROTOCOL","OBJECTNAME","CLASS","ALIAS",
-"OBJC_STRING","')'","';'","'}'","'~'","'!'","','","'{'","']'","program","extdefs",
-"@1","@2","extdef","datadef","fndef","@3","@4","@5","@6","@7","@8","identifier",
-"unop","expr","exprlist","nonnull_exprlist","unary_expr","sizeof","alignof",
-"cast_expr","@9","expr_no_commas","@10","@11","@12","@13","@14","primary","@15",
-"string","objc_string","old_style_parm_decls","lineno_datadecl","datadecls",
-"datadecl","lineno_decl","decls","setspecs","setattrs","decl","typed_declspecs",
-"reserved_declspecs","typed_declspecs_no_prefix_attr","reserved_declspecs_no_prefix_attr",
-"declmods","declmods_no_prefix_attr","typed_typespecs","reserved_typespecquals",
-"typespec","typespecqual_reserved","initdecls","notype_initdecls","maybeasm",
-"initdcl","@16","notype_initdcl","@17","maybe_attribute","attributes","attribute",
-"attribute_list","attrib","any_word","init","@18","initlist_maybe_comma","initlist1",
-"initelt","@19","initval","@20","designator_list","designator","nested_function",
-"@21","@22","notype_nested_function","@23","@24","declarator","after_type_declarator",
-"parm_declarator","notype_declarator","struct_head","union_head","enum_head",
-"structsp","@25","@26","@27","@28","maybecomma","maybecomma_warn","component_decl_list",
-"component_decl_list2","component_decl","components","component_declarator",
-"enumlist","enumerator","typename","absdcl","nonempty_type_quals","type_quals",
-"absdcl1","stmts","lineno_stmt_or_labels","xstmts","errstmt","pushlevel","maybe_label_decls",
-"label_decls","label_decl","compstmt_or_error","compstmt_start","compstmt","simple_if",
-"if_prefix","do_stmt_start","@29","save_filename","save_lineno","lineno_labeled_stmt",
-"lineno_stmt_or_label","stmt_or_label","stmt","@30","@31","@32","@33","@34",
-"@35","@36","all_iter_stmt","all_iter_stmt_simple","@37","label","maybe_type_qual",
-"xexpr","asm_operands","nonnull_asm_operands","asm_operand","asm_clobbers","parmlist",
-"@38","parmlist_1","@39","parmlist_2","parms","parm","parmlist_or_identifiers",
-"@40","parmlist_or_identifiers_1","identifiers","identifiers_or_typenames","extension",
-"objcdef","identifier_list","classdecl","aliasdecl","classdef","@41","@42","@43",
-"@44","@45","@46","@47","@48","@49","protocoldef","@50","protocolrefs","non_empty_protocolrefs",
-"ivar_decl_list","visibility_spec","ivar_decls","ivar_decl","ivars","ivar_declarator",
-"methoddef","@51","@52","@53","@54","@55","@56","methodprotolist","@57","methodprotolist2",
-"@58","semi_or_error","methodproto","@59","@60","@61","@62","methoddecl","optarglist",
-"myxdecls","mydecls","mydecl","myparms","myparm","optparmlist","@63","unaryselector",
-"keywordselector","selector","reservedwords","keyworddecl","messageargs","keywordarglist",
-"keywordexpr","keywordarg","receiver","objcmessageexpr","@64","@65","selectorarg",
-"keywordnamelist","keywordname","objcselectorexpr","objcprotocolexpr","objcencodeexpr", NULL
+/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
+static const yytype_uint16 yyrline[] =
+{
+       0,   234,   234,   238,   253,   253,   254,   254,   258,   259,
+     260,   261,   269,   274,   284,   289,   294,   296,   298,   299,
+     300,   307,   312,   306,   319,   325,   330,   324,   337,   343,
+     348,   342,   355,   363,   364,   365,   366,   369,   371,   373,
+     375,   377,   379,   381,   385,   391,   392,   396,   398,   403,
+     404,   407,   410,   414,   442,   448,   451,   454,   457,   459,
+     464,   468,   472,   473,   477,   476,   508,   509,   511,   513,
+     515,   517,   519,   521,   523,   525,   527,   529,   531,   534,
+     533,   540,   539,   546,   549,   545,   555,   554,   564,   572,
+     584,   743,   744,   746,   752,   755,   754,   791,   793,   795,
+     807,   821,   823,   825,   827,   829,   831,   833,   839,   840,
+     847,   848,   852,   854,   855,   866,   871,   872,   873,   874,
+     882,   887,   892,   895,   904,   909,   910,   911,   912,   920,
+     931,   935,   940,   945,   950,   955,   957,   959,   969,   971,
+     976,   977,   979,   984,   989,   991,   997,   998,  1000,  1013,
+    1015,  1017,  1019,  1024,  1027,  1029,  1032,  1046,  1048,  1053,
+    1054,  1062,  1063,  1064,  1068,  1070,  1075,  1077,  1079,  1085,
+    1086,  1087,  1091,  1092,  1096,  1097,  1102,  1103,  1111,  1110,
+    1118,  1127,  1126,  1135,  1144,  1145,  1150,  1152,  1157,  1162,
+    1164,  1170,  1171,  1173,  1175,  1177,  1185,  1186,  1187,  1188,
+    1194,  1196,  1195,  1208,  1215,  1217,  1221,  1222,  1228,  1229,
+    1231,  1230,  1233,  1238,  1237,  1241,  1243,  1247,  1248,  1252,
+    1261,  1270,  1260,  1284,  1293,  1283,  1309,  1310,  1316,  1318,
+    1323,  1325,  1327,  1334,  1336,  1337,  1346,  1351,  1353,  1355,
+    1362,  1364,  1371,  1376,  1378,  1380,  1382,  1389,  1391,  1395,
+    1397,  1402,  1404,  1409,  1411,  1417,  1416,  1422,  1426,  1429,
+    1428,  1432,  1436,  1439,  1438,  1445,  1444,  1450,  1454,  1456,
+    1459,  1461,  1467,  1469,  1475,  1476,  1478,  1482,  1507,  1513,
+    1518,  1524,  1529,  1531,  1537,  1538,  1543,  1546,  1550,  1561,
+    1562,  1567,  1573,  1575,  1580,  1582,  1588,  1589,  1593,  1595,
+    1601,  1602,  1607,  1610,  1612,  1614,  1616,  1618,  1620,  1622,
+    1624,  1628,  1637,  1645,  1646,  1648,  1652,  1654,  1657,  1661,
+    1673,  1675,  1681,  1682,  1686,  1700,  1702,  1705,  1707,  1709,
+    1717,  1725,  1737,  1741,  1745,  1760,  1759,  1772,  1776,  1780,
+    1785,  1790,  1795,  1797,  1803,  1805,  1806,  1824,  1823,  1831,
+    1843,  1846,  1856,  1845,  1866,  1874,  1879,  1891,  1894,  1877,
+    1921,  1920,  1934,  1939,  1944,  1948,  1952,  1963,  1970,  1977,
+    1984,  1995,  2001,  2005,  2011,  2010,  2066,  2097,  2128,  2143,
+    2159,  2161,  2167,  2168,  2174,  2175,  2179,  2180,  2185,  2190,
+    2192,  2199,  2199,  2209,  2211,  2210,  2220,  2227,  2228,  2238,
+    2240,  2245,  2247,  2254,  2263,  2272,  2281,  2291,  2306,  2306,
+    2316,  2317,  2327,  2329,  2335,  2337,  2342,  2350,  2351,  2352,
+    2353,  2354,  2355,  2370,  2372,  2377,  2383,  2390,  2396,  2389,
+    2407,  2406,  2420,  2426,  2419,  2437,  2436,  2450,  2449,  2461,
+    2470,  2469,  2481,  2490,  2489,  2502,  2513,  2512,  2528,  2531,
+    2535,  2545,  2546,  2550,  2551,  2552,  2557,  2560,  2561,  2579,
+    2585,  2591,  2597,  2598,  2599,  2603,  2610,  2616,  2627,  2635,
+    2642,  2626,  2652,  2660,  2667,  2651,  2681,  2683,  2683,  2687,
+    2688,  2689,  2690,  2690,  2694,  2695,  2700,  2706,  2699,  2714,
+    2720,  2713,  2729,  2734,  2739,  2744,  2753,  2755,  2761,  2763,
+    2767,  2768,  2769,  2770,  2774,  2779,  2781,  2786,  2788,  2796,
+    2801,  2806,  2815,  2818,  2824,  2823,  2836,  2840,  2842,  2849,
+    2850,  2851,  2852,  2856,  2857,  2858,  2859,  2860,  2861,  2862,
+    2863,  2864,  2865,  2866,  2867,  2868,  2869,  2870,  2871,  2872,
+    2873,  2874,  2875,  2875,  2879,  2884,  2889,  2894,  2901,  2902,
+    2906,  2907,  2915,  2927,  2931,  2938,  2939,  2947,  2949,  2946,
+    2957,  2958,  2962,  2963,  2970,  2974,  2981,  2988,  2997
 };
 #endif
 
-static const short yyr1[] = {     0,
-    84,    84,    86,    85,    87,    85,    88,    88,    88,    88,
-    88,    89,    89,    89,    89,    89,    89,    89,    89,    91,
-    92,    90,    90,    93,    94,    90,    90,    95,    96,    90,
-    90,    97,    97,    97,    97,    98,    98,    98,    98,    98,
-    98,    98,    99,   100,   100,   101,   101,   102,   102,   102,
-   102,   102,   102,   102,   102,   102,   102,   102,   103,   104,
-   105,   105,   106,   105,   107,   107,   107,   107,   107,   107,
-   107,   107,   107,   107,   107,   107,   107,   108,   107,   109,
-   107,   110,   111,   107,   112,   107,   107,   107,   113,   113,
-   113,   113,   113,   114,   113,   113,   113,   113,   113,   113,
-   113,   113,   113,   113,   113,   113,   115,   115,   116,   116,
-   117,   117,   117,   118,   119,   119,   119,   119,   120,   120,
-   120,   120,   121,   122,   122,   122,   122,   123,   124,   125,
-   125,   125,   125,   125,   125,   125,   126,   126,   127,   127,
-   127,   127,   128,   128,   129,   129,   129,   130,   130,   130,
-   130,   131,   131,   131,   131,   132,   132,   133,   133,   134,
-   134,   134,   134,   134,   134,   134,   134,   135,   135,   135,
-   136,   136,   137,   137,   138,   138,   140,   139,   139,   142,
-   141,   141,   143,   143,   144,   144,   145,   146,   146,   147,
-   147,   147,   147,   147,   148,   148,   148,   148,   149,   150,
-   149,   149,   151,   151,   152,   152,   153,   153,   154,   153,
-   153,   156,   155,   155,   155,   157,   157,   158,   160,   161,
-   159,   163,   164,   162,   165,   165,   166,   166,   166,   166,
-   166,   166,   166,   166,   167,   167,   167,   167,   167,   167,
-   168,   168,   168,   168,   168,   168,   168,   169,   169,   170,
-   170,   171,   171,   173,   172,   172,   172,   174,   172,   172,
-   172,   175,   172,   176,   172,   172,   177,   177,   178,   178,
-   179,   179,   180,   180,   180,   180,   181,   181,   181,   181,
-   181,   181,   182,   182,   183,   183,   183,   184,   184,   184,
-   185,   185,   186,   186,   187,   187,   188,   188,   189,   189,
-   190,   190,   190,   190,   190,   190,   190,   190,   190,   190,
-   191,   192,   192,   192,   193,   193,   194,   195,   196,   196,
-   197,   197,   198,   199,   199,   200,   201,   201,   201,   201,
-   202,   202,   203,   205,   204,   206,   207,   208,   208,   209,
-   210,   210,   211,   211,   211,   212,   211,   211,   211,   213,
-   214,   211,   211,   211,   215,   216,   217,   211,   218,   211,
-   211,   211,   211,   211,   211,   211,   211,   211,   211,   211,
-   211,   219,   221,   220,   222,   222,   222,   222,   223,   223,
-   224,   224,   225,   225,   226,   226,   227,   228,   228,   230,
-   229,   231,   232,   231,   231,   233,   233,   233,   233,   234,
-   234,   235,   235,   235,   235,   235,   237,   236,   238,   238,
-   239,   239,   240,   240,   241,   242,   242,   242,   242,   242,
-   242,   243,   243,   244,   245,   247,   248,   246,   249,   246,
-   250,   251,   246,   252,   246,   253,   246,   246,   254,   246,
-   246,   255,   246,   246,   257,   256,   258,   258,   259,   260,
-   260,   261,   261,   261,   262,   262,   262,   263,   263,   263,
-   264,   264,   264,   265,   265,   265,   267,   268,   269,   266,
-   270,   271,   272,   266,   273,   274,   273,   275,   275,   275,
-   276,   275,   277,   277,   279,   280,   278,   281,   282,   278,
-   283,   283,   283,   283,   284,   284,   285,   285,   286,   286,
-   286,   286,   287,   287,   287,   288,   288,   289,   289,   289,
-   290,   290,   291,   290,   292,   293,   293,   294,   294,   294,
-   294,   295,   295,   295,   295,   295,   295,   295,   295,   295,
-   295,   295,   295,   295,   295,   295,   295,   295,   295,   295,
-   295,   295,   296,   296,   296,   296,   297,   297,   298,   298,
-   299,   300,   300,   301,   301,   303,   304,   302,   305,   305,
-   306,   306,   307,   307,   308,   309,   310
+#if YYDEBUG || YYERROR_VERBOSE || 0
+/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
+   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
+static const char *const yytname[] =
+{
+  "$end", "error", "$undefined", "IDENTIFIER", "TYPENAME", "SCSPEC",
+  "TYPESPEC", "TYPE_QUAL", "CONSTANT", "STRING", "ELLIPSIS", "SIZEOF",
+  "ENUM", "STRUCT", "UNION", "IF", "ELSE", "WHILE", "DO", "FOR", "SWITCH",
+  "CASE", "DEFAULT", "BREAK", "CONTINUE", "RETURN_KEYWORD", "GOTO",
+  "ASM_KEYWORD", "TYPEOF", "ALIGNOF", "ATTRIBUTE", "EXTENSION", "LABEL",
+  "REALPART", "IMAGPART", "'='", "ASSIGN", "'?'", "':'", "OROR", "ANDAND",
+  "'|'", "'^'", "'&'", "EQCOMPARE", "ARITHCOMPARE", "RSHIFT", "LSHIFT",
+  "'+'", "'-'", "'*'", "'/'", "'%'", "MINUSMINUS", "PLUSPLUS", "UNARY",
+  "HYPERUNARY", "'.'", "'('", "'['", "POINTSAT", "INTERFACE",
+  "IMPLEMENTATION", "END", "SELECTOR", "DEFS", "ENCODE", "CLASSNAME",
+  "PUBLIC", "PRIVATE", "PROTECTED", "PROTOCOL", "OBJECTNAME", "CLASS",
+  "ALIAS", "OBJC_STRING", "')'", "';'", "'}'", "'~'", "'!'", "','", "'{'",
+  "']'", "$accept", "program", "extdefs", "@1", "@2", "extdef", "datadef",
+  "fndef", "$@3", "$@4", "$@5", "$@6", "$@7", "$@8", "identifier", "unop",
+  "expr", "exprlist", "nonnull_exprlist", "unary_expr", "sizeof",
+  "alignof", "cast_expr", "$@9", "expr_no_commas", "$@10", "$@11", "$@12",
+  "$@13", "$@14", "primary", "@15", "string", "objc_string",
+  "old_style_parm_decls", "lineno_datadecl", "datadecls", "datadecl",
+  "lineno_decl", "decls", "setspecs", "setattrs", "decl",
+  "typed_declspecs", "reserved_declspecs",
+  "typed_declspecs_no_prefix_attr", "reserved_declspecs_no_prefix_attr",
+  "declmods", "declmods_no_prefix_attr", "typed_typespecs",
+  "reserved_typespecquals", "typespec", "typespecqual_reserved",
+  "initdecls", "notype_initdecls", "maybeasm", "initdcl", "@16",
+  "notype_initdcl", "@17", "maybe_attribute", "attributes", "attribute",
+  "attribute_list", "attrib", "any_word", "init", "$@18",
+  "initlist_maybe_comma", "initlist1", "initelt", "$@19", "initval",
+  "$@20", "designator_list", "designator", "nested_function", "$@21",
+  "$@22", "notype_nested_function", "$@23", "$@24", "declarator",
+  "after_type_declarator", "parm_declarator", "notype_declarator",
+  "struct_head", "union_head", "enum_head", "structsp", "@25", "@26",
+  "@27", "@28", "maybecomma", "maybecomma_warn", "component_decl_list",
+  "component_decl_list2", "component_decl", "components",
+  "component_declarator", "enumlist", "enumerator", "typename", "absdcl",
+  "nonempty_type_quals", "type_quals", "absdcl1", "stmts",
+  "lineno_stmt_or_labels", "xstmts", "errstmt", "pushlevel",
+  "maybe_label_decls", "label_decls", "label_decl", "compstmt_or_error",
+  "compstmt_start", "compstmt", "simple_if", "if_prefix", "do_stmt_start",
+  "$@29", "save_filename", "save_lineno", "lineno_labeled_stmt",
+  "lineno_stmt_or_label", "stmt_or_label", "stmt", "$@30", "$@31", "$@32",
+  "$@33", "@34", "$@35", "$@36", "all_iter_stmt", "all_iter_stmt_simple",
+  "@37", "label", "maybe_type_qual", "xexpr", "asm_operands",
+  "nonnull_asm_operands", "asm_operand", "asm_clobbers", "parmlist",
+  "$@38", "parmlist_1", "$@39", "parmlist_2", "parms", "parm",
+  "parmlist_or_identifiers", "$@40", "parmlist_or_identifiers_1",
+  "identifiers", "identifiers_or_typenames", "extension", "objcdef",
+  "identifier_list", "classdecl", "aliasdecl", "classdef", "$@41", "$@42",
+  "$@43", "$@44", "$@45", "$@46", "$@47", "$@48", "$@49", "protocoldef",
+  "$@50", "protocolrefs", "non_empty_protocolrefs", "ivar_decl_list",
+  "visibility_spec", "ivar_decls", "ivar_decl", "ivars", "ivar_declarator",
+  "methoddef", "$@51", "$@52", "$@53", "$@54", "$@55", "$@56",
+  "methodprotolist", "@57", "methodprotolist2", "@58", "semi_or_error",
+  "methodproto", "$@59", "$@60", "$@61", "$@62", "methoddecl",
+  "optarglist", "myxdecls", "mydecls", "mydecl", "myparms", "myparm",
+  "optparmlist", "$@63", "unaryselector", "keywordselector", "selector",
+  "reservedwords", "keyworddecl", "messageargs", "keywordarglist",
+  "keywordexpr", "keywordarg", "receiver", "objcmessageexpr", "$@64",
+  "$@65", "selectorarg", "keywordnamelist", "keywordname",
+  "objcselectorexpr", "objcprotocolexpr", "objcencodeexpr", YY_NULL
 };
+#endif
 
-static const short yyr2[] = {     0,
-     0,     1,     0,     2,     0,     3,     1,     1,     1,     5,
-     2,     3,     4,     4,     2,     2,     2,     2,     1,     0,
-     0,     7,     4,     0,     0,     7,     4,     0,     0,     6,
-     3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
-     1,     1,     1,     0,     1,     1,     3,     1,     2,     2,
-     2,     2,     2,     4,     2,     4,     2,     2,     1,     1,
-     1,     4,     0,     7,     1,     3,     3,     3,     3,     3,
-     3,     3,     3,     3,     3,     3,     3,     0,     4,     0,
-     4,     0,     0,     7,     0,     5,     3,     3,     1,     1,
-     1,     3,     3,     0,     4,     4,     4,     3,     3,     2,
-     2,     1,     1,     1,     1,     1,     1,     2,     1,     2,
-     0,     1,     2,     3,     1,     1,     2,     2,     4,     4,
-     2,     2,     3,     1,     1,     2,     2,     0,     0,     4,
-     4,     3,     3,     2,     2,     2,     2,     3,     0,     2,
-     2,     2,     2,     3,     0,     2,     2,     1,     1,     2,
-     2,     1,     1,     2,     2,     2,     3,     0,     2,     1,
-     1,     1,     2,     2,     1,     4,     4,     1,     1,     1,
-     1,     3,     1,     3,     0,     4,     0,     6,     3,     0,
-     6,     3,     0,     1,     1,     2,     6,     1,     3,     0,
-     1,     4,     6,     4,     1,     1,     1,     1,     1,     0,
-     4,     1,     0,     2,     1,     3,     3,     2,     0,     4,
-     1,     0,     4,     1,     1,     1,     2,     2,     0,     0,
-     5,     0,     0,     5,     1,     1,     3,     3,     4,     3,
-     3,     3,     1,     1,     3,     4,     3,     3,     3,     1,
-     3,     3,     3,     4,     3,     3,     1,     1,     2,     1,
-     2,     1,     2,     0,     7,     5,     2,     0,     7,     5,
-     2,     0,     8,     0,     7,     2,     0,     1,     0,     1,
-     1,     2,     0,     3,     2,     4,     3,     1,     3,     1,
-     1,     2,     1,     3,     4,     6,     5,     1,     3,     1,
-     1,     3,     2,     2,     0,     1,     1,     2,     0,     2,
-     3,     3,     2,     3,     4,     3,     2,     3,     2,     3,
-     1,     1,     2,     2,     0,     1,     2,     0,     0,     1,
-     1,     2,     3,     1,     2,     1,     2,     6,     5,     5,
-     2,     2,     4,     0,     4,     0,     0,     3,     4,     3,
-     1,     1,     1,     1,     2,     0,     4,     1,     3,     0,
-     0,     7,     5,     2,     0,     0,     0,    12,     0,     6,
-     2,     2,     2,     3,     6,     8,    10,    12,     3,     4,
-     1,     1,     0,     6,     3,     5,     2,     3,     0,     1,
-     0,     1,     0,     1,     1,     3,     4,     1,     3,     0,
-     2,     2,     0,     4,     2,     0,     1,     1,     3,     1,
-     3,     4,     4,     4,     4,     4,     0,     2,     1,     2,
-     1,     3,     1,     3,     1,     1,     1,     1,     1,     1,
-     1,     1,     3,     3,     4,     0,     0,    10,     0,     6,
-     0,     0,    12,     0,     8,     0,     6,     2,     0,     8,
-     4,     0,     9,     5,     0,     6,     0,     1,     3,     3,
-     1,     1,     1,     1,     0,     3,     2,     3,     3,     1,
-     0,     1,     3,     1,     3,     2,     0,     0,     0,     7,
-     0,     0,     0,     7,     0,     0,     2,     1,     1,     2,
-     0,     3,     1,     1,     0,     0,     5,     0,     0,     5,
-     4,     1,     5,     2,     0,     2,     0,     1,     1,     1,
-     2,     2,     4,     2,     2,     1,     3,     2,     2,     2,
-     0,     2,     0,     3,     1,     1,     2,     1,     1,     1,
-     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
-     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
-     1,     1,     6,     3,     5,     2,     1,     1,     1,     2,
-     1,     3,     2,     1,     1,     0,     0,     6,     1,     1,
-     1,     2,     2,     1,     4,     4,     4
+# ifdef YYPRINT
+/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
+   token YYLEX-NUM.  */
+static const yytype_uint16 yytoknum[] =
+{
+       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
+     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
+     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
+     285,   286,   287,   288,   289,    61,   290,    63,    58,   291,
+     292,   124,    94,    38,   293,   294,   295,   296,    43,    45,
+      42,    47,    37,   297,   298,   299,   300,    46,    40,    91,
+     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
+     311,   312,   313,   314,   315,   316,    41,    59,   125,   126,
+      33,    44,   123,    93
 };
+# endif
 
-static const short yydefact[] = {     3,
-     5,     0,     0,     0,   162,   153,   160,   152,   252,   248,
-   250,     0,     0,     0,   415,     0,   467,   471,     0,     0,
-   421,   447,     0,   447,     0,     0,    19,     4,     8,     7,
-     0,   128,   128,   148,   139,   149,   185,     0,     0,     0,
-   161,     0,     9,   417,   418,   416,   419,   165,   420,     6,
-    17,    18,   253,   249,   251,     0,     0,     0,    32,    33,
-    35,    34,   422,     0,     0,     0,   447,   438,   163,   448,
-   447,   164,     0,     0,   247,   299,     0,     0,   173,   129,
-     0,    16,     0,    15,     0,   150,   139,   151,   155,   154,
-   137,   186,   273,   257,   273,   261,   264,   266,    11,    89,
-    90,   107,    59,    60,     0,     0,     0,    36,    38,    37,
-     0,    39,    40,     0,   556,     0,     0,     0,   109,    41,
-    42,     0,     0,    43,    61,     0,     0,    65,    46,    48,
-    91,   106,     0,   102,   103,   104,   105,   297,     0,   295,
-   158,     0,   295,   190,   449,     0,   518,   519,   541,   542,
-   538,   522,   523,   524,   525,   526,   527,   528,   529,   530,
-   531,   532,   533,   534,   535,   536,   537,   539,   540,     0,
-     0,   520,   468,   492,   511,   515,   521,   516,   472,     0,
-     0,   429,     0,     0,   436,   445,   424,     0,     0,     0,
-    12,     0,     0,    31,     0,   407,     0,     0,   183,   233,
-   299,     0,   234,     0,   171,   129,     0,   225,   226,     0,
-     0,   138,   141,   168,   169,   140,   142,   170,     0,     0,
-     0,   254,     0,   258,     0,   262,    57,    58,    52,    49,
-     0,     0,     0,     0,     0,     0,     0,     0,    51,     0,
-     0,     0,    53,     0,    55,     0,     0,    82,    80,    78,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,   100,   101,     0,     0,    44,     0,   108,   110,
-    50,   166,   299,   390,     0,   129,   293,   296,   156,   167,
-   298,   158,   294,   196,   197,   198,   195,     0,   188,   191,
-   423,     0,   546,     0,   495,   513,   494,     0,   517,     0,
-   495,   447,     0,   426,   476,   441,     0,   455,   476,   425,
-   300,   243,   242,   174,   175,   246,     0,   241,     0,   245,
-     0,     0,    29,     0,   336,   116,   337,   182,   184,     0,
-     0,    14,     0,     0,    23,     0,   183,   407,     0,    13,
-    27,     0,     0,   183,   281,   275,   128,   272,   128,     0,
-   273,   183,   273,   290,   291,   269,   288,     0,    93,    92,
-   326,   318,     0,     0,   555,   554,   557,   564,   559,     0,
-   560,   561,     0,     0,    10,    47,     0,     0,    88,    87,
-     0,     0,     0,     0,    76,    77,    75,    74,    73,    71,
-    72,    66,    67,    68,    69,    70,    99,    98,     0,    45,
-     0,   303,     0,   307,     0,   309,     0,     0,   390,     0,
-   159,   157,     0,   190,    44,     0,     0,     0,   469,   512,
-   396,     0,   544,   473,   434,   447,   455,     0,     0,   439,
-   444,     0,     0,     0,     0,     0,   411,   397,   128,   128,
-   409,     0,   398,   400,   408,     0,   244,   317,     0,   118,
-   113,   117,     0,   180,   231,   227,   172,   232,    21,   179,
-   228,   230,     0,    25,     0,   256,   336,   274,   336,   282,
-     0,   260,     0,     0,   270,     0,   269,   327,   319,    95,
-    63,    62,     0,   563,   565,     0,   562,   567,   566,    54,
-    56,     0,     0,    81,    79,    96,    97,   302,   301,   391,
-   308,   310,   304,   306,     0,   187,   189,    89,     0,     0,
-   491,   511,   128,     0,   500,   496,   498,     0,     0,   514,
-   398,     0,     0,   431,   476,   442,     0,   430,   485,   488,
-   479,     0,   128,   128,   481,   478,   455,   454,   452,   453,
-   437,   455,   460,   457,   128,   128,     0,   446,   176,   395,
-   295,   295,   392,   393,     0,   410,     0,     0,    30,   324,
-   114,   128,   128,   145,     0,     0,   177,   229,     0,   276,
-   277,   283,   337,   279,   183,   183,   292,   289,   183,     0,
-     0,     0,   320,   321,     0,     0,   547,     0,   548,   549,
-    83,    86,   305,   192,     0,   194,   545,   493,   504,   295,
-   505,   501,   502,   470,     0,   474,   455,     0,   476,   427,
-     0,     0,   175,     0,     0,     0,   480,     0,     0,   461,
-   461,   456,   240,   299,   390,   129,   183,   183,   183,   299,
-   129,   183,   183,     0,   399,   401,   412,   325,   121,     0,
-   122,     0,   145,   143,   202,   200,   199,   181,    22,     0,
-    26,   336,     0,   255,   259,   265,   183,   413,     0,     0,
-     0,   336,     0,     0,   125,   337,   312,   322,   215,    89,
-     0,   212,     0,   214,     0,   267,   205,   211,     0,     0,
-   551,   553,     0,   558,     0,   550,     0,     0,   183,   183,
-   183,     0,   506,   543,     0,   435,     0,   476,   486,   489,
-   482,   440,     0,   464,   458,   462,   459,   303,     0,   407,
-     0,   402,   403,   404,   303,     0,   405,   406,   394,     0,
-     0,   144,   147,   146,     0,   178,   284,     0,   183,   263,
-   323,     0,   329,   127,   126,   316,     0,   330,   314,   337,
-   313,     0,   218,     0,   209,    64,     0,   204,     0,   217,
-   208,   552,    84,   193,   508,   509,   510,   503,   295,   432,
-   443,     0,     0,     0,   466,     0,     0,   238,   239,   235,
-   237,     0,   119,   120,     0,   183,     0,   285,   414,   328,
-     0,   162,     0,   350,   334,     0,     0,     0,     0,     0,
-     0,     0,     0,   379,   447,   447,   371,     0,     0,   123,
-   128,   128,   343,   348,     0,     0,   340,   341,   344,   372,
-   342,     0,     0,     0,   206,   207,   507,   476,   428,   484,
-   483,   487,   490,   465,   463,   236,   201,   287,   183,     0,
-     0,   336,   381,     0,     0,   377,   361,   362,   363,     0,
-     0,     0,   380,     0,   183,   345,   134,     0,   135,     0,
-     0,   332,   337,   331,   354,     0,   136,   213,   210,     0,
-   286,     0,     0,     0,   382,    48,     0,     0,     0,   375,
-   364,     0,   369,     0,   378,     0,   132,   219,     0,   133,
-   222,   349,   336,     0,     0,   433,   333,     0,   335,   373,
-   355,   359,     0,   370,     0,   130,     0,   131,     0,   347,
-   338,   336,     0,   351,   336,   381,   336,   376,   383,     0,
-   220,   223,   339,   353,   336,   374,     0,   360,     0,     0,
-   384,   385,   365,     0,     0,   352,   356,     0,   383,     0,
-     0,   221,   224,   381,     0,     0,   366,   386,     0,   387,
-     0,     0,   357,   388,     0,   367,   336,     0,     0,   358,
-   368,   389,     0,     0,     0
+/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
+static const yytype_uint16 yyr1[] =
+{
+       0,    84,    85,    85,    87,    86,    88,    86,    89,    89,
+      89,    89,    89,    90,    90,    90,    90,    90,    90,    90,
+      90,    92,    93,    91,    91,    94,    95,    91,    91,    96,
+      97,    91,    91,    98,    98,    98,    98,    99,    99,    99,
+      99,    99,    99,    99,   100,   101,   101,   102,   102,   103,
+     103,   103,   103,   103,   103,   103,   103,   103,   103,   103,
+     104,   105,   106,   106,   107,   106,   108,   108,   108,   108,
+     108,   108,   108,   108,   108,   108,   108,   108,   108,   109,
+     108,   110,   108,   111,   112,   108,   113,   108,   108,   108,
+     114,   114,   114,   114,   114,   115,   114,   114,   114,   114,
+     114,   114,   114,   114,   114,   114,   114,   114,   116,   116,
+     117,   117,   118,   118,   118,   119,   120,   120,   120,   120,
+     121,   121,   121,   121,   122,   123,   123,   123,   123,   124,
+     125,   126,   126,   126,   126,   126,   126,   126,   127,   127,
+     128,   128,   128,   128,   129,   129,   130,   130,   130,   131,
+     131,   131,   131,   132,   132,   132,   132,   133,   133,   134,
+     134,   135,   135,   135,   135,   135,   135,   135,   135,   136,
+     136,   136,   137,   137,   138,   138,   139,   139,   141,   140,
+     140,   143,   142,   142,   144,   144,   145,   145,   146,   147,
+     147,   148,   148,   148,   148,   148,   149,   149,   149,   149,
+     150,   151,   150,   150,   152,   152,   153,   153,   154,   154,
+     155,   154,   154,   157,   156,   156,   156,   158,   158,   159,
+     161,   162,   160,   164,   165,   163,   166,   166,   167,   167,
+     167,   167,   167,   167,   167,   167,   168,   168,   168,   168,
+     168,   168,   169,   169,   169,   169,   169,   169,   169,   170,
+     170,   171,   171,   172,   172,   174,   173,   173,   173,   175,
+     173,   173,   173,   176,   173,   177,   173,   173,   178,   178,
+     179,   179,   180,   180,   181,   181,   181,   181,   182,   182,
+     182,   182,   182,   182,   183,   183,   184,   184,   184,   185,
+     185,   185,   186,   186,   187,   187,   188,   188,   189,   189,
+     190,   190,   191,   191,   191,   191,   191,   191,   191,   191,
+     191,   191,   192,   193,   193,   193,   194,   194,   195,   196,
+     197,   197,   198,   198,   199,   200,   200,   201,   202,   202,
+     202,   202,   203,   203,   204,   206,   205,   207,   208,   209,
+     209,   210,   211,   211,   212,   212,   212,   213,   212,   212,
+     212,   214,   215,   212,   212,   212,   216,   217,   218,   212,
+     219,   212,   212,   212,   212,   212,   212,   212,   212,   212,
+     212,   212,   212,   220,   222,   221,   223,   223,   223,   223,
+     224,   224,   225,   225,   226,   226,   227,   227,   228,   229,
+     229,   231,   230,   232,   233,   232,   232,   234,   234,   234,
+     234,   235,   235,   236,   236,   236,   236,   236,   238,   237,
+     239,   239,   240,   240,   241,   241,   242,   243,   243,   243,
+     243,   243,   243,   244,   244,   245,   246,   248,   249,   247,
+     250,   247,   251,   252,   247,   253,   247,   254,   247,   247,
+     255,   247,   247,   256,   247,   247,   258,   257,   259,   259,
+     260,   261,   261,   262,   262,   262,   263,   263,   263,   264,
+     264,   264,   265,   265,   265,   266,   266,   266,   268,   269,
+     270,   267,   271,   272,   273,   267,   274,   275,   274,   276,
+     276,   276,   277,   276,   278,   278,   280,   281,   279,   282,
+     283,   279,   284,   284,   284,   284,   285,   285,   286,   286,
+     287,   287,   287,   287,   288,   288,   288,   289,   289,   290,
+     290,   290,   291,   291,   292,   291,   293,   294,   294,   295,
+     295,   295,   295,   296,   296,   296,   296,   296,   296,   296,
+     296,   296,   296,   296,   296,   296,   296,   296,   296,   296,
+     296,   296,   296,   296,   297,   297,   297,   297,   298,   298,
+     299,   299,   300,   301,   301,   302,   302,   304,   305,   303,
+     306,   306,   307,   307,   308,   308,   309,   310,   311
 };
 
-static const short yydefgoto[] = {   953,
-     1,     2,     3,    28,    29,    30,   336,   566,   342,   569,
-   198,   449,   673,   122,   232,   399,   124,   125,   126,   127,
-   128,   585,   129,   384,   383,   381,   687,   382,   130,   233,
-   131,   132,   323,   324,   325,   561,   661,   662,    31,   193,
-   800,   439,    91,   562,   644,   440,    34,   140,   279,    35,
-   216,   204,    78,   199,   205,   650,    79,   565,   328,   329,
-    37,   288,   289,   290,   648,   725,   675,   676,   677,   814,
-   678,   744,   679,   680,   877,   897,   924,   880,   899,   925,
-   315,   208,   689,   209,    38,    39,    40,    41,   351,   353,
-   358,   225,   748,   476,   220,   221,   348,   571,   572,   356,
-   357,   142,   691,   143,   189,   278,   663,   664,   737,   326,
-   479,   582,   583,   584,   559,   362,   560,   804,   805,   806,
-   832,   853,   453,   854,   667,   807,   808,   883,   831,   915,
-   906,   934,   947,   907,   809,   810,   905,   811,   844,   867,
-   920,   921,   922,   945,   404,   405,   441,   634,   442,   443,
-   444,   318,   319,   445,   446,   659,   133,    43,    64,    44,
-    45,    46,   427,   698,   305,   607,   818,   525,   308,   537,
-   609,    47,   309,    69,    48,   432,   542,   433,   547,   705,
-   706,    49,    65,   295,   519,    66,   301,   523,   428,   429,
-   535,   616,   822,   536,   611,   763,   612,   764,   173,   419,
-   516,   517,   518,   692,   693,   297,   421,   174,   175,   176,
-   177,   178,   588,   589,   682,   590,   367,   134,   235,   483,
-   370,   371,   372,   135,   136,   137
+/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
+static const yytype_uint8 yyr2[] =
+{
+       0,     2,     0,     1,     0,     2,     0,     3,     1,     1,
+       1,     5,     2,     3,     4,     4,     2,     2,     2,     2,
+       1,     0,     0,     7,     4,     0,     0,     7,     4,     0,
+       0,     6,     3,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     0,     1,     1,     3,     1,
+       2,     2,     2,     2,     2,     4,     2,     4,     2,     2,
+       1,     1,     1,     4,     0,     7,     1,     3,     3,     3,
+       3,     3,     3,     3,     3,     3,     3,     3,     3,     0,
+       4,     0,     4,     0,     0,     7,     0,     5,     3,     3,
+       1,     1,     1,     3,     3,     0,     4,     4,     4,     3,
+       3,     2,     2,     1,     1,     1,     1,     1,     1,     2,
+       1,     2,     0,     1,     2,     3,     1,     1,     2,     2,
+       4,     4,     2,     2,     3,     1,     1,     2,     2,     0,
+       0,     4,     4,     3,     3,     2,     2,     2,     2,     3,
+       0,     2,     2,     2,     2,     3,     0,     2,     2,     1,
+       1,     2,     2,     1,     1,     2,     2,     2,     3,     0,
+       2,     1,     1,     1,     2,     2,     1,     4,     4,     1,
+       1,     1,     1,     3,     1,     3,     0,     4,     0,     6,
+       3,     0,     6,     3,     0,     1,     1,     2,     6,     1,
+       3,     0,     1,     4,     6,     4,     1,     1,     1,     1,
+       1,     0,     4,     1,     0,     2,     1,     3,     3,     2,
+       0,     4,     1,     0,     4,     1,     1,     1,     2,     2,
+       0,     0,     5,     0,     0,     5,     1,     1,     3,     3,
+       4,     3,     3,     3,     1,     1,     3,     4,     3,     3,
+       3,     1,     3,     3,     3,     4,     3,     3,     1,     1,
+       2,     1,     2,     1,     2,     0,     7,     5,     2,     0,
+       7,     5,     2,     0,     8,     0,     7,     2,     0,     1,
+       0,     1,     1,     2,     0,     3,     2,     4,     3,     1,
+       3,     1,     1,     2,     1,     3,     4,     6,     5,     1,
+       3,     1,     1,     3,     2,     2,     0,     1,     1,     2,
+       0,     2,     3,     3,     2,     3,     4,     3,     2,     3,
+       2,     3,     1,     1,     2,     2,     0,     1,     2,     0,
+       0,     1,     1,     2,     3,     1,     2,     1,     2,     6,
+       5,     5,     2,     2,     4,     0,     4,     0,     0,     3,
+       4,     3,     1,     1,     1,     1,     2,     0,     4,     1,
+       3,     0,     0,     7,     5,     2,     0,     0,     0,    12,
+       0,     6,     2,     2,     2,     3,     6,     8,    10,    12,
+       3,     4,     1,     1,     0,     6,     3,     5,     2,     3,
+       0,     1,     0,     1,     0,     1,     1,     3,     4,     1,
+       3,     0,     2,     2,     0,     4,     2,     0,     1,     1,
+       3,     1,     3,     4,     4,     4,     4,     4,     0,     2,
+       1,     2,     1,     3,     1,     3,     1,     1,     1,     1,
+       1,     1,     1,     1,     3,     3,     4,     0,     0,    10,
+       0,     6,     0,     0,    12,     0,     8,     0,     6,     2,
+       0,     8,     4,     0,     9,     5,     0,     6,     0,     1,
+       3,     3,     1,     1,     1,     1,     0,     3,     2,     3,
+       3,     1,     0,     1,     3,     1,     3,     2,     0,     0,
+       0,     7,     0,     0,     0,     7,     0,     0,     2,     1,
+       1,     2,     0,     3,     1,     1,     0,     0,     5,     0,
+       0,     5,     4,     1,     5,     2,     0,     2,     0,     1,
+       1,     1,     2,     2,     4,     2,     2,     1,     3,     2,
+       2,     2,     0,     2,     0,     3,     1,     1,     2,     1,
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     1,     1,     6,     3,     5,     2,     1,     1,
+       1,     2,     1,     3,     2,     1,     1,     0,     0,     6,
+       1,     1,     1,     2,     2,     1,     4,     4,     4
 };
 
-static const short yypact[] = {   109,
-   118,  3183,  3183,   412,-32768,-32768,-32768,-32768,    91,    91,
-    91,    65,   100,   136,-32768,   270,-32768,-32768,   270,   270,
--32768,   132,   270,   132,   270,   270,-32768,-32768,-32768,-32768,
-   103,   128,   699,   378,-32768,    91,-32768,   119,   131,   203,
--32768,  3183,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
--32768,-32768,    91,    91,    91,  2892,  2730,   155,-32768,-32768,
--32768,-32768,-32768,    68,  3447,  3447,    70,    61,-32768,-32768,
-   132,-32768,   112,   270,-32768,-32768,   103,   167,-32768,    91,
-  1306,-32768,   434,-32768,   103,   378,-32768,    91,-32768,-32768,
-   900,-32768,   160,   153,   160,   159,-32768,   175,-32768,-32768,
--32768,-32768,-32768,-32768,  2892,  2892,   270,-32768,-32768,-32768,
-  2892,-32768,-32768,  1480,-32768,   195,   231,   239,-32768,-32768,
--32768,  2892,   216,   225,-32768,  2946,  3000,-32768,  3714,  1127,
-   315,   255,  2892,-32768,-32768,-32768,-32768,-32768,   251,   418,
--32768,   279,  2078,   314,-32768,   270,-32768,-32768,-32768,-32768,
--32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
--32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   292,
-  3610,-32768,-32768,-32768,  2624,   327,-32768,-32768,-32768,   270,
-   270,   286,   270,   270,-32768,-32768,-32768,   321,   252,   301,
--32768,   434,   103,-32768,   319,-32768,  2093,   744,    91,-32768,
--32768,   434,-32768,   188,-32768,    91,  1969,   422,   471,   259,
-  1950,   900,-32768,-32768,-32768,-32768,    91,-32768,   332,   340,
-  1881,-32768,   347,-32768,   227,-32768,-32768,-32768,-32768,-32768,
-   357,   359,   338,   368,  2784,  3475,  3610,   270,-32768,   377,
-  2892,  1480,-32768,  1480,-32768,  2892,  2892,   408,-32768,-32768,
-  2892,  2892,  2892,  2892,  2892,  2892,  2892,  2892,  2892,  2892,
-  2892,  2892,-32768,-32768,   270,   270,  2892,  2892,-32768,-32768,
--32768,-32768,-32768,   418,  2152,    91,-32768,   481,   708,-32768,
--32768,-32768,-32768,-32768,-32768,-32768,-32768,    22,-32768,   411,
--32768,  3610,-32768,   391,   402,   491,-32768,   327,-32768,   404,
-   402,   132,   433,-32768,   449,   441,   439,-32768,   449,-32768,
--32768,   471,-32768,-32768,   518,   471,   538,-32768,  3336,-32768,
-   467,   483,-32768,  1021,    82,-32768,-32768,   536,    91,   386,
-   350,-32768,   434,   434,-32768,   744,    91,-32768,  2211,-32768,
--32768,   744,   520,    91,-32768,-32768,   475,   502,  1385,  3385,
-   160,    91,   160,-32768,   560,   523,-32768,   227,-32768,-32768,
--32768,   540,   525,  2544,-32768,-32768,-32768,-32768,   578,   544,
-  3475,-32768,   562,   565,-32768,  3714,   569,   570,  3714,  3714,
-  2892,   604,  2892,  2892,  1690,  1278,   969,   958,  1297,   563,
-   563,   533,   533,-32768,-32768,-32768,-32768,-32768,   571,   225,
-   577,   369,   355,-32768,  3355,-32768,   579,   418,-32768,  2270,
--32768,   708,   580,   314,  3054,   588,  3511,  2048,-32768,-32768,
-  3568,  3610,-32768,-32768,   583,   132,-32768,   590,  3258,-32768,
--32768,   457,  3131,   608,    75,   591,-32768,-32768,-32768,  3614,
--32768,   596,   276,-32768,-32768,   232,-32768,-32768,    90,-32768,
--32768,-32768,   848,-32768,   422,-32768,-32768,   422,-32768,   637,
--32768,-32768,   593,-32768,   601,-32768,-32768,-32768,-32768,-32768,
-   600,-32768,   602,  2892,   270,   603,   523,-32768,   650,-32768,
--32768,-32768,  3539,-32768,-32768,   578,-32768,-32768,-32768,-32768,
--32768,   646,  2892,  1612,   996,-32768,-32768,   481,-32768,-32768,
--32768,   481,-32768,-32768,   612,-32768,-32768,   234,   609,   270,
--32768,  2624,   610,  2663,-32768,-32768,  3614,  2067,    90,-32768,
-   618,   624,    90,-32768,   449,-32768,   530,-32768,-32768,-32768,
--32768,   103,   128,   699,   450,-32768,-32768,-32768,-32768,-32768,
--32768,-32768,-32768,-32768,-32768,  3644,   631,-32768,-32768,-32768,
-   573,   344,-32768,-32768,  3580,-32768,   706,   338,-32768,-32768,
--32768,   640,   550,-32768,  1795,    90,-32768,-32768,    90,-32768,
-   629,-32768,-32768,   629,    91,    91,  3714,-32768,    91,   641,
-   270,  1056,   650,-32768,  1560,  2892,   685,   643,  3539,-32768,
--32768,  1533,-32768,-32768,  2892,-32768,-32768,-32768,-32768,   573,
--32768,-32768,-32768,-32768,   270,-32768,-32768,   661,   449,-32768,
-  3447,  3447,   245,   434,   103,  3286,-32768,   561,  3149,   284,
-   284,-32768,-32768,-32768,   344,    91,   202,   220,    91,-32768,
-    91,   220,    91,  3355,-32768,-32768,-32768,-32768,-32768,   434,
--32768,   103,-32768,   796,-32768,-32768,  3714,-32768,-32768,  1795,
--32768,-32768,   436,-32768,-32768,-32768,    91,-32768,   285,   512,
-   920,   652,   653,  1140,-32768,-32768,-32768,-32768,-32768,   694,
-   270,-32768,   695,  3714,   656,   654,-32768,-32768,    80,  1720,
-   225,-32768,  2892,-32768,   685,-32768,  2892,   250,   202,   220,
-    91,   294,-32768,-32768,   581,-32768,   675,   449,-32768,-32768,
--32768,-32768,  2892,   702,   662,-32768,   662,   633,   573,-32768,
-  2329,-32768,-32768,-32768,   342,   344,-32768,-32768,-32768,   336,
-   426,   796,-32768,-32768,  1560,-32768,-32768,  2892,    89,-32768,
--32768,   270,-32768,-32768,-32768,-32768,   664,-32768,-32768,-32768,
--32768,  2410,-32768,  1560,-32768,-32768,  1640,-32768,  1870,-32768,
--32768,-32768,  1533,-32768,-32768,-32768,-32768,-32768,   573,-32768,
--32768,   683,    81,    81,  3714,  2892,   284,   566,   566,-32768,
--32768,   669,-32768,-32768,   677,  3678,  2892,-32768,-32768,-32768,
-  2490,   715,   700,-32768,-32768,   701,   705,  2892,   727,   691,
-   707,  2838,   170,   780,   222,   233,-32768,   750,   716,-32768,
-   717,  3366,-32768,   776,  1220,    87,-32768,-32768,-32768,-32768,
--32768,  2652,   720,  1870,-32768,-32768,-32768,   449,-32768,-32768,
--32768,-32768,-32768,  3714,-32768,-32768,-32768,-32768,  3678,  2892,
-   736,-32768,  2892,  2892,  3655,-32768,-32768,-32768,-32768,   722,
-  2892,   729,-32768,   753,    91,-32768,-32768,   434,-32768,   103,
-  1400,-32768,-32768,-32768,-32768,  2892,-32768,-32768,-32768,   751,
--32768,   739,  2892,   802,-32768,   787,   743,   746,  2892,-32768,
--32768,   748,-32768,  2892,-32768,   447,-32768,   172,   462,-32768,
-   461,-32768,-32768,  2490,   747,-32768,-32768,   754,-32768,-32768,
--32768,-32768,  3696,-32768,    64,-32768,   744,-32768,   744,-32768,
--32768,-32768,   752,-32768,-32768,  2892,-32768,-32768,   818,   756,
--32768,-32768,-32768,-32768,-32768,-32768,   760,-32768,   779,    79,
-   762,-32768,-32768,   338,   338,-32768,-32768,  2892,   818,   771,
-   818,-32768,-32768,  2892,   775,   162,-32768,-32768,   781,-32768,
-   538,   782,-32768,   315,   257,-32768,-32768,   788,   538,-32768,
--32768,   315,   858,   867,-32768
+/* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
+   Performed when YYTABLE doesn't specify something else to do.  Zero
+   means the default is an error.  */
+static const yytype_uint16 yydefact[] =
+{
+       4,     0,     6,     0,     1,     0,     0,   163,   154,   161,
+     153,   253,   249,   251,     0,     0,     0,   416,     0,   468,
+     472,     0,     0,   422,   448,     0,   448,     0,     0,    20,
+       5,     9,     8,     0,   129,   129,   149,   140,   150,   186,
+       0,     0,     0,   162,     0,    10,   418,   419,   417,   420,
+     166,   421,     7,    18,    19,   254,   250,   252,     0,     0,
+       0,    33,    34,    36,    35,   423,     0,     0,     0,   448,
+     439,   164,   449,   448,   165,     0,     0,   248,   300,     0,
+       0,   174,   130,     0,    17,     0,    16,     0,   151,   140,
+     152,   156,   155,   138,   187,   274,   258,   274,   262,   265,
+     267,    12,    90,    91,   108,    60,    61,     0,     0,     0,
+      37,    39,    38,     0,    41,    40,     0,   557,     0,     0,
+       0,   110,    42,    43,     0,     0,    44,    62,     0,     0,
+      66,    47,    49,    92,   107,     0,   103,   104,   105,   106,
+     298,     0,   296,   159,     0,   296,   191,   450,     0,   519,
+     520,   542,   543,   539,   523,   524,   525,   526,   527,   528,
+     529,   530,   531,   532,   533,   534,   535,   536,   537,   538,
+     540,   541,     0,     0,   521,   469,   493,   512,   516,   522,
+     517,   473,     0,     0,   430,     0,     0,   437,   446,   425,
+       0,     0,     0,    13,     0,     0,    32,     0,   408,     0,
+       0,   184,   234,   300,     0,   235,     0,   172,   130,     0,
+     226,   227,     0,     0,   139,   142,   169,   170,   141,   143,
+     171,     0,     0,     0,   255,     0,   259,     0,   263,    58,
+      59,    53,    50,     0,     0,     0,     0,     0,     0,     0,
+       0,    52,     0,     0,     0,    54,     0,    56,     0,     0,
+      83,    81,    79,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,   102,   101,     0,    45,     0,
+       0,   109,   111,    51,   167,   300,   391,     0,   130,   294,
+     297,   157,   168,   299,   159,   295,   197,   198,   199,   196,
+       0,   189,   192,   424,     0,   547,     0,   496,   514,   495,
+       0,   518,     0,   496,   448,     0,   427,   477,   442,     0,
+     456,   477,   426,   301,   244,   243,   175,   176,   247,     0,
+     242,     0,   246,     0,     0,    30,     0,   337,   117,   338,
+     183,   185,     0,     0,    15,     0,     0,    24,     0,   184,
+     408,     0,    14,    28,     0,     0,   184,   282,   276,   129,
+     273,   129,     0,   274,   184,   274,   291,   292,   270,   289,
+       0,    94,    93,   327,   319,     0,     0,   556,   555,   558,
+     565,   560,     0,   561,   562,     0,     0,    11,    48,     0,
+       0,    88,    89,     0,     0,     0,     0,    77,    78,    76,
+      75,    74,    73,    72,    67,    68,    69,    70,    71,    99,
+       0,    46,     0,   100,   304,     0,   308,     0,   310,     0,
+       0,   391,     0,   160,   158,     0,   191,    45,     0,     0,
+       0,   470,   513,   397,     0,   545,   474,   435,   448,   456,
+       0,     0,   440,   445,     0,     0,     0,     0,     0,   412,
+     398,   129,   129,   410,     0,   399,   401,   409,     0,   245,
+     318,     0,   119,   114,   118,     0,   181,   232,   228,   173,
+     233,    22,   180,   229,   231,     0,    26,     0,   257,   337,
+     275,   337,   283,     0,   261,     0,     0,   271,     0,   270,
+     328,   320,    96,    64,    63,     0,   564,   566,     0,   563,
+     568,   567,    55,    57,     0,     0,    82,    80,    97,    98,
+     303,   302,   392,   309,   311,   305,   307,     0,   188,   190,
+      90,     0,     0,   492,   512,   129,     0,   501,   497,   499,
+       0,     0,   515,   399,     0,     0,   432,   477,   443,     0,
+     431,   486,   489,   480,     0,   129,   129,   482,   479,   456,
+     455,   453,   454,   438,   456,   461,   458,   129,   129,     0,
+     447,   177,   396,   296,   296,   393,   394,     0,   411,     0,
+       0,    31,   325,   115,   129,   129,   146,     0,     0,   178,
+     230,     0,   277,   278,   284,   338,   280,   184,   184,   293,
+     290,   184,     0,     0,     0,   321,   322,     0,     0,   548,
+       0,   549,   550,    84,    87,   306,   193,     0,   195,   546,
+     494,   505,   296,   506,   502,   503,   471,     0,   475,   456,
+       0,   477,   428,     0,     0,   176,     0,     0,     0,   481,
+       0,     0,   462,   462,   457,   241,   300,   391,   130,   184,
+     184,   184,   300,   130,   184,   184,     0,   400,   402,   413,
+     326,   122,     0,   123,     0,   146,   144,   203,   201,   200,
+     182,    23,     0,    27,   337,     0,   256,   260,   266,   184,
+     414,     0,     0,     0,   337,     0,     0,   126,   338,   313,
+     323,   216,    90,     0,   213,     0,   215,     0,   268,   206,
+     212,     0,     0,   552,   554,     0,   559,     0,   551,     0,
+       0,   184,   184,   184,     0,   507,   544,     0,   436,     0,
+     477,   487,   490,   483,   441,     0,   465,   459,   463,   460,
+     304,     0,   408,     0,   403,   404,   405,   304,     0,   406,
+     407,   395,     0,     0,   145,   148,   147,     0,   179,   285,
+       0,   184,   264,   324,     0,   330,   128,   127,   317,     0,
+     331,   315,   338,   314,     0,   219,     0,   210,    65,     0,
+     205,     0,   218,   209,   553,    85,   194,   509,   510,   511,
+     504,   296,   433,   444,     0,     0,     0,   467,     0,     0,
+     239,   240,   236,   238,     0,   120,   121,     0,   184,     0,
+     286,   415,   329,     0,   163,     0,   351,   335,     0,     0,
+       0,     0,     0,     0,     0,     0,   380,   448,   448,   372,
+       0,     0,   124,   129,   129,   344,   349,     0,     0,   341,
+     342,   345,   373,   343,     0,     0,     0,   207,   208,   508,
+     477,   429,   485,   484,   488,   491,   466,   464,   237,   202,
+     288,   184,     0,     0,   337,   382,     0,     0,   378,   362,
+     363,   364,     0,     0,     0,   381,     0,   184,   346,   135,
+       0,   136,     0,     0,   333,   338,   332,   355,     0,   137,
+     214,   211,     0,   287,     0,     0,     0,   383,    49,     0,
+       0,     0,   376,   365,     0,   370,     0,   379,     0,   133,
+     220,     0,   134,   223,   350,   337,     0,     0,   434,   334,
+       0,   336,   374,   356,   360,     0,   371,     0,   131,     0,
+     132,     0,   348,   339,   337,     0,   352,   337,   382,   337,
+     377,   384,     0,   221,   224,   340,   354,   337,   375,     0,
+     361,     0,     0,   385,   386,   366,     0,     0,   353,   357,
+       0,   384,     0,     0,   222,   225,   382,     0,     0,   367,
+     387,     0,   388,     0,     0,   358,   389,     0,   368,   337,
+       0,     0,   359,   369,   390
 };
 
-static const short yypgoto[] = {-32768,
--32768,-32768,-32768,    83,  -371,-32768,-32768,-32768,-32768,-32768,
--32768,-32768,   -14,-32768,   -56,   453,  -228,   508,-32768,-32768,
-   -32,-32768,   628,-32768,-32768,-32768,-32768,-32768,    38,-32768,
-  -297,-32768,  -305,   548,-32768,-32768,   215,-32768,     3,  -166,
-    88,     5,   804,-32768,   249,    12,   -29,  -170,   613,    47,
-  -249,  -572,   -69,  -189,  -111,-32768,-32768,-32768,   207,    54,
-    17,-32768,   480,-32768,   253,-32768,  -630,-32768,   152,-32768,
-  -605,-32768,-32768,   229,-32768,-32768,-32768,-32768,-32768,-32768,
-   -51,  -113,  -482,   -18,-32768,-32768,-32768,   -64,-32768,-32768,
--32768,-32768,-32768,   424,   -50,-32768,   559,   442,   258,   558,
-   443,   -59,   -99,  -169,  -173,  -198,   260,-32768,-32768,  -282,
--32768,-32768,-32768,   334,  -412,-32768,  -223,-32768,-32768,-32768,
--32768,  -160,  -524,  -755,   288,-32768,    35,-32768,-32768,-32768,
--32768,-32768,-32768,-32768,-32768,-32768,-32768,    71,-32768,  -738,
-    27,-32768,    26,-32768,   549,-32768,  -357,-32768,   541,   543,
-   406,  -304,-32768,-32768,-32768,-32768,    19,-32768,   934,-32768,
--32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
--32768,-32768,-32768,   -21,    -5,  -349,-32768,   425,-32768,   345,
-   204,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -286,-32768,
--32768,-32768,   208,   438,-32768,-32768,-32768,-32768,   -37,   676,
--32768,-32768,   459,-32768,   219,   469,-32768,   568,   572,  -142,
--32768,  -132,-32768,-32768,   299,   399,-32768,-32768,-32768,-32768,
--32768,-32768,   619,-32768,-32768,-32768
+/* YYDEFGOTO[NTERM-NUM].  */
+static const yytype_int16 yydefgoto[] =
+{
+      -1,     1,     2,     3,     5,    30,    31,    32,   338,   568,
+     344,   571,   200,   451,   675,   124,   234,   400,   126,   127,
+     128,   129,   130,   587,   131,   386,   385,   383,   689,   384,
+     132,   235,   133,   134,   325,   326,   327,   563,   663,   664,
+      33,   195,   802,   441,    93,   564,   646,   442,    36,   142,
+     281,    37,   218,   206,    80,   201,   207,   652,    81,   567,
+     330,   331,    39,   290,   291,   292,   650,   727,   677,   678,
+     679,   816,   680,   746,   681,   682,   879,   899,   926,   882,
+     901,   927,   317,   210,   691,   211,    40,    41,    42,    43,
+     353,   355,   360,   227,   750,   478,   222,   223,   350,   573,
+     574,   358,   359,   144,   693,   145,   191,   280,   665,   666,
+     739,   328,   481,   584,   585,   586,   561,   364,   562,   806,
+     807,   808,   834,   855,   455,   856,   669,   809,   810,   885,
+     833,   917,   908,   936,   949,   909,   811,   812,   907,   813,
+     846,   869,   922,   923,   924,   947,   406,   407,   443,   636,
+     444,   445,   446,   320,   321,   447,   448,   661,   135,    45,
+      66,    46,    47,    48,   429,   700,   307,   609,   820,   527,
+     310,   539,   611,    49,   311,    71,    50,   434,   544,   435,
+     549,   707,   708,    51,    67,   297,   521,    68,   303,   525,
+     430,   431,   537,   618,   824,   538,   613,   765,   614,   766,
+     175,   421,   518,   519,   520,   694,   695,   299,   423,   176,
+     177,   178,   179,   180,   590,   591,   684,   592,   369,   136,
+     237,   485,   372,   373,   374,   137,   138,   139
 };
 
+/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
+   STATE-NUM.  */
+#define YYPACT_NINF -811
+static const yytype_int16 yypact[] =
+{
+      95,   100,   166,  3067,  -811,  3067,    33,  -811,  -811,  -811,
+    -811,    94,    94,    94,   111,   114,   141,  -811,   437,  -811,
+    -811,   437,   437,  -811,   163,   437,   163,   437,   437,  -811,
+    -811,  -811,  -811,   350,   159,  1892,   410,  -811,    94,  -811,
+     228,   234,   250,  -811,  3067,  -811,  -811,  -811,  -811,  -811,
+    -811,  -811,  -811,  -811,  -811,    94,    94,    94,  2747,  2591,
+     147,  -811,  -811,  -811,  -811,  -811,    56,  3335,  3335,   107,
+      50,  -811,  -811,   163,  -811,   195,   437,  -811,  -811,   350,
+     209,  -811,    94,   862,  -811,   684,  -811,   350,   410,  -811,
+      94,  -811,  -811,   831,  -811,   179,   168,   179,   177,  -811,
+     239,  -811,  -811,  -811,  -811,  -811,  -811,  2747,  2747,   437,
+    -811,  -811,  -811,  2747,  -811,  -811,  1355,  -811,   244,   247,
+     281,  -811,  -811,  -811,  2747,   280,   295,  -811,  2799,  2851,
+    -811,  3597,  1038,   353,   307,  2747,  -811,  -811,  -811,  -811,
+    -811,   326,   290,  -811,   331,  3455,   440,  -811,   437,  -811,
+    -811,  -811,  -811,  -811,  -811,  -811,  -811,  -811,  -811,  -811,
+    -811,  -811,  -811,  -811,  -811,  -811,  -811,  -811,  -811,  -811,
+    -811,  -811,   421,   881,  -811,  -811,  -811,  2476,   380,  -811,
+    -811,  -811,   437,   437,   356,   437,   437,  -811,  -811,  -811,
+     358,   606,   170,  -811,   684,   350,  -811,   393,  -811,  1941,
+     108,    94,  -811,  -811,   684,  -811,   211,  -811,    94,  1799,
+      88,   328,   217,  1764,   831,  -811,  -811,  -811,  -811,    94,
+    -811,   400,   383,  2989,  -811,   396,  -811,   203,  -811,  -811,
+    -811,  -811,  -811,   409,   413,   412,   420,  2643,  3363,   881,
+     437,  -811,   428,  2747,  1355,  -811,  1355,  -811,  2747,  2747,
+     460,  -811,  -811,  2747,  2747,  2747,  2747,  2747,  2747,  2747,
+    2747,  2747,  2747,  2747,  2747,  -811,  -811,   437,  2747,  2747,
+     437,  -811,  -811,  -811,  -811,  -811,   290,  2006,    94,  -811,
+     422,   745,  -811,  -811,  -811,  -811,  -811,  -811,  -811,  -811,
+     117,  -811,   445,  -811,   881,  -811,   432,   436,   513,  -811,
+     380,  -811,   548,   436,   163,   454,  -811,   470,   457,   465,
+    -811,   470,  -811,  -811,   328,  -811,  -811,   516,   328,   541,
+    -811,  1606,  -811,   475,   476,  -811,  1846,    80,  -811,  -811,
+     526,    94,   300,   220,  -811,   684,   684,  -811,   108,    94,
+    -811,  2065,  -811,  -811,   108,   497,    94,  -811,  -811,   414,
+     490,  3107,   661,   179,    94,   179,  -811,   538,   494,  -811,
+     203,  -811,  -811,  -811,   506,   514,  2396,  -811,  -811,  -811,
+    -811,   551,   517,  3363,  -811,   525,   527,  -811,  3597,   531,
+     536,  3597,  3597,  2747,   558,  2747,  2747,  3041,  1982,  3113,
+    1769,  1481,   697,   697,   426,   426,  -811,  -811,  -811,  -811,
+     543,   295,   542,  -811,   215,   285,  -811,  3211,  -811,   549,
+     290,  -811,  2124,  -811,   745,   545,   440,  2903,   550,  3399,
+    1881,  -811,  -811,  1467,   881,  -811,  -811,   532,   163,  -811,
+     568,  3142,  -811,  -811,   487,  2959,   571,    83,   559,  -811,
+    -811,  -811,  3503,  -811,   564,   237,  -811,  -811,   208,  -811,
+    -811,    82,  -811,  -811,  -811,  3037,  -811,    88,  -811,  -811,
+      88,  -811,   608,  -811,  -811,   562,  -811,   565,  -811,  -811,
+    -811,  -811,  -811,   573,  -811,   576,  2747,   437,   579,   494,
+    -811,   627,  -811,  -811,  -811,  3427,  -811,  -811,   551,  -811,
+    -811,  -811,  -811,  -811,   622,  2747,  1330,  2565,  -811,  -811,
+     422,  -811,  -811,  -811,   422,  -811,  -811,   580,  -811,  -811,
+     252,   590,   437,  -811,  2476,   592,  2524,  -811,  -811,  3503,
+    1926,    82,  -811,   596,   609,    82,  -811,   470,  -811,   602,
+    -811,  -811,  -811,  -811,   350,   159,  1892,   311,  -811,  -811,
+    -811,  -811,  -811,  -811,  -811,  -811,  -811,  -811,  3522,   601,
+    -811,  -811,  -811,  1070,   305,  -811,  -811,  3474,  -811,   679,
+     412,  -811,  -811,  -811,   607,  3268,  -811,  1654,    82,  -811,
+    -811,    82,  -811,   614,  -811,  -811,   614,    94,    94,  3597,
+    -811,    94,   612,   437,  1035,   627,  -811,  1435,  2747,   659,
+     615,  3427,  -811,  -811,  1408,  -811,  -811,  2747,  -811,  -811,
+    -811,  -811,  1070,  -811,  -811,  -811,  -811,   437,  -811,  -811,
+     644,   470,  -811,  3335,  3335,    69,   684,   350,  3192,  -811,
+     635,  2985,   452,   452,  -811,  -811,  -811,   305,    94,   124,
+     126,    94,  -811,    94,   126,    94,  3211,  -811,  -811,  -811,
+    -811,  -811,   684,  -811,   350,  -811,  1011,  -811,  -811,  3597,
+    -811,  -811,  1654,  -811,  -811,   544,  -811,  -811,  -811,    94,
+    -811,   294,   423,   955,   630,   631,  1115,  -811,  -811,  -811,
+    -811,  -811,   677,   437,  -811,   683,  3597,   657,   673,  -811,
+    -811,    72,  1595,   295,  -811,  2747,  -811,   659,  -811,  2747,
+     270,   124,   126,    94,   304,  -811,  -811,   642,  -811,   692,
+     470,  -811,  -811,  -811,  -811,  2747,   702,   680,  -811,   680,
+     723,  1070,  -811,  2183,  -811,  -811,  -811,   588,   305,  -811,
+    -811,  -811,   351,   382,  1011,  -811,  -811,  1435,  -811,  -811,
+    2747,   185,  -811,  -811,   437,  -811,  -811,  -811,  -811,   682,
+    -811,  -811,  -811,  -811,  2264,  -811,  1435,  -811,  -811,  1515,
+    -811,  1708,  -811,  -811,  -811,  1408,  -811,  -811,  -811,  -811,
+    -811,  1070,  -811,  -811,   699,    78,    78,  3597,  2747,   452,
+     520,   520,  -811,  -811,   688,  -811,  -811,   687,  3279,  2747,
+    -811,  -811,  -811,  2344,   734,   718,  -811,  -811,   721,   728,
+    2747,   750,   715,   719,  2695,   364,   790,   151,   223,  -811,
+     760,   724,  -811,   727,  3240,  -811,   789,  1195,    81,  -811,
+    -811,  -811,  -811,  -811,  2513,   730,  1708,  -811,  -811,  -811,
+     470,  -811,  -811,  -811,  -811,  -811,  3597,  -811,  -811,  -811,
+    -811,  3279,  2747,   748,  -811,  2747,  2747,  3561,  -811,  -811,
+    -811,  -811,   732,  2747,   735,  -811,   753,    94,  -811,  -811,
+     684,  -811,   350,  1275,  -811,  -811,  -811,  -811,  2747,  -811,
+    -811,  -811,   752,  -811,   740,  2747,   804,  -811,   859,   755,
+     749,  2747,  -811,  -811,   757,  -811,  2747,  -811,   387,  -811,
+     200,   389,  -811,   796,  -811,  -811,  2344,   751,  -811,  -811,
+     754,  -811,  -811,  -811,  -811,  3579,  -811,    49,  -811,   108,
+    -811,   108,  -811,  -811,  -811,   764,  -811,  -811,  2747,  -811,
+    -811,   820,   765,  -811,  -811,  -811,  -811,  -811,  -811,   769,
+    -811,   791,    64,   766,  -811,  -811,   412,   412,  -811,  -811,
+    2747,   820,   771,   820,  -811,  -811,  2747,   781,    68,  -811,
+    -811,   783,  -811,   541,   787,  -811,   353,   271,  -811,  -811,
+     793,   541,  -811,  -811,   353
+};
 
-#define	YYLAST		3766
-
-
-static const short yytable[] = {   123,
-   139,    63,    72,    86,    67,    68,    32,    32,    71,   363,
-    63,    74,    81,    33,    33,   210,    70,   337,    70,   435,
-    42,    42,   434,    94,    96,    98,   218,   330,   179,   411,
-   459,   207,   298,   461,    83,    85,   464,   327,   400,   334,
-   277,   450,   299,   283,   223,   182,    32,   500,   653,   186,
-   347,   349,    92,    33,   234,    36,    36,   531,   190,   188,
-    42,    70,    53,    54,    55,    70,   211,   720,   627,    92,
-    92,    92,   227,   228,   751,   403,   864,   527,   230,    87,
-   314,   820,  -112,   269,    80,    50,    88,   855,   331,   239,
-   558,   451,   229,   369,   775,    36,    92,   413,   183,   402,
-   271,   909,   414,   141,    92,    75,   604,   180,    -1,   408,
-   606,   294,   145,   813,    16,   749,   929,    -2,    14,   184,
-    14,    59,    60,    56,    99,   337,   777,   900,   181,   287,
-    80,   291,    14,    59,    60,   515,   206,   671,    80,   910,
-   321,   742,   185,   816,   217,   856,   913,   218,   146,   916,
-   549,   918,    76,   649,   930,   293,   651,   821,    57,   926,
-   141,    77,   411,  -112,   327,   302,   303,   917,   306,   307,
-   312,   361,    59,    60,   316,   327,    16,   373,   366,   347,
-   349,   327,   377,   190,   378,    61,   400,   618,   187,   282,
-    62,   950,   146,   276,    58,   939,   276,    61,   195,   941,
-    93,  -175,    62,   498,    82,    59,    60,  -175,   859,   502,
-   355,   401,    95,   144,   218,   781,   455,   141,   407,   841,
-   458,   457,    92,   374,   219,   768,   769,   354,   486,    59,
-    60,    14,   416,    92,   222,   603,    61,   942,   608,   350,
-   224,    62,    80,   191,   701,   206,    80,   192,  -175,    14,
-   397,   398,  -175,   236,    75,   206,   226,   695,   311,   -35,
-   710,   711,   545,   546,   332,   217,    16,   141,   333,    61,
-   -34,   195,    59,    60,    62,   876,   719,    16,   196,   197,
-   425,    14,   463,   141,    97,   423,    75,   200,   141,   237,
-   141,   240,    92,    61,    59,    60,    70,   238,    62,   665,
-   471,    76,   473,   196,   197,   241,   573,   556,   573,   594,
-    77,   312,   557,    14,   595,   316,    59,    60,   284,   285,
-   286,   703,   697,   269,   492,   754,   272,   276,   884,   270,
-   241,   482,   948,   201,   638,   340,    61,   949,   141,   192,
-   587,    62,   202,   355,    75,    92,    75,   218,   311,   467,
-   292,   469,   554,   505,   280,   203,   555,   681,    61,   196,
-   197,   731,   522,    62,   300,   732,   688,   304,   350,   298,
-   758,    14,    36,    14,   759,   311,   313,   317,   734,   299,
-    61,   739,    89,   206,    90,    62,   206,   206,    75,   200,
-   343,   630,   311,   630,   724,   282,   141,   310,    14,   287,
-   625,   275,   625,   275,   526,   770,    59,    60,   338,   339,
-    86,   762,   773,   409,   410,    14,   333,   344,   273,   361,
-    70,   666,   513,   563,   352,   456,   403,   274,   275,   514,
-   499,   532,   359,   533,   360,   201,    75,   200,    75,   200,
-   534,   551,   552,   364,   202,   -85,   685,    14,   545,   546,
-   708,   629,   633,   375,   681,   276,   715,   203,    36,   709,
-   355,   276,   422,    14,   716,    14,   417,   273,   141,   415,
-    61,    36,   724,   728,    36,    62,   274,   275,   418,   141,
-   338,   339,    36,   201,    86,   201,    87,   195,    51,    52,
-  -175,   573,   202,    88,   202,   597,  -175,   529,   530,   564,
-   420,   666,   774,   740,    86,   203,   192,   203,   426,   498,
-   502,  -475,  -477,   613,   431,   600,   498,   502,   803,   196,
-   197,   513,   430,   896,   538,   539,   540,   333,   514,   196,
-   197,   860,   628,   632,   541,   614,   615,  -175,   898,   409,
-   410,  -175,   192,   460,   195,   210,   102,   620,   621,   447,
-   466,  -278,  -278,     5,    89,     7,    90,   803,   472,   448,
-    87,     9,    10,    11,   640,   642,   658,    88,   704,   704,
-    36,   454,   721,   699,   700,    75,   623,    13,   468,   218,
-    87,   690,   260,   261,   262,    80,   465,    88,   448,   733,
-   694,   911,   282,   912,    16,   474,   613,   538,   539,   540,
-   480,   729,    14,   475,   626,   631,   190,   610,    36,   643,
-   258,   259,   260,   261,   262,   484,    22,   478,   532,   485,
-   533,    24,   624,   613,   710,   711,   641,   534,   538,   539,
-   540,   625,   275,   243,   245,    75,   623,   488,   702,   311,
-   489,   493,    92,   944,   490,   491,   496,    92,   538,   539,
-   540,   952,   528,   626,   772,   506,   743,   218,   760,   497,
-   803,   501,    14,   510,   524,   141,   550,   206,    80,    36,
-   548,   553,   567,   206,   206,   568,   570,   575,   631,   576,
-   579,   581,   624,   591,   596,   799,   599,    36,   337,   312,
-   316,   625,   275,   206,   593,    80,   312,   316,   555,   605,
-   932,   933,     5,     6,     7,     8,   206,   622,   637,   652,
-     9,    10,    11,   214,   215,   704,   639,   779,   657,     9,
-    10,    11,   683,   696,   799,   684,    13,   798,    14,  -315,
-   738,   -32,   745,   746,   747,   840,   327,   761,   327,   766,
-   690,   780,   767,    16,   322,   819,   801,  -336,  -336,  -336,
-  -336,   826,   -33,   802,   827,  -336,  -336,  -336,   830,   833,
-   812,   626,   626,   834,   836,    22,   798,   837,   631,   631,
-    24,  -336,    86,   862,    72,    84,   865,   868,   842,   271,
-   879,   654,   655,   838,   872,   656,   843,   845,  -336,    70,
-    70,   851,   846,   847,   863,    36,   878,   858,   871,   885,
-   723,   214,   215,   848,   850,   873,   888,     9,    10,    11,
-  -336,   874,   626,   886,   887,  -336,   801,   895,   889,   891,
-   206,   892,   903,   802,   894,  -111,   919,   799,   914,   904,
-   812,   881,   923,   712,   713,   714,   927,   928,   717,   718,
-   263,   264,   931,   265,   266,   267,   268,   937,    87,   865,
-   940,     5,     6,     7,     8,    88,   943,   954,   946,     9,
-    10,    11,   890,   730,   951,    36,   955,   509,   376,   798,
-   866,   935,   452,   379,   380,    13,   735,   865,   385,   386,
-   387,   388,   389,   390,   391,   392,   393,   394,   395,   396,
-   212,   722,    16,   507,   412,   755,   756,   757,   815,   857,
-   580,   206,   726,    80,   213,   214,   215,   750,   470,   727,
-   574,     9,    10,    11,    22,   477,   668,   578,   901,    24,
-   322,   736,  -124,  -124,  -124,  -124,  -124,  -124,  -124,    14,
-  -124,  -124,  -124,  -124,  -124,   778,  -124,  -124,  -124,  -124,
-  -124,  -124,  -124,  -124,  -124,  -124,  -124,  -124,  -124,  -124,
-  -124,   741,  -124,  -124,   902,   936,   938,   503,    73,  -124,
-   636,   520,  -124,   521,  -124,   707,   619,  -124,  -124,  -124,
-   825,   823,   617,  -124,  -124,   602,   424,   817,  -124,  -124,
-   598,   752,   828,  -124,   511,  -124,  -124,   686,   512,   487,
-  -124,  -124,     0,     0,  -124,     0,  -124,  -124,  -124,  -124,
-     0,  -124,   255,   256,   257,   258,   259,   260,   261,   262,
-   494,   495,   254,   255,   256,   257,   258,   259,   260,   261,
-   262,   322,     0,     0,  -115,  -115,  -115,  -115,     0,     0,
-  -115,     0,  -115,  -115,  -115,   861,   251,   252,   253,   254,
-   255,   256,   257,   258,   259,   260,   261,   262,  -115,     0,
-     0,   875,     0,     0,     0,     0,   660,     0,  -336,  -336,
-  -336,  -336,  -336,  -336,  -336,  -115,  -336,  -336,  -336,  -336,
-  -336,     0,  -336,  -336,  -336,  -336,  -336,  -336,  -336,  -336,
-  -336,  -336,  -336,  -336,  -336,  -336,  -336,  -115,  -336,  -336,
-     0,     0,  -115,     0,     0,  -336,     0,     0,  -336,     0,
-  -336,   577,  -115,  -336,  -336,  -336,     0,     0,     0,  -336,
-  -336,     0,     0,     0,  -336,  -336,     0,     0,     0,  -336,
-   592,  -336,  -336,     0,     0,     0,  -336,  -336,     0,     0,
-  -336,     0,  -336,     0,  -336,  -336,     0,  -336,     0,     0,
-   322,     0,  -336,  -336,     0,     0,     0,  -336,  -336,     0,
-  -336,     0,     0,     0,  -336,     0,  -336,  -336,  -336,  -336,
-  -336,  -336,  -336,  -336,  -336,  -336,  -336,     0,  -336,     0,
-  -336,     0,  -336,  -336,     0,     0,     0,     0,     0,  -336,
-   263,   264,  -336,   265,   266,   267,   268,  -336,  -336,  -336,
-     0,     0,   647,  -336,  -336,     0,     0,     0,  -336,  -336,
-     0,     0,     0,  -336,     0,  -336,  -336,     0,     0,     0,
-  -336,  -336,   674,     0,  -336,     0,  -336,  -311,  -336,  -336,
-   852,  -336,  -336,  -336,     0,     0,     0,  -336,  -336,     0,
-  -336,     0,     0,     0,  -336,     0,  -336,  -336,  -336,  -336,
-  -336,  -336,  -336,  -336,  -336,  -336,  -336,     0,  -336,     0,
-  -336,     0,  -336,  -336,     0,     0,     0,     0,     0,  -336,
-     0,     0,  -336,     0,     0,     0,     0,  -336,  -336,  -336,
-     0,     0,     0,  -336,  -336,     0,     0,   647,  -336,  -336,
-     0,     0,     0,  -336,     0,  -336,  -336,     0,     0,     0,
-  -336,  -336,     0,     0,  -336,     0,  -336,     0,  -336,  -336,
-     0,  -336,     0,     0,     0,     0,   194,   674,     0,   -28,
-   -28,   -28,   -28,     0,   753,     0,     0,   -28,   -28,   -28,
-   253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
-   765,     0,   195,   -28,     0,  -175,     0,     0,     0,     0,
-     0,  -175,   256,   257,   258,   259,   260,   261,   262,     0,
-   -28,     0,   674,     0,     0,   776,     0,     0,     0,     0,
-     0,     0,     0,     0,   196,   197,     0,     0,     0,     0,
-     0,   674,   -28,     0,   674,     0,   674,   -28,     0,     0,
-     0,     0,  -175,     0,     0,     0,  -175,   -28,     5,     0,
-     7,   281,     0,   824,     0,     0,     9,    10,    11,     0,
-   882,     0,  -346,  -346,   829,     0,     0,  -346,  -346,     0,
-  -346,     0,    13,     0,  -346,   835,  -346,  -346,  -346,  -346,
-  -346,  -346,  -346,  -346,  -346,  -346,  -346,     0,  -346,    16,
-  -346,     0,  -346,  -346,     0,     0,     0,     0,     0,  -346,
-     0,   674,  -346,     0,     0,     0,     0,  -346,  -346,  -346,
-     0,    22,     0,  -346,  -346,     0,    24,     0,  -346,  -346,
-     0,  -280,  -280,  -346,     0,  -346,  -346,     0,     0,     0,
-  -346,  -346,     0,     0,  -346,     0,  -346,     0,  -346,  -346,
-   231,  -346,   100,     5,     0,     7,   138,   101,   102,     0,
-   103,     9,    10,    11,     0,     0,   893,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,    13,   104,     0,
-    15,     0,   105,   106,     0,     0,     0,     0,     0,   107,
-     0,     0,   108,     0,    16,     0,     0,   109,   110,   111,
-     0,     0,     0,   112,   113,     0,     0,     0,   114,   115,
-     0,     0,     0,   116,     0,   117,    22,     0,     0,     0,
-   118,    24,     0,     0,   119,     0,     0,     0,   120,   121,
-   669,   -94,   670,    60,     0,     0,     0,   101,   102,   248,
-   103,   249,   250,   251,   252,   253,   254,   255,   256,   257,
-   258,   259,   260,   261,   262,     0,     0,     0,   104,     0,
-    15,     0,   105,   106,     0,     0,     0,     0,     0,   107,
-     0,     0,   108,     0,     0,     0,     0,   109,   110,   111,
-     0,     0,     0,   112,   113,     0,     0,   671,   114,   115,
-     0,     0,     0,   116,     0,   117,    61,     0,     0,     0,
-   118,    62,     0,     0,   119,     0,     0,  -203,   120,   121,
-   669,   672,   670,    60,     0,     0,     0,   101,   102,     0,
-   103,   250,   251,   252,   253,   254,   255,   256,   257,   258,
-   259,   260,   261,   262,     0,     0,     0,     0,   104,     0,
-    15,     0,   105,   106,     0,     0,     0,     0,     0,   107,
-     0,     0,   108,     0,     0,     0,     0,   109,   110,   111,
-     0,     0,     0,   112,   113,     0,     0,   671,   114,   115,
-     0,     0,     0,   116,     0,   117,    61,     0,     0,     0,
-   118,    62,     0,     0,   119,     0,     0,  -268,   120,   121,
-   669,   672,   100,     0,     0,     0,     0,   101,   102,     0,
-   103,   252,   253,   254,   255,   256,   257,   258,   259,   260,
-   261,   262,     0,     0,     0,     0,     0,     0,   104,     0,
-    15,     0,   105,   106,     0,  -216,     0,     0,     0,   107,
-     0,     0,   108,     0,     0,     0,     0,   109,   110,   111,
-     0,     0,     0,   112,   113,     0,     0,  -216,   114,   115,
-     0,     0,     0,   116,     0,   117,     0,     0,     0,     0,
-   118,     0,     0,     0,   119,   645,     0,   100,   120,   121,
-     0,   672,   101,   102,     0,   103,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,   104,     0,    15,     0,   105,   106,     0,
-     0,     0,     0,     0,   107,     0,     0,   108,     0,     0,
-     0,     0,   109,   110,   111,     0,     0,     0,   112,   113,
-     0,     0,     0,   114,   115,     0,     0,     0,   116,     0,
-   117,     0,     0,     0,     0,   118,     0,     0,     0,   119,
-   669,     0,   100,   120,   121,     0,   646,   101,   102,     0,
-   103,   345,     0,     0,     5,     0,     7,   138,     0,     0,
-     0,     0,     9,    10,    11,     0,     0,     0,   104,     0,
-    15,     0,   105,   106,     0,     0,     0,     0,    13,   107,
-     0,    15,   108,     0,     0,     0,     0,   109,   110,   111,
-     0,     0,     0,   112,   113,    16,     0,     0,   114,   115,
-     0,     0,     0,   116,     0,   117,     0,     0,     0,     0,
-   118,     0,     0,     0,   119,     0,     0,    22,   120,   121,
-   341,   672,    24,   -24,   -24,   -24,   -24,   346,  -271,     0,
-     0,   -24,   -24,   -24,     0,     0,     0,     0,     0,   335,
-     0,     0,   -20,   -20,   -20,   -20,   195,   -24,     0,  -175,
-   -20,   -20,   -20,     0,     0,  -175,     0,     0,     0,     0,
-     0,     0,     0,     0,   -24,   195,   -20,     0,  -175,     0,
-     0,     0,     0,     0,  -175,     0,     0,     0,   196,   197,
-     0,     0,     0,   -20,     0,     0,   -24,     0,     0,     0,
-     0,   -24,     0,     0,     0,     0,  -175,     0,     0,     0,
-  -175,   -24,     0,     0,     0,   -20,     0,     0,     0,     0,
-   -20,     0,     0,     0,     0,  -175,     0,     0,   322,  -175,
-   -20,     5,     6,     7,     8,     0,     0,     0,     0,     9,
-    10,    11,     0,     0,     0,     0,     0,   322,     0,     0,
-  -499,  -499,  -499,  -499,     0,    13,     0,    14,  -499,  -499,
-  -499,     5,     0,     7,   281,     0,     0,     0,     0,     9,
-    10,    11,    16,     0,  -499,   100,  -499,     0,     0,     0,
-   101,   102,     0,   103,     0,    13,     0,    14,     0,     0,
-     0,  -499,     0,     0,    22,     0,     0,     0,     0,    24,
-     0,   104,    16,    15,     0,   105,   106,   273,     0,  -497,
-     0,     0,   107,  -499,     0,   108,   274,   275,  -499,     0,
-   109,   110,   111,     0,    22,     0,   112,   113,  -499,    24,
-     0,   114,   115,     0,   100,     0,   116,     0,   117,   101,
-   102,     0,   103,   118,     0,     0,     0,   119,     0,     0,
-     0,   120,   121,     0,     0,   320,     0,     0,     0,     0,
-   104,     0,    15,     0,   105,   106,     0,     0,     0,     0,
-     0,   107,     0,     0,   108,     0,     0,     0,     0,   109,
-   110,   111,     0,     0,     0,   112,   113,     0,     0,     0,
-   114,   115,     0,   100,     0,   116,     0,   117,   101,   102,
-     0,   103,   118,     0,     0,     0,   119,     0,     0,     0,
-   120,   121,     0,     0,   406,     0,     0,     0,     0,   104,
-     0,    15,     0,   105,   106,     0,     0,     0,     0,     0,
-   107,     0,     0,   108,     0,     0,     0,     0,   109,   110,
-   111,     0,     0,     0,   112,   113,     0,     0,     0,   114,
-   115,     0,   100,     0,   116,     0,   117,   101,   102,     0,
-   103,   118,     0,     0,     0,   119,     0,     0,     0,   120,
-   121,     0,     0,   462,     0,     0,     0,     0,   104,     0,
-    15,     0,   105,   106,     0,     0,     0,     0,     0,   107,
-     0,     0,   108,     0,     0,     0,     0,   109,   110,   111,
-     0,     0,     0,   112,   113,     0,     0,     0,   114,   115,
-     0,   100,     0,   116,     0,   117,   101,   102,     0,   103,
-   118,     0,     0,     0,   119,     0,     0,     0,   120,   121,
-     0,     0,   504,     0,     0,     0,     0,   104,     0,    15,
-     0,   105,   106,     0,     0,     0,     0,     0,   107,     0,
-     0,   108,     0,     0,     0,     0,   109,   110,   111,     0,
-     0,     0,   112,   113,     0,     0,     0,   114,   115,     0,
-     0,     0,   116,     0,   117,     0,     0,     0,     0,   118,
-     0,     0,     0,   119,     0,     0,     0,   120,   121,     0,
-     0,   771,   670,   782,     6,     7,     8,   101,   102,     0,
-   103,     9,    10,    11,   783,     0,   784,   785,   786,   787,
-   788,   789,   790,   791,   792,   793,   794,    13,   104,    14,
-    15,     0,   105,   106,     0,     0,     0,     0,     0,   107,
-     0,     0,   108,     0,    16,     0,     0,   109,   110,   111,
-     0,     0,     0,   112,   113,     0,     0,     0,   114,   115,
-     0,     0,     0,   116,     0,   117,   795,     0,     0,     0,
-   118,   796,     0,     0,   119,     0,   797,     0,   120,   121,
-     0,   361,   670,    60,     0,     0,     0,   101,   102,     0,
-   103,     0,     0,     0,   783,     0,   784,   785,   786,   787,
-   788,   789,   790,   791,   792,   793,   794,     0,   104,     0,
-    15,     0,   105,   106,     0,     0,     0,     0,     0,   107,
-     0,     0,   108,     0,     0,     0,     0,   109,   110,   111,
-     0,     0,     0,   112,   113,     0,   100,     0,   114,   115,
-     0,   101,   102,   116,   103,   117,    61,     0,     0,     0,
-   118,    62,     0,     0,   119,     0,   797,     0,   120,   121,
-     0,   361,   104,     0,    15,     0,   105,   106,     0,     0,
-     0,     0,     0,   107,     0,     0,   108,     0,     0,     0,
-     0,   109,   110,   111,     0,     0,     0,   112,   113,     0,
-     0,     0,   114,   115,     0,     0,     0,   116,     0,   117,
-     0,     0,     0,     0,   118,     0,     0,     0,   119,     0,
-     0,     0,   120,   121,     0,   481,   147,   148,     0,   149,
-   150,     0,     0,     0,   151,   152,   153,   154,   155,   156,
-   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
-   167,   168,   169,     0,   100,     5,     6,     7,     8,   101,
-   102,   170,   103,     9,    10,    11,     5,     6,     7,     8,
-     0,     0,     0,     0,     9,    10,    11,     0,     0,    13,
-   104,    14,    15,     0,   105,   106,     0,     0,     0,     0,
-    13,   107,    14,     0,   108,   172,    16,     0,     0,   109,
-   110,   111,     0,     0,   296,   112,   113,    16,     0,     0,
-   114,   115,     0,     0,     0,   116,     0,   117,    22,     0,
-     0,     0,   118,    24,     0,     0,   119,     0,     0,    22,
-   120,   121,   100,     5,    24,     7,   138,   101,   102,   601,
-   103,     9,    10,    11,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,    13,   104,     0,
-    15,     0,   105,   106,     0,     0,     0,     0,     0,   107,
-     0,     0,   108,     0,    16,     0,     0,   109,   110,   111,
-     0,     0,     0,   112,   113,     0,   100,     0,   114,   115,
-     0,   101,   102,   116,   103,   117,    22,     0,     0,     0,
-   118,    24,     0,     0,   119,     0,     0,     0,   120,   121,
-     0,     0,   104,     0,    15,     0,   105,   106,     0,     0,
-     0,     0,     0,   107,     0,     0,   108,     0,     0,     0,
-     0,   109,   110,   111,     0,     0,     0,   112,   113,     0,
-   100,     0,   114,   115,     0,   101,   102,   116,   103,   117,
-   365,     0,     0,     0,   118,     0,     0,     0,   119,     0,
-     0,     0,   120,   121,     0,     0,   104,     0,    15,     0,
-   105,   106,     0,     0,     0,     0,     0,   107,     0,     0,
-   108,     0,     0,     0,     0,   109,   110,   111,     0,     0,
-     0,   112,   113,     0,   100,     0,   114,   115,     0,   101,
-   102,   116,   103,   117,     0,     0,     0,     0,   118,     0,
-     0,     0,   119,     0,   839,     0,   120,   121,     0,     0,
-   104,     0,    15,     0,   105,   106,     0,     0,     0,     0,
-     0,   107,     0,     0,   108,     0,     0,     0,     0,   109,
-   110,   111,     0,     0,     0,   112,   113,     0,   100,     0,
-   114,   115,     0,   101,   102,   116,   103,   117,     0,     0,
-     0,     0,   118,     0,     0,     0,   119,     0,     0,     0,
-   120,   121,     0,     0,   104,     0,    15,     0,   105,   106,
-     0,     0,     0,     0,     0,   107,     0,     0,   108,     0,
-     0,     0,     0,   109,   110,   111,     0,     0,     0,   112,
-   113,     0,   100,     0,   242,   115,     0,   101,   102,   116,
-   103,   117,     0,     0,     0,     0,   118,     0,     0,     0,
-   119,     0,     0,     0,   120,   121,     0,     0,   104,     0,
-    15,     0,   105,   106,     0,     0,     0,     0,     0,   107,
-     0,     0,   108,     0,     0,     0,     0,   109,   110,   111,
-     0,     0,     0,   112,   113,     0,   508,     0,   244,   115,
-     0,   101,   102,   116,   103,   117,     0,     0,     0,     0,
-   118,     0,     0,     0,   119,     0,     0,     0,   120,   121,
-     0,     0,   104,     0,    15,     0,   105,   106,     0,     0,
-     0,     0,     0,   107,     0,     0,   108,     0,     0,     0,
-     0,   109,   110,   111,     0,     0,     0,   112,   113,     0,
-     0,     0,   114,   115,     0,     0,     0,   116,     0,   117,
-     0,     0,     0,     0,   118,     0,     0,     0,   119,     0,
-     0,   543,   120,   121,     5,     0,     7,   138,     0,     0,
-     0,     0,     9,    10,    11,     0,     0,     0,     0,   543,
-     0,     0,     5,     0,     7,   138,     0,     0,    13,     0,
-     9,    10,    11,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,    16,    13,     0,     0,     0,
-     0,     0,     0,     4,     0,  -128,     5,     6,     7,     8,
-     0,     0,     0,    16,     9,    10,    11,    22,  -451,  -451,
-  -451,     0,    24,     0,     0,     0,     0,   544,  -451,    12,
-    13,     0,    14,    15,     0,    22,  -450,  -450,  -450,     0,
-    24,     0,     0,     0,     0,   544,  -450,    16,     0,     0,
-    17,    18,  -128,     0,     0,     0,     0,     0,     0,     0,
-     0,  -128,     0,    19,    20,    21,     0,     0,     0,    22,
-     0,     0,     0,    23,    24,    25,    26,     0,     4,    27,
-  -128,     5,     6,     7,     8,     0,     0,     0,     0,     9,
-    10,    11,     0,     0,     0,     0,     0,     0,     0,     0,
-     0,     0,     0,     0,     0,    13,     4,    14,  -128,     5,
-     6,     7,     8,     0,     0,     0,     0,     9,    10,    11,
-     0,     0,    16,     0,     0,   529,   530,  -128,     0,     0,
-     0,     0,     0,    13,     0,    14,  -128,     0,     0,     0,
-     0,     0,     0,     0,    22,     0,     0,     0,     0,    24,
-    16,     0,     0,     0,    27,  -128,   436,     0,   437,     5,
-     6,     7,     8,     0,  -128,   438,     0,     9,    10,    11,
-     0,     0,    22,     0,     0,   436,     0,    24,     5,     6,
-     7,     8,    27,    13,   438,    14,     9,    10,    11,     5,
-     6,     7,     8,     0,     0,     0,     0,     9,    10,    11,
-    16,     0,    13,     0,    14,   345,     0,     0,     5,     0,
-     7,   138,     0,    13,     0,    14,     9,    10,    11,    16,
-     0,     0,    22,     0,     0,     0,     0,    24,     0,     0,
-    16,  -396,    13,     0,     0,    15,     0,     0,     0,     0,
-     0,    22,     0,     0,     0,     0,    24,     0,     0,    16,
-  -396,     0,    22,     0,     0,     0,     0,    24,     0,     0,
-     0,     0,   849,     0,     0,     0,     0,     0,     0,   147,
-   148,    22,   149,   150,     0,     0,    24,   151,   152,   153,
-   154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
-   164,   165,   166,   167,   168,   169,     0,   147,   148,     0,
-   149,   150,     0,     0,   170,   151,   152,   153,   154,   155,
-   156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
-   166,   167,   168,   169,     0,   171,     0,     0,     0,     0,
-     0,     0,   368,   147,   148,     0,   149,   150,   172,     0,
-     0,   151,   152,   153,   154,   155,   156,   157,   158,   159,
-   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
-     0,   147,   148,     0,   149,   150,   172,     0,   170,   151,
-   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
-   162,   163,   164,   165,   166,   167,   168,   169,     0,     0,
-     0,     5,     6,     7,     8,     0,   586,   438,     0,     9,
-    10,    11,   172,     5,     6,     7,     8,     0,     0,   635,
-     0,     9,    10,    11,     0,    13,     0,    14,     0,     0,
-     0,     0,     0,     0,     0,     0,     0,    13,     0,    14,
-   172,     0,    16,     5,     0,     7,   138,     5,     6,     7,
-     8,     9,    10,    11,    16,     9,    10,    11,     0,     0,
-     0,     0,     0,     0,    22,     0,     0,    13,     0,    24,
-     0,    13,     0,    14,     0,     0,    22,     5,     0,     7,
-   281,    24,     0,     0,    16,     9,    10,    11,    16,     0,
-     0,     0,     0,     0,   869,     0,     0,     0,     0,     0,
-     0,    13,     0,     0,     0,     0,    22,     0,     0,     0,
-    22,    24,     0,     0,     0,    24,     0,     0,    16,   246,
-   247,   248,   870,   249,   250,   251,   252,   253,   254,   255,
-   256,   257,   258,   259,   260,   261,   262,    14,     0,     0,
-    22,     0,   246,   247,   248,    24,   249,   250,   251,   252,
-   253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
-   246,   247,   248,   908,   249,   250,   251,   252,   253,   254,
-   255,   256,   257,   258,   259,   260,   261,   262,   246,   247,
-   248,     0,   249,   250,   251,   252,   253,   254,   255,   256,
-   257,   258,   259,   260,   261,   262
+/* YYPGOTO[NTERM-NUM].  */
+static const yytype_int16 yypgoto[] =
+{
+    -811,  -811,  -811,  -811,  -811,    79,  -375,  -811,  -811,  -811,
+    -811,  -811,  -811,  -811,   -15,  -811,   -58,   443,  -231,   458,
+    -811,  -811,   -75,  -811,   135,  -811,  -811,  -811,  -811,  -811,
+      44,  -811,  -299,  -811,  -302,   553,  -811,  -811,   218,  -811,
+     -20,  -161,    84,    -1,   794,  -811,   251,    19,    10,  -164,
+     616,    18,  -237,  -584,   -82,  -201,  -140,  -811,  -811,  -811,
+     160,     6,    48,  -811,   483,  -811,   249,  -811,  -585,  -811,
+     153,  -811,  -602,  -811,  -811,   224,  -811,  -811,  -811,  -811,
+    -811,  -811,   -51,  -115,  -477,   -17,  -811,  -811,  -811,   -41,
+    -811,  -811,  -811,  -811,  -811,   425,   -42,  -811,   554,   439,
+     254,   555,   434,     3,   -70,  -150,  -157,  -141,   258,  -811,
+    -811,  -260,  -811,  -811,  -811,   338,   128,  -811,  -195,  -811,
+    -811,  -811,  -811,  -135,  -518,  -691,   261,  -811,    38,  -811,
+    -811,  -811,  -811,  -811,  -811,  -811,  -811,  -811,  -811,    42,
+    -811,  -810,     0,  -811,    -3,  -811,   521,  -811,  -356,  -811,
+     510,   518,   379,  -292,  -811,  -811,  -811,  -811,    25,  -811,
+     910,  -811,  -811,  -811,  -811,  -811,  -811,  -811,  -811,  -811,
+    -811,  -811,  -811,  -811,  -811,    -5,     5,  -358,  -811,   398,
+    -811,   317,   176,  -811,  -811,  -811,  -811,  -811,  -811,  -811,
+    -288,  -811,  -811,  -811,   180,   415,  -811,  -811,  -811,  -811,
+     -33,   646,  -811,  -811,   431,  -811,   186,   441,  -811,   535,
+     546,   -80,  -811,  -110,  -811,  -811,   272,   399,  -811,  -811,
+    -811,  -811,  -811,  -811,   598,  -811,  -811,  -811
 };
 
-static const short yycheck[] = {    56,
-    57,    16,    24,    33,    19,    20,     2,     3,    23,   233,
-    25,    26,    31,     2,     3,    85,    22,   207,    24,   317,
-     2,     3,   309,    38,    39,    40,    91,   201,    66,   279,
-   336,    83,   175,   338,    32,    33,   342,   198,   267,   206,
-   140,   324,   175,   143,    95,    67,    42,   405,   573,    71,
-   221,   221,    36,    42,   114,     2,     3,   429,    77,    74,
-    42,    67,     9,    10,    11,    71,    85,   640,   551,    53,
-    54,    55,   105,   106,   680,   274,   832,   427,   111,    33,
-   192,     1,     1,     9,    31,     3,    33,     1,   202,   122,
-     1,    10,   107,   236,   725,    42,    80,    76,    38,   273,
-   133,    38,    81,    57,    88,     3,   519,    38,     0,   276,
-   523,   171,    45,   744,    45,    36,    38,     0,    30,    59,
-    30,     3,     4,    59,    42,   315,    38,   883,    59,   144,
-    77,   146,    30,     3,     4,   418,    83,    58,    85,    76,
-   197,   666,    82,   749,    91,    59,   902,   212,    81,   905,
-    76,   907,    50,   566,    76,   170,   569,    77,    59,   915,
-   114,    59,   412,    82,   325,   180,   181,   906,   183,   184,
-   189,    82,     3,     4,   193,   336,    45,   237,   235,   350,
-   350,   342,   242,   202,   244,    67,   415,   537,    77,   143,
-    72,   947,    81,   140,    59,   934,   143,    67,    27,    38,
-    82,    30,    72,   402,    77,     3,     4,    36,   814,   408,
-   225,   268,    82,    59,   279,   740,   330,   171,   275,    50,
-   334,   333,   206,   238,    65,   708,   709,     1,   371,     3,
-     4,    30,   292,   217,    82,   518,    67,    76,   525,   221,
-    82,    72,   189,    77,   616,   192,   193,    81,    77,    30,
-   265,   266,    81,    59,     3,   202,    82,   607,     7,    38,
-    59,    60,   433,   433,    77,   212,    45,   221,    81,    67,
-    38,    27,     3,     4,    72,   848,   634,    45,    59,    60,
-   302,    30,   339,   237,    82,   300,     3,     4,   242,    59,
-   244,    76,   276,    67,     3,     4,   302,    59,    72,   582,
-   351,    50,   353,    59,    60,    81,   467,    76,   469,    76,
-    59,   330,    81,    30,    81,   334,     3,     4,     5,     6,
-     7,    38,   609,     9,   381,    76,    76,   274,   853,    75,
-    81,   364,    76,    50,   558,    77,    67,    81,   292,    81,
-   483,    72,    59,   358,     3,   329,     3,   412,     7,   347,
-    59,   349,    77,   410,    76,    72,    81,   586,    67,    59,
-    60,    77,   422,    72,    38,    81,   595,    82,   350,   512,
-    77,    30,   319,    30,    81,     7,    76,    59,   661,   512,
-    67,   664,     5,   330,     7,    72,   333,   334,     3,     4,
-    59,    50,     7,    50,   644,   349,   350,    77,    30,   414,
-    59,    60,    59,    60,   426,   710,     3,     4,    59,    60,
-   440,   698,    77,    59,    60,    30,    81,    78,    50,    82,
-   426,   582,   418,   453,    78,    76,   625,    59,    60,   418,
-    76,   429,    76,   429,    76,    50,     3,     4,     3,     4,
-   429,   439,   440,    76,    59,    38,   589,    30,   619,   619,
-   624,   551,   552,    77,   683,   402,   630,    72,   405,   626,
-   475,   408,    59,    30,   631,    30,    76,    50,   422,    59,
-    67,   418,   722,    38,   421,    72,    59,    60,    77,   433,
-    59,    60,   429,    50,   514,    50,   440,    27,    77,    78,
-    30,   652,    59,   440,    59,   510,    36,    48,    49,   453,
-    10,   662,    77,   664,   534,    72,    81,    72,    76,   708,
-   709,    63,    63,   532,    76,   513,   715,   716,   742,    59,
-    60,   517,    82,    77,    68,    69,    70,    81,   517,    59,
-    60,   818,   551,   552,    78,   533,   534,    77,    77,    59,
-    60,    81,    81,   337,    27,   615,     9,   545,   546,    83,
-   344,    77,    78,     4,     5,     6,     7,   781,   352,    77,
-   514,    12,    13,    14,   562,   563,   581,   514,   620,   621,
-   517,    36,   642,   611,   612,     3,     4,    28,    77,   644,
-   534,   600,    50,    51,    52,   532,    67,   534,    77,    78,
-   605,   897,   546,   899,    45,    36,   615,    68,    69,    70,
-    76,   653,    30,    81,   551,   552,   625,    78,   555,   563,
-    48,    49,    50,    51,    52,    38,    67,    78,   616,    76,
-   616,    72,    50,   642,    59,    60,    77,   616,    68,    69,
-    70,    59,    60,   126,   127,     3,     4,    76,    78,     7,
-    76,    38,   626,   941,    76,    76,    76,   631,    68,    69,
-    70,   949,    63,   600,   711,    76,   671,   722,    78,    83,
-   884,    83,    30,    76,    82,   619,    76,   614,   615,   616,
-    63,    76,    36,   620,   621,    83,    76,    78,   625,    78,
-    78,    32,    50,    38,    76,   742,    77,   634,   878,   708,
-   709,    59,    60,   640,    83,   642,   715,   716,    81,    76,
-   924,   925,     4,     5,     6,     7,   653,    77,     3,    81,
-    12,    13,    14,     6,     7,   767,    77,   732,    78,    12,
-    13,    14,    38,    63,   781,    83,    28,   742,    30,    78,
-    78,    38,    38,    78,    81,   792,   897,    63,   899,    38,
-   759,    78,    81,    45,     1,    63,   742,     4,     5,     6,
-     7,    83,    38,   742,    78,    12,    13,    14,    59,    59,
-   742,   708,   709,    59,    38,    67,   781,    77,   715,   716,
-    72,    28,   802,   830,   796,    77,   833,   834,   793,   812,
-   850,   575,   576,    77,   841,   579,     7,    38,    45,   795,
-   796,    16,    77,    77,    59,   742,   848,    78,    77,   856,
-     5,     6,     7,   801,   802,    77,   863,    12,    13,    14,
-    67,    59,   759,    63,    76,    72,   812,   874,    17,    77,
-   767,    76,    76,   812,    77,    82,     9,   884,    77,    76,
-   812,   850,    77,   627,   628,   629,    77,    59,   632,   633,
-    54,    55,    81,    57,    58,    59,    60,    77,   802,   906,
-    76,     4,     5,     6,     7,   802,    76,     0,    77,    12,
-    13,    14,    76,   657,    77,   812,     0,   415,   241,   884,
-   833,   928,   325,   246,   247,    28,   662,   934,   251,   252,
-   253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
-    87,   643,    45,   414,   282,   689,   690,   691,   747,   812,
-   477,   848,   650,   850,     5,     6,     7,   679,   350,   652,
-   469,    12,    13,    14,    67,   358,   583,   475,   884,    72,
-     1,   662,     3,     4,     5,     6,     7,     8,     9,    30,
-    11,    12,    13,    14,    15,   729,    17,    18,    19,    20,
-    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
-    31,   664,    33,    34,   884,   929,   931,   409,    25,    40,
-   555,   421,    43,   421,    45,   621,   542,    48,    49,    50,
-   767,   764,   535,    54,    55,   517,   301,   759,    59,    60,
-   512,   683,   776,    64,   417,    66,    67,   589,   417,   371,
-    71,    72,    -1,    -1,    75,    -1,    77,    78,    79,    80,
-    -1,    82,    45,    46,    47,    48,    49,    50,    51,    52,
-   383,   384,    44,    45,    46,    47,    48,    49,    50,    51,
-    52,     1,    -1,    -1,     4,     5,     6,     7,    -1,    -1,
-    10,    -1,    12,    13,    14,   829,    41,    42,    43,    44,
-    45,    46,    47,    48,    49,    50,    51,    52,    28,    -1,
-    -1,   845,    -1,    -1,    -1,    -1,     1,    -1,     3,     4,
-     5,     6,     7,     8,     9,    45,    11,    12,    13,    14,
-    15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
-    25,    26,    27,    28,    29,    30,    31,    67,    33,    34,
-    -1,    -1,    72,    -1,    -1,    40,    -1,    -1,    43,    -1,
-    45,   474,    82,    48,    49,    50,    -1,    -1,    -1,    54,
-    55,    -1,    -1,    -1,    59,    60,    -1,    -1,    -1,    64,
-   493,    66,    67,    -1,    -1,    -1,    71,    72,    -1,    -1,
-    75,    -1,    77,    -1,    79,    80,    -1,    82,    -1,    -1,
-     1,    -1,     3,     4,    -1,    -1,    -1,     8,     9,    -1,
-    11,    -1,    -1,    -1,    15,    -1,    17,    18,    19,    20,
-    21,    22,    23,    24,    25,    26,    27,    -1,    29,    -1,
-    31,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
-    54,    55,    43,    57,    58,    59,    60,    48,    49,    50,
-    -1,    -1,   565,    54,    55,    -1,    -1,    -1,    59,    60,
-    -1,    -1,    -1,    64,    -1,    66,    67,    -1,    -1,    -1,
-    71,    72,   585,    -1,    75,    -1,    77,    78,    79,    80,
-     1,    82,     3,     4,    -1,    -1,    -1,     8,     9,    -1,
-    11,    -1,    -1,    -1,    15,    -1,    17,    18,    19,    20,
-    21,    22,    23,    24,    25,    26,    27,    -1,    29,    -1,
-    31,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
-    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,    49,    50,
-    -1,    -1,    -1,    54,    55,    -1,    -1,   650,    59,    60,
-    -1,    -1,    -1,    64,    -1,    66,    67,    -1,    -1,    -1,
-    71,    72,    -1,    -1,    75,    -1,    77,    -1,    79,    80,
-    -1,    82,    -1,    -1,    -1,    -1,     1,   680,    -1,     4,
-     5,     6,     7,    -1,   687,    -1,    -1,    12,    13,    14,
-    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
-   703,    -1,    27,    28,    -1,    30,    -1,    -1,    -1,    -1,
-    -1,    36,    46,    47,    48,    49,    50,    51,    52,    -1,
-    45,    -1,   725,    -1,    -1,   728,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    59,    60,    -1,    -1,    -1,    -1,
-    -1,   744,    67,    -1,   747,    -1,   749,    72,    -1,    -1,
-    -1,    -1,    77,    -1,    -1,    -1,    81,    82,     4,    -1,
-     6,     7,    -1,   766,    -1,    -1,    12,    13,    14,    -1,
-     1,    -1,     3,     4,   777,    -1,    -1,     8,     9,    -1,
-    11,    -1,    28,    -1,    15,   788,    17,    18,    19,    20,
-    21,    22,    23,    24,    25,    26,    27,    -1,    29,    45,
-    31,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
-    -1,   814,    43,    -1,    -1,    -1,    -1,    48,    49,    50,
-    -1,    67,    -1,    54,    55,    -1,    72,    -1,    59,    60,
-    -1,    77,    78,    64,    -1,    66,    67,    -1,    -1,    -1,
-    71,    72,    -1,    -1,    75,    -1,    77,    -1,    79,    80,
-     1,    82,     3,     4,    -1,     6,     7,     8,     9,    -1,
-    11,    12,    13,    14,    -1,    -1,   869,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    -1,
-    31,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
-    -1,    -1,    43,    -1,    45,    -1,    -1,    48,    49,    50,
-    -1,    -1,    -1,    54,    55,    -1,    -1,    -1,    59,    60,
-    -1,    -1,    -1,    64,    -1,    66,    67,    -1,    -1,    -1,
-    71,    72,    -1,    -1,    75,    -1,    -1,    -1,    79,    80,
-     1,    82,     3,     4,    -1,    -1,    -1,     8,     9,    37,
-    11,    39,    40,    41,    42,    43,    44,    45,    46,    47,
-    48,    49,    50,    51,    52,    -1,    -1,    -1,    29,    -1,
-    31,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
-    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,    49,    50,
-    -1,    -1,    -1,    54,    55,    -1,    -1,    58,    59,    60,
-    -1,    -1,    -1,    64,    -1,    66,    67,    -1,    -1,    -1,
-    71,    72,    -1,    -1,    75,    -1,    -1,    78,    79,    80,
-     1,    82,     3,     4,    -1,    -1,    -1,     8,     9,    -1,
-    11,    40,    41,    42,    43,    44,    45,    46,    47,    48,
-    49,    50,    51,    52,    -1,    -1,    -1,    -1,    29,    -1,
-    31,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
-    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,    49,    50,
-    -1,    -1,    -1,    54,    55,    -1,    -1,    58,    59,    60,
-    -1,    -1,    -1,    64,    -1,    66,    67,    -1,    -1,    -1,
-    71,    72,    -1,    -1,    75,    -1,    -1,    78,    79,    80,
-     1,    82,     3,    -1,    -1,    -1,    -1,     8,     9,    -1,
-    11,    42,    43,    44,    45,    46,    47,    48,    49,    50,
-    51,    52,    -1,    -1,    -1,    -1,    -1,    -1,    29,    -1,
-    31,    -1,    33,    34,    -1,    36,    -1,    -1,    -1,    40,
-    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,    49,    50,
-    -1,    -1,    -1,    54,    55,    -1,    -1,    58,    59,    60,
-    -1,    -1,    -1,    64,    -1,    66,    -1,    -1,    -1,    -1,
-    71,    -1,    -1,    -1,    75,     1,    -1,     3,    79,    80,
-    -1,    82,     8,     9,    -1,    11,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    29,    -1,    31,    -1,    33,    34,    -1,
-    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    -1,
-    -1,    -1,    48,    49,    50,    -1,    -1,    -1,    54,    55,
-    -1,    -1,    -1,    59,    60,    -1,    -1,    -1,    64,    -1,
-    66,    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    75,
-     1,    -1,     3,    79,    80,    -1,    82,     8,     9,    -1,
-    11,     1,    -1,    -1,     4,    -1,     6,     7,    -1,    -1,
-    -1,    -1,    12,    13,    14,    -1,    -1,    -1,    29,    -1,
-    31,    -1,    33,    34,    -1,    -1,    -1,    -1,    28,    40,
-    -1,    31,    43,    -1,    -1,    -1,    -1,    48,    49,    50,
-    -1,    -1,    -1,    54,    55,    45,    -1,    -1,    59,    60,
-    -1,    -1,    -1,    64,    -1,    66,    -1,    -1,    -1,    -1,
-    71,    -1,    -1,    -1,    75,    -1,    -1,    67,    79,    80,
-     1,    82,    72,     4,     5,     6,     7,    77,    78,    -1,
-    -1,    12,    13,    14,    -1,    -1,    -1,    -1,    -1,     1,
-    -1,    -1,     4,     5,     6,     7,    27,    28,    -1,    30,
-    12,    13,    14,    -1,    -1,    36,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    45,    27,    28,    -1,    30,    -1,
-    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    59,    60,
-    -1,    -1,    -1,    45,    -1,    -1,    67,    -1,    -1,    -1,
-    -1,    72,    -1,    -1,    -1,    -1,    77,    -1,    -1,    -1,
-    81,    82,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,
-    72,    -1,    -1,    -1,    -1,    77,    -1,    -1,     1,    81,
-    82,     4,     5,     6,     7,    -1,    -1,    -1,    -1,    12,
-    13,    14,    -1,    -1,    -1,    -1,    -1,     1,    -1,    -1,
-     4,     5,     6,     7,    -1,    28,    -1,    30,    12,    13,
-    14,     4,    -1,     6,     7,    -1,    -1,    -1,    -1,    12,
-    13,    14,    45,    -1,    28,     3,    30,    -1,    -1,    -1,
-     8,     9,    -1,    11,    -1,    28,    -1,    30,    -1,    -1,
-    -1,    45,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
-    -1,    29,    45,    31,    -1,    33,    34,    50,    -1,    82,
-    -1,    -1,    40,    67,    -1,    43,    59,    60,    72,    -1,
-    48,    49,    50,    -1,    67,    -1,    54,    55,    82,    72,
-    -1,    59,    60,    -1,     3,    -1,    64,    -1,    66,     8,
-     9,    -1,    11,    71,    -1,    -1,    -1,    75,    -1,    -1,
-    -1,    79,    80,    -1,    -1,    83,    -1,    -1,    -1,    -1,
-    29,    -1,    31,    -1,    33,    34,    -1,    -1,    -1,    -1,
-    -1,    40,    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,
-    49,    50,    -1,    -1,    -1,    54,    55,    -1,    -1,    -1,
-    59,    60,    -1,     3,    -1,    64,    -1,    66,     8,     9,
-    -1,    11,    71,    -1,    -1,    -1,    75,    -1,    -1,    -1,
-    79,    80,    -1,    -1,    83,    -1,    -1,    -1,    -1,    29,
-    -1,    31,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,
-    40,    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,    49,
-    50,    -1,    -1,    -1,    54,    55,    -1,    -1,    -1,    59,
-    60,    -1,     3,    -1,    64,    -1,    66,     8,     9,    -1,
-    11,    71,    -1,    -1,    -1,    75,    -1,    -1,    -1,    79,
-    80,    -1,    -1,    83,    -1,    -1,    -1,    -1,    29,    -1,
-    31,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
-    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,    49,    50,
-    -1,    -1,    -1,    54,    55,    -1,    -1,    -1,    59,    60,
-    -1,     3,    -1,    64,    -1,    66,     8,     9,    -1,    11,
-    71,    -1,    -1,    -1,    75,    -1,    -1,    -1,    79,    80,
-    -1,    -1,    83,    -1,    -1,    -1,    -1,    29,    -1,    31,
-    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
-    -1,    43,    -1,    -1,    -1,    -1,    48,    49,    50,    -1,
-    -1,    -1,    54,    55,    -1,    -1,    -1,    59,    60,    -1,
-    -1,    -1,    64,    -1,    66,    -1,    -1,    -1,    -1,    71,
-    -1,    -1,    -1,    75,    -1,    -1,    -1,    79,    80,    -1,
-    -1,    83,     3,     4,     5,     6,     7,     8,     9,    -1,
-    11,    12,    13,    14,    15,    -1,    17,    18,    19,    20,
-    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
-    31,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
-    -1,    -1,    43,    -1,    45,    -1,    -1,    48,    49,    50,
-    -1,    -1,    -1,    54,    55,    -1,    -1,    -1,    59,    60,
-    -1,    -1,    -1,    64,    -1,    66,    67,    -1,    -1,    -1,
-    71,    72,    -1,    -1,    75,    -1,    77,    -1,    79,    80,
-    -1,    82,     3,     4,    -1,    -1,    -1,     8,     9,    -1,
-    11,    -1,    -1,    -1,    15,    -1,    17,    18,    19,    20,
-    21,    22,    23,    24,    25,    26,    27,    -1,    29,    -1,
-    31,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
-    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,    49,    50,
-    -1,    -1,    -1,    54,    55,    -1,     3,    -1,    59,    60,
-    -1,     8,     9,    64,    11,    66,    67,    -1,    -1,    -1,
-    71,    72,    -1,    -1,    75,    -1,    77,    -1,    79,    80,
-    -1,    82,    29,    -1,    31,    -1,    33,    34,    -1,    -1,
-    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    -1,    -1,
-    -1,    48,    49,    50,    -1,    -1,    -1,    54,    55,    -1,
-    -1,    -1,    59,    60,    -1,    -1,    -1,    64,    -1,    66,
-    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    75,    -1,
-    -1,    -1,    79,    80,    -1,    82,     3,     4,    -1,     6,
-     7,    -1,    -1,    -1,    11,    12,    13,    14,    15,    16,
-    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
-    27,    28,    29,    -1,     3,     4,     5,     6,     7,     8,
-     9,    38,    11,    12,    13,    14,     4,     5,     6,     7,
-    -1,    -1,    -1,    -1,    12,    13,    14,    -1,    -1,    28,
-    29,    30,    31,    -1,    33,    34,    -1,    -1,    -1,    -1,
-    28,    40,    30,    -1,    43,    72,    45,    -1,    -1,    48,
-    49,    50,    -1,    -1,    81,    54,    55,    45,    -1,    -1,
-    59,    60,    -1,    -1,    -1,    64,    -1,    66,    67,    -1,
-    -1,    -1,    71,    72,    -1,    -1,    75,    -1,    -1,    67,
-    79,    80,     3,     4,    72,     6,     7,     8,     9,    77,
-    11,    12,    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    29,    -1,
-    31,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
-    -1,    -1,    43,    -1,    45,    -1,    -1,    48,    49,    50,
-    -1,    -1,    -1,    54,    55,    -1,     3,    -1,    59,    60,
-    -1,     8,     9,    64,    11,    66,    67,    -1,    -1,    -1,
-    71,    72,    -1,    -1,    75,    -1,    -1,    -1,    79,    80,
-    -1,    -1,    29,    -1,    31,    -1,    33,    34,    -1,    -1,
-    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    -1,    -1,
-    -1,    48,    49,    50,    -1,    -1,    -1,    54,    55,    -1,
-     3,    -1,    59,    60,    -1,     8,     9,    64,    11,    66,
-    67,    -1,    -1,    -1,    71,    -1,    -1,    -1,    75,    -1,
-    -1,    -1,    79,    80,    -1,    -1,    29,    -1,    31,    -1,
-    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
-    43,    -1,    -1,    -1,    -1,    48,    49,    50,    -1,    -1,
-    -1,    54,    55,    -1,     3,    -1,    59,    60,    -1,     8,
-     9,    64,    11,    66,    -1,    -1,    -1,    -1,    71,    -1,
-    -1,    -1,    75,    -1,    77,    -1,    79,    80,    -1,    -1,
-    29,    -1,    31,    -1,    33,    34,    -1,    -1,    -1,    -1,
-    -1,    40,    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,
-    49,    50,    -1,    -1,    -1,    54,    55,    -1,     3,    -1,
-    59,    60,    -1,     8,     9,    64,    11,    66,    -1,    -1,
-    -1,    -1,    71,    -1,    -1,    -1,    75,    -1,    -1,    -1,
-    79,    80,    -1,    -1,    29,    -1,    31,    -1,    33,    34,
-    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,
-    -1,    -1,    -1,    48,    49,    50,    -1,    -1,    -1,    54,
-    55,    -1,     3,    -1,    59,    60,    -1,     8,     9,    64,
-    11,    66,    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,
-    75,    -1,    -1,    -1,    79,    80,    -1,    -1,    29,    -1,
-    31,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
-    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,    49,    50,
-    -1,    -1,    -1,    54,    55,    -1,     3,    -1,    59,    60,
-    -1,     8,     9,    64,    11,    66,    -1,    -1,    -1,    -1,
-    71,    -1,    -1,    -1,    75,    -1,    -1,    -1,    79,    80,
-    -1,    -1,    29,    -1,    31,    -1,    33,    34,    -1,    -1,
-    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    -1,    -1,
-    -1,    48,    49,    50,    -1,    -1,    -1,    54,    55,    -1,
-    -1,    -1,    59,    60,    -1,    -1,    -1,    64,    -1,    66,
-    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    75,    -1,
-    -1,     1,    79,    80,     4,    -1,     6,     7,    -1,    -1,
-    -1,    -1,    12,    13,    14,    -1,    -1,    -1,    -1,     1,
-    -1,    -1,     4,    -1,     6,     7,    -1,    -1,    28,    -1,
-    12,    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    45,    28,    -1,    -1,    -1,
-    -1,    -1,    -1,     1,    -1,     3,     4,     5,     6,     7,
-    -1,    -1,    -1,    45,    12,    13,    14,    67,    68,    69,
-    70,    -1,    72,    -1,    -1,    -1,    -1,    77,    78,    27,
-    28,    -1,    30,    31,    -1,    67,    68,    69,    70,    -1,
-    72,    -1,    -1,    -1,    -1,    77,    78,    45,    -1,    -1,
-    48,    49,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    59,    -1,    61,    62,    63,    -1,    -1,    -1,    67,
-    -1,    -1,    -1,    71,    72,    73,    74,    -1,     1,    77,
-     3,     4,     5,     6,     7,    -1,    -1,    -1,    -1,    12,
-    13,    14,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    28,     1,    30,     3,     4,
-     5,     6,     7,    -1,    -1,    -1,    -1,    12,    13,    14,
-    -1,    -1,    45,    -1,    -1,    48,    49,    50,    -1,    -1,
-    -1,    -1,    -1,    28,    -1,    30,    59,    -1,    -1,    -1,
-    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
-    45,    -1,    -1,    -1,    77,    50,     1,    -1,     3,     4,
-     5,     6,     7,    -1,    59,    10,    -1,    12,    13,    14,
-    -1,    -1,    67,    -1,    -1,     1,    -1,    72,     4,     5,
-     6,     7,    77,    28,    10,    30,    12,    13,    14,     4,
-     5,     6,     7,    -1,    -1,    -1,    -1,    12,    13,    14,
-    45,    -1,    28,    -1,    30,     1,    -1,    -1,     4,    -1,
-     6,     7,    -1,    28,    -1,    30,    12,    13,    14,    45,
-    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,    -1,    -1,
-    45,    76,    28,    -1,    -1,    31,    -1,    -1,    -1,    -1,
-    -1,    67,    -1,    -1,    -1,    -1,    72,    -1,    -1,    45,
-    76,    -1,    67,    -1,    -1,    -1,    -1,    72,    -1,    -1,
-    -1,    -1,    77,    -1,    -1,    -1,    -1,    -1,    -1,     3,
-     4,    67,     6,     7,    -1,    -1,    72,    11,    12,    13,
-    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
-    24,    25,    26,    27,    28,    29,    -1,     3,     4,    -1,
-     6,     7,    -1,    -1,    38,    11,    12,    13,    14,    15,
-    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
-    26,    27,    28,    29,    -1,    59,    -1,    -1,    -1,    -1,
-    -1,    -1,    38,     3,     4,    -1,     6,     7,    72,    -1,
-    -1,    11,    12,    13,    14,    15,    16,    17,    18,    19,
-    20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
-    -1,     3,     4,    -1,     6,     7,    72,    -1,    38,    11,
-    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
-    22,    23,    24,    25,    26,    27,    28,    29,    -1,    -1,
-    -1,     4,     5,     6,     7,    -1,    38,    10,    -1,    12,
-    13,    14,    72,     4,     5,     6,     7,    -1,    -1,    10,
-    -1,    12,    13,    14,    -1,    28,    -1,    30,    -1,    -1,
-    -1,    -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    30,
-    72,    -1,    45,     4,    -1,     6,     7,     4,     5,     6,
-     7,    12,    13,    14,    45,    12,    13,    14,    -1,    -1,
-    -1,    -1,    -1,    -1,    67,    -1,    -1,    28,    -1,    72,
-    -1,    28,    -1,    30,    -1,    -1,    67,     4,    -1,     6,
-     7,    72,    -1,    -1,    45,    12,    13,    14,    45,    -1,
-    -1,    -1,    -1,    -1,    10,    -1,    -1,    -1,    -1,    -1,
-    -1,    28,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
-    67,    72,    -1,    -1,    -1,    72,    -1,    -1,    45,    35,
-    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
-    46,    47,    48,    49,    50,    51,    52,    30,    -1,    -1,
-    67,    -1,    35,    36,    37,    72,    39,    40,    41,    42,
-    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
-    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
-    45,    46,    47,    48,    49,    50,    51,    52,    35,    36,
-    37,    -1,    39,    40,    41,    42,    43,    44,    45,    46,
-    47,    48,    49,    50,    51,    52
+/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
+   positive, shift that token.  If negative, reduce the rule which
+   number is the opposite.  If YYTABLE_NINF, syntax error.  */
+#define YYTABLE_NINF -501
+static const yytype_int16 yytable[] =
+{
+     125,   141,    34,    65,    34,   212,    69,    70,   339,    38,
+      73,    38,    65,    76,    85,    87,    83,    55,    56,    57,
+     437,    74,    35,   436,    35,    96,    98,   100,    44,    72,
+      44,    72,   229,   230,   209,   181,   461,   401,   232,    82,
+     365,    90,   466,    34,   413,    88,   332,   336,   463,   241,
+      38,   502,   220,    89,   316,   225,   533,   655,   722,   349,
+     273,   190,   192,    35,   184,   329,   452,   301,   188,    44,
+     213,   529,   279,   351,    72,   285,   629,   143,    72,   822,
+     753,  -113,   857,   560,    52,    82,    94,   911,   185,   333,
+     453,   208,   271,    82,   231,    -2,   197,   300,   919,   219,
+       4,   147,   931,    94,    94,    94,   943,   751,   186,   324,
+      53,    54,  -337,  -337,  -337,  -337,   339,   410,   404,   236,
+    -337,  -337,  -337,   101,    16,   912,   941,   198,   199,   673,
+      94,   289,   187,   293,   143,   405,  -337,   148,    94,   858,
+     932,   323,   777,   866,   944,   182,   340,   341,   278,   818,
+     744,   278,    18,  -337,    16,   823,    16,   295,   371,   551,
+     517,   815,  -113,   284,   363,   183,    -3,   304,   305,    58,
+     308,   309,    59,   220,   314,  -337,   296,   413,   318,   368,
+    -337,   620,   712,   713,   198,   199,   401,   192,   349,   -36,
+    -112,   143,   329,   415,   902,   459,    18,    82,   416,    60,
+     208,    82,   351,   329,   356,   146,    61,    62,    18,   329,
+     208,   402,   357,   915,   861,    16,   918,   457,   920,   409,
+     219,   460,   313,   779,   783,   376,   928,   197,   198,   199,
+    -176,    61,    62,   770,   771,  -176,    84,    61,    62,   610,
+     220,   143,   375,   703,   221,    16,   315,   379,   352,   380,
+     224,   697,   399,    61,    62,   403,    94,   143,   952,   226,
+     605,   -35,   143,   500,   143,   275,   878,    94,    18,   504,
+      63,   547,   189,   276,   277,    64,   148,  -176,   340,   341,
+     721,  -176,   278,   465,   558,   548,   193,   425,   334,   559,
+     194,   484,   335,   488,   342,    63,   458,   418,   194,   427,
+      64,    63,   238,    77,   202,   239,    64,   313,    77,    72,
+      95,   473,   143,   475,   556,   314,    97,    63,   557,   318,
+      16,   228,    64,   699,   667,   494,    94,    38,   596,   469,
+      16,   471,    99,   597,   575,    16,   575,   886,   208,   240,
+     275,   208,   208,   411,   412,   357,   756,   950,   276,   277,
+     203,   243,   951,    77,   507,   632,   242,   683,   204,   531,
+     532,   501,   271,   627,   277,   640,   690,    61,    62,   284,
+     143,   733,   205,   220,  -478,   734,   243,   352,   378,    94,
+      16,   760,   272,   381,   382,   761,   198,   199,   387,   388,
+     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
+      78,   289,   274,   736,   301,   589,   741,   282,    79,   726,
+     278,   534,   764,    38,   843,    91,   278,    92,   302,   515,
+     772,   553,   554,   528,    61,    62,    38,   524,   775,    38,
+     535,    63,   335,    72,   300,   312,    64,    38,   306,   516,
+      61,    62,   143,    61,    62,   286,   287,   288,    90,   668,
+     536,   319,    88,   143,   683,    77,   202,   547,   345,   776,
+      89,   346,   357,   194,   898,   565,   900,   711,   335,   710,
+     194,   548,   718,   566,   354,   717,   262,   263,   264,   294,
+     411,   412,    16,   631,   635,   361,   405,   726,    63,   362,
+     705,  -279,  -279,    64,   363,   602,   366,   599,   -86,   462,
+     450,   735,   203,   417,    63,   377,   468,    63,   419,    64,
+     204,   687,    64,   420,   474,   616,   617,   615,   515,   575,
+     496,   497,    90,   422,   205,    38,    88,   622,   623,   668,
+     428,   742,   862,  -476,    89,   212,   630,   634,   516,   432,
+      82,   433,    90,   197,   642,   644,    88,    77,   202,   805,
+     104,    61,    62,   450,    89,   540,   541,   542,   449,   628,
+     633,   456,   723,    38,   467,   543,   284,   470,   660,   500,
+     504,   706,   706,   476,    16,   477,   500,   504,   712,   713,
+     701,   702,   730,   645,   480,   692,   245,   247,   805,   486,
+     482,    77,   696,   487,   203,   313,   495,   913,   534,   914,
+     615,   490,   204,   491,   731,   220,   424,   492,   628,    77,
+     192,   579,   493,   313,   526,    63,   205,   535,    16,   498,
+      64,   508,   208,    82,    38,   499,   512,   615,   208,   208,
+     594,   530,   503,   633,   550,   552,    16,   536,   632,   143,
+     555,   572,    38,   569,   946,   570,   627,   277,   208,   606,
+      82,   577,   954,   608,   578,   774,    78,   581,   745,   583,
+     593,   208,   347,   595,    79,     7,   598,     9,   140,   601,
+     540,   541,   542,    11,    12,    13,    94,   557,   624,   339,
+     612,    94,   639,   220,   641,   607,   801,    77,   202,    15,
+     659,   805,    17,   314,   318,   654,   651,   685,   686,   653,
+     314,   318,   649,   540,   541,   542,    18,   698,  -316,   740,
+     540,   541,   542,   704,    16,   -33,   628,   628,   706,   781,
+     762,   747,   676,   633,   633,   801,    77,   625,    24,   800,
+     313,   934,   935,    26,   203,   748,   842,   656,   657,   273,
+     768,   658,   204,   803,   692,   260,   261,   262,   263,   264,
+      38,   216,   217,    16,   749,   763,   205,    11,    12,    13,
+     782,   769,   821,   804,   329,   829,   329,   628,   800,   814,
+     881,   828,   -34,   626,   864,   208,   832,   867,   870,   835,
+     844,   627,   277,   850,   852,   874,   836,   649,   838,   714,
+     715,   716,   839,    74,   719,   720,   840,   845,   847,   880,
+     887,   848,    72,    72,   849,   853,   865,   890,   860,   873,
+      90,   876,   875,   803,    88,   888,   889,   676,   897,   732,
+      38,   891,    89,   197,   755,   894,  -176,   905,   801,   921,
+     906,  -176,   893,   804,   896,   883,   215,   216,   217,   814,
+     767,   916,   925,    11,    12,    13,   929,   933,   939,   930,
+     867,   757,   758,   759,   198,   199,   208,   942,    82,   945,
+     511,    16,   676,   196,   948,   778,   -29,   -29,   -29,   -29,
+     953,   800,   937,  -176,   -29,   -29,   -29,  -176,   867,   868,
+     454,   676,   737,   214,   676,     7,   676,     9,   140,   197,
+     -29,   780,  -176,    11,    12,    13,   724,  -176,   859,   509,
+     414,   728,   817,   826,   582,   752,   472,   -29,   729,    15,
+     576,   580,   265,   266,   831,   479,   267,   268,   269,   270,
+     198,   199,   738,   670,   903,   837,    18,   743,   904,   -29,
+     940,   938,   505,   522,   -29,   892,   638,    75,   830,  -176,
+     709,   523,   621,  -176,   -29,   827,   825,   819,    24,   426,
+     604,   676,   619,    26,   513,   600,   324,   754,  -125,  -125,
+    -125,  -125,  -125,  -125,  -125,   514,  -125,  -125,  -125,  -125,
+    -125,   489,  -125,  -125,  -125,  -125,  -125,  -125,  -125,  -125,
+    -125,  -125,  -125,  -125,  -125,  -125,  -125,     0,  -125,  -125,
+     688,   863,     0,     0,     0,  -125,     0,     0,  -125,     0,
+    -125,     0,     0,  -125,  -125,  -125,   895,   877,  -125,  -125,
+       0,     0,     0,  -125,  -125,     0,   725,   216,   217,  -125,
+       0,  -125,  -125,    11,    12,    13,  -125,  -125,     0,     0,
+    -125,     0,  -125,  -125,  -125,  -125,   662,  -125,  -337,  -337,
+    -337,  -337,  -337,  -337,  -337,     0,  -337,  -337,  -337,  -337,
+    -337,     0,  -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,
+    -337,  -337,  -337,  -337,  -337,  -337,  -337,     0,  -337,  -337,
+       0,     0,     0,    77,   625,  -337,     0,     0,  -337,     0,
+    -337,     0,     0,  -337,  -337,  -337,     0,     0,  -337,  -337,
+       0,   265,   266,  -337,  -337,   267,   268,   269,   270,  -337,
+      16,  -337,  -337,     0,     0,     0,  -337,  -337,     0,     0,
+    -337,     0,  -337,     0,  -337,  -337,   324,  -337,  -337,  -337,
+     626,     0,     0,  -337,  -337,     0,  -337,     0,   627,   277,
+    -337,     0,  -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,
+    -337,  -337,  -337,     0,  -337,     0,  -337,     0,  -337,  -337,
+       0,     0,     0,     0,     0,  -337,     0,     0,  -337,     0,
+       0,     0,     0,  -337,  -337,  -337,     0,     0,  -337,  -337,
+       0,     0,     0,  -337,  -337,     0,     0,     0,     0,  -337,
+       0,  -337,  -337,     0,     0,     0,  -337,  -337,     0,     0,
+    -337,     0,  -337,  -312,  -337,  -337,   854,  -337,  -337,  -337,
+       0,     0,     0,  -337,  -337,     0,  -337,     0,     0,     0,
+    -337,     0,  -337,  -337,  -337,  -337,  -337,  -337,  -337,  -337,
+    -337,  -337,  -337,     0,  -337,     0,  -337,     0,  -337,  -337,
+       0,     0,     0,     0,     0,  -337,     0,     0,  -337,     0,
+       0,     0,     0,  -337,  -337,  -337,     0,     0,  -337,  -337,
+       0,     0,     0,  -337,  -337,     0,     0,     0,     0,  -337,
+       0,  -337,  -337,     0,     0,     0,  -337,  -337,     0,     0,
+    -337,     0,  -337,     0,  -337,  -337,   884,  -337,  -347,  -347,
+       0,     0,     0,  -347,  -347,     0,  -347,     0,     0,     0,
+    -347,     0,  -347,  -347,  -347,  -347,  -347,  -347,  -347,  -347,
+    -347,  -347,  -347,     0,  -347,     0,  -347,     0,  -347,  -347,
+       0,     0,     0,     0,     0,  -347,     0,     0,  -347,     0,
+       0,     0,     0,  -347,  -347,  -347,     0,     0,  -347,  -347,
+       0,     0,     0,  -347,  -347,     0,     0,     0,     0,  -347,
+       0,  -347,  -347,     0,     0,     0,  -347,  -347,     0,     0,
+    -347,     0,  -347,     0,  -347,  -347,   233,  -347,   102,     7,
+       0,     9,   140,   103,   104,     0,   105,    11,    12,    13,
+     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
+     262,   263,   264,    15,   106,     0,    17,     0,   107,   108,
+       0,     0,     0,     0,     0,   109,     0,     0,   110,     0,
+      18,     0,     0,   111,   112,   113,     0,     0,   114,   115,
+       0,     0,     0,   116,   117,     0,     0,     0,     0,   118,
+       0,   119,    24,     0,     0,     0,   120,    26,     0,     0,
+     121,     0,     0,     0,   122,   123,   671,   -95,   672,    62,
+       0,     0,     0,   103,   104,   250,   105,   251,   252,   253,
+     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
+     264,     0,     0,     0,   106,     0,    17,     0,   107,   108,
+       0,     7,     8,     9,    10,   109,     0,   440,   110,    11,
+      12,    13,     0,   111,   112,   113,     0,     0,   114,   115,
+       0,     0,   673,   116,   117,    15,     0,    16,     0,   118,
+       0,   119,    63,     0,     0,     0,   120,    64,     0,     0,
+     121,     0,    18,  -204,   122,   123,   671,   674,   672,    62,
+       0,     0,     0,   103,   104,     0,   105,   258,   259,   260,
+     261,   262,   263,   264,    24,     0,     0,     0,     0,    26,
+       0,     0,     0,     0,   106,     0,    17,     0,   107,   108,
+       0,     0,     0,     0,     0,   109,     0,     0,   110,     0,
+       0,     0,     0,   111,   112,   113,     0,     0,   114,   115,
+       0,     0,   673,   116,   117,     0,     0,     0,     0,   118,
+       0,   119,    63,     0,     0,     0,   120,    64,     0,     0,
+     121,     0,     0,  -269,   122,   123,   671,   674,   102,     0,
+       0,     0,     0,   103,   104,     0,   105,   438,     0,   439,
+       7,     8,     9,    10,     0,     0,   440,     0,    11,    12,
+      13,     0,     0,     0,   106,     0,    17,     0,   107,   108,
+    -217,     0,     0,     0,    15,   109,    16,     0,   110,     0,
+       0,     0,     0,   111,   112,   113,     0,     0,   114,   115,
+       0,    18,  -217,   116,   117,   647,     0,   102,     0,   118,
+       0,   119,   103,   104,     0,   105,   120,     0,     0,     0,
+     121,     0,     0,    24,   122,   123,     0,   674,    26,     0,
+       0,     0,  -397,   106,     0,    17,     0,   107,   108,     0,
+       0,     0,     0,     0,   109,     0,     0,   110,     0,     0,
+       0,     0,   111,   112,   113,     0,     0,   114,   115,   671,
+       0,   102,   116,   117,     0,     0,   103,   104,   118,   105,
+     119,     0,     0,     0,     0,   120,     0,     0,     0,   121,
+       0,     0,     0,   122,   123,     0,   648,   106,     0,    17,
+       0,   107,   108,     0,     0,     0,     0,     0,   109,     0,
+       0,   110,     0,     0,     0,     0,   111,   112,   113,     0,
+       0,   114,   115,     0,     0,   343,   116,   117,   -25,   -25,
+     -25,   -25,   118,     0,   119,     0,   -25,   -25,   -25,   120,
+       0,     0,     0,   121,     0,     0,     0,   122,   123,     0,
+     674,   197,   -25,     0,  -176,     0,     0,     0,     0,  -176,
+     337,     0,     0,   -21,   -21,   -21,   -21,     0,     0,   -25,
+       0,   -21,   -21,   -21,   257,   258,   259,   260,   261,   262,
+     263,   264,   198,   199,     0,     0,   197,   -21,     0,  -176,
+       0,   -25,     0,     0,  -176,     0,   -25,     0,     0,     0,
+       0,  -176,     0,     0,   -21,  -176,   -25,   324,     0,     0,
+    -116,  -116,  -116,  -116,     0,     0,  -116,     0,  -116,  -116,
+    -116,     0,     0,     0,     0,     0,   -21,     0,     0,     0,
+       0,   -21,     0,     0,  -116,     0,  -176,     0,     0,     0,
+    -176,   -21,   324,     0,     0,     7,     8,     9,    10,     0,
+       0,  -116,     0,    11,    12,    13,     7,     8,     9,    10,
+       0,     0,     0,     0,    11,    12,    13,     0,     0,    15,
+       0,    16,     0,  -116,     0,     0,     0,     0,  -116,     0,
+      15,     0,    16,     0,     0,     0,    18,   324,  -116,     0,
+    -500,  -500,  -500,  -500,     0,     0,     0,    18,  -500,  -500,
+    -500,     0,     0,     0,   102,     0,     0,     0,    24,   103,
+     104,     0,   105,    26,  -500,     0,  -500,     0,     0,    24,
+       0,     0,     0,  -498,    26,     0,     0,     0,     0,    86,
+     106,  -500,    17,     0,   107,   108,     0,     0,     0,     0,
+       0,   109,     0,     0,   110,     0,     0,     0,     0,   111,
+     112,   113,     0,  -500,   114,   115,     0,     0,  -500,   116,
+     117,     0,     0,     0,     0,   118,     0,   119,  -500,   102,
+       0,     0,   120,     0,   103,   104,   121,   105,     0,     0,
+     122,   123,     0,     0,   322,   255,   256,   257,   258,   259,
+     260,   261,   262,   263,   264,   106,     0,    17,     0,   107,
+     108,     0,     0,     0,     0,     0,   109,     0,     0,   110,
+       0,     0,     0,     0,   111,   112,   113,     0,     0,   114,
+     115,     0,     0,     0,   116,   117,     0,     0,   102,     0,
+     118,     0,   119,   103,   104,     0,   105,   120,     0,     0,
+       0,   121,     0,     0,     0,   122,   123,     0,     0,   408,
+       0,     0,     0,     0,   106,     0,    17,     0,   107,   108,
+       0,     0,     0,     0,     0,   109,     0,     0,   110,     0,
+       0,     0,     0,   111,   112,   113,     0,     0,   114,   115,
+       0,     0,     0,   116,   117,     0,     0,   102,     0,   118,
+       0,   119,   103,   104,     0,   105,   120,     0,     0,     0,
+     121,     0,     0,     0,   122,   123,     0,     0,   464,     0,
+       0,     0,     0,   106,     0,    17,     0,   107,   108,     0,
+       0,     0,     0,     0,   109,     0,     0,   110,     0,     0,
+       0,     0,   111,   112,   113,     0,     0,   114,   115,     0,
+       0,     0,   116,   117,     0,     0,   102,     0,   118,     0,
+     119,   103,   104,     0,   105,   120,     0,     0,     0,   121,
+       0,     0,     0,   122,   123,     0,     0,   506,     0,     0,
+       0,     0,   106,     0,    17,     0,   107,   108,     0,     0,
+       0,     0,     0,   109,     0,     0,   110,     0,     0,     0,
+       0,   111,   112,   113,     0,     0,   114,   115,     0,     0,
+       0,   116,   117,     0,     0,     0,     0,   118,     0,   119,
+       0,     0,     0,     0,   120,     0,     0,     0,   121,     0,
+       0,     0,   122,   123,     0,     0,   773,   672,   784,     8,
+       9,    10,   103,   104,     0,   105,    11,    12,    13,   785,
+       0,   786,   787,   788,   789,   790,   791,   792,   793,   794,
+     795,   796,    15,   106,    16,    17,     0,   107,   108,     0,
+       0,     0,     0,     0,   109,     0,     0,   110,     0,    18,
+       0,     0,   111,   112,   113,     0,     0,   114,   115,     0,
+       0,     0,   116,   117,     0,     0,     0,     0,   118,     0,
+     119,   797,     0,     0,     0,   120,   798,     0,     0,   121,
+       0,   799,     0,   122,   123,     0,   363,   672,    62,     0,
+       0,     0,   103,   104,     0,   105,     0,     0,     0,   785,
+       0,   786,   787,   788,   789,   790,   791,   792,   793,   794,
+     795,   796,     0,   106,     0,    17,     0,   107,   108,     0,
+       0,     0,     0,     0,   109,     0,     0,   110,     0,     0,
+       0,     0,   111,   112,   113,     0,     0,   114,   115,   102,
+       0,     0,   116,   117,   103,   104,     0,   105,   118,     0,
+     119,    63,     0,     0,     0,   120,    64,     0,     0,   121,
+       0,   799,     0,   122,   123,   106,   363,    17,     0,   107,
+     108,     0,     0,     0,     0,     0,   109,     0,     0,   110,
+       0,     0,     0,     0,   111,   112,   113,     0,     0,   114,
+     115,     0,     0,     0,   116,   117,     0,     0,     0,     0,
+     118,     0,   119,     0,     0,     0,     0,   120,     0,     0,
+       0,   121,     0,     0,     0,   122,   123,     0,   483,   149,
+     150,     0,   151,   152,     0,     0,     0,   153,   154,   155,
+     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
+     166,   167,   168,   169,   170,   171,     0,     0,     0,     0,
+       0,     0,     0,     0,   172,     0,   102,     7,     8,     9,
+      10,   103,   104,     0,   105,    11,    12,    13,     7,     8,
+       9,    10,     0,     0,     0,     0,    11,    12,    13,     0,
+       0,    15,   106,    16,    17,     0,   107,   108,   174,     0,
+       0,     0,    15,   109,    16,     0,   110,   298,    18,     0,
+       0,   111,   112,   113,     0,     0,   114,   115,     0,    18,
+       0,   116,   117,     0,     0,     0,     0,   118,     0,   119,
+      24,     0,     0,     0,   120,    26,     0,     0,   121,     0,
+       0,    24,   122,   123,   102,     7,    26,     9,   140,   103,
+     104,   603,   105,    11,    12,    13,   253,   254,   255,   256,
+     257,   258,   259,   260,   261,   262,   263,   264,     0,    15,
+     106,     0,    17,     0,   107,   108,     0,     0,     0,     0,
+       0,   109,     0,     0,   110,     0,    18,     0,     0,   111,
+     112,   113,     0,     0,   114,   115,   102,     0,     0,   116,
+     117,   103,   104,     0,   105,   118,     0,   119,    24,     0,
+       0,     0,   120,    26,     0,     0,   121,     0,     0,     0,
+     122,   123,   106,     0,    17,     0,   107,   108,     0,     0,
+       0,     0,     0,   109,     0,     0,   110,     0,     0,     0,
+       0,   111,   112,   113,     0,     0,   114,   115,   102,     0,
+       0,   116,   117,   103,   104,     0,   105,   118,     0,   119,
+     367,     0,     0,     0,   120,     0,     0,     0,   121,     0,
+       0,     0,   122,   123,   106,     0,    17,     0,   107,   108,
+       0,     0,     0,     0,     0,   109,     0,     0,   110,     0,
+       0,     0,     0,   111,   112,   113,     0,     0,   114,   115,
+     102,     0,     0,   116,   117,   103,   104,     0,   105,   118,
+       0,   119,     0,     0,     0,     0,   120,     0,     0,     0,
+     121,     0,   841,     0,   122,   123,   106,     0,    17,     0,
+     107,   108,     0,     0,     0,     0,     0,   109,     0,     0,
+     110,     0,     0,     0,     0,   111,   112,   113,     0,     0,
+     114,   115,   102,     0,     0,   116,   117,   103,   104,     0,
+     105,   118,     0,   119,     0,     0,     0,     0,   120,     0,
+       0,     0,   121,     0,     0,     0,   122,   123,   106,     0,
+      17,     0,   107,   108,     0,     0,     0,     0,     0,   109,
+       0,     0,   110,     0,     0,     0,     0,   111,   112,   113,
+       0,     0,   114,   115,   102,     0,     0,   244,   117,   103,
+     104,     0,   105,   118,     0,   119,     0,     0,     0,     0,
+     120,     0,     0,     0,   121,     0,     0,     0,   122,   123,
+     106,     0,    17,     0,   107,   108,     0,     0,     0,     0,
+       0,   109,     0,     0,   110,     0,     0,     0,     0,   111,
+     112,   113,     0,     0,   114,   115,   510,     0,     0,   246,
+     117,   103,   104,     0,   105,   118,     0,   119,     0,     0,
+       0,     0,   120,     0,     0,     0,   121,     0,     0,     0,
+     122,   123,   106,     0,    17,     0,   107,   108,     0,     0,
+       0,     0,     0,   109,     0,     0,   110,     0,     0,     0,
+       0,   111,   112,   113,     0,     0,   114,   115,     0,     0,
+     545,   116,   117,     7,     0,     9,   140,   118,     0,   119,
+       0,    11,    12,    13,   120,     0,     0,     0,   121,     0,
+       0,     0,   122,   123,     0,     0,   545,    15,     0,     7,
+     347,     9,   140,     7,     0,     9,   140,    11,    12,    13,
+       0,    11,    12,    13,    18,     0,     0,     0,     0,     0,
+       0,     0,     0,    15,     0,     0,     0,    15,     0,     0,
+      17,     0,     0,     0,     0,     0,    24,  -452,  -452,  -452,
+      18,    26,     0,     0,    18,     0,   546,  -452,     0,     0,
+       0,     7,     8,     9,    10,     0,     0,     0,     0,    11,
+      12,    13,    24,  -451,  -451,  -451,    24,    26,     0,     0,
+       0,    26,   546,  -451,     0,    15,   348,  -272,     6,     0,
+    -129,     7,     8,     9,    10,     0,     0,     0,     0,    11,
+      12,    13,    18,   254,   255,   256,   257,   258,   259,   260,
+     261,   262,   263,   264,    14,    15,     0,    16,    17,     0,
+       0,     0,     0,     0,    24,     0,     0,     0,     0,    26,
+       0,     7,    18,     9,   283,    19,    20,  -129,     0,    11,
+      12,    13,     0,     0,     0,  -129,     0,     0,    21,    22,
+      23,     0,     0,     0,    24,    15,     0,     0,    25,    26,
+      27,    28,     0,     6,    29,  -129,     7,     8,     9,    10,
+       0,     0,    18,     0,    11,    12,    13,   256,   257,   258,
+     259,   260,   261,   262,   263,   264,     0,     0,     0,     0,
+      15,     0,    16,     0,    24,     0,     0,     0,     0,    26,
+       0,     0,     0,     0,  -281,  -281,     0,    18,     0,     0,
+     531,   532,  -129,     6,     0,  -129,     7,     8,     9,    10,
+    -129,     0,     0,     0,    11,    12,    13,     0,     0,    24,
+       0,     0,   438,     0,    26,     7,     8,     9,    10,    29,
+      15,   440,    16,    11,    12,    13,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,    18,     0,    15,
+       0,    16,  -129,     0,     7,     8,     9,    10,     0,     0,
+    -129,     0,    11,    12,    13,     0,    18,     0,     0,    24,
+       0,     0,     0,     0,    26,     0,     0,     0,    15,    29,
+      16,     0,     7,    91,     9,    92,     0,     0,    24,     0,
+      11,    12,    13,    26,     0,    18,     0,  -397,     0,     0,
+       0,     0,     0,     0,     0,     0,    15,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,    24,     0,    16,
+       0,     0,    26,    18,   248,   249,   250,   851,   251,   252,
+     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
+     263,   264,     0,     0,     0,    24,     0,     0,   149,   150,
+      26,   151,   152,     0,     0,   643,   153,   154,   155,   156,
+     157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
+     167,   168,   169,   170,   171,     0,   149,   150,     0,   151,
+     152,     0,     0,   172,   153,   154,   155,   156,   157,   158,
+     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
+     169,   170,   171,   173,     0,     0,     0,     0,     0,     0,
+       0,   370,   149,   150,     0,   151,   152,   174,     0,     0,
+     153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
+     163,   164,   165,   166,   167,   168,   169,   170,   171,     0,
+     149,   150,     0,   151,   152,   174,     0,   172,   153,   154,
+     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
+     165,   166,   167,   168,   169,   170,   171,     0,     0,     7,
+       0,     9,   283,     0,     0,   588,     0,    11,    12,    13,
+       0,   174,     0,     0,     0,     0,     0,     0,     7,     8,
+       9,    10,     0,    15,   637,    16,    11,    12,    13,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,   174,
+      18,     0,    15,     0,    16,   275,     0,     7,     8,     9,
+      10,     0,     0,   276,   277,    11,    12,    13,     0,    18,
+       0,     0,    24,     0,     0,     0,     7,    26,     9,   283,
+       0,    15,     0,    16,    11,    12,    13,     0,     0,     0,
+       0,    24,     0,     0,     0,     0,    26,     0,    18,     0,
+      15,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,    18,     0,     0,
+      24,   871,     0,     0,     0,    26,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
+       0,     0,     0,     0,    26,     0,   248,   249,   250,   872,
+     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
+     261,   262,   263,   264,   248,   249,   250,   910,   251,   252,
+     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
+     263,   264,   248,   249,   250,     0,   251,   252,   253,   254,
+     255,   256,   257,   258,   259,   260,   261,   262,   263,   264
 };
-/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
-#line 3 "/usr/lib/bison.simple"
 
-/* Skeleton output parser for bison,
-   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.
+#define yypact_value_is_default(Yystate) \
+  (!!((Yystate) == (-811)))
 
-   This program is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
+#define yytable_value_is_error(Yytable_value) \
+  YYID (0)
 
-   This program is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-   GNU General Public License for more details.
+static const yytype_int16 yycheck[] =
+{
+      58,    59,     3,    18,     5,    87,    21,    22,   209,     3,
+      25,     5,    27,    28,    34,    35,    33,    11,    12,    13,
+     319,    26,     3,   311,     5,    40,    41,    42,     3,    24,
+       5,    26,   107,   108,    85,    68,   338,   268,   113,    33,
+     235,    35,   344,    44,   281,    35,   203,   208,   340,   124,
+      44,   407,    93,    35,   194,    97,   431,   575,   642,   223,
+     135,    76,    79,    44,    69,   200,   326,   177,    73,    44,
+      87,   429,   142,   223,    69,   145,   553,    59,    73,     1,
+     682,     1,     1,     1,     5,    79,    38,    38,    38,   204,
+      10,    85,     9,    87,   109,     0,    27,   177,   908,    93,
+       0,    45,    38,    55,    56,    57,    38,    35,    58,     1,
+      77,    78,     4,     5,     6,     7,   317,   278,   275,   116,
+      12,    13,    14,    44,    30,    76,   936,    58,    59,    57,
+      82,   146,    82,   148,   116,   276,    28,    81,    90,    58,
+      76,   199,   727,   834,    76,    38,    58,    59,   142,   751,
+     668,   145,    45,    45,    30,    77,    30,   172,   238,    76,
+     420,   746,    82,   145,    82,    58,     0,   182,   183,    58,
+     185,   186,    58,   214,   191,    67,   173,   414,   195,   237,
+      72,   539,    58,    59,    58,    59,   417,   204,   352,    38,
+      82,   173,   327,    76,   885,   335,    45,   191,    81,    58,
+     194,   195,   352,   338,     1,    58,     3,     4,    45,   344,
+     204,   269,   227,   904,   816,    30,   907,   332,   909,   277,
+     214,   336,     7,    38,   742,   240,   917,    27,    58,    59,
+      30,     3,     4,   710,   711,    35,    77,     3,     4,   527,
+     281,   223,   239,   618,    65,    30,    76,   244,   223,   246,
+      82,   609,   267,     3,     4,   270,   208,   239,   949,    82,
+     520,    38,   244,   404,   246,    50,   850,   219,    45,   410,
+      67,   435,    77,    58,    59,    72,    81,    77,    58,    59,
+     636,    81,   276,   341,    76,   435,    77,   302,    77,    81,
+      81,   366,    81,   373,    77,    67,    76,   294,    81,   304,
+      72,    67,    58,     3,     4,    58,    72,     7,     3,   304,
+      82,   353,   294,   355,    77,   332,    82,    67,    81,   336,
+      30,    82,    72,   611,   584,   383,   278,   321,    76,   349,
+      30,   351,    82,    81,   469,    30,   471,   855,   332,    58,
+      50,   335,   336,    58,    59,   360,    76,    76,    58,    59,
+      50,    81,    81,     3,   412,    50,    76,   588,    58,    48,
+      49,    76,     9,    58,    59,   560,   597,     3,     4,   351,
+     352,    77,    72,   414,    63,    81,    81,   352,   243,   331,
+      30,    77,    75,   248,   249,    81,    58,    59,   253,   254,
+     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
+      50,   416,    76,   663,   514,   485,   666,    76,    58,   646,
+     404,   431,   700,   407,    50,     5,   410,     7,    38,   420,
+     712,   441,   442,   428,     3,     4,   420,   424,    77,   423,
+     431,    67,    81,   428,   514,    77,    72,   431,    82,   420,
+       3,     4,   424,     3,     4,     5,     6,     7,   442,   584,
+     431,    58,   442,   435,   685,     3,     4,   621,    58,    77,
+     442,    78,   477,    81,    77,   455,    77,   628,    81,   626,
+      81,   621,   633,   455,    78,   632,    50,    51,    52,    58,
+      58,    59,    30,   553,   554,    76,   627,   724,    67,    76,
+      38,    77,    78,    72,    82,   515,    76,   512,    38,   339,
+      77,    78,    50,    58,    67,    77,   346,    67,    76,    72,
+      58,   591,    72,    77,   354,   535,   536,   534,   519,   654,
+     385,   386,   516,    10,    72,   519,   516,   547,   548,   664,
+      76,   666,   820,    63,   516,   617,   553,   554,   519,    82,
+     534,    76,   536,    27,   564,   565,   536,     3,     4,   744,
+       9,     3,     4,    77,   536,    68,    69,    70,    83,   553,
+     554,    35,   644,   557,    67,    78,   548,    77,   583,   710,
+     711,   622,   623,    35,    30,    81,   717,   718,    58,    59,
+     613,   614,    38,   565,    78,   602,   128,   129,   783,    38,
+      76,     3,   607,    76,    50,     7,    38,   899,   618,   901,
+     617,    76,    58,    76,   655,   646,    58,    76,   602,     3,
+     627,   476,    76,     7,    82,    67,    72,   618,    30,    76,
+      72,    76,   616,   617,   618,    83,    76,   644,   622,   623,
+     495,    63,    83,   627,    63,    76,    30,   618,    50,   621,
+      76,    76,   636,    35,   943,    83,    58,    59,   642,   521,
+     644,    78,   951,   525,    78,   713,    50,    78,   673,    32,
+      38,   655,     1,    83,    58,     4,    76,     6,     7,    77,
+      68,    69,    70,    12,    13,    14,   628,    81,    77,   880,
+      78,   633,     3,   724,    77,    76,   744,     3,     4,    28,
+      78,   886,    31,   710,   711,    81,   568,    38,    83,   571,
+     717,   718,   567,    68,    69,    70,    45,    63,    78,    78,
+      68,    69,    70,    78,    30,    38,   710,   711,   769,   734,
+      78,    38,   587,   717,   718,   783,     3,     4,    67,   744,
+       7,   926,   927,    72,    50,    78,   794,   577,   578,   814,
+      38,   581,    58,   744,   761,    48,    49,    50,    51,    52,
+     744,     6,     7,    30,    81,    63,    72,    12,    13,    14,
+      78,    81,    63,   744,   899,    78,   901,   761,   783,   744,
+     852,    83,    38,    50,   832,   769,    58,   835,   836,    58,
+     795,    58,    59,   803,   804,   843,    58,   652,    38,   629,
+     630,   631,    77,   798,   634,   635,    77,     7,    38,   850,
+     858,    77,   797,   798,    77,    16,    58,   865,    78,    77,
+     804,    58,    77,   814,   804,    63,    76,   682,   876,   659,
+     814,    17,   804,    27,   689,    76,    30,    76,   886,     9,
+      76,    35,    77,   814,    77,   852,     5,     6,     7,   814,
+     705,    77,    77,    12,    13,    14,    77,    81,    77,    58,
+     908,   691,   692,   693,    58,    59,   850,    76,   852,    76,
+     417,    30,   727,     1,    77,   730,     4,     5,     6,     7,
+      77,   886,   930,    77,    12,    13,    14,    81,   936,   835,
+     327,   746,   664,    89,   749,     4,   751,     6,     7,    27,
+      28,   731,    30,    12,    13,    14,   645,    35,   814,   416,
+     284,   652,   749,   768,   479,   681,   352,    45,   654,    28,
+     471,   477,    53,    54,   779,   360,    57,    58,    59,    60,
+      58,    59,   664,   585,   886,   790,    45,   666,   886,    67,
+     933,   931,   411,   423,    72,    76,   557,    27,   778,    77,
+     623,   423,   544,    81,    82,   769,   766,   761,    67,   303,
+     519,   816,   537,    72,   419,   514,     1,   685,     3,     4,
+       5,     6,     7,     8,     9,   419,    11,    12,    13,    14,
+      15,   373,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    -1,    33,    34,
+     591,   831,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,
+      45,    -1,    -1,    48,    49,    50,   871,   847,    53,    54,
+      -1,    -1,    -1,    58,    59,    -1,     5,     6,     7,    64,
+      -1,    66,    67,    12,    13,    14,    71,    72,    -1,    -1,
+      75,    -1,    77,    78,    79,    80,     1,    82,     3,     4,
+       5,     6,     7,     8,     9,    -1,    11,    12,    13,    14,
+      15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    30,    31,    -1,    33,    34,
+      -1,    -1,    -1,     3,     4,    40,    -1,    -1,    43,    -1,
+      45,    -1,    -1,    48,    49,    50,    -1,    -1,    53,    54,
+      -1,    53,    54,    58,    59,    57,    58,    59,    60,    64,
+      30,    66,    67,    -1,    -1,    -1,    71,    72,    -1,    -1,
+      75,    -1,    77,    -1,    79,    80,     1,    82,     3,     4,
+      50,    -1,    -1,     8,     9,    -1,    11,    -1,    58,    59,
+      15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    -1,    29,    -1,    31,    -1,    33,    34,
+      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,
+      -1,    -1,    -1,    48,    49,    50,    -1,    -1,    53,    54,
+      -1,    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    64,
+      -1,    66,    67,    -1,    -1,    -1,    71,    72,    -1,    -1,
+      75,    -1,    77,    78,    79,    80,     1,    82,     3,     4,
+      -1,    -1,    -1,     8,     9,    -1,    11,    -1,    -1,    -1,
+      15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    -1,    29,    -1,    31,    -1,    33,    34,
+      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,
+      -1,    -1,    -1,    48,    49,    50,    -1,    -1,    53,    54,
+      -1,    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    64,
+      -1,    66,    67,    -1,    -1,    -1,    71,    72,    -1,    -1,
+      75,    -1,    77,    -1,    79,    80,     1,    82,     3,     4,
+      -1,    -1,    -1,     8,     9,    -1,    11,    -1,    -1,    -1,
+      15,    -1,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    -1,    29,    -1,    31,    -1,    33,    34,
+      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,
+      -1,    -1,    -1,    48,    49,    50,    -1,    -1,    53,    54,
+      -1,    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    64,
+      -1,    66,    67,    -1,    -1,    -1,    71,    72,    -1,    -1,
+      75,    -1,    77,    -1,    79,    80,     1,    82,     3,     4,
+      -1,     6,     7,     8,     9,    -1,    11,    12,    13,    14,
+      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
+      50,    51,    52,    28,    29,    -1,    31,    -1,    33,    34,
+      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,
+      45,    -1,    -1,    48,    49,    50,    -1,    -1,    53,    54,
+      -1,    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    64,
+      -1,    66,    67,    -1,    -1,    -1,    71,    72,    -1,    -1,
+      75,    -1,    -1,    -1,    79,    80,     1,    82,     3,     4,
+      -1,    -1,    -1,     8,     9,    37,    11,    39,    40,    41,
+      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
+      52,    -1,    -1,    -1,    29,    -1,    31,    -1,    33,    34,
+      -1,     4,     5,     6,     7,    40,    -1,    10,    43,    12,
+      13,    14,    -1,    48,    49,    50,    -1,    -1,    53,    54,
+      -1,    -1,    57,    58,    59,    28,    -1,    30,    -1,    64,
+      -1,    66,    67,    -1,    -1,    -1,    71,    72,    -1,    -1,
+      75,    -1,    45,    78,    79,    80,     1,    82,     3,     4,
+      -1,    -1,    -1,     8,     9,    -1,    11,    46,    47,    48,
+      49,    50,    51,    52,    67,    -1,    -1,    -1,    -1,    72,
+      -1,    -1,    -1,    -1,    29,    -1,    31,    -1,    33,    34,
+      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,
+      -1,    -1,    -1,    48,    49,    50,    -1,    -1,    53,    54,
+      -1,    -1,    57,    58,    59,    -1,    -1,    -1,    -1,    64,
+      -1,    66,    67,    -1,    -1,    -1,    71,    72,    -1,    -1,
+      75,    -1,    -1,    78,    79,    80,     1,    82,     3,    -1,
+      -1,    -1,    -1,     8,     9,    -1,    11,     1,    -1,     3,
+       4,     5,     6,     7,    -1,    -1,    10,    -1,    12,    13,
+      14,    -1,    -1,    -1,    29,    -1,    31,    -1,    33,    34,
+      35,    -1,    -1,    -1,    28,    40,    30,    -1,    43,    -1,
+      -1,    -1,    -1,    48,    49,    50,    -1,    -1,    53,    54,
+      -1,    45,    57,    58,    59,     1,    -1,     3,    -1,    64,
+      -1,    66,     8,     9,    -1,    11,    71,    -1,    -1,    -1,
+      75,    -1,    -1,    67,    79,    80,    -1,    82,    72,    -1,
+      -1,    -1,    76,    29,    -1,    31,    -1,    33,    34,    -1,
+      -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    -1,
+      -1,    -1,    48,    49,    50,    -1,    -1,    53,    54,     1,
+      -1,     3,    58,    59,    -1,    -1,     8,     9,    64,    11,
+      66,    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    75,
+      -1,    -1,    -1,    79,    80,    -1,    82,    29,    -1,    31,
+      -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,
+      -1,    43,    -1,    -1,    -1,    -1,    48,    49,    50,    -1,
+      -1,    53,    54,    -1,    -1,     1,    58,    59,     4,     5,
+       6,     7,    64,    -1,    66,    -1,    12,    13,    14,    71,
+      -1,    -1,    -1,    75,    -1,    -1,    -1,    79,    80,    -1,
+      82,    27,    28,    -1,    30,    -1,    -1,    -1,    -1,    35,
+       1,    -1,    -1,     4,     5,     6,     7,    -1,    -1,    45,
+      -1,    12,    13,    14,    45,    46,    47,    48,    49,    50,
+      51,    52,    58,    59,    -1,    -1,    27,    28,    -1,    30,
+      -1,    67,    -1,    -1,    35,    -1,    72,    -1,    -1,    -1,
+      -1,    77,    -1,    -1,    45,    81,    82,     1,    -1,    -1,
+       4,     5,     6,     7,    -1,    -1,    10,    -1,    12,    13,
+      14,    -1,    -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,
+      -1,    72,    -1,    -1,    28,    -1,    77,    -1,    -1,    -1,
+      81,    82,     1,    -1,    -1,     4,     5,     6,     7,    -1,
+      -1,    45,    -1,    12,    13,    14,     4,     5,     6,     7,
+      -1,    -1,    -1,    -1,    12,    13,    14,    -1,    -1,    28,
+      -1,    30,    -1,    67,    -1,    -1,    -1,    -1,    72,    -1,
+      28,    -1,    30,    -1,    -1,    -1,    45,     1,    82,    -1,
+       4,     5,     6,     7,    -1,    -1,    -1,    45,    12,    13,
+      14,    -1,    -1,    -1,     3,    -1,    -1,    -1,    67,     8,
+       9,    -1,    11,    72,    28,    -1,    30,    -1,    -1,    67,
+      -1,    -1,    -1,    82,    72,    -1,    -1,    -1,    -1,    77,
+      29,    45,    31,    -1,    33,    34,    -1,    -1,    -1,    -1,
+      -1,    40,    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,
+      49,    50,    -1,    67,    53,    54,    -1,    -1,    72,    58,
+      59,    -1,    -1,    -1,    -1,    64,    -1,    66,    82,     3,
+      -1,    -1,    71,    -1,     8,     9,    75,    11,    -1,    -1,
+      79,    80,    -1,    -1,    83,    43,    44,    45,    46,    47,
+      48,    49,    50,    51,    52,    29,    -1,    31,    -1,    33,
+      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,
+      -1,    -1,    -1,    -1,    48,    49,    50,    -1,    -1,    53,
+      54,    -1,    -1,    -1,    58,    59,    -1,    -1,     3,    -1,
+      64,    -1,    66,     8,     9,    -1,    11,    71,    -1,    -1,
+      -1,    75,    -1,    -1,    -1,    79,    80,    -1,    -1,    83,
+      -1,    -1,    -1,    -1,    29,    -1,    31,    -1,    33,    34,
+      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,
+      -1,    -1,    -1,    48,    49,    50,    -1,    -1,    53,    54,
+      -1,    -1,    -1,    58,    59,    -1,    -1,     3,    -1,    64,
+      -1,    66,     8,     9,    -1,    11,    71,    -1,    -1,    -1,
+      75,    -1,    -1,    -1,    79,    80,    -1,    -1,    83,    -1,
+      -1,    -1,    -1,    29,    -1,    31,    -1,    33,    34,    -1,
+      -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    -1,
+      -1,    -1,    48,    49,    50,    -1,    -1,    53,    54,    -1,
+      -1,    -1,    58,    59,    -1,    -1,     3,    -1,    64,    -1,
+      66,     8,     9,    -1,    11,    71,    -1,    -1,    -1,    75,
+      -1,    -1,    -1,    79,    80,    -1,    -1,    83,    -1,    -1,
+      -1,    -1,    29,    -1,    31,    -1,    33,    34,    -1,    -1,
+      -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    -1,    -1,
+      -1,    48,    49,    50,    -1,    -1,    53,    54,    -1,    -1,
+      -1,    58,    59,    -1,    -1,    -1,    -1,    64,    -1,    66,
+      -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    75,    -1,
+      -1,    -1,    79,    80,    -1,    -1,    83,     3,     4,     5,
+       6,     7,     8,     9,    -1,    11,    12,    13,    14,    15,
+      -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    -1,    33,    34,    -1,
+      -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    45,
+      -1,    -1,    48,    49,    50,    -1,    -1,    53,    54,    -1,
+      -1,    -1,    58,    59,    -1,    -1,    -1,    -1,    64,    -1,
+      66,    67,    -1,    -1,    -1,    71,    72,    -1,    -1,    75,
+      -1,    77,    -1,    79,    80,    -1,    82,     3,     4,    -1,
+      -1,    -1,     8,     9,    -1,    11,    -1,    -1,    -1,    15,
+      -1,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    -1,    29,    -1,    31,    -1,    33,    34,    -1,
+      -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    -1,
+      -1,    -1,    48,    49,    50,    -1,    -1,    53,    54,     3,
+      -1,    -1,    58,    59,     8,     9,    -1,    11,    64,    -1,
+      66,    67,    -1,    -1,    -1,    71,    72,    -1,    -1,    75,
+      -1,    77,    -1,    79,    80,    29,    82,    31,    -1,    33,
+      34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,
+      -1,    -1,    -1,    -1,    48,    49,    50,    -1,    -1,    53,
+      54,    -1,    -1,    -1,    58,    59,    -1,    -1,    -1,    -1,
+      64,    -1,    66,    -1,    -1,    -1,    -1,    71,    -1,    -1,
+      -1,    75,    -1,    -1,    -1,    79,    80,    -1,    82,     3,
+       4,    -1,     6,     7,    -1,    -1,    -1,    11,    12,    13,
+      14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+      24,    25,    26,    27,    28,    29,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    38,    -1,     3,     4,     5,     6,
+       7,     8,     9,    -1,    11,    12,    13,    14,     4,     5,
+       6,     7,    -1,    -1,    -1,    -1,    12,    13,    14,    -1,
+      -1,    28,    29,    30,    31,    -1,    33,    34,    72,    -1,
+      -1,    -1,    28,    40,    30,    -1,    43,    81,    45,    -1,
+      -1,    48,    49,    50,    -1,    -1,    53,    54,    -1,    45,
+      -1,    58,    59,    -1,    -1,    -1,    -1,    64,    -1,    66,
+      67,    -1,    -1,    -1,    71,    72,    -1,    -1,    75,    -1,
+      -1,    67,    79,    80,     3,     4,    72,     6,     7,     8,
+       9,    77,    11,    12,    13,    14,    41,    42,    43,    44,
+      45,    46,    47,    48,    49,    50,    51,    52,    -1,    28,
+      29,    -1,    31,    -1,    33,    34,    -1,    -1,    -1,    -1,
+      -1,    40,    -1,    -1,    43,    -1,    45,    -1,    -1,    48,
+      49,    50,    -1,    -1,    53,    54,     3,    -1,    -1,    58,
+      59,     8,     9,    -1,    11,    64,    -1,    66,    67,    -1,
+      -1,    -1,    71,    72,    -1,    -1,    75,    -1,    -1,    -1,
+      79,    80,    29,    -1,    31,    -1,    33,    34,    -1,    -1,
+      -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    -1,    -1,
+      -1,    48,    49,    50,    -1,    -1,    53,    54,     3,    -1,
+      -1,    58,    59,     8,     9,    -1,    11,    64,    -1,    66,
+      67,    -1,    -1,    -1,    71,    -1,    -1,    -1,    75,    -1,
+      -1,    -1,    79,    80,    29,    -1,    31,    -1,    33,    34,
+      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    -1,
+      -1,    -1,    -1,    48,    49,    50,    -1,    -1,    53,    54,
+       3,    -1,    -1,    58,    59,     8,     9,    -1,    11,    64,
+      -1,    66,    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,
+      75,    -1,    77,    -1,    79,    80,    29,    -1,    31,    -1,
+      33,    34,    -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,
+      43,    -1,    -1,    -1,    -1,    48,    49,    50,    -1,    -1,
+      53,    54,     3,    -1,    -1,    58,    59,     8,     9,    -1,
+      11,    64,    -1,    66,    -1,    -1,    -1,    -1,    71,    -1,
+      -1,    -1,    75,    -1,    -1,    -1,    79,    80,    29,    -1,
+      31,    -1,    33,    34,    -1,    -1,    -1,    -1,    -1,    40,
+      -1,    -1,    43,    -1,    -1,    -1,    -1,    48,    49,    50,
+      -1,    -1,    53,    54,     3,    -1,    -1,    58,    59,     8,
+       9,    -1,    11,    64,    -1,    66,    -1,    -1,    -1,    -1,
+      71,    -1,    -1,    -1,    75,    -1,    -1,    -1,    79,    80,
+      29,    -1,    31,    -1,    33,    34,    -1,    -1,    -1,    -1,
+      -1,    40,    -1,    -1,    43,    -1,    -1,    -1,    -1,    48,
+      49,    50,    -1,    -1,    53,    54,     3,    -1,    -1,    58,
+      59,     8,     9,    -1,    11,    64,    -1,    66,    -1,    -1,
+      -1,    -1,    71,    -1,    -1,    -1,    75,    -1,    -1,    -1,
+      79,    80,    29,    -1,    31,    -1,    33,    34,    -1,    -1,
+      -1,    -1,    -1,    40,    -1,    -1,    43,    -1,    -1,    -1,
+      -1,    48,    49,    50,    -1,    -1,    53,    54,    -1,    -1,
+       1,    58,    59,     4,    -1,     6,     7,    64,    -1,    66,
+      -1,    12,    13,    14,    71,    -1,    -1,    -1,    75,    -1,
+      -1,    -1,    79,    80,    -1,    -1,     1,    28,    -1,     4,
+       1,     6,     7,     4,    -1,     6,     7,    12,    13,    14,
+      -1,    12,    13,    14,    45,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    28,    -1,    -1,    -1,    28,    -1,    -1,
+      31,    -1,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
+      45,    72,    -1,    -1,    45,    -1,    77,    78,    -1,    -1,
+      -1,     4,     5,     6,     7,    -1,    -1,    -1,    -1,    12,
+      13,    14,    67,    68,    69,    70,    67,    72,    -1,    -1,
+      -1,    72,    77,    78,    -1,    28,    77,    78,     1,    -1,
+       3,     4,     5,     6,     7,    -1,    -1,    -1,    -1,    12,
+      13,    14,    45,    42,    43,    44,    45,    46,    47,    48,
+      49,    50,    51,    52,    27,    28,    -1,    30,    31,    -1,
+      -1,    -1,    -1,    -1,    67,    -1,    -1,    -1,    -1,    72,
+      -1,     4,    45,     6,     7,    48,    49,    50,    -1,    12,
+      13,    14,    -1,    -1,    -1,    58,    -1,    -1,    61,    62,
+      63,    -1,    -1,    -1,    67,    28,    -1,    -1,    71,    72,
+      73,    74,    -1,     1,    77,     3,     4,     5,     6,     7,
+      -1,    -1,    45,    -1,    12,    13,    14,    44,    45,    46,
+      47,    48,    49,    50,    51,    52,    -1,    -1,    -1,    -1,
+      28,    -1,    30,    -1,    67,    -1,    -1,    -1,    -1,    72,
+      -1,    -1,    -1,    -1,    77,    78,    -1,    45,    -1,    -1,
+      48,    49,    50,     1,    -1,     3,     4,     5,     6,     7,
+      58,    -1,    -1,    -1,    12,    13,    14,    -1,    -1,    67,
+      -1,    -1,     1,    -1,    72,     4,     5,     6,     7,    77,
+      28,    10,    30,    12,    13,    14,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    28,
+      -1,    30,    50,    -1,     4,     5,     6,     7,    -1,    -1,
+      58,    -1,    12,    13,    14,    -1,    45,    -1,    -1,    67,
+      -1,    -1,    -1,    -1,    72,    -1,    -1,    -1,    28,    77,
+      30,    -1,     4,     5,     6,     7,    -1,    -1,    67,    -1,
+      12,    13,    14,    72,    -1,    45,    -1,    76,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    28,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,    -1,    30,
+      -1,    -1,    72,    45,    35,    36,    37,    77,    39,    40,
+      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
+      51,    52,    -1,    -1,    -1,    67,    -1,    -1,     3,     4,
+      72,     6,     7,    -1,    -1,    77,    11,    12,    13,    14,
+      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
+      25,    26,    27,    28,    29,    -1,     3,     4,    -1,     6,
+       7,    -1,    -1,    38,    11,    12,    13,    14,    15,    16,
+      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
+      27,    28,    29,    58,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    38,     3,     4,    -1,     6,     7,    72,    -1,    -1,
+      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
+      21,    22,    23,    24,    25,    26,    27,    28,    29,    -1,
+       3,     4,    -1,     6,     7,    72,    -1,    38,    11,    12,
+      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
+      23,    24,    25,    26,    27,    28,    29,    -1,    -1,     4,
+      -1,     6,     7,    -1,    -1,    38,    -1,    12,    13,    14,
+      -1,    72,    -1,    -1,    -1,    -1,    -1,    -1,     4,     5,
+       6,     7,    -1,    28,    10,    30,    12,    13,    14,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    72,
+      45,    -1,    28,    -1,    30,    50,    -1,     4,     5,     6,
+       7,    -1,    -1,    58,    59,    12,    13,    14,    -1,    45,
+      -1,    -1,    67,    -1,    -1,    -1,     4,    72,     6,     7,
+      -1,    28,    -1,    30,    12,    13,    14,    -1,    -1,    -1,
+      -1,    67,    -1,    -1,    -1,    -1,    72,    -1,    45,    -1,
+      28,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    -1,    -1,
+      67,    10,    -1,    -1,    -1,    72,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    67,
+      -1,    -1,    -1,    -1,    72,    -1,    35,    36,    37,    38,
+      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
+      49,    50,    51,    52,    35,    36,    37,    38,    39,    40,
+      41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
+      51,    52,    35,    36,    37,    -1,    39,    40,    41,    42,
+      43,    44,    45,    46,    47,    48,    49,    50,    51,    52
+};
 
-   You should have received a copy of the GNU General Public License
-   along with this program; if not, write to the Free Software
-   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
-
-/* As a special exception, when this file is copied by Bison into a
-   Bison output file, you may use that output file without restriction.
-   This special exception was added by the Free Software Foundation
-   in version 1.24 of Bison.  */
-
-#ifndef alloca
-#ifdef __GNUC__
-#define alloca __builtin_alloca
-#else /* not GNU C.  */
-#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
-#include <alloca.h>
-#else /* not sparc */
-#if defined (MSDOS) && !defined (__TURBOC__)
-#include <malloc.h>
-#else /* not MSDOS, or __TURBOC__ */
-#if defined(_AIX)
-#include <malloc.h>
- #pragma alloca
-#else /* not MSDOS, __TURBOC__, or _AIX */
-#ifdef __hpux
-#ifdef __cplusplus
-extern "C" {
-void *alloca (unsigned int);
+/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
+   symbol of state STATE-NUM.  */
+static const yytype_uint16 yystos[] =
+{
+       0,    85,    86,    87,     0,    88,     1,     4,     5,     6,
+       7,    12,    13,    14,    27,    28,    30,    31,    45,    48,
+      49,    61,    62,    63,    67,    71,    72,    73,    74,    77,
+      89,    90,    91,   124,   127,   131,   132,   135,   145,   146,
+     170,   171,   172,   173,   242,   243,   245,   246,   247,   257,
+     260,   267,    89,    77,    78,   145,   145,   145,    58,    58,
+      58,     3,     4,    67,    72,    98,   244,   268,   271,    98,
+      98,   259,   260,    98,   259,   244,    98,     3,    50,    58,
+     138,   142,   145,   169,    77,   124,    77,   124,   132,   135,
+     145,     5,     7,   128,   146,    82,    98,    82,    98,    82,
+      98,    89,     3,     8,     9,    11,    29,    33,    34,    40,
+      43,    48,    49,    50,    53,    54,    58,    59,    64,    66,
+      71,    75,    79,    80,    99,   100,   102,   103,   104,   105,
+     106,   108,   114,   116,   117,   242,   303,   309,   310,   311,
+       7,   100,   133,   135,   187,   189,    58,    45,    81,     3,
+       4,     6,     7,    11,    12,    13,    14,    15,    16,    17,
+      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
+      28,    29,    38,    58,    72,   284,   293,   294,   295,   296,
+     297,   284,    38,    58,   259,    38,    58,    82,   259,    77,
+      98,   190,   169,    77,    81,   125,     1,    27,    58,    59,
+      96,   139,     4,    50,    58,    72,   137,   140,   145,   166,
+     167,   169,   138,   169,   128,     5,     6,     7,   136,   145,
+     173,    65,   180,   181,    82,   180,    82,   177,    82,   106,
+     106,    98,   106,     1,   100,   115,   187,   304,    58,    58,
+      58,   106,    76,    81,    58,   103,    58,   103,    35,    36,
+      37,    39,    40,    41,    42,    43,    44,    45,    46,    47,
+      48,    49,    50,    51,    52,    53,    54,    57,    58,    59,
+      60,     9,    75,   106,    76,    50,    58,    59,   145,   188,
+     191,   134,    76,     7,   135,   188,     5,     6,     7,    98,
+     147,   148,   149,    98,    58,    98,   187,   269,    81,   291,
+     295,   297,    38,   272,    98,    98,    82,   250,    98,    98,
+     254,   258,    77,     7,   169,    76,   140,   166,   169,    58,
+     237,   238,    83,   100,     1,   118,   119,   120,   195,   207,
+     144,   145,   190,   167,    77,    81,   125,     1,    92,   139,
+      58,    59,    77,     1,    94,    58,    78,     1,    77,   133,
+     182,   189,   242,   174,    78,   175,     1,    98,   185,   186,
+     176,    76,    76,    82,   201,   202,    76,    67,   100,   302,
+      38,   295,   306,   307,   308,   187,    98,    77,   108,   187,
+     187,   108,   108,   111,   113,   110,   109,   108,   108,   108,
+     108,   108,   108,   108,   108,   108,   108,   108,   108,    98,
+     101,   102,   100,    98,   190,   191,   230,   231,    83,   100,
+     125,    58,    59,   136,   134,    76,    81,    58,   187,    76,
+      77,   285,    10,   292,    58,    98,   285,   259,    76,   248,
+     274,   275,    82,    76,   261,   263,   274,   116,     1,     3,
+      10,   127,   131,   232,   234,   235,   236,   239,   240,    83,
+      77,    97,   195,    10,   119,   208,    35,   167,    76,   140,
+     167,   118,   144,   237,    83,   100,   118,    67,   144,   124,
+      77,   124,   182,   180,   144,   180,    35,    81,   179,   185,
+      78,   196,    76,    82,   106,   305,    38,    76,   295,   308,
+      76,    76,    76,    76,   100,    38,   108,   108,    76,    83,
+     191,    76,   232,    83,   191,   230,    83,   100,    76,   148,
+       3,   101,    76,   293,   294,   127,   131,   195,   286,   287,
+     288,   270,   234,   235,   187,   273,    82,   253,   259,   261,
+      63,    48,    49,    90,   124,   127,   131,   276,   279,   255,
+      68,    69,    70,    78,   262,     1,    77,   133,   189,   264,
+      63,    76,    76,   124,   124,    76,    77,    81,    76,    81,
+       1,   200,   202,   121,   129,   132,   135,   143,    93,    35,
+      83,    95,    76,   183,   184,   207,   183,    78,    78,   108,
+     186,    78,   179,    32,   197,   198,   199,   107,    38,   295,
+     298,   299,   301,    38,   108,    83,    76,    81,    76,    98,
+     291,    77,   124,    77,   288,   195,   200,    76,   200,   251,
+     274,   256,    78,   280,   282,   169,   124,   124,   277,   279,
+     261,   263,   124,   124,    77,     4,    50,    58,   145,   168,
+     169,   188,    50,   145,   169,   188,   233,    10,   236,     3,
+     202,    77,   124,    77,   124,   135,   130,     1,    82,   108,
+     150,   200,   141,   200,    81,   208,   144,   144,   144,    78,
+      98,   241,     1,   122,   123,   192,   193,   195,   207,   210,
+     199,     1,     3,    57,    82,    98,   108,   152,   153,   154,
+     156,   158,   159,   102,   300,    38,    83,   295,   301,   112,
+     102,   168,   169,   188,   289,   290,    98,   261,    63,   274,
+     249,   284,   284,    90,    78,    38,   166,   265,   266,   265,
+     190,   125,    58,    59,   144,   144,   144,   190,   125,   144,
+     144,   232,   137,   138,   130,     5,   136,   151,   150,   184,
+      38,   166,   144,    77,    81,    78,   195,   122,   192,   194,
+      78,   195,   207,   210,   208,    98,   157,    38,    78,    81,
+     178,    35,   159,   156,   300,   108,    76,   144,   144,   144,
+      77,    81,    78,    63,   274,   281,   283,   108,    38,    81,
+     168,   168,   237,    83,   100,    77,    77,   152,   108,    38,
+     144,    98,    78,   208,     4,    15,    17,    18,    19,    20,
+      21,    22,    23,    24,    25,    26,    27,    67,    72,    77,
+      98,   100,   126,   127,   131,   202,   203,   204,   205,   211,
+     212,   220,   221,   223,   242,   152,   155,   154,   156,   290,
+     252,    63,     1,    77,   278,   278,   108,   266,    83,    78,
+     144,   108,    58,   214,   206,    58,    58,   108,    38,    77,
+      77,    77,   100,    50,    98,     7,   224,    38,    77,    77,
+     124,    77,   124,    16,     1,   207,   209,     1,    58,   126,
+      78,   156,   274,   144,   100,    58,   209,   100,   114,   225,
+     100,    10,    38,    77,   100,    77,    58,   144,   137,   160,
+     166,   138,   163,   169,     1,   213,   208,   100,    63,    76,
+     100,    17,    76,    77,    76,   108,    77,   100,    77,   161,
+      77,   164,   209,   212,   223,    76,    76,   222,   216,   219,
+      38,    38,    76,   118,   118,   209,    77,   215,   209,   225,
+     209,     9,   226,   227,   228,    77,   162,   165,   209,    77,
+      58,    38,    76,    81,   202,   202,   217,   100,   226,    77,
+     228,   225,    76,    38,    76,    76,   116,   229,    77,   218,
+      76,    81,   209,    77,   116
 };
-#else /* not __cplusplus */
-void *alloca ();
-#endif /* not __cplusplus */
-#endif /* __hpux */
-#endif /* not _AIX */
-#endif /* not MSDOS, or __TURBOC__ */
-#endif /* not sparc.  */
-#endif /* not GNU C.  */
-#endif /* alloca not defined.  */
-
-/* This is the parser code that is written into each bison parser
-  when the %semantic_parser declaration is not specified in the grammar.
-  It was written by Richard Stallman by simplifying the hairy parser
-  used when %semantic_parser is specified.  */
-
-/* Note: there must be only one dollar sign in this file.
-   It is replaced by the list of actions, each action
-   as one case of the switch.  */
 
 #define yyerrok		(yyerrstatus = 0)
 #define yyclearin	(yychar = YYEMPTY)
-#define YYEMPTY		-2
+#define YYEMPTY		(-2)
 #define YYEOF		0
-#define YYACCEPT	return(0)
-#define YYABORT 	return(1)
-#define YYERROR		goto yyerrlab1
-/* Like YYERROR except do call yyerror.
-   This remains here temporarily to ease the
-   transition to the new meaning of YYERROR, for GCC.
-   Once GCC version 2 has supplanted version 1, this can go.  */
+
+#define YYACCEPT	goto yyacceptlab
+#define YYABORT		goto yyabortlab
+#define YYERROR		goto yyerrorlab
+
+
+/* Like YYERROR except do call yyerror.  This remains here temporarily
+   to ease the transition to the new meaning of YYERROR, for GCC.
+   Once GCC version 2 has supplanted version 1, this can go.  However,
+   YYFAIL appears to be in use.  Nevertheless, it is formally deprecated
+   in Bison 2.4.2's NEWS entry, where a plan to phase it out is
+   discussed.  */
+
 #define YYFAIL		goto yyerrlab
+#if defined YYFAIL
+  /* This is here to suppress warnings from the GCC cpp's
+     -Wunused-macros.  Normally we don't worry about that warning, but
+     some users do, and we want to make it easy for users to remove
+     YYFAIL uses, which will produce warnings from Bison 2.5.  */
+#endif
+
 #define YYRECOVERING()  (!!yyerrstatus)
-#define YYBACKUP(token, value) \
-do								\
-  if (yychar == YYEMPTY && yylen == 1)				\
-    { yychar = (token), yylval = (value);			\
-      yychar1 = YYTRANSLATE (yychar);				\
-      YYPOPSTACK;						\
-      goto yybackup;						\
+
+#define YYBACKUP(Token, Value)                                  \
+do                                                              \
+  if (yychar == YYEMPTY)                                        \
+    {                                                           \
+      yychar = (Token);                                         \
+      yylval = (Value);                                         \
+      YYPOPSTACK (yylen);                                       \
+      yystate = *yyssp;                                         \
+      goto yybackup;                                            \
+    }                                                           \
+  else                                                          \
+    {                                                           \
+      yyerror (YY_("syntax error: cannot back up")); \
+      YYERROR;							\
     }								\
-  else								\
-    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
-while (0)
+while (YYID (0))
 
+/* Error token number */
 #define YYTERROR	1
 #define YYERRCODE	256
 
-#ifndef YYPURE
-#define YYLEX		yylex()
+
+/* This macro is provided for backward compatibility. */
+#ifndef YY_LOCATION_PRINT
+# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
 #endif
 
-#ifdef YYPURE
-#ifdef YYLSP_NEEDED
+
+/* YYLEX -- calling `yylex' with the right arguments.  */
 #ifdef YYLEX_PARAM
-#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
+# define YYLEX yylex (YYLEX_PARAM)
 #else
-#define YYLEX		yylex(&yylval, &yylloc)
+# define YYLEX yylex ()
 #endif
-#else /* not YYLSP_NEEDED */
-#ifdef YYLEX_PARAM
-#define YYLEX		yylex(&yylval, YYLEX_PARAM)
+
+/* Enable debugging if requested.  */
+#if YYDEBUG
+
+# ifndef YYFPRINTF
+#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
+#  define YYFPRINTF fprintf
+# endif
+
+# define YYDPRINTF(Args)			\
+do {						\
+  if (yydebug)					\
+    YYFPRINTF Args;				\
+} while (YYID (0))
+
+# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
+do {									  \
+  if (yydebug)								  \
+    {									  \
+      YYFPRINTF (stderr, "%s ", Title);					  \
+      yy_symbol_print (stderr,						  \
+		  Type, Value); \
+      YYFPRINTF (stderr, "\n");						  \
+    }									  \
+} while (YYID (0))
+
+
+/*--------------------------------.
+| Print this symbol on YYOUTPUT.  |
+`--------------------------------*/
+
+/*ARGSUSED*/
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
 #else
-#define YYLEX		yylex(&yylval)
-#endif
-#endif /* not YYLSP_NEEDED */
+static void
+yy_symbol_value_print (yyoutput, yytype, yyvaluep)
+    FILE *yyoutput;
+    int yytype;
+    YYSTYPE const * const yyvaluep;
 #endif
+{
+  FILE *yyo = yyoutput;
+  YYUSE (yyo);
+  if (!yyvaluep)
+    return;
+# ifdef YYPRINT
+  if (yytype < YYNTOKENS)
+    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
+# else
+  YYUSE (yyoutput);
+# endif
+  switch (yytype)
+    {
+      default:
+        break;
+    }
+}
+
+
+/*--------------------------------.
+| Print this symbol on YYOUTPUT.  |
+`--------------------------------*/
 
-/* If nonreentrant, generate the variables here */
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)
+#else
+static void
+yy_symbol_print (yyoutput, yytype, yyvaluep)
+    FILE *yyoutput;
+    int yytype;
+    YYSTYPE const * const yyvaluep;
+#endif
+{
+  if (yytype < YYNTOKENS)
+    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
+  else
+    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);
 
-#ifndef YYPURE
+  yy_symbol_value_print (yyoutput, yytype, yyvaluep);
+  YYFPRINTF (yyoutput, ")");
+}
 
-int	yychar;			/*  the lookahead symbol		*/
-YYSTYPE	yylval;			/*  the semantic value of the		*/
-				/*  lookahead symbol			*/
+/*------------------------------------------------------------------.
+| yy_stack_print -- Print the state stack from its BOTTOM up to its |
+| TOP (included).                                                   |
+`------------------------------------------------------------------*/
 
-#ifdef YYLSP_NEEDED
-YYLTYPE yylloc;			/*  location data for the lookahead	*/
-				/*  symbol				*/
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
+#else
+static void
+yy_stack_print (yybottom, yytop)
+    yytype_int16 *yybottom;
+    yytype_int16 *yytop;
 #endif
+{
+  YYFPRINTF (stderr, "Stack now");
+  for (; yybottom <= yytop; yybottom++)
+    {
+      int yybot = *yybottom;
+      YYFPRINTF (stderr, " %d", yybot);
+    }
+  YYFPRINTF (stderr, "\n");
+}
+
+# define YY_STACK_PRINT(Bottom, Top)				\
+do {								\
+  if (yydebug)							\
+    yy_stack_print ((Bottom), (Top));				\
+} while (YYID (0))
+
 
-int yynerrs;			/*  number of parse errors so far       */
-#endif  /* not YYPURE */
+/*------------------------------------------------.
+| Report that the YYRULE is going to be reduced.  |
+`------------------------------------------------*/
 
-#if YYDEBUG != 0
-int yydebug;			/*  nonzero means print parse trace	*/
-/* Since this is uninitialized, it does not stop multiple parsers
-   from coexisting.  */
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yy_reduce_print (YYSTYPE *yyvsp, int yyrule)
+#else
+static void
+yy_reduce_print (yyvsp, yyrule)
+    YYSTYPE *yyvsp;
+    int yyrule;
 #endif
+{
+  int yynrhs = yyr2[yyrule];
+  int yyi;
+  unsigned long int yylno = yyrline[yyrule];
+  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
+	     yyrule - 1, yylno);
+  /* The symbols being reduced.  */
+  for (yyi = 0; yyi < yynrhs; yyi++)
+    {
+      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
+      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
+		       &(yyvsp[(yyi + 1) - (yynrhs)])
+		       		       );
+      YYFPRINTF (stderr, "\n");
+    }
+}
+
+# define YY_REDUCE_PRINT(Rule)		\
+do {					\
+  if (yydebug)				\
+    yy_reduce_print (yyvsp, Rule); \
+} while (YYID (0))
 
-/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/
+/* Nonzero means print parse trace.  It is left uninitialized so that
+   multiple parsers can coexist.  */
+int yydebug;
+#else /* !YYDEBUG */
+# define YYDPRINTF(Args)
+# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
+# define YY_STACK_PRINT(Bottom, Top)
+# define YY_REDUCE_PRINT(Rule)
+#endif /* !YYDEBUG */
 
+
+/* YYINITDEPTH -- initial size of the parser's stacks.  */
 #ifndef	YYINITDEPTH
-#define YYINITDEPTH 200
+# define YYINITDEPTH 200
 #endif
 
-/*  YYMAXDEPTH is the maximum size the stacks can grow to
-    (effective only if the built-in stack extension method is used).  */
+/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
+   if the built-in stack extension method is used).
 
-#if YYMAXDEPTH == 0
-#undef YYMAXDEPTH
-#endif
+   Do not make this value too large; the results are undefined if
+   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
+   evaluated with infinite-precision integer arithmetic.  */
 
 #ifndef YYMAXDEPTH
-#define YYMAXDEPTH 10000
+# define YYMAXDEPTH 10000
 #endif
 
-/* Prevent warning if -Wstrict-prototypes.  */
-#ifdef __GNUC__
-int yyparse (void);
+
+#if YYERROR_VERBOSE
+
+# ifndef yystrlen
+#  if defined __GLIBC__ && defined _STRING_H
+#   define yystrlen strlen
+#  else
+/* Return the length of YYSTR.  */
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static YYSIZE_T
+yystrlen (const char *yystr)
+#else
+static YYSIZE_T
+yystrlen (yystr)
+    const char *yystr;
+#endif
+{
+  YYSIZE_T yylen;
+  for (yylen = 0; yystr[yylen]; yylen++)
+    continue;
+  return yylen;
+}
+#  endif
+# endif
+
+# ifndef yystpcpy
+#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
+#   define yystpcpy stpcpy
+#  else
+/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
+   YYDEST.  */
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static char *
+yystpcpy (char *yydest, const char *yysrc)
+#else
+static char *
+yystpcpy (yydest, yysrc)
+    char *yydest;
+    const char *yysrc;
 #endif
-
-#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
-#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
-#else				/* not GNU C or C++ */
-#ifndef __cplusplus
-
-/* This is the most reliable way to avoid incompatibilities
-   in available built-in functions on various systems.  */
-static void
-__yy_memcpy (to, from, count)
-     char *to;
-     char *from;
-     int count;
 {
-  register char *f = from;
-  register char *t = to;
-  register int i = count;
+  char *yyd = yydest;
+  const char *yys = yysrc;
+
+  while ((*yyd++ = *yys++) != '\0')
+    continue;
 
-  while (i-- > 0)
-    *t++ = *f++;
+  return yyd - 1;
 }
+#  endif
+# endif
+
+# ifndef yytnamerr
+/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
+   quotes and backslashes, so that it's suitable for yyerror.  The
+   heuristic is that double-quoting is unnecessary unless the string
+   contains an apostrophe, a comma, or backslash (other than
+   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
+   null, do not copy; instead, return the length of what the result
+   would have been.  */
+static YYSIZE_T
+yytnamerr (char *yyres, const char *yystr)
+{
+  if (*yystr == '"')
+    {
+      YYSIZE_T yyn = 0;
+      char const *yyp = yystr;
+
+      for (;;)
+	switch (*++yyp)
+	  {
+	  case '\'':
+	  case ',':
+	    goto do_not_strip_quotes;
+
+	  case '\\':
+	    if (*++yyp != '\\')
+	      goto do_not_strip_quotes;
+	    /* Fall through.  */
+	  default:
+	    if (yyres)
+	      yyres[yyn] = *yyp;
+	    yyn++;
+	    break;
+
+	  case '"':
+	    if (yyres)
+	      yyres[yyn] = '\0';
+	    return yyn;
+	  }
+    do_not_strip_quotes: ;
+    }
 
-#else /* __cplusplus */
+  if (! yyres)
+    return yystrlen (yystr);
 
-/* This is the most reliable way to avoid incompatibilities
-   in available built-in functions on various systems.  */
-static void
-__yy_memcpy (char *to, char *from, int count)
+  return yystpcpy (yyres, yystr) - yyres;
+}
+# endif
+
+/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
+   about the unexpected token YYTOKEN for the state stack whose top is
+   YYSSP.
+
+   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
+   not large enough to hold the message.  In that case, also set
+   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
+   required number of bytes is too large to store.  */
+static int
+yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
+                yytype_int16 *yyssp, int yytoken)
 {
-  register char *f = from;
-  register char *t = to;
-  register int i = count;
+  YYSIZE_T yysize0 = yytnamerr (YY_NULL, yytname[yytoken]);
+  YYSIZE_T yysize = yysize0;
+  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
+  /* Internationalized format string. */
+  const char *yyformat = YY_NULL;
+  /* Arguments of yyformat. */
+  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
+  /* Number of reported tokens (one for the "unexpected", one per
+     "expected"). */
+  int yycount = 0;
+
+  /* There are many possibilities here to consider:
+     - Assume YYFAIL is not used.  It's too flawed to consider.  See
+       <http://lists.gnu.org/archive/html/bison-patches/2009-12/msg00024.html>
+       for details.  YYERROR is fine as it does not invoke this
+       function.
+     - If this state is a consistent state with a default action, then
+       the only way this function was invoked is if the default action
+       is an error action.  In that case, don't check for expected
+       tokens because there are none.
+     - The only way there can be no lookahead present (in yychar) is if
+       this state is a consistent state with a default action.  Thus,
+       detecting the absence of a lookahead is sufficient to determine
+       that there is no unexpected or expected token to report.  In that
+       case, just report a simple "syntax error".
+     - Don't assume there isn't a lookahead just because this state is a
+       consistent state with a default action.  There might have been a
+       previous inconsistent state, consistent state with a non-default
+       action, or user semantic action that manipulated yychar.
+     - Of course, the expected token list depends on states to have
+       correct lookahead information, and it depends on the parser not
+       to perform extra reductions after fetching a lookahead from the
+       scanner and before detecting a syntax error.  Thus, state merging
+       (from LALR or IELR) and default reductions corrupt the expected
+       token list.  However, the list is correct for canonical LR with
+       one exception: it will still contain any token that will not be
+       accepted due to an error action in a later state.
+  */
+  if (yytoken != YYEMPTY)
+    {
+      int yyn = yypact[*yyssp];
+      yyarg[yycount++] = yytname[yytoken];
+      if (!yypact_value_is_default (yyn))
+        {
+          /* Start YYX at -YYN if negative to avoid negative indexes in
+             YYCHECK.  In other words, skip the first -YYN actions for
+             this state because they are default actions.  */
+          int yyxbegin = yyn < 0 ? -yyn : 0;
+          /* Stay within bounds of both yycheck and yytname.  */
+          int yychecklim = YYLAST - yyn + 1;
+          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
+          int yyx;
+
+          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
+            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
+                && !yytable_value_is_error (yytable[yyx + yyn]))
+              {
+                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
+                  {
+                    yycount = 1;
+                    yysize = yysize0;
+                    break;
+                  }
+                yyarg[yycount++] = yytname[yyx];
+                {
+                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULL, yytname[yyx]);
+                  if (! (yysize <= yysize1
+                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
+                    return 2;
+                  yysize = yysize1;
+                }
+              }
+        }
+    }
 
-  while (i-- > 0)
-    *t++ = *f++;
+  switch (yycount)
+    {
+# define YYCASE_(N, S)                      \
+      case N:                               \
+        yyformat = S;                       \
+      break
+      YYCASE_(0, YY_("syntax error"));
+      YYCASE_(1, YY_("syntax error, unexpected %s"));
+      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
+      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
+      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
+      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
+# undef YYCASE_
+    }
+
+  {
+    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
+    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
+      return 2;
+    yysize = yysize1;
+  }
+
+  if (*yymsg_alloc < yysize)
+    {
+      *yymsg_alloc = 2 * yysize;
+      if (! (yysize <= *yymsg_alloc
+             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
+        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
+      return 1;
+    }
+
+  /* Avoid sprintf, as that infringes on the user's name space.
+     Don't have undefined behavior even if the translation
+     produced a string with the wrong number of "%s"s.  */
+  {
+    char *yyp = *yymsg;
+    int yyi = 0;
+    while ((*yyp = *yyformat) != '\0')
+      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
+        {
+          yyp += yytnamerr (yyp, yyarg[yyi++]);
+          yyformat += 2;
+        }
+      else
+        {
+          yyp++;
+          yyformat++;
+        }
+  }
+  return 0;
 }
+#endif /* YYERROR_VERBOSE */
 
+/*-----------------------------------------------.
+| Release the memory associated to this symbol.  |
+`-----------------------------------------------*/
+
+/*ARGSUSED*/
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+static void
+yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
+#else
+static void
+yydestruct (yymsg, yytype, yyvaluep)
+    const char *yymsg;
+    int yytype;
+    YYSTYPE *yyvaluep;
 #endif
-#endif
-
-#line 196 "/usr/lib/bison.simple"
+{
+  YYUSE (yyvaluep);
 
-/* The user can define YYPARSE_PARAM as the name of an argument to be passed
-   into yyparse.  The argument should have type void *.
-   It should actually point to an object.
-   Grammar actions can access the variable by casting it
-   to the proper pointer type.  */
+  if (!yymsg)
+    yymsg = "Deleting";
+  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
 
-#ifdef YYPARSE_PARAM
-#ifdef __cplusplus
-#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
-#define YYPARSE_PARAM_DECL
-#else /* not __cplusplus */
-#define YYPARSE_PARAM_ARG YYPARSE_PARAM
-#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
-#endif /* not __cplusplus */
-#else /* not YYPARSE_PARAM */
-#define YYPARSE_PARAM_ARG
-#define YYPARSE_PARAM_DECL
-#endif /* not YYPARSE_PARAM */
+  switch (yytype)
+    {
 
-int
-yyparse(YYPARSE_PARAM_ARG)
-     YYPARSE_PARAM_DECL
-{
-  register int yystate;
-  register int yyn;
-  register short *yyssp;
-  register YYSTYPE *yyvsp;
-  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
-  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */
+      default:
+        break;
+    }
+}
 
-  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
-  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/
 
-  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
-  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */
 
-#ifdef YYLSP_NEEDED
-  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
-  YYLTYPE *yyls = yylsa;
-  YYLTYPE *yylsp;
 
-#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
-#else
-#define YYPOPSTACK   (yyvsp--, yyssp--)
-#endif
+/* The lookahead symbol.  */
+int yychar;
 
-  int yystacksize = YYINITDEPTH;
 
-#ifdef YYPURE
-  int yychar;
-  YYSTYPE yylval;
-  int yynerrs;
-#ifdef YYLSP_NEEDED
-  YYLTYPE yylloc;
+#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+# define YY_IGNORE_MAYBE_UNINITIALIZED_END
 #endif
+#ifndef YY_INITIAL_VALUE
+# define YY_INITIAL_VALUE(Value) /* Nothing. */
 #endif
 
-  YYSTYPE yyval;		/*  the variable used to return		*/
-				/*  semantic values from the action	*/
-				/*  routines				*/
+/* The semantic value of the lookahead symbol.  */
+YYSTYPE yylval YY_INITIAL_VALUE(yyval_default);
+
+/* Number of syntax errors so far.  */
+int yynerrs;
 
-  int yylen;
 
-#if YYDEBUG != 0
-  if (yydebug)
-    fprintf(stderr, "Starting parse\n");
+/*----------.
+| yyparse.  |
+`----------*/
+
+#ifdef YYPARSE_PARAM
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+int
+yyparse (void *YYPARSE_PARAM)
+#else
+int
+yyparse (YYPARSE_PARAM)
+    void *YYPARSE_PARAM;
+#endif
+#else /* ! YYPARSE_PARAM */
+#if (defined __STDC__ || defined __C99__FUNC__ \
+     || defined __cplusplus || defined _MSC_VER)
+int
+yyparse (void)
+#else
+int
+yyparse ()
+
+#endif
+#endif
+{
+    int yystate;
+    /* Number of tokens to shift before error messages enabled.  */
+    int yyerrstatus;
+
+    /* The stacks and their tools:
+       `yyss': related to states.
+       `yyvs': related to semantic values.
+
+       Refer to the stacks through separate pointers, to allow yyoverflow
+       to reallocate them elsewhere.  */
+
+    /* The state stack.  */
+    yytype_int16 yyssa[YYINITDEPTH];
+    yytype_int16 *yyss;
+    yytype_int16 *yyssp;
+
+    /* The semantic value stack.  */
+    YYSTYPE yyvsa[YYINITDEPTH];
+    YYSTYPE *yyvs;
+    YYSTYPE *yyvsp;
+
+    YYSIZE_T yystacksize;
+
+  int yyn;
+  int yyresult;
+  /* Lookahead token as an internal (translated) token number.  */
+  int yytoken = 0;
+  /* The variables used to return semantic value and location from the
+     action routines.  */
+  YYSTYPE yyval;
+
+#if YYERROR_VERBOSE
+  /* Buffer for error messages, and its allocated size.  */
+  char yymsgbuf[128];
+  char *yymsg = yymsgbuf;
+  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
 #endif
 
+#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))
+
+  /* The number of symbols on the RHS of the reduced rule.
+     Keep to zero when no symbol should be popped.  */
+  int yylen = 0;
+
+  yyssp = yyss = yyssa;
+  yyvsp = yyvs = yyvsa;
+  yystacksize = YYINITDEPTH;
+
+  YYDPRINTF ((stderr, "Starting parse\n"));
+
   yystate = 0;
   yyerrstatus = 0;
   yynerrs = 0;
-  yychar = YYEMPTY;		/* Cause a token to be read.  */
-
-  /* Initialize stack pointers.
-     Waste one element of value and location stack
-     so that they stay on the same level as the state stack.
-     The wasted elements are never initialized.  */
-
-  yyssp = yyss - 1;
-  yyvsp = yyvs;
-#ifdef YYLSP_NEEDED
-  yylsp = yyls;
-#endif
+  yychar = YYEMPTY; /* Cause a token to be read.  */
+  goto yysetstate;
 
-/* Push a new state, which is found in  yystate  .  */
-/* In all cases, when you get here, the value and location stacks
-   have just been pushed. so pushing a state here evens the stacks.  */
-yynewstate:
+/*------------------------------------------------------------.
+| yynewstate -- Push a new state, which is found in yystate.  |
+`------------------------------------------------------------*/
+ yynewstate:
+  /* In all cases, when you get here, the value and location stacks
+     have just been pushed.  So pushing a state here evens the stacks.  */
+  yyssp++;
 
-  *++yyssp = yystate;
+ yysetstate:
+  *yyssp = (yytype_int16)yystate;
 
-  if (yyssp >= yyss + yystacksize - 1)
+  if (yyss + yystacksize - 1 <= yyssp)
     {
-      /* Give user a chance to reallocate the stack */
-      /* Use copies of these so that the &'s don't force the real ones into memory. */
-      YYSTYPE *yyvs1 = yyvs;
-      short *yyss1 = yyss;
-#ifdef YYLSP_NEEDED
-      YYLTYPE *yyls1 = yyls;
-#endif
-
       /* Get the current used size of the three stacks, in elements.  */
-      int size = yyssp - yyss + 1;
+      YYSIZE_T yysize = (YYSIZE_T)(yyssp - yyss + 1);
 
 #ifdef yyoverflow
-      /* Each stack pointer address is followed by the size of
-	 the data in use in that stack, in bytes.  */
-#ifdef YYLSP_NEEDED
-      /* This used to be a conditional around just the two extra args,
-	 but that might be undefined if yyoverflow is a macro.  */
-      yyoverflow("parser stack overflow",
-		 &yyss1, size * sizeof (*yyssp),
-		 &yyvs1, size * sizeof (*yyvsp),
-		 &yyls1, size * sizeof (*yylsp),
-		 &yystacksize);
-#else
-      yyoverflow("parser stack overflow",
-		 &yyss1, size * sizeof (*yyssp),
-		 &yyvs1, size * sizeof (*yyvsp),
-		 &yystacksize);
-#endif
-
-      yyss = yyss1; yyvs = yyvs1;
-#ifdef YYLSP_NEEDED
-      yyls = yyls1;
-#endif
+      {
+	/* Give user a chance to reallocate the stack.  Use copies of
+	   these so that the &'s don't force the real ones into
+	   memory.  */
+	YYSTYPE *yyvs1 = yyvs;
+	yytype_int16 *yyss1 = yyss;
+
+	/* Each stack pointer address is followed by the size of the
+	   data in use in that stack, in bytes.  This used to be a
+	   conditional around just the two extra args, but that might
+	   be undefined if yyoverflow is a macro.  */
+	yyoverflow (YY_("memory exhausted"),
+		    &yyss1, yysize * sizeof (*yyssp),
+		    &yyvs1, yysize * sizeof (*yyvsp),
+		    &yystacksize);
+
+	yyss = yyss1;
+	yyvs = yyvs1;
+      }
 #else /* no yyoverflow */
+# ifndef YYSTACK_RELOCATE
+      goto yyexhaustedlab;
+# else
       /* Extend the stack our own way.  */
-      if (yystacksize >= YYMAXDEPTH)
-	{
-	  yyerror("parser stack overflow");
-	  return 2;
-	}
+      if (YYMAXDEPTH <= yystacksize)
+	goto yyexhaustedlab;
       yystacksize *= 2;
-      if (yystacksize > YYMAXDEPTH)
+      if (YYMAXDEPTH < yystacksize)
 	yystacksize = YYMAXDEPTH;
-      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
-      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
-      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
-      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
-#ifdef YYLSP_NEEDED
-      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
-      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
-#endif
+
+      {
+	yytype_int16 *yyss1 = yyss;
+	union yyalloc *yyptr =
+	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
+	if (! yyptr)
+	  goto yyexhaustedlab;
+	YYSTACK_RELOCATE (yyss_alloc, yyss);
+	YYSTACK_RELOCATE (yyvs_alloc, yyvs);
+#  undef YYSTACK_RELOCATE
+	if (yyss1 != yyssa)
+	  YYSTACK_FREE (yyss1);
+      }
+# endif
 #endif /* no yyoverflow */
 
-      yyssp = yyss + size - 1;
-      yyvsp = yyvs + size - 1;
-#ifdef YYLSP_NEEDED
-      yylsp = yyls + size - 1;
-#endif
+      yyssp = yyss + yysize - 1;
+      yyvsp = yyvs + yysize - 1;
 
-#if YYDEBUG != 0
-      if (yydebug)
-	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
-#endif
+      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
+		  (unsigned long int) yystacksize));
 
-      if (yyssp >= yyss + yystacksize - 1)
+      if (yyss + yystacksize - 1 <= yyssp)
 	YYABORT;
     }
 
-#if YYDEBUG != 0
-  if (yydebug)
-    fprintf(stderr, "Entering state %d\n", yystate);
-#endif
+  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
+
+  if (yystate == YYFINAL)
+    YYACCEPT;
 
   goto yybackup;
- yybackup:
 
-/* Do appropriate processing given the current state.  */
-/* Read a lookahead token if we need one and don't already have one.  */
-/* yyresume: */
+/*-----------.
+| yybackup.  |
+`-----------*/
+yybackup:
 
-  /* First try to decide what to do without reference to lookahead token.  */
+  /* Do appropriate processing given the current state.  Read a
+     lookahead token if we need one and don't already have one.  */
 
+  /* First try to decide what to do without reference to lookahead token.  */
   yyn = yypact[yystate];
-  if (yyn == YYFLAG)
+  if (yypact_value_is_default (yyn))
     goto yydefault;
 
   /* Not known => get a lookahead token if don't already have one.  */
 
-  /* yychar is either YYEMPTY or YYEOF
-     or a valid token in external form.  */
-
+  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
   if (yychar == YYEMPTY)
     {
-#if YYDEBUG != 0
-      if (yydebug)
-	fprintf(stderr, "Reading a token: ");
-#endif
+      YYDPRINTF ((stderr, "Reading a token: "));
       yychar = YYLEX;
     }
 
-  /* Convert token to internal form (in yychar1) for indexing tables with */
-
-  if (yychar <= 0)		/* This means end of input. */
+  if (yychar <= YYEOF)
     {
-      yychar1 = 0;
-      yychar = YYEOF;		/* Don't call YYLEX any more */
-
-#if YYDEBUG != 0
-      if (yydebug)
-	fprintf(stderr, "Now at end of input.\n");
-#endif
+      yychar = yytoken = YYEOF;
+      YYDPRINTF ((stderr, "Now at end of input.\n"));
     }
   else
     {
-      yychar1 = YYTRANSLATE(yychar);
-
-#if YYDEBUG != 0
-      if (yydebug)
-	{
-	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
-	  /* Give the individual parser a way to print the precise meaning
-	     of a token, for further debugging info.  */
-#ifdef YYPRINT
-	  YYPRINT (stderr, yychar, yylval);
-#endif
-	  fprintf (stderr, ")\n");
-	}
-#endif
+      yytoken = YYTRANSLATE (yychar);
+      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
     }
 
-  yyn += yychar1;
-  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
+  /* If the proper action on seeing token YYTOKEN is to reduce or to
+     detect an error, take that action.  */
+  yyn += yytoken;
+  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
     goto yydefault;
-
   yyn = yytable[yyn];
-
-  /* yyn is what to do for this token type in this state.
-     Negative => reduce, -yyn is rule number.
-     Positive => shift, yyn is new state.
-       New state is final state => don't bother to shift,
-       just return success.
-     0, or most negative number => error.  */
-
-  if (yyn < 0)
+  if (yyn <= 0)
     {
-      if (yyn == YYFLAG)
-	goto yyerrlab;
+      if (yytable_value_is_error (yyn))
+        goto yyerrlab;
       yyn = -yyn;
       goto yyreduce;
     }
-  else if (yyn == 0)
-    goto yyerrlab;
 
-  if (yyn == YYFINAL)
-    YYACCEPT;
+  /* Count tokens shifted since error; after three, turn off error
+     status.  */
+  if (yyerrstatus)
+    yyerrstatus--;
 
   /* Shift the lookahead token.  */
+  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
 
-#if YYDEBUG != 0
-  if (yydebug)
-    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
-#endif
-
-  /* Discard the token being shifted unless it is eof.  */
-  if (yychar != YYEOF)
-    yychar = YYEMPTY;
+  /* Discard the shifted token.  */
+  yychar = YYEMPTY;
 
+  yystate = yyn;
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
   *++yyvsp = yylval;
-#ifdef YYLSP_NEEDED
-  *++yylsp = yylloc;
-#endif
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
 
-  /* count tokens shifted since error; after three, turn off error status.  */
-  if (yyerrstatus) yyerrstatus--;
-
-  yystate = yyn;
   goto yynewstate;
 
-/* Do the default action for the current state.  */
-yydefault:
 
+/*-----------------------------------------------------------.
+| yydefault -- do the default action for the current state.  |
+`-----------------------------------------------------------*/
+yydefault:
   yyn = yydefact[yystate];
   if (yyn == 0)
     goto yyerrlab;
+  goto yyreduce;
 
-/* Do a reduction.  yyn is the number of a rule to reduce with.  */
+
+/*-----------------------------.
+| yyreduce -- Do a reduction.  |
+`-----------------------------*/
 yyreduce:
+  /* yyn is the number of a rule to reduce with.  */
   yylen = yyr2[yyn];
-  if (yylen > 0)
-    yyval = yyvsp[1-yylen]; /* implement default value of the action */
-
-#if YYDEBUG != 0
-  if (yydebug)
-    {
-      int i;
-
-      fprintf (stderr, "Reducing via rule %d (line %d), ",
-	       yyn, yyrline[yyn]);
 
-      /* Print the symbols being reduced, and their result.  */
-      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
-	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
-      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
-    }
-#endif
+  /* If YYLEN is nonzero, implement the default value of the action:
+     `$$ = $1'.
 
+     Otherwise, the following line sets YYVAL to garbage.
+     This behavior is undocumented and Bison
+     users should not rely upon it.  Assigning to YYVAL
+     unconditionally makes the parser a bit smaller, and it avoids a
+     GCC warning that YYVAL may be used uninitialized.  */
+  yyval = yyvsp[1-yylen];
 
-  switch (yyn) {
 
-case 1:
+  YY_REDUCE_PRINT (yyn);
+  switch (yyn)
+    {
+        case 2:
+/* Line 1792 of yacc.c  */
 #line 234 "objc-parse.y"
-{ if (pedantic)
+    { if (pedantic)
 		    pedwarn ("ANSI C forbids an empty source file");
 		  finish_file ();
-		;
-    break;}
-case 2:
+		}
+    break;
+
+  case 3:
+/* Line 1792 of yacc.c  */
 #line 239 "objc-parse.y"
-{
+    {
 		  /* In case there were missing closebraces,
 		     get us back to the global binding level.  */
 		  while (! global_bindings_p ())
 		    poplevel (0, 0, 0);
 		  finish_file ();
-		;
-    break;}
-case 3:
-#line 253 "objc-parse.y"
-{yyval.ttype = NULL_TREE; ;
-    break;}
-case 5:
+		}
+    break;
+
+  case 4:
+/* Line 1792 of yacc.c  */
+#line 253 "objc-parse.y"
+    {(yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 6:
+/* Line 1792 of yacc.c  */
 #line 254 "objc-parse.y"
-{yyval.ttype = NULL_TREE; ;
-    break;}
-case 10:
+    {(yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 11:
+/* Line 1792 of yacc.c  */
 #line 262 "objc-parse.y"
-{ STRIP_NOPS (yyvsp[-2].ttype);
-		  if ((TREE_CODE (yyvsp[-2].ttype) == ADDR_EXPR
-		       && TREE_CODE (TREE_OPERAND (yyvsp[-2].ttype, 0)) == STRING_CST)
-		      || TREE_CODE (yyvsp[-2].ttype) == STRING_CST)
-		    assemble_asm (yyvsp[-2].ttype);
+    { STRIP_NOPS ((yyvsp[(3) - (5)].ttype));
+		  if ((TREE_CODE ((yyvsp[(3) - (5)].ttype)) == ADDR_EXPR
+		       && TREE_CODE (TREE_OPERAND ((yyvsp[(3) - (5)].ttype), 0)) == STRING_CST)
+		      || TREE_CODE ((yyvsp[(3) - (5)].ttype)) == STRING_CST)
+		    assemble_asm ((yyvsp[(3) - (5)].ttype));
 		  else
-		    error ("argument of `asm' is not a constant string"); ;
-    break;}
-case 11:
+		    error ("argument of `asm' is not a constant string"); }
+    break;
+
+  case 12:
+/* Line 1792 of yacc.c  */
 #line 270 "objc-parse.y"
-{ pedantic = yyvsp[-1].itype; ;
-    break;}
-case 12:
+    { pedantic = (yyvsp[(1) - (2)].itype); }
+    break;
+
+  case 13:
+/* Line 1792 of yacc.c  */
 #line 275 "objc-parse.y"
-{ if (pedantic)
+    { if (pedantic)
 		    error ("ANSI C forbids data definition with no type or storage class");
 		  else if (!flag_traditional)
 		    warning ("data definition has no type or storage class"); 
@@ -2220,241 +3031,327 @@ case 12:
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 13:
+		  resume_momentary ((yyvsp[(1) - (3)].itype)); }
+    break;
+
+  case 14:
+/* Line 1792 of yacc.c  */
 #line 285 "objc-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);
+    { current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 14:
+		  resume_momentary ((yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 15:
+/* Line 1792 of yacc.c  */
 #line 290 "objc-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);
+    { current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype);  ;
-    break;}
-case 15:
+		  resume_momentary ((yyvsp[(2) - (4)].itype));  }
+    break;
+
+  case 16:
+/* Line 1792 of yacc.c  */
 #line 295 "objc-parse.y"
-{ pedwarn ("empty declaration"); ;
-    break;}
-case 16:
+    { pedwarn ("empty declaration"); }
+    break;
+
+  case 17:
+/* Line 1792 of yacc.c  */
 #line 297 "objc-parse.y"
-{ shadow_tag (yyvsp[-1].ttype); ;
-    break;}
-case 19:
+    { shadow_tag ((yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 20:
+/* Line 1792 of yacc.c  */
 #line 301 "objc-parse.y"
-{ if (pedantic)
-		    pedwarn ("ANSI C does not allow extra `;' outside of a function"); ;
-    break;}
-case 20:
+    { if (pedantic)
+		    pedwarn ("ANSI C does not allow extra `;' outside of a function"); }
+    break;
+
+  case 21:
+/* Line 1792 of yacc.c  */
 #line 307 "objc-parse.y"
-{ if (! start_function (current_declspecs, yyvsp[0].ttype,
+    { if (! start_function (current_declspecs, (yyvsp[(3) - (3)].ttype),
 					prefix_attributes, NULL_TREE, 0))
 		    YYERROR1;
-		  reinit_parse_for_function (); ;
-    break;}
-case 21:
+		  reinit_parse_for_function (); }
+    break;
+
+  case 22:
+/* Line 1792 of yacc.c  */
 #line 312 "objc-parse.y"
-{ store_parm_decls (); ;
-    break;}
-case 22:
+    { store_parm_decls (); }
+    break;
+
+  case 23:
+/* Line 1792 of yacc.c  */
 #line 314 "objc-parse.y"
-{ finish_function (0); 
+    { finish_function (0); 
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-5].itype); ;
-    break;}
-case 23:
+		  resume_momentary ((yyvsp[(2) - (7)].itype)); }
+    break;
+
+  case 24:
+/* Line 1792 of yacc.c  */
 #line 320 "objc-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);
+    { current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 24:
+		  resume_momentary ((yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 25:
+/* Line 1792 of yacc.c  */
 #line 325 "objc-parse.y"
-{ if (! start_function (current_declspecs, yyvsp[0].ttype,
+    { if (! start_function (current_declspecs, (yyvsp[(3) - (3)].ttype),
 					prefix_attributes, NULL_TREE, 0))
 		    YYERROR1;
-		  reinit_parse_for_function (); ;
-    break;}
-case 25:
+		  reinit_parse_for_function (); }
+    break;
+
+  case 26:
+/* Line 1792 of yacc.c  */
 #line 330 "objc-parse.y"
-{ store_parm_decls (); ;
-    break;}
-case 26:
+    { store_parm_decls (); }
+    break;
+
+  case 27:
+/* Line 1792 of yacc.c  */
 #line 332 "objc-parse.y"
-{ finish_function (0); 
+    { finish_function (0); 
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-5].itype); ;
-    break;}
-case 27:
+		  resume_momentary ((yyvsp[(2) - (7)].itype)); }
+    break;
+
+  case 28:
+/* Line 1792 of yacc.c  */
 #line 338 "objc-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);
+    { current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 28:
+		  resume_momentary ((yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 29:
+/* Line 1792 of yacc.c  */
 #line 343 "objc-parse.y"
-{ if (! start_function (NULL_TREE, yyvsp[0].ttype,
+    { if (! start_function (NULL_TREE, (yyvsp[(2) - (2)].ttype),
 					prefix_attributes, NULL_TREE, 0))
 		    YYERROR1;
-		  reinit_parse_for_function (); ;
-    break;}
-case 29:
+		  reinit_parse_for_function (); }
+    break;
+
+  case 30:
+/* Line 1792 of yacc.c  */
 #line 348 "objc-parse.y"
-{ store_parm_decls (); ;
-    break;}
-case 30:
+    { store_parm_decls (); }
+    break;
+
+  case 31:
+/* Line 1792 of yacc.c  */
 #line 350 "objc-parse.y"
-{ finish_function (0); 
+    { finish_function (0); 
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-5].itype); ;
-    break;}
-case 31:
+		  resume_momentary ((yyvsp[(1) - (6)].itype)); }
+    break;
+
+  case 32:
+/* Line 1792 of yacc.c  */
 #line 356 "objc-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);
+    { current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 36:
+		  resume_momentary ((yyvsp[(1) - (3)].itype)); }
+    break;
+
+  case 37:
+/* Line 1792 of yacc.c  */
 #line 370 "objc-parse.y"
-{ yyval.code = ADDR_EXPR; ;
-    break;}
-case 37:
+    { (yyval.code) = ADDR_EXPR; }
+    break;
+
+  case 38:
+/* Line 1792 of yacc.c  */
 #line 372 "objc-parse.y"
-{ yyval.code = NEGATE_EXPR; ;
-    break;}
-case 38:
+    { (yyval.code) = NEGATE_EXPR; }
+    break;
+
+  case 39:
+/* Line 1792 of yacc.c  */
 #line 374 "objc-parse.y"
-{ yyval.code = CONVERT_EXPR; ;
-    break;}
-case 39:
+    { (yyval.code) = CONVERT_EXPR; }
+    break;
+
+  case 40:
+/* Line 1792 of yacc.c  */
 #line 376 "objc-parse.y"
-{ yyval.code = PREINCREMENT_EXPR; ;
-    break;}
-case 40:
+    { (yyval.code) = PREINCREMENT_EXPR; }
+    break;
+
+  case 41:
+/* Line 1792 of yacc.c  */
 #line 378 "objc-parse.y"
-{ yyval.code = PREDECREMENT_EXPR; ;
-    break;}
-case 41:
+    { (yyval.code) = PREDECREMENT_EXPR; }
+    break;
+
+  case 42:
+/* Line 1792 of yacc.c  */
 #line 380 "objc-parse.y"
-{ yyval.code = BIT_NOT_EXPR; ;
-    break;}
-case 42:
+    { (yyval.code) = BIT_NOT_EXPR; }
+    break;
+
+  case 43:
+/* Line 1792 of yacc.c  */
 #line 382 "objc-parse.y"
-{ yyval.code = TRUTH_NOT_EXPR; ;
-    break;}
-case 43:
+    { (yyval.code) = TRUTH_NOT_EXPR; }
+    break;
+
+  case 44:
+/* Line 1792 of yacc.c  */
 #line 386 "objc-parse.y"
-{ yyval.ttype = build_compound_expr (yyvsp[0].ttype); ;
-    break;}
-case 44:
+    { (yyval.ttype) = build_compound_expr ((yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 45:
+/* Line 1792 of yacc.c  */
 #line 391 "objc-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 46:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 47:
+/* Line 1792 of yacc.c  */
 #line 397 "objc-parse.y"
-{ yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;
-    break;}
-case 47:
+    { (yyval.ttype) = build_tree_list (NULL_TREE, (yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 48:
+/* Line 1792 of yacc.c  */
 #line 399 "objc-parse.y"
-{ chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;
-    break;}
-case 49:
+    { chainon ((yyvsp[(1) - (3)].ttype), build_tree_list (NULL_TREE, (yyvsp[(3) - (3)].ttype))); }
+    break;
+
+  case 50:
+/* Line 1792 of yacc.c  */
 #line 405 "objc-parse.y"
-{ yyval.ttype = build_indirect_ref (yyvsp[0].ttype, "unary *"); ;
-    break;}
-case 50:
+    { (yyval.ttype) = build_indirect_ref ((yyvsp[(2) - (2)].ttype), "unary *"); }
+    break;
+
+  case 51:
+/* Line 1792 of yacc.c  */
 #line 408 "objc-parse.y"
-{ yyval.ttype = yyvsp[0].ttype;
-		  pedantic = yyvsp[-1].itype; ;
-    break;}
-case 51:
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype);
+		  pedantic = (yyvsp[(1) - (2)].itype); }
+    break;
+
+  case 52:
+/* Line 1792 of yacc.c  */
 #line 411 "objc-parse.y"
-{ yyval.ttype = build_unary_op (yyvsp[-1].code, yyvsp[0].ttype, 0);
-		  overflow_warning (yyval.ttype); ;
-    break;}
-case 52:
+    { (yyval.ttype) = build_unary_op ((yyvsp[(1) - (2)].code), (yyvsp[(2) - (2)].ttype), 0);
+		  overflow_warning ((yyval.ttype)); }
+    break;
+
+  case 53:
+/* Line 1792 of yacc.c  */
 #line 415 "objc-parse.y"
-{ tree label = lookup_label (yyvsp[0].ttype);
+    { tree label = lookup_label ((yyvsp[(2) - (2)].ttype));
 		  if (pedantic)
 		    pedwarn ("ANSI C forbids `&&'");
 		  if (label == 0)
-		    yyval.ttype = null_pointer_node;
+		    (yyval.ttype) = null_pointer_node;
 		  else
 		    {
 		      TREE_USED (label) = 1;
-		      yyval.ttype = build1 (ADDR_EXPR, ptr_type_node, label);
-		      TREE_CONSTANT (yyval.ttype) = 1;
+		      (yyval.ttype) = build1 (ADDR_EXPR, ptr_type_node, label);
+		      TREE_CONSTANT ((yyval.ttype)) = 1;
 		    }
-		;
-    break;}
-case 53:
+		}
+    break;
+
+  case 54:
+/* Line 1792 of yacc.c  */
 #line 443 "objc-parse.y"
-{ skip_evaluation--;
-		  if (TREE_CODE (yyvsp[0].ttype) == COMPONENT_REF
-		      && DECL_C_BIT_FIELD (TREE_OPERAND (yyvsp[0].ttype, 1)))
+    { skip_evaluation--;
+		  if (TREE_CODE ((yyvsp[(2) - (2)].ttype)) == COMPONENT_REF
+		      && DECL_C_BIT_FIELD (TREE_OPERAND ((yyvsp[(2) - (2)].ttype), 1)))
 		    error ("`sizeof' applied to a bit-field");
-		  yyval.ttype = c_sizeof (TREE_TYPE (yyvsp[0].ttype)); ;
-    break;}
-case 54:
+		  (yyval.ttype) = c_sizeof (TREE_TYPE ((yyvsp[(2) - (2)].ttype))); }
+    break;
+
+  case 55:
+/* Line 1792 of yacc.c  */
 #line 449 "objc-parse.y"
-{ skip_evaluation--;
-		  yyval.ttype = c_sizeof (groktypename (yyvsp[-1].ttype)); ;
-    break;}
-case 55:
+    { skip_evaluation--;
+		  (yyval.ttype) = c_sizeof (groktypename ((yyvsp[(3) - (4)].ttype))); }
+    break;
+
+  case 56:
+/* Line 1792 of yacc.c  */
 #line 452 "objc-parse.y"
-{ skip_evaluation--;
-		  yyval.ttype = c_alignof_expr (yyvsp[0].ttype); ;
-    break;}
-case 56:
+    { skip_evaluation--;
+		  (yyval.ttype) = c_alignof_expr ((yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 57:
+/* Line 1792 of yacc.c  */
 #line 455 "objc-parse.y"
-{ skip_evaluation--;
-		  yyval.ttype = c_alignof (groktypename (yyvsp[-1].ttype)); ;
-    break;}
-case 57:
+    { skip_evaluation--;
+		  (yyval.ttype) = c_alignof (groktypename ((yyvsp[(3) - (4)].ttype))); }
+    break;
+
+  case 58:
+/* Line 1792 of yacc.c  */
 #line 458 "objc-parse.y"
-{ yyval.ttype = build_unary_op (REALPART_EXPR, yyvsp[0].ttype, 0); ;
-    break;}
-case 58:
+    { (yyval.ttype) = build_unary_op (REALPART_EXPR, (yyvsp[(2) - (2)].ttype), 0); }
+    break;
+
+  case 59:
+/* Line 1792 of yacc.c  */
 #line 460 "objc-parse.y"
-{ yyval.ttype = build_unary_op (IMAGPART_EXPR, yyvsp[0].ttype, 0); ;
-    break;}
-case 59:
+    { (yyval.ttype) = build_unary_op (IMAGPART_EXPR, (yyvsp[(2) - (2)].ttype), 0); }
+    break;
+
+  case 60:
+/* Line 1792 of yacc.c  */
 #line 464 "objc-parse.y"
-{ skip_evaluation++; ;
-    break;}
-case 60:
+    { skip_evaluation++; }
+    break;
+
+  case 61:
+/* Line 1792 of yacc.c  */
 #line 468 "objc-parse.y"
-{ skip_evaluation++; ;
-    break;}
-case 62:
+    { skip_evaluation++; }
+    break;
+
+  case 63:
+/* Line 1792 of yacc.c  */
 #line 474 "objc-parse.y"
-{ tree type = groktypename (yyvsp[-2].ttype);
-		  yyval.ttype = build_c_cast (type, yyvsp[0].ttype); ;
-    break;}
-case 63:
+    { tree type = groktypename ((yyvsp[(2) - (4)].ttype));
+		  (yyval.ttype) = build_c_cast (type, (yyvsp[(4) - (4)].ttype)); }
+    break;
+
+  case 64:
+/* Line 1792 of yacc.c  */
 #line 477 "objc-parse.y"
-{ start_init (NULL_TREE, NULL, 0);
-		  yyvsp[-2].ttype = groktypename (yyvsp[-2].ttype);
-		  really_start_incremental_init (yyvsp[-2].ttype); ;
-    break;}
-case 64:
+    { start_init (NULL_TREE, NULL, 0);
+		  (yyvsp[(2) - (4)].ttype) = groktypename ((yyvsp[(2) - (4)].ttype));
+		  really_start_incremental_init ((yyvsp[(2) - (4)].ttype)); }
+    break;
+
+  case 65:
+/* Line 1792 of yacc.c  */
 #line 481 "objc-parse.y"
-{ char *name;
+    { char *name;
 		  tree result = pop_init_level (0);
-		  tree type = yyvsp[-5].ttype;
+		  tree type = (yyvsp[(2) - (7)].ttype);
 		  finish_init ();
 
 		  if (pedantic && ! flag_isoc9x)
@@ -2468,138 +3365,186 @@ case 64:
 		    }
 		  else
 		    name = "";
-		  yyval.ttype = result;
+		  (yyval.ttype) = result;
 		  if (TREE_CODE (type) == ARRAY_TYPE && TYPE_SIZE (type) == 0)
 		    {
-		      int failure = complete_array_type (type, yyval.ttype, 1);
+		      int failure = complete_array_type (type, (yyval.ttype), 1);
 		      if (failure)
 			abort ();
 		    }
-		;
-    break;}
-case 66:
+		}
+    break;
+
+  case 67:
+/* Line 1792 of yacc.c  */
 #line 510 "objc-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 67:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 68:
+/* Line 1792 of yacc.c  */
 #line 512 "objc-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 68:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 69:
+/* Line 1792 of yacc.c  */
 #line 514 "objc-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 69:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 70:
+/* Line 1792 of yacc.c  */
 #line 516 "objc-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 70:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 71:
+/* Line 1792 of yacc.c  */
 #line 518 "objc-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 71:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 72:
+/* Line 1792 of yacc.c  */
 #line 520 "objc-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 72:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 73:
+/* Line 1792 of yacc.c  */
 #line 522 "objc-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 73:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 74:
+/* Line 1792 of yacc.c  */
 #line 524 "objc-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 74:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 75:
+/* Line 1792 of yacc.c  */
 #line 526 "objc-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 75:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 76:
+/* Line 1792 of yacc.c  */
 #line 528 "objc-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 76:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 77:
+/* Line 1792 of yacc.c  */
 #line 530 "objc-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 77:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 78:
+/* Line 1792 of yacc.c  */
 #line 532 "objc-parse.y"
-{ yyval.ttype = parser_build_binary_op (yyvsp[-1].code, yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 78:
+    { (yyval.ttype) = parser_build_binary_op ((yyvsp[(2) - (3)].code), (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 79:
+/* Line 1792 of yacc.c  */
 #line 534 "objc-parse.y"
-{ yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[-1].ttype));
-		  skip_evaluation += yyvsp[-1].ttype == boolean_false_node; ;
-    break;}
-case 79:
+    { (yyvsp[(1) - (2)].ttype) = truthvalue_conversion (default_conversion ((yyvsp[(1) - (2)].ttype)));
+		  skip_evaluation += (yyvsp[(1) - (2)].ttype) == boolean_false_node; }
+    break;
+
+  case 80:
+/* Line 1792 of yacc.c  */
 #line 537 "objc-parse.y"
-{ skip_evaluation -= yyvsp[-3].ttype == boolean_false_node;
-		  yyval.ttype = parser_build_binary_op (TRUTH_ANDIF_EXPR, yyvsp[-3].ttype, yyvsp[0].ttype); ;
-    break;}
-case 80:
+    { skip_evaluation -= (yyvsp[(1) - (4)].ttype) == boolean_false_node;
+		  (yyval.ttype) = parser_build_binary_op (TRUTH_ANDIF_EXPR, (yyvsp[(1) - (4)].ttype), (yyvsp[(4) - (4)].ttype)); }
+    break;
+
+  case 81:
+/* Line 1792 of yacc.c  */
 #line 540 "objc-parse.y"
-{ yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[-1].ttype));
-		  skip_evaluation += yyvsp[-1].ttype == boolean_true_node; ;
-    break;}
-case 81:
+    { (yyvsp[(1) - (2)].ttype) = truthvalue_conversion (default_conversion ((yyvsp[(1) - (2)].ttype)));
+		  skip_evaluation += (yyvsp[(1) - (2)].ttype) == boolean_true_node; }
+    break;
+
+  case 82:
+/* Line 1792 of yacc.c  */
 #line 543 "objc-parse.y"
-{ skip_evaluation -= yyvsp[-3].ttype == boolean_true_node;
-		  yyval.ttype = parser_build_binary_op (TRUTH_ORIF_EXPR, yyvsp[-3].ttype, yyvsp[0].ttype); ;
-    break;}
-case 82:
+    { skip_evaluation -= (yyvsp[(1) - (4)].ttype) == boolean_true_node;
+		  (yyval.ttype) = parser_build_binary_op (TRUTH_ORIF_EXPR, (yyvsp[(1) - (4)].ttype), (yyvsp[(4) - (4)].ttype)); }
+    break;
+
+  case 83:
+/* Line 1792 of yacc.c  */
 #line 546 "objc-parse.y"
-{ yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[-1].ttype));
-		  skip_evaluation += yyvsp[-1].ttype == boolean_false_node; ;
-    break;}
-case 83:
+    { (yyvsp[(1) - (2)].ttype) = truthvalue_conversion (default_conversion ((yyvsp[(1) - (2)].ttype)));
+		  skip_evaluation += (yyvsp[(1) - (2)].ttype) == boolean_false_node; }
+    break;
+
+  case 84:
+/* Line 1792 of yacc.c  */
 #line 549 "objc-parse.y"
-{ skip_evaluation += ((yyvsp[-4].ttype == boolean_true_node)
-				      - (yyvsp[-4].ttype == boolean_false_node)); ;
-    break;}
-case 84:
+    { skip_evaluation += (((yyvsp[(1) - (5)].ttype) == boolean_true_node)
+				      - ((yyvsp[(1) - (5)].ttype) == boolean_false_node)); }
+    break;
+
+  case 85:
+/* Line 1792 of yacc.c  */
 #line 552 "objc-parse.y"
-{ skip_evaluation -= yyvsp[-6].ttype == boolean_true_node;
-		  yyval.ttype = build_conditional_expr (yyvsp[-6].ttype, yyvsp[-3].ttype, yyvsp[0].ttype); ;
-    break;}
-case 85:
+    { skip_evaluation -= (yyvsp[(1) - (7)].ttype) == boolean_true_node;
+		  (yyval.ttype) = build_conditional_expr ((yyvsp[(1) - (7)].ttype), (yyvsp[(4) - (7)].ttype), (yyvsp[(7) - (7)].ttype)); }
+    break;
+
+  case 86:
+/* Line 1792 of yacc.c  */
 #line 555 "objc-parse.y"
-{ if (pedantic)
+    { if (pedantic)
 		    pedwarn ("ANSI C forbids omitting the middle term of a ?: expression");
 		  /* Make sure first operand is calculated only once.  */
-		  yyvsp[0].ttype = save_expr (yyvsp[-1].ttype);
-		  yyvsp[-1].ttype = truthvalue_conversion (default_conversion (yyvsp[0].ttype));
-		  skip_evaluation += yyvsp[-1].ttype == boolean_true_node; ;
-    break;}
-case 86:
+		  (yyvsp[(2) - (2)].ttype) = save_expr ((yyvsp[(1) - (2)].ttype));
+		  (yyvsp[(1) - (2)].ttype) = truthvalue_conversion (default_conversion ((yyvsp[(2) - (2)].ttype)));
+		  skip_evaluation += (yyvsp[(1) - (2)].ttype) == boolean_true_node; }
+    break;
+
+  case 87:
+/* Line 1792 of yacc.c  */
 #line 562 "objc-parse.y"
-{ skip_evaluation -= yyvsp[-4].ttype == boolean_true_node;
-		  yyval.ttype = build_conditional_expr (yyvsp[-4].ttype, yyvsp[-3].ttype, yyvsp[0].ttype); ;
-    break;}
-case 87:
+    { skip_evaluation -= (yyvsp[(1) - (5)].ttype) == boolean_true_node;
+		  (yyval.ttype) = build_conditional_expr ((yyvsp[(1) - (5)].ttype), (yyvsp[(2) - (5)].ttype), (yyvsp[(5) - (5)].ttype)); }
+    break;
+
+  case 88:
+/* Line 1792 of yacc.c  */
 #line 565 "objc-parse.y"
-{ char class;
-		  yyval.ttype = build_modify_expr (yyvsp[-2].ttype, NOP_EXPR, yyvsp[0].ttype);
-		  class = TREE_CODE_CLASS (TREE_CODE (yyval.ttype));
+    { char class;
+		  (yyval.ttype) = build_modify_expr ((yyvsp[(1) - (3)].ttype), NOP_EXPR, (yyvsp[(3) - (3)].ttype));
+		  class = TREE_CODE_CLASS (TREE_CODE ((yyval.ttype)));
 		  if (class == 'e' || class == '1'
 		      || class == '2' || class == '<')
-		    C_SET_EXP_ORIGINAL_CODE (yyval.ttype, MODIFY_EXPR);
-		;
-    break;}
-case 88:
+		    C_SET_EXP_ORIGINAL_CODE ((yyval.ttype), MODIFY_EXPR);
+		}
+    break;
+
+  case 89:
+/* Line 1792 of yacc.c  */
 #line 573 "objc-parse.y"
-{ char class;
-		  yyval.ttype = build_modify_expr (yyvsp[-2].ttype, yyvsp[-1].code, yyvsp[0].ttype);
+    { char class;
+		  (yyval.ttype) = build_modify_expr ((yyvsp[(1) - (3)].ttype), (yyvsp[(2) - (3)].code), (yyvsp[(3) - (3)].ttype));
 		  /* This inhibits warnings in truthvalue_conversion.  */
-		  class = TREE_CODE_CLASS (TREE_CODE (yyval.ttype));
+		  class = TREE_CODE_CLASS (TREE_CODE ((yyval.ttype)));
 		  if (class == 'e' || class == '1'
 		      || class == '2' || class == '<')
-		    C_SET_EXP_ORIGINAL_CODE (yyval.ttype, ERROR_MARK);
-		;
-    break;}
-case 89:
+		    C_SET_EXP_ORIGINAL_CODE ((yyval.ttype), ERROR_MARK);
+		}
+    break;
+
+  case 90:
+/* Line 1792 of yacc.c  */
 #line 585 "objc-parse.y"
-{
-		  yyval.ttype = lastiddecl;
-		  if (!yyval.ttype || yyval.ttype == error_mark_node)
+    {
+		  (yyval.ttype) = lastiddecl;
+		  if (!(yyval.ttype) || (yyval.ttype) == error_mark_node)
 		    {
 		      if (yychar == YYEMPTY)
 			yychar = YYLEX;
@@ -2609,54 +3554,54 @@ case 89:
 
 			  if (objc_receiver_context
 			      && ! (objc_receiver_context
-				    && strcmp (IDENTIFIER_POINTER (yyvsp[0].ttype), "super")))
+				    && strcmp (IDENTIFIER_POINTER ((yyvsp[(1) - (1)].ttype)), "super")))
 			    /* we have a message to super */
-			    yyval.ttype = get_super_receiver ();
+			    (yyval.ttype) = get_super_receiver ();
 			  else if (objc_method_context
-				   && (decl = is_ivar (objc_ivar_chain, yyvsp[0].ttype)))
+				   && (decl = is_ivar (objc_ivar_chain, (yyvsp[(1) - (1)].ttype))))
 			    {
 			      if (is_private (decl))
-				yyval.ttype = error_mark_node;
+				(yyval.ttype) = error_mark_node;
 			      else
-				yyval.ttype = build_ivar_reference (yyvsp[0].ttype);
+				(yyval.ttype) = build_ivar_reference ((yyvsp[(1) - (1)].ttype));
 			    }
 			  else
 			    {
 			      /* Ordinary implicit function declaration.  */
-			      yyval.ttype = implicitly_declare (yyvsp[0].ttype);
-			      assemble_external (yyval.ttype);
-			      TREE_USED (yyval.ttype) = 1;
+			      (yyval.ttype) = implicitly_declare ((yyvsp[(1) - (1)].ttype));
+			      assemble_external ((yyval.ttype));
+			      TREE_USED ((yyval.ttype)) = 1;
 			    }
 			}
 		      else if (current_function_decl == 0)
 			{
 			  error ("`%s' undeclared here (not in a function)",
-				 IDENTIFIER_POINTER (yyvsp[0].ttype));
-			  yyval.ttype = error_mark_node;
+				 IDENTIFIER_POINTER ((yyvsp[(1) - (1)].ttype)));
+			  (yyval.ttype) = error_mark_node;
 			}
 		      else
 			{
 			  tree decl;
 
 		          if (objc_receiver_context
-			      && ! strcmp (IDENTIFIER_POINTER (yyvsp[0].ttype), "super"))
+			      && ! strcmp (IDENTIFIER_POINTER ((yyvsp[(1) - (1)].ttype)), "super"))
 			    /* we have a message to super */
-			    yyval.ttype = get_super_receiver ();
+			    (yyval.ttype) = get_super_receiver ();
 			  else if (objc_method_context
-				   && (decl = is_ivar (objc_ivar_chain, yyvsp[0].ttype)))
+				   && (decl = is_ivar (objc_ivar_chain, (yyvsp[(1) - (1)].ttype))))
 			    {
 			      if (is_private (decl))
-				yyval.ttype = error_mark_node;
+				(yyval.ttype) = error_mark_node;
 			      else
-				yyval.ttype = build_ivar_reference (yyvsp[0].ttype);
+				(yyval.ttype) = build_ivar_reference ((yyvsp[(1) - (1)].ttype));
 			    }
 			  else
 			    {
-			      if (IDENTIFIER_GLOBAL_VALUE (yyvsp[0].ttype) != error_mark_node
-				  || IDENTIFIER_ERROR_LOCUS (yyvsp[0].ttype) != current_function_decl)
+			      if (IDENTIFIER_GLOBAL_VALUE ((yyvsp[(1) - (1)].ttype)) != error_mark_node
+				  || IDENTIFIER_ERROR_LOCUS ((yyvsp[(1) - (1)].ttype)) != current_function_decl)
 				{
 				  error ("`%s' undeclared (first use in this function)",
-					 IDENTIFIER_POINTER (yyvsp[0].ttype));
+					 IDENTIFIER_POINTER ((yyvsp[(1) - (1)].ttype)));
 
 				  if (! undeclared_variable_notice)
 				    {
@@ -2665,20 +3610,20 @@ case 89:
 				      undeclared_variable_notice = 1;
 				    }
 				}
-			      yyval.ttype = error_mark_node;
+			      (yyval.ttype) = error_mark_node;
 			      /* Prevent repeated error messages.  */
-			      IDENTIFIER_GLOBAL_VALUE (yyvsp[0].ttype) = error_mark_node;
-			      IDENTIFIER_ERROR_LOCUS (yyvsp[0].ttype) = current_function_decl;
+			      IDENTIFIER_GLOBAL_VALUE ((yyvsp[(1) - (1)].ttype)) = error_mark_node;
+			      IDENTIFIER_ERROR_LOCUS ((yyvsp[(1) - (1)].ttype)) = current_function_decl;
 			    }
 			}
 		    }
-		  else if (TREE_TYPE (yyval.ttype) == error_mark_node)
-		    yyval.ttype = error_mark_node;
-		  else if (C_DECL_ANTICIPATED (yyval.ttype))
+		  else if (TREE_TYPE ((yyval.ttype)) == error_mark_node)
+		    (yyval.ttype) = error_mark_node;
+		  else if (C_DECL_ANTICIPATED ((yyval.ttype)))
 		    {
 		      /* The first time we see a build-in function used,
 			 if it has not been declared.  */
-		      C_DECL_ANTICIPATED (yyval.ttype) = 0;
+		      C_DECL_ANTICIPATED ((yyval.ttype)) = 0;
 		      if (yychar == YYEMPTY)
 			yychar = YYLEX;
 		      if (yychar == '(')
@@ -2688,93 +3633,101 @@ case 89:
 			     the actual built in type.
 			     But print a diagnostic for the mismatch.  */
 			  if (objc_method_context
-			      && is_ivar (objc_ivar_chain, yyvsp[0].ttype))
+			      && is_ivar (objc_ivar_chain, (yyvsp[(1) - (1)].ttype)))
 			    error ("Instance variable `%s' implicitly declared as function",
-				   IDENTIFIER_POINTER (DECL_NAME (yyval.ttype)));
+				   IDENTIFIER_POINTER (DECL_NAME ((yyval.ttype))));
 			  else
-			    if (TREE_CODE (yyval.ttype) != FUNCTION_DECL)
+			    if (TREE_CODE ((yyval.ttype)) != FUNCTION_DECL)
 			      error ("`%s' implicitly declared as function",
-				     IDENTIFIER_POINTER (DECL_NAME (yyval.ttype)));
-			  else if ((TYPE_MODE (TREE_TYPE (TREE_TYPE (yyval.ttype)))
+				     IDENTIFIER_POINTER (DECL_NAME ((yyval.ttype))));
+			  else if ((TYPE_MODE (TREE_TYPE (TREE_TYPE ((yyval.ttype))))
 				    != TYPE_MODE (integer_type_node))
-				   && (TREE_TYPE (TREE_TYPE (yyval.ttype))
+				   && (TREE_TYPE (TREE_TYPE ((yyval.ttype)))
 				       != void_type_node))
 			    pedwarn ("type mismatch in implicit declaration for built-in function `%s'",
-				     IDENTIFIER_POINTER (DECL_NAME (yyval.ttype)));
+				     IDENTIFIER_POINTER (DECL_NAME ((yyval.ttype))));
 			  /* If it really returns void, change that to int.  */
-			  if (TREE_TYPE (TREE_TYPE (yyval.ttype)) == void_type_node)
-			    TREE_TYPE (yyval.ttype)
+			  if (TREE_TYPE (TREE_TYPE ((yyval.ttype))) == void_type_node)
+			    TREE_TYPE ((yyval.ttype))
 			      = build_function_type (integer_type_node,
-						     TYPE_ARG_TYPES (TREE_TYPE (yyval.ttype)));
+						     TYPE_ARG_TYPES (TREE_TYPE ((yyval.ttype))));
 			}
 		      else
 			pedwarn ("built-in function `%s' used without declaration",
-				 IDENTIFIER_POINTER (DECL_NAME (yyval.ttype)));
+				 IDENTIFIER_POINTER (DECL_NAME ((yyval.ttype))));
 
 		      /* Do what we would ordinarily do when a fn is used.  */
-		      assemble_external (yyval.ttype);
-		      TREE_USED (yyval.ttype) = 1;
+		      assemble_external ((yyval.ttype));
+		      TREE_USED ((yyval.ttype)) = 1;
 		    }
 		  else
 		    {
-		      assemble_external (yyval.ttype);
-		      TREE_USED (yyval.ttype) = 1;
+		      assemble_external ((yyval.ttype));
+		      TREE_USED ((yyval.ttype)) = 1;
 		      /* we have a definition - still check if iVariable */
 
 		      if (!objc_receiver_context
 			  || (objc_receiver_context
-			      && strcmp (IDENTIFIER_POINTER (yyvsp[0].ttype), "super")))
+			      && strcmp (IDENTIFIER_POINTER ((yyvsp[(1) - (1)].ttype)), "super")))
                         {
 			  tree decl;
 
 			  if (objc_method_context
-			      && (decl = is_ivar (objc_ivar_chain, yyvsp[0].ttype)))
+			      && (decl = is_ivar (objc_ivar_chain, (yyvsp[(1) - (1)].ttype))))
                             {
-                              if (IDENTIFIER_LOCAL_VALUE (yyvsp[0].ttype))
+                              if (IDENTIFIER_LOCAL_VALUE ((yyvsp[(1) - (1)].ttype)))
                                 warning ("local declaration of `%s' hides instance variable",
-	                                 IDENTIFIER_POINTER (yyvsp[0].ttype));
+	                                 IDENTIFIER_POINTER ((yyvsp[(1) - (1)].ttype)));
                               else
  				{
  				  if (is_private (decl))
- 				    yyval.ttype = error_mark_node;
+ 				    (yyval.ttype) = error_mark_node;
  				  else
- 				    yyval.ttype = build_ivar_reference (yyvsp[0].ttype);
+ 				    (yyval.ttype) = build_ivar_reference ((yyvsp[(1) - (1)].ttype));
  				}
                             }
 			}
                       else /* we have a message to super */
-		        yyval.ttype = get_super_receiver ();
+		        (yyval.ttype) = get_super_receiver ();
 		    }
 
-		  if (TREE_CODE (yyval.ttype) == CONST_DECL)
+		  if (TREE_CODE ((yyval.ttype)) == CONST_DECL)
 		    {
-		      yyval.ttype = DECL_INITIAL (yyval.ttype);
+		      (yyval.ttype) = DECL_INITIAL ((yyval.ttype));
 		      /* This is to prevent an enum whose value is 0
 			 from being considered a null pointer constant.  */
-		      yyval.ttype = build1 (NOP_EXPR, TREE_TYPE (yyval.ttype), yyval.ttype);
-		      TREE_CONSTANT (yyval.ttype) = 1;
+		      (yyval.ttype) = build1 (NOP_EXPR, TREE_TYPE ((yyval.ttype)), (yyval.ttype));
+		      TREE_CONSTANT ((yyval.ttype)) = 1;
 		    }
-		;
-    break;}
-case 91:
+		}
+    break;
+
+  case 92:
+/* Line 1792 of yacc.c  */
 #line 745 "objc-parse.y"
-{ yyval.ttype = combine_strings (yyvsp[0].ttype); ;
-    break;}
-case 92:
+    { (yyval.ttype) = combine_strings ((yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 93:
+/* Line 1792 of yacc.c  */
 #line 747 "objc-parse.y"
-{ char class = TREE_CODE_CLASS (TREE_CODE (yyvsp[-1].ttype));
+    { char class = TREE_CODE_CLASS (TREE_CODE ((yyvsp[(2) - (3)].ttype)));
 		  if (class == 'e' || class == '1'
 		      || class == '2' || class == '<')
-		    C_SET_EXP_ORIGINAL_CODE (yyvsp[-1].ttype, ERROR_MARK);
-		  yyval.ttype = yyvsp[-1].ttype; ;
-    break;}
-case 93:
+		    C_SET_EXP_ORIGINAL_CODE ((yyvsp[(2) - (3)].ttype), ERROR_MARK);
+		  (yyval.ttype) = (yyvsp[(2) - (3)].ttype); }
+    break;
+
+  case 94:
+/* Line 1792 of yacc.c  */
 #line 753 "objc-parse.y"
-{ yyval.ttype = error_mark_node; ;
-    break;}
-case 94:
+    { (yyval.ttype) = error_mark_node; }
+    break;
+
+  case 95:
+/* Line 1792 of yacc.c  */
 #line 755 "objc-parse.y"
-{ if (current_function_decl == 0)
+    { if (current_function_decl == 0)
 		    {
 		      error ("braced-group within expression allowed only inside a function");
 		      YYERROR;
@@ -2786,992 +3739,1376 @@ case 94:
 		  keep_next_level ();
 		  push_iterator_stack ();
 		  push_label_level ();
-		  yyval.ttype = expand_start_stmt_expr (); ;
-    break;}
-case 95:
+		  (yyval.ttype) = expand_start_stmt_expr (); }
+    break;
+
+  case 96:
+/* Line 1792 of yacc.c  */
 #line 769 "objc-parse.y"
-{ tree rtl_exp;
+    { tree rtl_exp;
 		  if (pedantic)
 		    pedwarn ("ANSI C forbids braced-groups within expressions");
 		  pop_iterator_stack ();
 		  pop_label_level ();
-		  rtl_exp = expand_end_stmt_expr (yyvsp[-2].ttype);
+		  rtl_exp = expand_end_stmt_expr ((yyvsp[(2) - (4)].ttype));
 		  /* The statements have side effects, so the group does.  */
 		  TREE_SIDE_EFFECTS (rtl_exp) = 1;
 
-		  if (TREE_CODE (yyvsp[-1].ttype) == BLOCK)
+		  if (TREE_CODE ((yyvsp[(3) - (4)].ttype)) == BLOCK)
 		    {
 		      /* Make a BIND_EXPR for the BLOCK already made.  */
-		      yyval.ttype = build (BIND_EXPR, TREE_TYPE (rtl_exp),
-				  NULL_TREE, rtl_exp, yyvsp[-1].ttype);
+		      (yyval.ttype) = build (BIND_EXPR, TREE_TYPE (rtl_exp),
+				  NULL_TREE, rtl_exp, (yyvsp[(3) - (4)].ttype));
 		      /* Remove the block from the tree at this point.
 			 It gets put back at the proper place
 			 when the BIND_EXPR is expanded.  */
-		      delete_block (yyvsp[-1].ttype);
+		      delete_block ((yyvsp[(3) - (4)].ttype));
 		    }
 		  else
-		    yyval.ttype = yyvsp[-1].ttype;
-		;
-    break;}
-case 96:
+		    (yyval.ttype) = (yyvsp[(3) - (4)].ttype);
+		}
+    break;
+
+  case 97:
+/* Line 1792 of yacc.c  */
 #line 792 "objc-parse.y"
-{ yyval.ttype = build_function_call (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 97:
+    { (yyval.ttype) = build_function_call ((yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 98:
+/* Line 1792 of yacc.c  */
 #line 794 "objc-parse.y"
-{ yyval.ttype = build_array_ref (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 98:
+    { (yyval.ttype) = build_array_ref ((yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 99:
+/* Line 1792 of yacc.c  */
 #line 796 "objc-parse.y"
-{
+    {
                   if (doing_objc_thang)
                     {
-		      if (is_public (yyvsp[-2].ttype, yyvsp[0].ttype))
-			yyval.ttype = build_component_ref (yyvsp[-2].ttype, yyvsp[0].ttype);
+		      if (is_public ((yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)))
+			(yyval.ttype) = build_component_ref ((yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype));
 		      else
-			yyval.ttype = error_mark_node;
+			(yyval.ttype) = error_mark_node;
 		    }
                   else
-		    yyval.ttype = build_component_ref (yyvsp[-2].ttype, yyvsp[0].ttype);
-		;
-    break;}
-case 99:
+		    (yyval.ttype) = build_component_ref ((yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype));
+		}
+    break;
+
+  case 100:
+/* Line 1792 of yacc.c  */
 #line 808 "objc-parse.y"
-{
-                  tree expr = build_indirect_ref (yyvsp[-2].ttype, "->");
+    {
+                  tree expr = build_indirect_ref ((yyvsp[(1) - (3)].ttype), "->");
 
                   if (doing_objc_thang)
                     {
-		      if (is_public (expr, yyvsp[0].ttype))
-			yyval.ttype = build_component_ref (expr, yyvsp[0].ttype);
+		      if (is_public (expr, (yyvsp[(3) - (3)].ttype)))
+			(yyval.ttype) = build_component_ref (expr, (yyvsp[(3) - (3)].ttype));
 		      else
-			yyval.ttype = error_mark_node;
+			(yyval.ttype) = error_mark_node;
 		    }
                   else
-                    yyval.ttype = build_component_ref (expr, yyvsp[0].ttype);
-		;
-    break;}
-case 100:
+                    (yyval.ttype) = build_component_ref (expr, (yyvsp[(3) - (3)].ttype));
+		}
+    break;
+
+  case 101:
+/* Line 1792 of yacc.c  */
 #line 822 "objc-parse.y"
-{ yyval.ttype = build_unary_op (POSTINCREMENT_EXPR, yyvsp[-1].ttype, 0); ;
-    break;}
-case 101:
+    { (yyval.ttype) = build_unary_op (POSTINCREMENT_EXPR, (yyvsp[(1) - (2)].ttype), 0); }
+    break;
+
+  case 102:
+/* Line 1792 of yacc.c  */
 #line 824 "objc-parse.y"
-{ yyval.ttype = build_unary_op (POSTDECREMENT_EXPR, yyvsp[-1].ttype, 0); ;
-    break;}
-case 102:
+    { (yyval.ttype) = build_unary_op (POSTDECREMENT_EXPR, (yyvsp[(1) - (2)].ttype), 0); }
+    break;
+
+  case 103:
+/* Line 1792 of yacc.c  */
 #line 826 "objc-parse.y"
-{ yyval.ttype = build_message_expr (yyvsp[0].ttype); ;
-    break;}
-case 103:
+    { (yyval.ttype) = build_message_expr ((yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 104:
+/* Line 1792 of yacc.c  */
 #line 828 "objc-parse.y"
-{ yyval.ttype = build_selector_expr (yyvsp[0].ttype); ;
-    break;}
-case 104:
+    { (yyval.ttype) = build_selector_expr ((yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 105:
+/* Line 1792 of yacc.c  */
 #line 830 "objc-parse.y"
-{ yyval.ttype = build_protocol_expr (yyvsp[0].ttype); ;
-    break;}
-case 105:
+    { (yyval.ttype) = build_protocol_expr ((yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 106:
+/* Line 1792 of yacc.c  */
 #line 832 "objc-parse.y"
-{ yyval.ttype = build_encode_expr (yyvsp[0].ttype); ;
-    break;}
-case 106:
+    { (yyval.ttype) = build_encode_expr ((yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 107:
+/* Line 1792 of yacc.c  */
 #line 834 "objc-parse.y"
-{ yyval.ttype = build_objc_string_object (yyvsp[0].ttype); ;
-    break;}
-case 108:
+    { (yyval.ttype) = build_objc_string_object ((yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 109:
+/* Line 1792 of yacc.c  */
 #line 841 "objc-parse.y"
-{ yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 110:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 111:
+/* Line 1792 of yacc.c  */
 #line 849 "objc-parse.y"
-{ yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 113:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 114:
+/* Line 1792 of yacc.c  */
 #line 857 "objc-parse.y"
-{ c_mark_varargs ();
+    { c_mark_varargs ();
 		  if (pedantic)
-		    pedwarn ("ANSI C does not permit use of `varargs.h'"); ;
-    break;}
-case 114:
+		    pedwarn ("ANSI C does not permit use of `varargs.h'"); }
+    break;
+
+  case 115:
+/* Line 1792 of yacc.c  */
 #line 867 "objc-parse.y"
-{ ;
-    break;}
-case 119:
+    { }
+    break;
+
+  case 120:
+/* Line 1792 of yacc.c  */
 #line 883 "objc-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);
+    { current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 120:
+		  resume_momentary ((yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 121:
+/* Line 1792 of yacc.c  */
 #line 888 "objc-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);	
+    { current_declspecs = TREE_VALUE (declspec_stack);	
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 121:
+		  resume_momentary ((yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 122:
+/* Line 1792 of yacc.c  */
 #line 893 "objc-parse.y"
-{ shadow_tag_warned (yyvsp[-1].ttype, 1);
-		  pedwarn ("empty declaration"); ;
-    break;}
-case 122:
+    { shadow_tag_warned ((yyvsp[(1) - (2)].ttype), 1);
+		  pedwarn ("empty declaration"); }
+    break;
+
+  case 123:
+/* Line 1792 of yacc.c  */
 #line 896 "objc-parse.y"
-{ pedwarn ("empty declaration"); ;
-    break;}
-case 123:
+    { pedwarn ("empty declaration"); }
+    break;
+
+  case 124:
+/* Line 1792 of yacc.c  */
 #line 905 "objc-parse.y"
-{ ;
-    break;}
-case 128:
+    { }
+    break;
+
+  case 129:
+/* Line 1792 of yacc.c  */
 #line 920 "objc-parse.y"
-{ yyval.itype = suspend_momentary ();
+    { (yyval.itype) = suspend_momentary ();
 		  pending_xref_error ();
 		  declspec_stack = tree_cons (prefix_attributes,
 					      current_declspecs,
 					      declspec_stack);
-		  split_specs_attrs (yyvsp[0].ttype,
-				     &current_declspecs, &prefix_attributes); ;
-    break;}
-case 129:
+		  split_specs_attrs ((yyvsp[(0) - (0)].ttype),
+				     &current_declspecs, &prefix_attributes); }
+    break;
+
+  case 130:
+/* Line 1792 of yacc.c  */
 #line 931 "objc-parse.y"
-{ prefix_attributes = chainon (prefix_attributes, yyvsp[0].ttype); ;
-    break;}
-case 130:
+    { prefix_attributes = chainon (prefix_attributes, (yyvsp[(0) - (0)].ttype)); }
+    break;
+
+  case 131:
+/* Line 1792 of yacc.c  */
 #line 936 "objc-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);
+    { current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 131:
+		  resume_momentary ((yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 132:
+/* Line 1792 of yacc.c  */
 #line 941 "objc-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);
+    { current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 132:
+		  resume_momentary ((yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 133:
+/* Line 1792 of yacc.c  */
 #line 946 "objc-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);
+    { current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-1].itype); ;
-    break;}
-case 133:
+		  resume_momentary ((yyvsp[(2) - (3)].itype)); }
+    break;
+
+  case 134:
+/* Line 1792 of yacc.c  */
 #line 951 "objc-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);
+    { current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-1].itype); ;
-    break;}
-case 134:
+		  resume_momentary ((yyvsp[(2) - (3)].itype)); }
+    break;
+
+  case 135:
+/* Line 1792 of yacc.c  */
 #line 956 "objc-parse.y"
-{ shadow_tag (yyvsp[-1].ttype); ;
-    break;}
-case 135:
+    { shadow_tag ((yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 136:
+/* Line 1792 of yacc.c  */
 #line 958 "objc-parse.y"
-{ pedwarn ("empty declaration"); ;
-    break;}
-case 136:
+    { pedwarn ("empty declaration"); }
+    break;
+
+  case 137:
+/* Line 1792 of yacc.c  */
 #line 960 "objc-parse.y"
-{ pedantic = yyvsp[-1].itype; ;
-    break;}
-case 137:
+    { pedantic = (yyvsp[(1) - (2)].itype); }
+    break;
+
+  case 138:
+/* Line 1792 of yacc.c  */
 #line 970 "objc-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 138:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 139:
+/* Line 1792 of yacc.c  */
 #line 972 "objc-parse.y"
-{ yyval.ttype = chainon (yyvsp[0].ttype, tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[-2].ttype)); ;
-    break;}
-case 139:
+    { (yyval.ttype) = chainon ((yyvsp[(3) - (3)].ttype), tree_cons (NULL_TREE, (yyvsp[(2) - (3)].ttype), (yyvsp[(1) - (3)].ttype))); }
+    break;
+
+  case 140:
+/* Line 1792 of yacc.c  */
 #line 976 "objc-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 140:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 141:
+/* Line 1792 of yacc.c  */
 #line 978 "objc-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 141:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 142:
+/* Line 1792 of yacc.c  */
 #line 980 "objc-parse.y"
-{ if (extra_warnings)
+    { if (extra_warnings)
 		    warning ("`%s' is not at beginning of declaration",
-			     IDENTIFIER_POINTER (yyvsp[0].ttype));
-		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 142:
+			     IDENTIFIER_POINTER ((yyvsp[(2) - (2)].ttype)));
+		  (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 143:
+/* Line 1792 of yacc.c  */
 #line 985 "objc-parse.y"
-{ yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype); ;
-    break;}
-case 143:
+    { (yyval.ttype) = tree_cons ((yyvsp[(2) - (2)].ttype), NULL_TREE, (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 144:
+/* Line 1792 of yacc.c  */
 #line 990 "objc-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 144:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 145:
+/* Line 1792 of yacc.c  */
 #line 992 "objc-parse.y"
-{ yyval.ttype = chainon (yyvsp[0].ttype, tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[-2].ttype)); ;
-    break;}
-case 145:
+    { (yyval.ttype) = chainon ((yyvsp[(3) - (3)].ttype), tree_cons (NULL_TREE, (yyvsp[(2) - (3)].ttype), (yyvsp[(1) - (3)].ttype))); }
+    break;
+
+  case 146:
+/* Line 1792 of yacc.c  */
 #line 997 "objc-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 146:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 147:
+/* Line 1792 of yacc.c  */
 #line 999 "objc-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 147:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 148:
+/* Line 1792 of yacc.c  */
 #line 1001 "objc-parse.y"
-{ if (extra_warnings)
+    { if (extra_warnings)
 		    warning ("`%s' is not at beginning of declaration",
-			     IDENTIFIER_POINTER (yyvsp[0].ttype));
-		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 148:
+			     IDENTIFIER_POINTER ((yyvsp[(2) - (2)].ttype)));
+		  (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 149:
+/* Line 1792 of yacc.c  */
 #line 1014 "objc-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 149:
+    { (yyval.ttype) = (yyvsp[(1) - (1)].ttype); }
+    break;
+
+  case 150:
+/* Line 1792 of yacc.c  */
 #line 1016 "objc-parse.y"
-{ yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, NULL_TREE); ;
-    break;}
-case 150:
+    { (yyval.ttype) = tree_cons ((yyvsp[(1) - (1)].ttype), NULL_TREE, NULL_TREE); }
+    break;
+
+  case 151:
+/* Line 1792 of yacc.c  */
 #line 1018 "objc-parse.y"
-{ yyval.ttype = chainon (yyvsp[0].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 151:
+    { (yyval.ttype) = chainon ((yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 152:
+/* Line 1792 of yacc.c  */
 #line 1020 "objc-parse.y"
-{ yyval.ttype = tree_cons (yyvsp[0].ttype, NULL_TREE, yyvsp[-1].ttype); ;
-    break;}
-case 152:
+    { (yyval.ttype) = tree_cons ((yyvsp[(2) - (2)].ttype), NULL_TREE, (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 153:
+/* Line 1792 of yacc.c  */
 #line 1025 "objc-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE);
-		  TREE_STATIC (yyval.ttype) = 1; ;
-    break;}
-case 153:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(1) - (1)].ttype), NULL_TREE);
+		  TREE_STATIC ((yyval.ttype)) = 1; }
+    break;
+
+  case 154:
+/* Line 1792 of yacc.c  */
 #line 1028 "objc-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 154:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(1) - (1)].ttype), NULL_TREE); }
+    break;
+
+  case 155:
+/* Line 1792 of yacc.c  */
 #line 1030 "objc-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
-		  TREE_STATIC (yyval.ttype) = 1; ;
-    break;}
-case 155:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ttype));
+		  TREE_STATIC ((yyval.ttype)) = 1; }
+    break;
+
+  case 156:
+/* Line 1792 of yacc.c  */
 #line 1033 "objc-parse.y"
-{ if (extra_warnings && TREE_STATIC (yyvsp[-1].ttype))
+    { if (extra_warnings && TREE_STATIC ((yyvsp[(1) - (2)].ttype)))
 		    warning ("`%s' is not at beginning of declaration",
-			     IDENTIFIER_POINTER (yyvsp[0].ttype));
-		  yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype);
-		  TREE_STATIC (yyval.ttype) = TREE_STATIC (yyvsp[-1].ttype); ;
-    break;}
-case 156:
+			     IDENTIFIER_POINTER ((yyvsp[(2) - (2)].ttype)));
+		  (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ttype));
+		  TREE_STATIC ((yyval.ttype)) = TREE_STATIC ((yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 157:
+/* Line 1792 of yacc.c  */
 #line 1047 "objc-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 157:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 158:
+/* Line 1792 of yacc.c  */
 #line 1049 "objc-parse.y"
-{ yyval.ttype = chainon (yyvsp[0].ttype, tree_cons (NULL_TREE, yyvsp[-1].ttype, yyvsp[-2].ttype)); ;
-    break;}
-case 158:
+    { (yyval.ttype) = chainon ((yyvsp[(3) - (3)].ttype), tree_cons (NULL_TREE, (yyvsp[(2) - (3)].ttype), (yyvsp[(1) - (3)].ttype))); }
+    break;
+
+  case 159:
+/* Line 1792 of yacc.c  */
 #line 1053 "objc-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 159:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 160:
+/* Line 1792 of yacc.c  */
 #line 1055 "objc-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 162:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 163:
+/* Line 1792 of yacc.c  */
 #line 1065 "objc-parse.y"
-{ /* For a typedef name, record the meaning, not the name.
+    { /* For a typedef name, record the meaning, not the name.
 		     In case of `foo foo, bar;'.  */
-		  yyval.ttype = lookup_name (yyvsp[0].ttype); ;
-    break;}
-case 163:
+		  (yyval.ttype) = lookup_name ((yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 164:
+/* Line 1792 of yacc.c  */
 #line 1069 "objc-parse.y"
-{ yyval.ttype = get_static_reference (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 164:
+    { (yyval.ttype) = get_static_reference ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 165:
+/* Line 1792 of yacc.c  */
 #line 1071 "objc-parse.y"
-{ yyval.ttype = get_object_reference (yyvsp[0].ttype); ;
-    break;}
-case 165:
+    { (yyval.ttype) = get_object_reference ((yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 166:
+/* Line 1792 of yacc.c  */
 #line 1076 "objc-parse.y"
-{ yyval.ttype = get_object_reference (yyvsp[0].ttype); ;
-    break;}
-case 166:
+    { (yyval.ttype) = get_object_reference ((yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 167:
+/* Line 1792 of yacc.c  */
 #line 1078 "objc-parse.y"
-{ yyval.ttype = TREE_TYPE (yyvsp[-1].ttype); ;
-    break;}
-case 167:
+    { (yyval.ttype) = TREE_TYPE ((yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 168:
+/* Line 1792 of yacc.c  */
 #line 1080 "objc-parse.y"
-{ yyval.ttype = groktypename (yyvsp[-1].ttype); ;
-    break;}
-case 175:
+    { (yyval.ttype) = groktypename ((yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 176:
+/* Line 1792 of yacc.c  */
 #line 1102 "objc-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 176:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 177:
+/* Line 1792 of yacc.c  */
 #line 1104 "objc-parse.y"
-{ if (TREE_CHAIN (yyvsp[-1].ttype)) yyvsp[-1].ttype = combine_strings (yyvsp[-1].ttype);
-		  yyval.ttype = yyvsp[-1].ttype;
-		;
-    break;}
-case 177:
+    { if (TREE_CHAIN ((yyvsp[(3) - (4)].ttype))) (yyvsp[(3) - (4)].ttype) = combine_strings ((yyvsp[(3) - (4)].ttype));
+		  (yyval.ttype) = (yyvsp[(3) - (4)].ttype);
+		}
+    break;
+
+  case 178:
+/* Line 1792 of yacc.c  */
 #line 1111 "objc-parse.y"
-{ yyval.ttype = start_decl (yyvsp[-3].ttype, current_declspecs, 1,
-					  yyvsp[-1].ttype, prefix_attributes);
-		  start_init (yyval.ttype, yyvsp[-2].ttype, global_bindings_p ()); ;
-    break;}
-case 178:
+    { (yyval.ttype) = start_decl ((yyvsp[(1) - (4)].ttype), current_declspecs, 1,
+					  (yyvsp[(3) - (4)].ttype), prefix_attributes);
+		  start_init ((yyval.ttype), (yyvsp[(2) - (4)].ttype), global_bindings_p ()); }
+    break;
+
+  case 179:
+/* Line 1792 of yacc.c  */
 #line 1116 "objc-parse.y"
-{ finish_init ();
-		  finish_decl (yyvsp[-1].ttype, yyvsp[0].ttype, yyvsp[-4].ttype); ;
-    break;}
-case 179:
+    { finish_init ();
+		  finish_decl ((yyvsp[(5) - (6)].ttype), (yyvsp[(6) - (6)].ttype), (yyvsp[(2) - (6)].ttype)); }
+    break;
+
+  case 180:
+/* Line 1792 of yacc.c  */
 #line 1119 "objc-parse.y"
-{ tree d = start_decl (yyvsp[-2].ttype, current_declspecs, 0,
-				       yyvsp[0].ttype, prefix_attributes);
-		  finish_decl (d, NULL_TREE, yyvsp[-1].ttype); 
-                ;
-    break;}
-case 180:
+    { tree d = start_decl ((yyvsp[(1) - (3)].ttype), current_declspecs, 0,
+				       (yyvsp[(3) - (3)].ttype), prefix_attributes);
+		  finish_decl (d, NULL_TREE, (yyvsp[(2) - (3)].ttype)); 
+                }
+    break;
+
+  case 181:
+/* Line 1792 of yacc.c  */
 #line 1127 "objc-parse.y"
-{ yyval.ttype = start_decl (yyvsp[-3].ttype, current_declspecs, 1,
-					  yyvsp[-1].ttype, prefix_attributes);
-		  start_init (yyval.ttype, yyvsp[-2].ttype, global_bindings_p ()); ;
-    break;}
-case 181:
+    { (yyval.ttype) = start_decl ((yyvsp[(1) - (4)].ttype), current_declspecs, 1,
+					  (yyvsp[(3) - (4)].ttype), prefix_attributes);
+		  start_init ((yyval.ttype), (yyvsp[(2) - (4)].ttype), global_bindings_p ()); }
+    break;
+
+  case 182:
+/* Line 1792 of yacc.c  */
 #line 1132 "objc-parse.y"
-{ finish_init ();
-		  decl_attributes (yyvsp[-1].ttype, yyvsp[-3].ttype, prefix_attributes);
-		  finish_decl (yyvsp[-1].ttype, yyvsp[0].ttype, yyvsp[-4].ttype); ;
-    break;}
-case 182:
+    { finish_init ();
+		  decl_attributes ((yyvsp[(5) - (6)].ttype), (yyvsp[(3) - (6)].ttype), prefix_attributes);
+		  finish_decl ((yyvsp[(5) - (6)].ttype), (yyvsp[(6) - (6)].ttype), (yyvsp[(2) - (6)].ttype)); }
+    break;
+
+  case 183:
+/* Line 1792 of yacc.c  */
 #line 1136 "objc-parse.y"
-{ tree d = start_decl (yyvsp[-2].ttype, current_declspecs, 0,
-				       yyvsp[0].ttype, prefix_attributes);
-		  finish_decl (d, NULL_TREE, yyvsp[-1].ttype); ;
-    break;}
-case 183:
+    { tree d = start_decl ((yyvsp[(1) - (3)].ttype), current_declspecs, 0,
+				       (yyvsp[(3) - (3)].ttype), prefix_attributes);
+		  finish_decl (d, NULL_TREE, (yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 184:
+/* Line 1792 of yacc.c  */
 #line 1144 "objc-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 184:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 185:
+/* Line 1792 of yacc.c  */
 #line 1146 "objc-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 185:
+    { (yyval.ttype) = (yyvsp[(1) - (1)].ttype); }
+    break;
+
+  case 186:
+/* Line 1792 of yacc.c  */
 #line 1151 "objc-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 186:
+    { (yyval.ttype) = (yyvsp[(1) - (1)].ttype); }
+    break;
+
+  case 187:
+/* Line 1792 of yacc.c  */
 #line 1153 "objc-parse.y"
-{ yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 187:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 188:
+/* Line 1792 of yacc.c  */
 #line 1158 "objc-parse.y"
-{ yyval.ttype = yyvsp[-2].ttype; ;
-    break;}
-case 188:
+    { (yyval.ttype) = (yyvsp[(4) - (6)].ttype); }
+    break;
+
+  case 189:
+/* Line 1792 of yacc.c  */
 #line 1163 "objc-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 189:
+    { (yyval.ttype) = (yyvsp[(1) - (1)].ttype); }
+    break;
+
+  case 190:
+/* Line 1792 of yacc.c  */
 #line 1165 "objc-parse.y"
-{ yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 190:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 191:
+/* Line 1792 of yacc.c  */
 #line 1170 "objc-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 191:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 192:
+/* Line 1792 of yacc.c  */
 #line 1172 "objc-parse.y"
-{ yyval.ttype = build_tree_list (yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 192:
+    { (yyval.ttype) = build_tree_list ((yyvsp[(1) - (1)].ttype), NULL_TREE); }
+    break;
+
+  case 193:
+/* Line 1792 of yacc.c  */
 #line 1174 "objc-parse.y"
-{ yyval.ttype = build_tree_list (yyvsp[-3].ttype, build_tree_list (NULL_TREE, yyvsp[-1].ttype)); ;
-    break;}
-case 193:
+    { (yyval.ttype) = build_tree_list ((yyvsp[(1) - (4)].ttype), build_tree_list (NULL_TREE, (yyvsp[(3) - (4)].ttype))); }
+    break;
+
+  case 194:
+/* Line 1792 of yacc.c  */
 #line 1176 "objc-parse.y"
-{ yyval.ttype = build_tree_list (yyvsp[-5].ttype, tree_cons (NULL_TREE, yyvsp[-3].ttype, yyvsp[-1].ttype)); ;
-    break;}
-case 194:
+    { (yyval.ttype) = build_tree_list ((yyvsp[(1) - (6)].ttype), tree_cons (NULL_TREE, (yyvsp[(3) - (6)].ttype), (yyvsp[(5) - (6)].ttype))); }
+    break;
+
+  case 195:
+/* Line 1792 of yacc.c  */
 #line 1178 "objc-parse.y"
-{ yyval.ttype = build_tree_list (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 200:
+    { (yyval.ttype) = build_tree_list ((yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 201:
+/* Line 1792 of yacc.c  */
 #line 1196 "objc-parse.y"
-{ really_start_incremental_init (NULL_TREE);
+    { really_start_incremental_init (NULL_TREE);
 		  /* Note that the call to clear_momentary
 		     is in process_init_element.  */
-		  push_momentary (); ;
-    break;}
-case 201:
+		  push_momentary (); }
+    break;
+
+  case 202:
+/* Line 1792 of yacc.c  */
 #line 1201 "objc-parse.y"
-{ yyval.ttype = pop_init_level (0);
-		  if (yyval.ttype == error_mark_node
+    { (yyval.ttype) = pop_init_level (0);
+		  if ((yyval.ttype) == error_mark_node
 		      && ! (yychar == STRING || yychar == CONSTANT))
 		    pop_momentary ();
 		  else
-		    pop_momentary_nofree (); ;
-    break;}
-case 202:
+		    pop_momentary_nofree (); }
+    break;
+
+  case 203:
+/* Line 1792 of yacc.c  */
 #line 1209 "objc-parse.y"
-{ yyval.ttype = error_mark_node; ;
-    break;}
-case 203:
+    { (yyval.ttype) = error_mark_node; }
+    break;
+
+  case 204:
+/* Line 1792 of yacc.c  */
 #line 1215 "objc-parse.y"
-{ if (pedantic)
-		    pedwarn ("ANSI C forbids empty initializer braces"); ;
-    break;}
-case 209:
+    { if (pedantic)
+		    pedwarn ("ANSI C forbids empty initializer braces"); }
+    break;
+
+  case 210:
+/* Line 1792 of yacc.c  */
 #line 1231 "objc-parse.y"
-{ set_init_label (yyvsp[-1].ttype); ;
-    break;}
-case 212:
+    { set_init_label ((yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 213:
+/* Line 1792 of yacc.c  */
 #line 1238 "objc-parse.y"
-{ push_init_level (0); ;
-    break;}
-case 213:
+    { push_init_level (0); }
+    break;
+
+  case 214:
+/* Line 1792 of yacc.c  */
 #line 1240 "objc-parse.y"
-{ process_init_element (pop_init_level (0)); ;
-    break;}
-case 214:
+    { process_init_element (pop_init_level (0)); }
+    break;
+
+  case 215:
+/* Line 1792 of yacc.c  */
 #line 1242 "objc-parse.y"
-{ process_init_element (yyvsp[0].ttype); ;
-    break;}
-case 218:
+    { process_init_element ((yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 219:
+/* Line 1792 of yacc.c  */
 #line 1253 "objc-parse.y"
-{ set_init_label (yyvsp[0].ttype); ;
-    break;}
-case 219:
+    { set_init_label ((yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 220:
+/* Line 1792 of yacc.c  */
 #line 1261 "objc-parse.y"
-{ push_c_function_context ();
-		  if (! start_function (current_declspecs, yyvsp[0].ttype,
+    { push_c_function_context ();
+		  if (! start_function (current_declspecs, (yyvsp[(1) - (1)].ttype),
 					prefix_attributes, NULL_TREE, 1))
 		    {
 		      pop_c_function_context ();
 		      YYERROR1;
 		    }
-		  reinit_parse_for_function (); ;
-    break;}
-case 220:
+		  reinit_parse_for_function (); }
+    break;
+
+  case 221:
+/* Line 1792 of yacc.c  */
 #line 1270 "objc-parse.y"
-{ store_parm_decls (); ;
-    break;}
-case 221:
+    { store_parm_decls (); }
+    break;
+
+  case 222:
+/* Line 1792 of yacc.c  */
 #line 1278 "objc-parse.y"
-{ finish_function (1);
-		  pop_c_function_context (); ;
-    break;}
-case 222:
+    { finish_function (1);
+		  pop_c_function_context (); }
+    break;
+
+  case 223:
+/* Line 1792 of yacc.c  */
 #line 1284 "objc-parse.y"
-{ push_c_function_context ();
-		  if (! start_function (current_declspecs, yyvsp[0].ttype,
+    { push_c_function_context ();
+		  if (! start_function (current_declspecs, (yyvsp[(1) - (1)].ttype),
 					prefix_attributes, NULL_TREE, 1))
 		    {
 		      pop_c_function_context ();
 		      YYERROR1;
 		    }
-		  reinit_parse_for_function (); ;
-    break;}
-case 223:
+		  reinit_parse_for_function (); }
+    break;
+
+  case 224:
+/* Line 1792 of yacc.c  */
 #line 1293 "objc-parse.y"
-{ store_parm_decls (); ;
-    break;}
-case 224:
+    { store_parm_decls (); }
+    break;
+
+  case 225:
+/* Line 1792 of yacc.c  */
 #line 1301 "objc-parse.y"
-{ finish_function (1);
-		  pop_c_function_context (); ;
-    break;}
-case 227:
+    { finish_function (1);
+		  pop_c_function_context (); }
+    break;
+
+  case 228:
+/* Line 1792 of yacc.c  */
 #line 1317 "objc-parse.y"
-{ yyval.ttype = yyvsp[-1].ttype; ;
-    break;}
-case 228:
+    { (yyval.ttype) = (yyvsp[(2) - (3)].ttype); }
+    break;
+
+  case 229:
+/* Line 1792 of yacc.c  */
 #line 1319 "objc-parse.y"
-{ yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 229:
+    { (yyval.ttype) = build_nt (CALL_EXPR, (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 230:
+/* Line 1792 of yacc.c  */
 #line 1324 "objc-parse.y"
-{ yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 230:
+    { (yyval.ttype) = build_nt (ARRAY_REF, (yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 231:
+/* Line 1792 of yacc.c  */
 #line 1326 "objc-parse.y"
-{ yyval.ttype = build_nt (ARRAY_REF, yyvsp[-2].ttype, NULL_TREE); ;
-    break;}
-case 231:
+    { (yyval.ttype) = build_nt (ARRAY_REF, (yyvsp[(1) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 232:
+/* Line 1792 of yacc.c  */
 #line 1328 "objc-parse.y"
-{ yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 232:
+    { (yyval.ttype) = make_pointer_declarator ((yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 233:
+/* Line 1792 of yacc.c  */
 #line 1335 "objc-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 235:
+    { (yyval.ttype) = (yyvsp[(3) - (3)].ttype); }
+    break;
+
+  case 236:
+/* Line 1792 of yacc.c  */
 #line 1347 "objc-parse.y"
-{ yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 236:
+    { (yyval.ttype) = build_nt (CALL_EXPR, (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 237:
+/* Line 1792 of yacc.c  */
 #line 1352 "objc-parse.y"
-{ yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 237:
+    { (yyval.ttype) = build_nt (ARRAY_REF, (yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 238:
+/* Line 1792 of yacc.c  */
 #line 1354 "objc-parse.y"
-{ yyval.ttype = build_nt (ARRAY_REF, yyvsp[-2].ttype, NULL_TREE); ;
-    break;}
-case 238:
+    { (yyval.ttype) = build_nt (ARRAY_REF, (yyvsp[(1) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 239:
+/* Line 1792 of yacc.c  */
 #line 1356 "objc-parse.y"
-{ yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 239:
+    { (yyval.ttype) = make_pointer_declarator ((yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 240:
+/* Line 1792 of yacc.c  */
 #line 1363 "objc-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 241:
+    { (yyval.ttype) = (yyvsp[(3) - (3)].ttype); }
+    break;
+
+  case 242:
+/* Line 1792 of yacc.c  */
 #line 1372 "objc-parse.y"
-{ yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 242:
+    { (yyval.ttype) = build_nt (CALL_EXPR, (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 243:
+/* Line 1792 of yacc.c  */
 #line 1377 "objc-parse.y"
-{ yyval.ttype = yyvsp[-1].ttype; ;
-    break;}
-case 243:
+    { (yyval.ttype) = (yyvsp[(2) - (3)].ttype); }
+    break;
+
+  case 244:
+/* Line 1792 of yacc.c  */
 #line 1379 "objc-parse.y"
-{ yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 244:
+    { (yyval.ttype) = make_pointer_declarator ((yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 245:
+/* Line 1792 of yacc.c  */
 #line 1381 "objc-parse.y"
-{ yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 245:
+    { (yyval.ttype) = build_nt (ARRAY_REF, (yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 246:
+/* Line 1792 of yacc.c  */
 #line 1383 "objc-parse.y"
-{ yyval.ttype = build_nt (ARRAY_REF, yyvsp[-2].ttype, NULL_TREE); ;
-    break;}
-case 246:
+    { (yyval.ttype) = build_nt (ARRAY_REF, (yyvsp[(1) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 247:
+/* Line 1792 of yacc.c  */
 #line 1390 "objc-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 248:
+    { (yyval.ttype) = (yyvsp[(3) - (3)].ttype); }
+    break;
+
+  case 249:
+/* Line 1792 of yacc.c  */
 #line 1396 "objc-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 249:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 250:
+/* Line 1792 of yacc.c  */
 #line 1398 "objc-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 250:
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype); }
+    break;
+
+  case 251:
+/* Line 1792 of yacc.c  */
 #line 1403 "objc-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 251:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 252:
+/* Line 1792 of yacc.c  */
 #line 1405 "objc-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 252:
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype); }
+    break;
+
+  case 253:
+/* Line 1792 of yacc.c  */
 #line 1410 "objc-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 253:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 254:
+/* Line 1792 of yacc.c  */
 #line 1412 "objc-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 254:
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype); }
+    break;
+
+  case 255:
+/* Line 1792 of yacc.c  */
 #line 1417 "objc-parse.y"
-{ yyval.ttype = start_struct (RECORD_TYPE, yyvsp[-1].ttype);
+    { (yyval.ttype) = start_struct (RECORD_TYPE, (yyvsp[(2) - (3)].ttype));
 		  /* Start scope of tag before parsing components.  */
-		;
-    break;}
-case 255:
+		}
+    break;
+
+  case 256:
+/* Line 1792 of yacc.c  */
 #line 1421 "objc-parse.y"
-{ yyval.ttype = finish_struct (yyvsp[-3].ttype, yyvsp[-2].ttype, chainon (yyvsp[-6].ttype, yyvsp[0].ttype)); ;
-    break;}
-case 256:
+    { (yyval.ttype) = finish_struct ((yyvsp[(4) - (7)].ttype), (yyvsp[(5) - (7)].ttype), chainon ((yyvsp[(1) - (7)].ttype), (yyvsp[(7) - (7)].ttype))); }
+    break;
+
+  case 257:
+/* Line 1792 of yacc.c  */
 #line 1423 "objc-parse.y"
-{ yyval.ttype = finish_struct (start_struct (RECORD_TYPE, NULL_TREE),
-				      yyvsp[-2].ttype, chainon (yyvsp[-4].ttype, yyvsp[0].ttype));
-		;
-    break;}
-case 257:
+    { (yyval.ttype) = finish_struct (start_struct (RECORD_TYPE, NULL_TREE),
+				      (yyvsp[(3) - (5)].ttype), chainon ((yyvsp[(1) - (5)].ttype), (yyvsp[(5) - (5)].ttype)));
+		}
+    break;
+
+  case 258:
+/* Line 1792 of yacc.c  */
 #line 1427 "objc-parse.y"
-{ yyval.ttype = xref_tag (RECORD_TYPE, yyvsp[0].ttype); ;
-    break;}
-case 258:
+    { (yyval.ttype) = xref_tag (RECORD_TYPE, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 259:
+/* Line 1792 of yacc.c  */
 #line 1429 "objc-parse.y"
-{ yyval.ttype = start_struct (UNION_TYPE, yyvsp[-1].ttype); ;
-    break;}
-case 259:
+    { (yyval.ttype) = start_struct (UNION_TYPE, (yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 260:
+/* Line 1792 of yacc.c  */
 #line 1431 "objc-parse.y"
-{ yyval.ttype = finish_struct (yyvsp[-3].ttype, yyvsp[-2].ttype, chainon (yyvsp[-6].ttype, yyvsp[0].ttype)); ;
-    break;}
-case 260:
+    { (yyval.ttype) = finish_struct ((yyvsp[(4) - (7)].ttype), (yyvsp[(5) - (7)].ttype), chainon ((yyvsp[(1) - (7)].ttype), (yyvsp[(7) - (7)].ttype))); }
+    break;
+
+  case 261:
+/* Line 1792 of yacc.c  */
 #line 1433 "objc-parse.y"
-{ yyval.ttype = finish_struct (start_struct (UNION_TYPE, NULL_TREE),
-				      yyvsp[-2].ttype, chainon (yyvsp[-4].ttype, yyvsp[0].ttype));
-		;
-    break;}
-case 261:
+    { (yyval.ttype) = finish_struct (start_struct (UNION_TYPE, NULL_TREE),
+				      (yyvsp[(3) - (5)].ttype), chainon ((yyvsp[(1) - (5)].ttype), (yyvsp[(5) - (5)].ttype)));
+		}
+    break;
+
+  case 262:
+/* Line 1792 of yacc.c  */
 #line 1437 "objc-parse.y"
-{ yyval.ttype = xref_tag (UNION_TYPE, yyvsp[0].ttype); ;
-    break;}
-case 262:
+    { (yyval.ttype) = xref_tag (UNION_TYPE, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 263:
+/* Line 1792 of yacc.c  */
 #line 1439 "objc-parse.y"
-{ yyvsp[0].itype = suspend_momentary ();
-		  yyval.ttype = start_enum (yyvsp[-1].ttype); ;
-    break;}
-case 263:
+    { (yyvsp[(3) - (3)].itype) = suspend_momentary ();
+		  (yyval.ttype) = start_enum ((yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 264:
+/* Line 1792 of yacc.c  */
 #line 1442 "objc-parse.y"
-{ yyval.ttype= finish_enum (yyvsp[-4].ttype, nreverse (yyvsp[-3].ttype), chainon (yyvsp[-7].ttype, yyvsp[0].ttype));
-		  resume_momentary (yyvsp[-5].itype); ;
-    break;}
-case 264:
+    { (yyval.ttype)= finish_enum ((yyvsp[(4) - (8)].ttype), nreverse ((yyvsp[(5) - (8)].ttype)), chainon ((yyvsp[(1) - (8)].ttype), (yyvsp[(8) - (8)].ttype)));
+		  resume_momentary ((yyvsp[(3) - (8)].itype)); }
+    break;
+
+  case 265:
+/* Line 1792 of yacc.c  */
 #line 1445 "objc-parse.y"
-{ yyvsp[0].itype = suspend_momentary ();
-		  yyval.ttype = start_enum (NULL_TREE); ;
-    break;}
-case 265:
+    { (yyvsp[(2) - (2)].itype) = suspend_momentary ();
+		  (yyval.ttype) = start_enum (NULL_TREE); }
+    break;
+
+  case 266:
+/* Line 1792 of yacc.c  */
 #line 1448 "objc-parse.y"
-{ yyval.ttype= finish_enum (yyvsp[-4].ttype, nreverse (yyvsp[-3].ttype), chainon (yyvsp[-6].ttype, yyvsp[0].ttype));
-		  resume_momentary (yyvsp[-5].itype); ;
-    break;}
-case 266:
+    { (yyval.ttype)= finish_enum ((yyvsp[(3) - (7)].ttype), nreverse ((yyvsp[(4) - (7)].ttype)), chainon ((yyvsp[(1) - (7)].ttype), (yyvsp[(7) - (7)].ttype)));
+		  resume_momentary ((yyvsp[(2) - (7)].itype)); }
+    break;
+
+  case 267:
+/* Line 1792 of yacc.c  */
 #line 1451 "objc-parse.y"
-{ yyval.ttype = xref_tag (ENUMERAL_TYPE, yyvsp[0].ttype); ;
-    break;}
-case 270:
+    { (yyval.ttype) = xref_tag (ENUMERAL_TYPE, (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 271:
+/* Line 1792 of yacc.c  */
 #line 1462 "objc-parse.y"
-{ if (pedantic && ! flag_isoc9x)
-		    pedwarn ("comma at end of enumerator list"); ;
-    break;}
-case 271:
+    { if (pedantic && ! flag_isoc9x)
+		    pedwarn ("comma at end of enumerator list"); }
+    break;
+
+  case 272:
+/* Line 1792 of yacc.c  */
 #line 1468 "objc-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 272:
+    { (yyval.ttype) = (yyvsp[(1) - (1)].ttype); }
+    break;
+
+  case 273:
+/* Line 1792 of yacc.c  */
 #line 1470 "objc-parse.y"
-{ yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype);
-		  pedwarn ("no semicolon at end of struct or union"); ;
-    break;}
-case 273:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype));
+		  pedwarn ("no semicolon at end of struct or union"); }
+    break;
+
+  case 274:
+/* Line 1792 of yacc.c  */
 #line 1475 "objc-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 274:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 275:
+/* Line 1792 of yacc.c  */
 #line 1477 "objc-parse.y"
-{ yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 275:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (3)].ttype), (yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 276:
+/* Line 1792 of yacc.c  */
 #line 1479 "objc-parse.y"
-{ if (pedantic)
-		    pedwarn ("extra semicolon in struct or union specified"); ;
-    break;}
-case 276:
+    { if (pedantic)
+		    pedwarn ("extra semicolon in struct or union specified"); }
+    break;
+
+  case 277:
+/* Line 1792 of yacc.c  */
 #line 1483 "objc-parse.y"
-{
-		  tree interface = lookup_interface (yyvsp[-1].ttype);
+    {
+		  tree interface = lookup_interface ((yyvsp[(3) - (4)].ttype));
 
 		  if (interface)
-		    yyval.ttype = get_class_ivars (interface);
+		    (yyval.ttype) = get_class_ivars (interface);
 		  else
 		    {
 		      error ("Cannot find interface declaration for `%s'",
-			     IDENTIFIER_POINTER (yyvsp[-1].ttype));
-		      yyval.ttype = NULL_TREE;
+			     IDENTIFIER_POINTER ((yyvsp[(3) - (4)].ttype)));
+		      (yyval.ttype) = NULL_TREE;
 		    }
-		;
-    break;}
-case 277:
+		}
+    break;
+
+  case 278:
+/* Line 1792 of yacc.c  */
 #line 1508 "objc-parse.y"
-{ yyval.ttype = yyvsp[0].ttype;
+    { (yyval.ttype) = (yyvsp[(3) - (3)].ttype);
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-1].itype); ;
-    break;}
-case 278:
+		  resume_momentary ((yyvsp[(2) - (3)].itype)); }
+    break;
+
+  case 279:
+/* Line 1792 of yacc.c  */
 #line 1514 "objc-parse.y"
-{ if (pedantic)
+    { if (pedantic)
 		    pedwarn ("ANSI C forbids member declarations with no members");
-		  shadow_tag(yyvsp[0].ttype);
-		  yyval.ttype = NULL_TREE; ;
-    break;}
-case 279:
+		  shadow_tag((yyvsp[(1) - (1)].ttype));
+		  (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 280:
+/* Line 1792 of yacc.c  */
 #line 1519 "objc-parse.y"
-{ yyval.ttype = yyvsp[0].ttype;
+    { (yyval.ttype) = (yyvsp[(3) - (3)].ttype);
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-1].itype); ;
-    break;}
-case 280:
+		  resume_momentary ((yyvsp[(2) - (3)].itype)); }
+    break;
+
+  case 281:
+/* Line 1792 of yacc.c  */
 #line 1525 "objc-parse.y"
-{ if (pedantic)
+    { if (pedantic)
 		    pedwarn ("ANSI C forbids member declarations with no members");
-		  shadow_tag(yyvsp[0].ttype);
-		  yyval.ttype = NULL_TREE; ;
-    break;}
-case 281:
+		  shadow_tag((yyvsp[(1) - (1)].ttype));
+		  (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 282:
+/* Line 1792 of yacc.c  */
 #line 1530 "objc-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 282:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 283:
+/* Line 1792 of yacc.c  */
 #line 1532 "objc-parse.y"
-{ yyval.ttype = yyvsp[0].ttype;
-		  pedantic = yyvsp[-1].itype; ;
-    break;}
-case 284:
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype);
+		  pedantic = (yyvsp[(1) - (2)].itype); }
+    break;
+
+  case 285:
+/* Line 1792 of yacc.c  */
 #line 1539 "objc-parse.y"
-{ yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 285:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 286:
+/* Line 1792 of yacc.c  */
 #line 1544 "objc-parse.y"
-{ yyval.ttype = grokfield (yyvsp[-3].filename, yyvsp[-2].lineno, yyvsp[-1].ttype, current_declspecs, NULL_TREE);
-		  decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;
-    break;}
-case 286:
+    { (yyval.ttype) = grokfield ((yyvsp[(1) - (4)].filename), (yyvsp[(2) - (4)].lineno), (yyvsp[(3) - (4)].ttype), current_declspecs, NULL_TREE);
+		  decl_attributes ((yyval.ttype), (yyvsp[(4) - (4)].ttype), prefix_attributes); }
+    break;
+
+  case 287:
+/* Line 1792 of yacc.c  */
 #line 1548 "objc-parse.y"
-{ yyval.ttype = grokfield (yyvsp[-5].filename, yyvsp[-4].lineno, yyvsp[-3].ttype, current_declspecs, yyvsp[-1].ttype);
-		  decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;
-    break;}
-case 287:
+    { (yyval.ttype) = grokfield ((yyvsp[(1) - (6)].filename), (yyvsp[(2) - (6)].lineno), (yyvsp[(3) - (6)].ttype), current_declspecs, (yyvsp[(5) - (6)].ttype));
+		  decl_attributes ((yyval.ttype), (yyvsp[(6) - (6)].ttype), prefix_attributes); }
+    break;
+
+  case 288:
+/* Line 1792 of yacc.c  */
 #line 1551 "objc-parse.y"
-{ yyval.ttype = grokfield (yyvsp[-4].filename, yyvsp[-3].lineno, NULL_TREE, current_declspecs, yyvsp[-1].ttype);
-		  decl_attributes (yyval.ttype, yyvsp[0].ttype, prefix_attributes); ;
-    break;}
-case 289:
+    { (yyval.ttype) = grokfield ((yyvsp[(1) - (5)].filename), (yyvsp[(2) - (5)].lineno), NULL_TREE, current_declspecs, (yyvsp[(4) - (5)].ttype));
+		  decl_attributes ((yyval.ttype), (yyvsp[(5) - (5)].ttype), prefix_attributes); }
+    break;
+
+  case 290:
+/* Line 1792 of yacc.c  */
 #line 1563 "objc-parse.y"
-{ if (yyvsp[-2].ttype == error_mark_node)
-		    yyval.ttype = yyvsp[-2].ttype;
+    { if ((yyvsp[(1) - (3)].ttype) == error_mark_node)
+		    (yyval.ttype) = (yyvsp[(1) - (3)].ttype);
 		  else
-		    yyval.ttype = chainon (yyvsp[0].ttype, yyvsp[-2].ttype); ;
-    break;}
-case 290:
+		    (yyval.ttype) = chainon ((yyvsp[(3) - (3)].ttype), (yyvsp[(1) - (3)].ttype)); }
+    break;
+
+  case 291:
+/* Line 1792 of yacc.c  */
 #line 1568 "objc-parse.y"
-{ yyval.ttype = error_mark_node; ;
-    break;}
-case 291:
+    { (yyval.ttype) = error_mark_node; }
+    break;
+
+  case 292:
+/* Line 1792 of yacc.c  */
 #line 1574 "objc-parse.y"
-{ yyval.ttype = build_enumerator (yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 292:
+    { (yyval.ttype) = build_enumerator ((yyvsp[(1) - (1)].ttype), NULL_TREE); }
+    break;
+
+  case 293:
+/* Line 1792 of yacc.c  */
 #line 1576 "objc-parse.y"
-{ yyval.ttype = build_enumerator (yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 293:
+    { (yyval.ttype) = build_enumerator ((yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 294:
+/* Line 1792 of yacc.c  */
 #line 1581 "objc-parse.y"
-{ yyval.ttype = build_tree_list (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 294:
+    { (yyval.ttype) = build_tree_list ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 295:
+/* Line 1792 of yacc.c  */
 #line 1583 "objc-parse.y"
-{ yyval.ttype = build_tree_list (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 295:
+    { (yyval.ttype) = build_tree_list ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype)); }
+    break;
+
+  case 296:
+/* Line 1792 of yacc.c  */
 #line 1588 "objc-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 297:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 298:
+/* Line 1792 of yacc.c  */
 #line 1594 "objc-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 298:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(1) - (1)].ttype), NULL_TREE); }
+    break;
+
+  case 299:
+/* Line 1792 of yacc.c  */
 #line 1596 "objc-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 299:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 300:
+/* Line 1792 of yacc.c  */
 #line 1601 "objc-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 300:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 301:
+/* Line 1792 of yacc.c  */
 #line 1603 "objc-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, yyvsp[0].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 301:
+    { (yyval.ttype) = tree_cons (NULL_TREE, (yyvsp[(2) - (2)].ttype), (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 302:
+/* Line 1792 of yacc.c  */
 #line 1608 "objc-parse.y"
-{ yyval.ttype = yyvsp[-1].ttype; ;
-    break;}
-case 302:
+    { (yyval.ttype) = (yyvsp[(2) - (3)].ttype); }
+    break;
+
+  case 303:
+/* Line 1792 of yacc.c  */
 #line 1611 "objc-parse.y"
-{ yyval.ttype = make_pointer_declarator (yyvsp[-1].ttype, yyvsp[0].ttype); ;
-    break;}
-case 303:
+    { (yyval.ttype) = make_pointer_declarator ((yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 304:
+/* Line 1792 of yacc.c  */
 #line 1613 "objc-parse.y"
-{ yyval.ttype = make_pointer_declarator (yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 304:
+    { (yyval.ttype) = make_pointer_declarator ((yyvsp[(2) - (2)].ttype), NULL_TREE); }
+    break;
+
+  case 305:
+/* Line 1792 of yacc.c  */
 #line 1615 "objc-parse.y"
-{ yyval.ttype = build_nt (CALL_EXPR, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 305:
+    { (yyval.ttype) = build_nt (CALL_EXPR, (yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 306:
+/* Line 1792 of yacc.c  */
 #line 1617 "objc-parse.y"
-{ yyval.ttype = build_nt (ARRAY_REF, yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 306:
+    { (yyval.ttype) = build_nt (ARRAY_REF, (yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 307:
+/* Line 1792 of yacc.c  */
 #line 1619 "objc-parse.y"
-{ yyval.ttype = build_nt (ARRAY_REF, yyvsp[-2].ttype, NULL_TREE); ;
-    break;}
-case 307:
+    { (yyval.ttype) = build_nt (ARRAY_REF, (yyvsp[(1) - (3)].ttype), NULL_TREE); }
+    break;
+
+  case 308:
+/* Line 1792 of yacc.c  */
 #line 1621 "objc-parse.y"
-{ yyval.ttype = build_nt (CALL_EXPR, NULL_TREE, yyvsp[0].ttype, NULL_TREE); ;
-    break;}
-case 308:
+    { (yyval.ttype) = build_nt (CALL_EXPR, NULL_TREE, (yyvsp[(2) - (2)].ttype), NULL_TREE); }
+    break;
+
+  case 309:
+/* Line 1792 of yacc.c  */
 #line 1623 "objc-parse.y"
-{ yyval.ttype = build_nt (ARRAY_REF, NULL_TREE, yyvsp[-1].ttype); ;
-    break;}
-case 309:
+    { (yyval.ttype) = build_nt (ARRAY_REF, NULL_TREE, (yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 310:
+/* Line 1792 of yacc.c  */
 #line 1625 "objc-parse.y"
-{ yyval.ttype = build_nt (ARRAY_REF, NULL_TREE, NULL_TREE); ;
-    break;}
-case 310:
+    { (yyval.ttype) = build_nt (ARRAY_REF, NULL_TREE, NULL_TREE); }
+    break;
+
+  case 311:
+/* Line 1792 of yacc.c  */
 #line 1629 "objc-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 311:
+    { (yyval.ttype) = (yyvsp[(3) - (3)].ttype); }
+    break;
+
+  case 312:
+/* Line 1792 of yacc.c  */
 #line 1638 "objc-parse.y"
-{
-		  if (pedantic && yyvsp[0].ends_in_label)
+    {
+		  if (pedantic && (yyvsp[(1) - (1)].ends_in_label))
 		    pedwarn ("ANSI C forbids label at end of compound statement");
-		;
-    break;}
-case 313:
+		}
+    break;
+
+  case 314:
+/* Line 1792 of yacc.c  */
 #line 1647 "objc-parse.y"
-{ yyval.ends_in_label = yyvsp[0].ends_in_label; ;
-    break;}
-case 314:
+    { (yyval.ends_in_label) = (yyvsp[(2) - (2)].ends_in_label); }
+    break;
+
+  case 315:
+/* Line 1792 of yacc.c  */
 #line 1649 "objc-parse.y"
-{ yyval.ends_in_label = 0; ;
-    break;}
-case 318:
+    { (yyval.ends_in_label) = 0; }
+    break;
+
+  case 319:
+/* Line 1792 of yacc.c  */
 #line 1661 "objc-parse.y"
-{ emit_line_note (input_filename, lineno);
+    { emit_line_note (input_filename, lineno);
 		  pushlevel (0);
 		  clear_last_expr ();
 		  push_momentary ();
 		  expand_start_bindings (0);
 		  if (objc_method_context)
 		    add_objc_decls ();
-		;
-    break;}
-case 320:
+		}
+    break;
+
+  case 321:
+/* Line 1792 of yacc.c  */
 #line 1676 "objc-parse.y"
-{ if (pedantic)
-		    pedwarn ("ANSI C forbids label declarations"); ;
-    break;}
-case 323:
+    { if (pedantic)
+		    pedwarn ("ANSI C forbids label declarations"); }
+    break;
+
+  case 324:
+/* Line 1792 of yacc.c  */
 #line 1687 "objc-parse.y"
-{ tree link;
-		  for (link = yyvsp[-1].ttype; link; link = TREE_CHAIN (link))
+    { tree link;
+		  for (link = (yyvsp[(2) - (3)].ttype); link; link = TREE_CHAIN (link))
 		    {
 		      tree label = shadow_label (TREE_VALUE (link));
 		      C_DECLARED_LABEL_FLAG (label) = 1;
 		      declare_nonlocal_label (label);
 		    }
-		;
-    break;}
-case 324:
+		}
+    break;
+
+  case 325:
+/* Line 1792 of yacc.c  */
 #line 1701 "objc-parse.y"
-{;
-    break;}
-case 326:
+    {}
+    break;
+
+  case 327:
+/* Line 1792 of yacc.c  */
 #line 1705 "objc-parse.y"
-{ compstmt_count++; ;
-    break;}
-case 327:
+    { compstmt_count++; }
+    break;
+
+  case 328:
+/* Line 1792 of yacc.c  */
 #line 1708 "objc-parse.y"
-{ yyval.ttype = convert (void_type_node, integer_zero_node); ;
-    break;}
-case 328:
+    { (yyval.ttype) = convert (void_type_node, integer_zero_node); }
+    break;
+
+  case 329:
+/* Line 1792 of yacc.c  */
 #line 1710 "objc-parse.y"
-{ emit_line_note (input_filename, lineno);
+    { emit_line_note (input_filename, lineno);
 		  expand_end_bindings (getdecls (), 1, 0);
-		  yyval.ttype = poplevel (1, 1, 0);
+		  (yyval.ttype) = poplevel (1, 1, 0);
 		  if (yychar == CONSTANT || yychar == STRING)
 		    pop_momentary_nofree ();
 		  else
-		    pop_momentary (); ;
-    break;}
-case 329:
+		    pop_momentary (); }
+    break;
+
+  case 330:
+/* Line 1792 of yacc.c  */
 #line 1718 "objc-parse.y"
-{ emit_line_note (input_filename, lineno);
+    { emit_line_note (input_filename, lineno);
 		  expand_end_bindings (getdecls (), kept_level_p (), 0);
-		  yyval.ttype = poplevel (kept_level_p (), 0, 0);
+		  (yyval.ttype) = poplevel (kept_level_p (), 0, 0);
 		  if (yychar == CONSTANT || yychar == STRING)
 		    pop_momentary_nofree ();
 		  else
-		    pop_momentary (); ;
-    break;}
-case 330:
+		    pop_momentary (); }
+    break;
+
+  case 331:
+/* Line 1792 of yacc.c  */
 #line 1726 "objc-parse.y"
-{ emit_line_note (input_filename, lineno);
+    { emit_line_note (input_filename, lineno);
 		  expand_end_bindings (getdecls (), kept_level_p (), 0);
-		  yyval.ttype = poplevel (kept_level_p (), 0, 0);
+		  (yyval.ttype) = poplevel (kept_level_p (), 0, 0);
 		  if (yychar == CONSTANT || yychar == STRING)
 		    pop_momentary_nofree ();
 		  else
-		    pop_momentary (); ;
-    break;}
-case 333:
+		    pop_momentary (); }
+    break;
+
+  case 334:
+/* Line 1792 of yacc.c  */
 #line 1746 "objc-parse.y"
-{ emit_line_note (yyvsp[-5].filename, yyvsp[-4].lineno);
-		  c_expand_start_cond (truthvalue_conversion (yyvsp[-1].ttype), 0, 
+    { emit_line_note ((yyvsp[(-1) - (4)].filename), (yyvsp[(0) - (4)].lineno));
+		  c_expand_start_cond (truthvalue_conversion ((yyvsp[(3) - (4)].ttype)), 0, 
 				       compstmt_count);
-		  yyval.itype = stmt_count;
-		  if_stmt_file = yyvsp[-5].filename;
-		  if_stmt_line = yyvsp[-4].lineno;
-		  position_after_white_space (); ;
-    break;}
-case 334:
+		  (yyval.itype) = stmt_count;
+		  if_stmt_file = (yyvsp[(-1) - (4)].filename);
+		  if_stmt_line = (yyvsp[(0) - (4)].lineno);
+		  position_after_white_space (); }
+    break;
+
+  case 335:
+/* Line 1792 of yacc.c  */
 #line 1760 "objc-parse.y"
-{ stmt_count++;
+    { stmt_count++;
 		  compstmt_count++;
-		  emit_line_note (yyvsp[-2].filename, yyvsp[-1].lineno);
+		  emit_line_note ((yyvsp[(-1) - (1)].filename), (yyvsp[(0) - (1)].lineno));
 		  /* See comment in `while' alternative, above.  */
 		  emit_nop ();
 		  expand_start_loop_continue_elsewhere (1);
-		  position_after_white_space (); ;
-    break;}
-case 335:
+		  position_after_white_space (); }
+    break;
+
+  case 336:
+/* Line 1792 of yacc.c  */
 #line 1768 "objc-parse.y"
-{ expand_loop_continue_here (); ;
-    break;}
-case 336:
+    { expand_loop_continue_here (); }
+    break;
+
+  case 337:
+/* Line 1792 of yacc.c  */
 #line 1772 "objc-parse.y"
-{ yyval.filename = input_filename; ;
-    break;}
-case 337:
+    { (yyval.filename) = input_filename; }
+    break;
+
+  case 338:
+/* Line 1792 of yacc.c  */
 #line 1776 "objc-parse.y"
-{ yyval.lineno = lineno; ;
-    break;}
-case 338:
+    { (yyval.lineno) = lineno; }
+    break;
+
+  case 339:
+/* Line 1792 of yacc.c  */
 #line 1781 "objc-parse.y"
-{ ;
-    break;}
-case 339:
+    { }
+    break;
+
+  case 340:
+/* Line 1792 of yacc.c  */
 #line 1786 "objc-parse.y"
-{ ;
-    break;}
-case 340:
+    { }
+    break;
+
+  case 341:
+/* Line 1792 of yacc.c  */
 #line 1791 "objc-parse.y"
-{ yyval.ends_in_label = yyvsp[0].ends_in_label; ;
-    break;}
-case 341:
+    { (yyval.ends_in_label) = (yyvsp[(3) - (3)].ends_in_label); }
+    break;
+
+  case 342:
+/* Line 1792 of yacc.c  */
 #line 1796 "objc-parse.y"
-{ yyval.ends_in_label = 0; ;
-    break;}
-case 342:
+    { (yyval.ends_in_label) = 0; }
+    break;
+
+  case 343:
+/* Line 1792 of yacc.c  */
 #line 1798 "objc-parse.y"
-{ yyval.ends_in_label = 1; ;
-    break;}
-case 343:
+    { (yyval.ends_in_label) = 1; }
+    break;
+
+  case 344:
+/* Line 1792 of yacc.c  */
 #line 1804 "objc-parse.y"
-{ stmt_count++; ;
-    break;}
-case 345:
+    { stmt_count++; }
+    break;
+
+  case 346:
+/* Line 1792 of yacc.c  */
 #line 1807 "objc-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-3].filename, yyvsp[-2].lineno);
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (2)].filename), (yyvsp[(0) - (2)].lineno));
 /* It appears that this should not be done--that a non-lvalue array
    shouldn't get an error if the value isn't used.
    Section 3.2.2.1 says that an array lvalue gets converted to a pointer
@@ -3780,263 +5117,319 @@ case 345:
 #if 0
 		  /* Call default_conversion to get an error
 		     on referring to a register array if pedantic.  */
-		  if (TREE_CODE (TREE_TYPE (yyvsp[-1].ttype)) == ARRAY_TYPE
-		      || TREE_CODE (TREE_TYPE (yyvsp[-1].ttype)) == FUNCTION_TYPE)
-		    yyvsp[-1].ttype = default_conversion (yyvsp[-1].ttype);
+		  if (TREE_CODE (TREE_TYPE ((yyvsp[(1) - (2)].ttype))) == ARRAY_TYPE
+		      || TREE_CODE (TREE_TYPE ((yyvsp[(1) - (2)].ttype))) == FUNCTION_TYPE)
+		    (yyvsp[(1) - (2)].ttype) = default_conversion ((yyvsp[(1) - (2)].ttype));
 #endif
-		  iterator_expand (yyvsp[-1].ttype);
-		  clear_momentary (); ;
-    break;}
-case 346:
+		  iterator_expand ((yyvsp[(1) - (2)].ttype));
+		  clear_momentary (); }
+    break;
+
+  case 347:
+/* Line 1792 of yacc.c  */
 #line 1824 "objc-parse.y"
-{ c_expand_start_else ();
-		  yyvsp[-1].itype = stmt_count;
-		  position_after_white_space (); ;
-    break;}
-case 347:
+    { c_expand_start_else ();
+		  (yyvsp[(1) - (2)].itype) = stmt_count;
+		  position_after_white_space (); }
+    break;
+
+  case 348:
+/* Line 1792 of yacc.c  */
 #line 1828 "objc-parse.y"
-{ c_expand_end_cond ();
-		  if (extra_warnings && stmt_count == yyvsp[-3].itype)
-		    warning ("empty body in an else-statement"); ;
-    break;}
-case 348:
+    { c_expand_end_cond ();
+		  if (extra_warnings && stmt_count == (yyvsp[(1) - (4)].itype))
+		    warning ("empty body in an else-statement"); }
+    break;
+
+  case 349:
+/* Line 1792 of yacc.c  */
 #line 1832 "objc-parse.y"
-{ c_expand_end_cond ();
+    { c_expand_end_cond ();
 		  /* This warning is here instead of in simple_if, because we
 		     do not want a warning if an empty if is followed by an
 		     else statement.  Increment stmt_count so we don't
 		     give a second error if this is a nested `if'.  */
-		  if (extra_warnings && stmt_count++ == yyvsp[0].itype)
+		  if (extra_warnings && stmt_count++ == (yyvsp[(1) - (1)].itype))
 		    warning_with_file_and_line (if_stmt_file, if_stmt_line,
-						"empty body in an if-statement"); ;
-    break;}
-case 349:
+						"empty body in an if-statement"); }
+    break;
+
+  case 350:
+/* Line 1792 of yacc.c  */
 #line 1844 "objc-parse.y"
-{ c_expand_end_cond (); ;
-    break;}
-case 350:
+    { c_expand_end_cond (); }
+    break;
+
+  case 351:
+/* Line 1792 of yacc.c  */
 #line 1846 "objc-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-2].filename, yyvsp[-1].lineno);
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (1)].filename), (yyvsp[(0) - (1)].lineno));
 		  /* The emit_nop used to come before emit_line_note,
 		     but that made the nop seem like part of the preceding line.
 		     And that was confusing when the preceding line was
 		     inside of an if statement and was not really executed.
 		     I think it ought to work to put the nop after the line number.
 		     We will see.  --rms, July 15, 1991.  */
-		  emit_nop (); ;
-    break;}
-case 351:
+		  emit_nop (); }
+    break;
+
+  case 352:
+/* Line 1792 of yacc.c  */
 #line 1856 "objc-parse.y"
-{ /* Don't start the loop till we have succeeded
+    { /* Don't start the loop till we have succeeded
 		     in parsing the end test.  This is to make sure
 		     that we end every loop we start.  */
 		  expand_start_loop (1);
 		  emit_line_note (input_filename, lineno);
 		  expand_exit_loop_if_false (NULL_PTR,
-					     truthvalue_conversion (yyvsp[-1].ttype));
-		  position_after_white_space (); ;
-    break;}
-case 352:
+					     truthvalue_conversion ((yyvsp[(4) - (5)].ttype)));
+		  position_after_white_space (); }
+    break;
+
+  case 353:
+/* Line 1792 of yacc.c  */
 #line 1865 "objc-parse.y"
-{ expand_end_loop (); ;
-    break;}
-case 353:
+    { expand_end_loop (); }
+    break;
+
+  case 354:
+/* Line 1792 of yacc.c  */
 #line 1868 "objc-parse.y"
-{ emit_line_note (input_filename, lineno);
+    { emit_line_note (input_filename, lineno);
 		  expand_exit_loop_if_false (NULL_PTR,
-					     truthvalue_conversion (yyvsp[-2].ttype));
+					     truthvalue_conversion ((yyvsp[(3) - (5)].ttype)));
 		  expand_end_loop ();
-		  clear_momentary (); ;
-    break;}
-case 354:
+		  clear_momentary (); }
+    break;
+
+  case 355:
+/* Line 1792 of yacc.c  */
 #line 1875 "objc-parse.y"
-{ expand_end_loop ();
-		  clear_momentary (); ;
-    break;}
-case 355:
+    { expand_end_loop ();
+		  clear_momentary (); }
+    break;
+
+  case 356:
+/* Line 1792 of yacc.c  */
 #line 1879 "objc-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-5].filename, yyvsp[-4].lineno);
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (4)].filename), (yyvsp[(0) - (4)].lineno));
 		  /* See comment in `while' alternative, above.  */
 		  emit_nop ();
-		  if (yyvsp[-1].ttype) c_expand_expr_stmt (yyvsp[-1].ttype);
+		  if ((yyvsp[(3) - (4)].ttype)) c_expand_expr_stmt ((yyvsp[(3) - (4)].ttype));
 		  /* Next step is to call expand_start_loop_continue_elsewhere,
 		     but wait till after we parse the entire for (...).
 		     Otherwise, invalid input might cause us to call that
 		     fn without calling expand_end_loop.  */
-		;
-    break;}
-case 356:
+		}
+    break;
+
+  case 357:
+/* Line 1792 of yacc.c  */
 #line 1891 "objc-parse.y"
-{ yyvsp[0].lineno = lineno;
-		  yyval.filename = input_filename; ;
-    break;}
-case 357:
+    { (yyvsp[(7) - (7)].lineno) = lineno;
+		  (yyval.filename) = input_filename; }
+    break;
+
+  case 358:
+/* Line 1792 of yacc.c  */
 #line 1894 "objc-parse.y"
-{ 
+    { 
 		  /* Start the loop.  Doing this after parsing
 		     all the expressions ensures we will end the loop.  */
 		  expand_start_loop_continue_elsewhere (1);
 		  /* Emit the end-test, with a line number.  */
-		  emit_line_note (yyvsp[-2].filename, yyvsp[-3].lineno);
-		  if (yyvsp[-4].ttype)
+		  emit_line_note ((yyvsp[(8) - (10)].filename), (yyvsp[(7) - (10)].lineno));
+		  if ((yyvsp[(6) - (10)].ttype))
 		    expand_exit_loop_if_false (NULL_PTR,
-					       truthvalue_conversion (yyvsp[-4].ttype));
+					       truthvalue_conversion ((yyvsp[(6) - (10)].ttype)));
 		  /* Don't let the tree nodes for $9 be discarded by
 		     clear_momentary during the parsing of the next stmt.  */
 		  push_momentary ();
-		  yyvsp[-3].lineno = lineno;
-		  yyvsp[-2].filename = input_filename;
-		  position_after_white_space (); ;
-    break;}
-case 358:
+		  (yyvsp[(7) - (10)].lineno) = lineno;
+		  (yyvsp[(8) - (10)].filename) = input_filename;
+		  position_after_white_space (); }
+    break;
+
+  case 359:
+/* Line 1792 of yacc.c  */
 #line 1910 "objc-parse.y"
-{ /* Emit the increment expression, with a line number.  */
-		  emit_line_note (yyvsp[-4].filename, yyvsp[-5].lineno);
+    { /* Emit the increment expression, with a line number.  */
+		  emit_line_note ((yyvsp[(8) - (12)].filename), (yyvsp[(7) - (12)].lineno));
 		  expand_loop_continue_here ();
-		  if (yyvsp[-3].ttype)
-		    c_expand_expr_stmt (yyvsp[-3].ttype);
+		  if ((yyvsp[(9) - (12)].ttype))
+		    c_expand_expr_stmt ((yyvsp[(9) - (12)].ttype));
 		  if (yychar == CONSTANT || yychar == STRING)
 		    pop_momentary_nofree ();
 		  else
 		    pop_momentary ();
-		  expand_end_loop (); ;
-    break;}
-case 359:
+		  expand_end_loop (); }
+    break;
+
+  case 360:
+/* Line 1792 of yacc.c  */
 #line 1921 "objc-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-5].filename, yyvsp[-4].lineno);
-		  c_expand_start_case (yyvsp[-1].ttype);
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (4)].filename), (yyvsp[(0) - (4)].lineno));
+		  c_expand_start_case ((yyvsp[(3) - (4)].ttype));
 		  /* Don't let the tree nodes for $3 be discarded by
 		     clear_momentary during the parsing of the next stmt.  */
 		  push_momentary ();
-		  position_after_white_space (); ;
-    break;}
-case 360:
+		  position_after_white_space (); }
+    break;
+
+  case 361:
+/* Line 1792 of yacc.c  */
 #line 1929 "objc-parse.y"
-{ expand_end_case (yyvsp[-3].ttype);
+    { expand_end_case ((yyvsp[(3) - (6)].ttype));
 		  if (yychar == CONSTANT || yychar == STRING)
 		    pop_momentary_nofree ();
 		  else
-		    pop_momentary (); ;
-    break;}
-case 361:
+		    pop_momentary (); }
+    break;
+
+  case 362:
+/* Line 1792 of yacc.c  */
 #line 1935 "objc-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-3].filename, yyvsp[-2].lineno);
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (2)].filename), (yyvsp[(0) - (2)].lineno));
 		  if ( ! expand_exit_something ())
-		    error ("break statement not within loop or switch"); ;
-    break;}
-case 362:
+		    error ("break statement not within loop or switch"); }
+    break;
+
+  case 363:
+/* Line 1792 of yacc.c  */
 #line 1940 "objc-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-3].filename, yyvsp[-2].lineno);
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (2)].filename), (yyvsp[(0) - (2)].lineno));
 		  if (! expand_continue_loop (NULL_PTR))
-		    error ("continue statement not within a loop"); ;
-    break;}
-case 363:
+		    error ("continue statement not within a loop"); }
+    break;
+
+  case 364:
+/* Line 1792 of yacc.c  */
 #line 1945 "objc-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-3].filename, yyvsp[-2].lineno);
-		  c_expand_return (NULL_TREE); ;
-    break;}
-case 364:
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (2)].filename), (yyvsp[(0) - (2)].lineno));
+		  c_expand_return (NULL_TREE); }
+    break;
+
+  case 365:
+/* Line 1792 of yacc.c  */
 #line 1949 "objc-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-4].filename, yyvsp[-3].lineno);
-		  c_expand_return (yyvsp[-1].ttype); ;
-    break;}
-case 365:
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (3)].filename), (yyvsp[(0) - (3)].lineno));
+		  c_expand_return ((yyvsp[(2) - (3)].ttype)); }
+    break;
+
+  case 366:
+/* Line 1792 of yacc.c  */
 #line 1953 "objc-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-7].filename, yyvsp[-6].lineno);
-		  STRIP_NOPS (yyvsp[-2].ttype);
-		  if ((TREE_CODE (yyvsp[-2].ttype) == ADDR_EXPR
-		       && TREE_CODE (TREE_OPERAND (yyvsp[-2].ttype, 0)) == STRING_CST)
-		      || TREE_CODE (yyvsp[-2].ttype) == STRING_CST)
-		    expand_asm (yyvsp[-2].ttype);
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (6)].filename), (yyvsp[(0) - (6)].lineno));
+		  STRIP_NOPS ((yyvsp[(4) - (6)].ttype));
+		  if ((TREE_CODE ((yyvsp[(4) - (6)].ttype)) == ADDR_EXPR
+		       && TREE_CODE (TREE_OPERAND ((yyvsp[(4) - (6)].ttype), 0)) == STRING_CST)
+		      || TREE_CODE ((yyvsp[(4) - (6)].ttype)) == STRING_CST)
+		    expand_asm ((yyvsp[(4) - (6)].ttype));
 		  else
-		    error ("argument of `asm' is not a constant string"); ;
-    break;}
-case 366:
+		    error ("argument of `asm' is not a constant string"); }
+    break;
+
+  case 367:
+/* Line 1792 of yacc.c  */
 #line 1964 "objc-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-9].filename, yyvsp[-8].lineno);
-		  c_expand_asm_operands (yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE, NULL_TREE,
-					 yyvsp[-6].ttype == ridpointers[(int)RID_VOLATILE],
-					 input_filename, lineno); ;
-    break;}
-case 367:
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (8)].filename), (yyvsp[(0) - (8)].lineno));
+		  c_expand_asm_operands ((yyvsp[(4) - (8)].ttype), (yyvsp[(6) - (8)].ttype), NULL_TREE, NULL_TREE,
+					 (yyvsp[(2) - (8)].ttype) == ridpointers[(int)RID_VOLATILE],
+					 input_filename, lineno); }
+    break;
+
+  case 368:
+/* Line 1792 of yacc.c  */
 #line 1971 "objc-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-11].filename, yyvsp[-10].lineno);
-		  c_expand_asm_operands (yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype, NULL_TREE,
-					 yyvsp[-8].ttype == ridpointers[(int)RID_VOLATILE],
-					 input_filename, lineno); ;
-    break;}
-case 368:
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (10)].filename), (yyvsp[(0) - (10)].lineno));
+		  c_expand_asm_operands ((yyvsp[(4) - (10)].ttype), (yyvsp[(6) - (10)].ttype), (yyvsp[(8) - (10)].ttype), NULL_TREE,
+					 (yyvsp[(2) - (10)].ttype) == ridpointers[(int)RID_VOLATILE],
+					 input_filename, lineno); }
+    break;
+
+  case 369:
+/* Line 1792 of yacc.c  */
 #line 1979 "objc-parse.y"
-{ stmt_count++;
-		  emit_line_note (yyvsp[-13].filename, yyvsp[-12].lineno);
-		  c_expand_asm_operands (yyvsp[-8].ttype, yyvsp[-6].ttype, yyvsp[-4].ttype, yyvsp[-2].ttype,
-					 yyvsp[-10].ttype == ridpointers[(int)RID_VOLATILE],
-					 input_filename, lineno); ;
-    break;}
-case 369:
+    { stmt_count++;
+		  emit_line_note ((yyvsp[(-1) - (12)].filename), (yyvsp[(0) - (12)].lineno));
+		  c_expand_asm_operands ((yyvsp[(4) - (12)].ttype), (yyvsp[(6) - (12)].ttype), (yyvsp[(8) - (12)].ttype), (yyvsp[(10) - (12)].ttype),
+					 (yyvsp[(2) - (12)].ttype) == ridpointers[(int)RID_VOLATILE],
+					 input_filename, lineno); }
+    break;
+
+  case 370:
+/* Line 1792 of yacc.c  */
 #line 1985 "objc-parse.y"
-{ tree decl;
+    { tree decl;
 		  stmt_count++;
-		  emit_line_note (yyvsp[-4].filename, yyvsp[-3].lineno);
-		  decl = lookup_label (yyvsp[-1].ttype);
+		  emit_line_note ((yyvsp[(-1) - (3)].filename), (yyvsp[(0) - (3)].lineno));
+		  decl = lookup_label ((yyvsp[(2) - (3)].ttype));
 		  if (decl != 0)
 		    {
 		      TREE_USED (decl) = 1;
 		      expand_goto (decl);
 		    }
-		;
-    break;}
-case 370:
+		}
+    break;
+
+  case 371:
+/* Line 1792 of yacc.c  */
 #line 1996 "objc-parse.y"
-{ if (pedantic)
+    { if (pedantic)
 		    pedwarn ("ANSI C forbids `goto *expr;'");
 		  stmt_count++;
-		  emit_line_note (yyvsp[-5].filename, yyvsp[-4].lineno);
-		  expand_computed_goto (convert (ptr_type_node, yyvsp[-1].ttype)); ;
-    break;}
-case 373:
+		  emit_line_note ((yyvsp[(-1) - (4)].filename), (yyvsp[(0) - (4)].lineno));
+		  expand_computed_goto (convert (ptr_type_node, (yyvsp[(3) - (4)].ttype))); }
+    break;
+
+  case 374:
+/* Line 1792 of yacc.c  */
 #line 2011 "objc-parse.y"
-{
+    {
 	    /* The value returned by this action is  */
 	    /*      1 if everything is OK */ 
 	    /*      0 in case of error or already bound iterator */
 
-	    yyval.itype = 0;
-	    if (TREE_CODE (yyvsp[-1].ttype) != VAR_DECL)
+	    (yyval.itype) = 0;
+	    if (TREE_CODE ((yyvsp[(3) - (4)].ttype)) != VAR_DECL)
 	      error ("invalid `for (ITERATOR)' syntax");
-	    else if (! ITERATOR_P (yyvsp[-1].ttype))
+	    else if (! ITERATOR_P ((yyvsp[(3) - (4)].ttype)))
 	      error ("`%s' is not an iterator",
-		     IDENTIFIER_POINTER (DECL_NAME (yyvsp[-1].ttype)));
-	    else if (ITERATOR_BOUND_P (yyvsp[-1].ttype))
+		     IDENTIFIER_POINTER (DECL_NAME ((yyvsp[(3) - (4)].ttype))));
+	    else if (ITERATOR_BOUND_P ((yyvsp[(3) - (4)].ttype)))
 	      error ("`for (%s)' inside expansion of same iterator",
-		     IDENTIFIER_POINTER (DECL_NAME (yyvsp[-1].ttype)));
+		     IDENTIFIER_POINTER (DECL_NAME ((yyvsp[(3) - (4)].ttype))));
 	    else
 	      {
-		yyval.itype = 1;
-		iterator_for_loop_start (yyvsp[-1].ttype);
+		(yyval.itype) = 1;
+		iterator_for_loop_start ((yyvsp[(3) - (4)].ttype));
 	      }
-	  ;
-    break;}
-case 374:
+	  }
+    break;
+
+  case 375:
+/* Line 1792 of yacc.c  */
 #line 2032 "objc-parse.y"
-{
-	    if (yyvsp[-1].itype)
-	      iterator_for_loop_end (yyvsp[-3].ttype);
-	  ;
-    break;}
-case 375:
+    {
+	    if ((yyvsp[(5) - (6)].itype))
+	      iterator_for_loop_end ((yyvsp[(3) - (6)].ttype));
+	  }
+    break;
+
+  case 376:
+/* Line 1792 of yacc.c  */
 #line 2067 "objc-parse.y"
-{ register tree value = check_case_value (yyvsp[-1].ttype);
+    { register tree value = check_case_value ((yyvsp[(2) - (3)].ttype));
 		  register tree label
 		    = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);
 
@@ -4065,12 +5458,14 @@ case 375:
 		      else if (success == 5)
 			error ("case label within scope of cleanup or variable array");
 		    }
-		  position_after_white_space (); ;
-    break;}
-case 376:
+		  position_after_white_space (); }
+    break;
+
+  case 377:
+/* Line 1792 of yacc.c  */
 #line 2098 "objc-parse.y"
-{ register tree value1 = check_case_value (yyvsp[-3].ttype);
-		  register tree value2 = check_case_value (yyvsp[-1].ttype);
+    { register tree value1 = check_case_value ((yyvsp[(2) - (5)].ttype));
+		  register tree value2 = check_case_value ((yyvsp[(4) - (5)].ttype));
 		  register tree label
 		    = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);
 
@@ -4098,11 +5493,13 @@ case 376:
 		      else if (success == 5)
 			error ("case label within scope of cleanup or variable array");
 		    }
-		  position_after_white_space (); ;
-    break;}
-case 377:
+		  position_after_white_space (); }
+    break;
+
+  case 378:
+/* Line 1792 of yacc.c  */
 #line 2129 "objc-parse.y"
-{
+    {
 		  tree duplicate;
 		  register tree label
 		    = build_decl (LABEL_DECL, NULL_TREE, NULL_TREE);
@@ -4115,90 +5512,122 @@ case 377:
 		      error ("multiple default labels in one switch");
 		      error_with_decl (duplicate, "this is the first default label");
 		    }
-		  position_after_white_space (); ;
-    break;}
-case 378:
+		  position_after_white_space (); }
+    break;
+
+  case 379:
+/* Line 1792 of yacc.c  */
 #line 2144 "objc-parse.y"
-{ tree label = define_label (input_filename, lineno, yyvsp[-2].ttype);
+    { tree label = define_label (input_filename, lineno, (yyvsp[(1) - (3)].ttype));
 		  stmt_count++;
 		  emit_nop ();
 		  if (label)
 		    {
 		      expand_label (label);
-		      decl_attributes (label, yyvsp[0].ttype, NULL_TREE);
+		      decl_attributes (label, (yyvsp[(3) - (3)].ttype), NULL_TREE);
 		    }
-		  position_after_white_space (); ;
-    break;}
-case 379:
+		  position_after_white_space (); }
+    break;
+
+  case 380:
+/* Line 1792 of yacc.c  */
 #line 2159 "objc-parse.y"
-{ emit_line_note (input_filename, lineno);
-		  yyval.ttype = NULL_TREE; ;
-    break;}
-case 380:
+    { emit_line_note (input_filename, lineno);
+		  (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 381:
+/* Line 1792 of yacc.c  */
 #line 2162 "objc-parse.y"
-{ emit_line_note (input_filename, lineno); ;
-    break;}
-case 381:
+    { emit_line_note (input_filename, lineno); }
+    break;
+
+  case 382:
+/* Line 1792 of yacc.c  */
 #line 2167 "objc-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 383:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 384:
+/* Line 1792 of yacc.c  */
 #line 2174 "objc-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 386:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 387:
+/* Line 1792 of yacc.c  */
 #line 2181 "objc-parse.y"
-{ yyval.ttype = chainon (yyvsp[-2].ttype, yyvsp[0].ttype); ;
-    break;}
-case 387:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 388:
+/* Line 1792 of yacc.c  */
 #line 2186 "objc-parse.y"
-{ yyval.ttype = build_tree_list (yyvsp[-3].ttype, yyvsp[-1].ttype); ;
-    break;}
-case 388:
+    { (yyval.ttype) = build_tree_list ((yyvsp[(1) - (4)].ttype), (yyvsp[(3) - (4)].ttype)); }
+    break;
+
+  case 389:
+/* Line 1792 of yacc.c  */
 #line 2191 "objc-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, combine_strings (yyvsp[0].ttype), NULL_TREE); ;
-    break;}
-case 389:
+    { (yyval.ttype) = tree_cons (NULL_TREE, combine_strings ((yyvsp[(1) - (1)].ttype)), NULL_TREE); }
+    break;
+
+  case 390:
+/* Line 1792 of yacc.c  */
 #line 2193 "objc-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, combine_strings (yyvsp[0].ttype), yyvsp[-2].ttype); ;
-    break;}
-case 390:
+    { (yyval.ttype) = tree_cons (NULL_TREE, combine_strings ((yyvsp[(3) - (3)].ttype)), (yyvsp[(1) - (3)].ttype)); }
+    break;
+
+  case 391:
+/* Line 1792 of yacc.c  */
 #line 2199 "objc-parse.y"
-{ pushlevel (0);
+    { pushlevel (0);
 		  clear_parm_order ();
-		  declare_parm_level (0); ;
-    break;}
-case 391:
+		  declare_parm_level (0); }
+    break;
+
+  case 392:
+/* Line 1792 of yacc.c  */
 #line 2203 "objc-parse.y"
-{ yyval.ttype = yyvsp[0].ttype;
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype);
 		  parmlist_tags_warning ();
-		  poplevel (0, 0, 0); ;
-    break;}
-case 393:
+		  poplevel (0, 0, 0); }
+    break;
+
+  case 394:
+/* Line 1792 of yacc.c  */
 #line 2211 "objc-parse.y"
-{ tree parm;
+    { tree parm;
 		  if (pedantic)
 		    pedwarn ("ANSI C forbids forward parameter declarations");
 		  /* Mark the forward decls as such.  */
 		  for (parm = getdecls (); parm; parm = TREE_CHAIN (parm))
 		    TREE_ASM_WRITTEN (parm) = 1;
-		  clear_parm_order (); ;
-    break;}
-case 394:
+		  clear_parm_order (); }
+    break;
+
+  case 395:
+/* Line 1792 of yacc.c  */
 #line 2219 "objc-parse.y"
-{ yyval.ttype = yyvsp[0].ttype; ;
-    break;}
-case 395:
+    { (yyval.ttype) = (yyvsp[(4) - (4)].ttype); }
+    break;
+
+  case 396:
+/* Line 1792 of yacc.c  */
 #line 2221 "objc-parse.y"
-{ yyval.ttype = tree_cons (NULL_TREE, NULL_TREE, NULL_TREE); ;
-    break;}
-case 396:
+    { (yyval.ttype) = tree_cons (NULL_TREE, NULL_TREE, NULL_TREE); }
+    break;
+
+  case 397:
+/* Line 1792 of yacc.c  */
 #line 2227 "objc-parse.y"
-{ yyval.ttype = get_parm_info (0); ;
-    break;}
-case 397:
+    { (yyval.ttype) = get_parm_info (0); }
+    break;
+
+  case 398:
+/* Line 1792 of yacc.c  */
 #line 2229 "objc-parse.y"
-{ yyval.ttype = get_parm_info (0);
+    { (yyval.ttype) = get_parm_info (0);
 		  /* Gcc used to allow this as an extension.  However, it does
 		     not work for all targets, and thus has been disabled.
 		     Also, since func (...) and func () are indistinguishable,
@@ -4206,123 +5635,159 @@ case 397:
 		     tries to verify that BUILT_IN_NEXT_ARG is being used
 		     correctly.  */
 		  error ("ANSI C requires a named argument before `...'");
-		;
-    break;}
-case 398:
+		}
+    break;
+
+  case 399:
+/* Line 1792 of yacc.c  */
 #line 2239 "objc-parse.y"
-{ yyval.ttype = get_parm_info (1); ;
-    break;}
-case 399:
+    { (yyval.ttype) = get_parm_info (1); }
+    break;
+
+  case 400:
+/* Line 1792 of yacc.c  */
 #line 2241 "objc-parse.y"
-{ yyval.ttype = get_parm_info (0); ;
-    break;}
-case 400:
+    { (yyval.ttype) = get_parm_info (0); }
+    break;
+
+  case 401:
+/* Line 1792 of yacc.c  */
 #line 2246 "objc-parse.y"
-{ push_parm_decl (yyvsp[0].ttype); ;
-    break;}
-case 401:
+    { push_parm_decl ((yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 402:
+/* Line 1792 of yacc.c  */
 #line 2248 "objc-parse.y"
-{ push_parm_decl (yyvsp[0].ttype); ;
-    break;}
-case 402:
+    { push_parm_decl ((yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 403:
+/* Line 1792 of yacc.c  */
 #line 2255 "objc-parse.y"
-{ yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
-							 yyvsp[-1].ttype),
+    { (yyval.ttype) = build_tree_list (build_tree_list (current_declspecs,
+							 (yyvsp[(3) - (4)].ttype)),
 					build_tree_list (prefix_attributes,
-							 yyvsp[0].ttype));
+							 (yyvsp[(4) - (4)].ttype)));
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 403:
+		  resume_momentary ((yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 404:
+/* Line 1792 of yacc.c  */
 #line 2264 "objc-parse.y"
-{ yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
-							 yyvsp[-1].ttype),
+    { (yyval.ttype) = build_tree_list (build_tree_list (current_declspecs,
+							 (yyvsp[(3) - (4)].ttype)),
 					build_tree_list (prefix_attributes,
-							 yyvsp[0].ttype)); 
+							 (yyvsp[(4) - (4)].ttype))); 
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 404:
+		  resume_momentary ((yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 405:
+/* Line 1792 of yacc.c  */
 #line 2273 "objc-parse.y"
-{ yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
-							 yyvsp[-1].ttype),
+    { (yyval.ttype) = build_tree_list (build_tree_list (current_declspecs,
+							 (yyvsp[(3) - (4)].ttype)),
 					build_tree_list (prefix_attributes,
-							 yyvsp[0].ttype));
+							 (yyvsp[(4) - (4)].ttype)));
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 405:
+		  resume_momentary ((yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 406:
+/* Line 1792 of yacc.c  */
 #line 2282 "objc-parse.y"
-{ yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
-							 yyvsp[-1].ttype),
+    { (yyval.ttype) = build_tree_list (build_tree_list (current_declspecs,
+							 (yyvsp[(3) - (4)].ttype)),
 					build_tree_list (prefix_attributes,
-							 yyvsp[0].ttype));
+							 (yyvsp[(4) - (4)].ttype)));
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype);  ;
-    break;}
-case 406:
+		  resume_momentary ((yyvsp[(2) - (4)].itype));  }
+    break;
+
+  case 407:
+/* Line 1792 of yacc.c  */
 #line 2292 "objc-parse.y"
-{ yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
-							 yyvsp[-1].ttype),
+    { (yyval.ttype) = build_tree_list (build_tree_list (current_declspecs,
+							 (yyvsp[(3) - (4)].ttype)),
 					build_tree_list (prefix_attributes,
-							 yyvsp[0].ttype));
+							 (yyvsp[(4) - (4)].ttype)));
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype);  ;
-    break;}
-case 407:
+		  resume_momentary ((yyvsp[(2) - (4)].itype));  }
+    break;
+
+  case 408:
+/* Line 1792 of yacc.c  */
 #line 2306 "objc-parse.y"
-{ pushlevel (0);
+    { pushlevel (0);
 		  clear_parm_order ();
-		  declare_parm_level (1); ;
-    break;}
-case 408:
+		  declare_parm_level (1); }
+    break;
+
+  case 409:
+/* Line 1792 of yacc.c  */
 #line 2310 "objc-parse.y"
-{ yyval.ttype = yyvsp[0].ttype;
+    { (yyval.ttype) = (yyvsp[(2) - (2)].ttype);
 		  parmlist_tags_warning ();
-		  poplevel (0, 0, 0); ;
-    break;}
-case 410:
+		  poplevel (0, 0, 0); }
+    break;
+
+  case 411:
+/* Line 1792 of yacc.c  */
 #line 2318 "objc-parse.y"
-{ tree t;
-		  for (t = yyvsp[-1].ttype; t; t = TREE_CHAIN (t))
+    { tree t;
+		  for (t = (yyvsp[(1) - (2)].ttype); t; t = TREE_CHAIN (t))
 		    if (TREE_VALUE (t) == NULL_TREE)
 		      error ("`...' in old-style identifier list");
-		  yyval.ttype = tree_cons (NULL_TREE, NULL_TREE, yyvsp[-1].ttype); ;
-    break;}
-case 411:
+		  (yyval.ttype) = tree_cons (NULL_TREE, NULL_TREE, (yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 412:
+/* Line 1792 of yacc.c  */
 #line 2328 "objc-parse.y"
-{ yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;
-    break;}
-case 412:
+    { (yyval.ttype) = build_tree_list (NULL_TREE, (yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 413:
+/* Line 1792 of yacc.c  */
 #line 2330 "objc-parse.y"
-{ yyval.ttype = chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;
-    break;}
-case 413:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (3)].ttype), build_tree_list (NULL_TREE, (yyvsp[(3) - (3)].ttype))); }
+    break;
+
+  case 414:
+/* Line 1792 of yacc.c  */
 #line 2336 "objc-parse.y"
-{ yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;
-    break;}
-case 414:
+    { (yyval.ttype) = build_tree_list (NULL_TREE, (yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 415:
+/* Line 1792 of yacc.c  */
 #line 2338 "objc-parse.y"
-{ yyval.ttype = chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;
-    break;}
-case 415:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (3)].ttype), build_tree_list (NULL_TREE, (yyvsp[(3) - (3)].ttype))); }
+    break;
+
+  case 416:
+/* Line 1792 of yacc.c  */
 #line 2343 "objc-parse.y"
-{ yyval.itype = pedantic;
-		  pedantic = 0; ;
-    break;}
-case 421:
+    { (yyval.itype) = pedantic;
+		  pedantic = 0; }
+    break;
+
+  case 422:
+/* Line 1792 of yacc.c  */
 #line 2356 "objc-parse.y"
-{
+    {
 		  if (objc_implementation_context)
                     {
 		      finish_class (objc_implementation_context);
@@ -4331,865 +5796,1116 @@ case 421:
 		    }
 		  else
 		    warning ("`@end' must appear in an implementation context");
-		;
-    break;}
-case 422:
+		}
+    break;
+
+  case 423:
+/* Line 1792 of yacc.c  */
 #line 2371 "objc-parse.y"
-{ yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype); ;
-    break;}
-case 423:
+    { (yyval.ttype) = build_tree_list (NULL_TREE, (yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 424:
+/* Line 1792 of yacc.c  */
 #line 2373 "objc-parse.y"
-{ yyval.ttype = chainon (yyvsp[-2].ttype, build_tree_list (NULL_TREE, yyvsp[0].ttype)); ;
-    break;}
-case 424:
+    { (yyval.ttype) = chainon ((yyvsp[(1) - (3)].ttype), build_tree_list (NULL_TREE, (yyvsp[(3) - (3)].ttype))); }
+    break;
+
+  case 425:
+/* Line 1792 of yacc.c  */
 #line 2378 "objc-parse.y"
-{
-		  objc_declare_class (yyvsp[-1].ttype);
-		;
-    break;}
-case 425:
+    {
+		  objc_declare_class ((yyvsp[(2) - (3)].ttype));
+		}
+    break;
+
+  case 426:
+/* Line 1792 of yacc.c  */
 #line 2384 "objc-parse.y"
-{
-		  objc_declare_alias (yyvsp[-2].ttype, yyvsp[-1].ttype);
-		;
-    break;}
-case 426:
+    {
+		  objc_declare_alias ((yyvsp[(2) - (4)].ttype), (yyvsp[(3) - (4)].ttype));
+		}
+    break;
+
+  case 427:
+/* Line 1792 of yacc.c  */
 #line 2390 "objc-parse.y"
-{
+    {
 		  objc_interface_context = objc_ivar_context
-		    = start_class (CLASS_INTERFACE_TYPE, yyvsp[-2].ttype, NULL_TREE, yyvsp[-1].ttype);
+		    = start_class (CLASS_INTERFACE_TYPE, (yyvsp[(2) - (4)].ttype), NULL_TREE, (yyvsp[(3) - (4)].ttype));
                   objc_public_flag = 0;
-		;
-    break;}
-case 427:
+		}
+    break;
+
+  case 428:
+/* Line 1792 of yacc.c  */
 #line 2396 "objc-parse.y"
-{
+    {
                   continue_class (objc_interface_context);
-		;
-    break;}
-case 428:
+		}
+    break;
+
+  case 429:
+/* Line 1792 of yacc.c  */
 #line 2401 "objc-parse.y"
-{
+    {
 		  finish_class (objc_interface_context);
 		  objc_interface_context = NULL_TREE;
-		;
-    break;}
-case 429:
+		}
+    break;
+
+  case 430:
+/* Line 1792 of yacc.c  */
 #line 2407 "objc-parse.y"
-{
+    {
 		  objc_interface_context
-		    = start_class (CLASS_INTERFACE_TYPE, yyvsp[-1].ttype, NULL_TREE, yyvsp[0].ttype);
+		    = start_class (CLASS_INTERFACE_TYPE, (yyvsp[(2) - (3)].ttype), NULL_TREE, (yyvsp[(3) - (3)].ttype));
                   continue_class (objc_interface_context);
-		;
-    break;}
-case 430:
+		}
+    break;
+
+  case 431:
+/* Line 1792 of yacc.c  */
 #line 2414 "objc-parse.y"
-{
+    {
 		  finish_class (objc_interface_context);
 		  objc_interface_context = NULL_TREE;
-		;
-    break;}
-case 431:
+		}
+    break;
+
+  case 432:
+/* Line 1792 of yacc.c  */
 #line 2420 "objc-parse.y"
-{
+    {
 		  objc_interface_context = objc_ivar_context
-		    = start_class (CLASS_INTERFACE_TYPE, yyvsp[-4].ttype, yyvsp[-2].ttype, yyvsp[-1].ttype);
+		    = start_class (CLASS_INTERFACE_TYPE, (yyvsp[(2) - (6)].ttype), (yyvsp[(4) - (6)].ttype), (yyvsp[(5) - (6)].ttype));
                   objc_public_flag = 0;
-		;
-    break;}
-case 432:
+		}
+    break;
+
+  case 433:
+/* Line 1792 of yacc.c  */
 #line 2426 "objc-parse.y"
-{
+    {
                   continue_class (objc_interface_context);
-		;
-    break;}
-case 433:
+		}
+    break;
+
+  case 434:
+/* Line 1792 of yacc.c  */
 #line 2431 "objc-parse.y"
-{
+    {
 		  finish_class (objc_interface_context);
 		  objc_interface_context = NULL_TREE;
-		;
-    break;}
-case 434:
+		}
+    break;
+
+  case 435:
+/* Line 1792 of yacc.c  */
 #line 2437 "objc-parse.y"
-{
+    {
 		  objc_interface_context
-		    = start_class (CLASS_INTERFACE_TYPE, yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[0].ttype);
+		    = start_class (CLASS_INTERFACE_TYPE, (yyvsp[(2) - (5)].ttype), (yyvsp[(4) - (5)].ttype), (yyvsp[(5) - (5)].ttype));
                   continue_class (objc_interface_context);
-		;
-    break;}
-case 435:
+		}
+    break;
+
+  case 436:
+/* Line 1792 of yacc.c  */
 #line 2444 "objc-parse.y"
-{
+    {
 		  finish_class (objc_interface_context);
 		  objc_interface_context = NULL_TREE;
-		;
-    break;}
-case 436:
+		}
+    break;
+
+  case 437:
+/* Line 1792 of yacc.c  */
 #line 2450 "objc-parse.y"
-{
+    {
 		  objc_implementation_context = objc_ivar_context
-		    = start_class (CLASS_IMPLEMENTATION_TYPE, yyvsp[-1].ttype, NULL_TREE, NULL_TREE);
+		    = start_class (CLASS_IMPLEMENTATION_TYPE, (yyvsp[(2) - (3)].ttype), NULL_TREE, NULL_TREE);
                   objc_public_flag = 0;
-		;
-    break;}
-case 437:
+		}
+    break;
+
+  case 438:
+/* Line 1792 of yacc.c  */
 #line 2456 "objc-parse.y"
-{
+    {
                   objc_ivar_chain
 		    = continue_class (objc_implementation_context);
-		;
-    break;}
-case 438:
+		}
+    break;
+
+  case 439:
+/* Line 1792 of yacc.c  */
 #line 2462 "objc-parse.y"
-{
+    {
 		  objc_implementation_context
-		    = start_class (CLASS_IMPLEMENTATION_TYPE, yyvsp[0].ttype, NULL_TREE, NULL_TREE);
+		    = start_class (CLASS_IMPLEMENTATION_TYPE, (yyvsp[(2) - (2)].ttype), NULL_TREE, NULL_TREE);
                   objc_ivar_chain
 		    = continue_class (objc_implementation_context);
-		;
-    break;}
-case 439:
+		}
+    break;
+
+  case 440:
+/* Line 1792 of yacc.c  */
 #line 2470 "objc-parse.y"
-{
+    {
 		  objc_implementation_context = objc_ivar_context
-		    = start_class (CLASS_IMPLEMENTATION_TYPE, yyvsp[-3].ttype, yyvsp[-1].ttype, NULL_TREE);
+		    = start_class (CLASS_IMPLEMENTATION_TYPE, (yyvsp[(2) - (5)].ttype), (yyvsp[(4) - (5)].ttype), NULL_TREE);
                   objc_public_flag = 0;
-		;
-    break;}
-case 440:
+		}
+    break;
+
+  case 441:
+/* Line 1792 of yacc.c  */
 #line 2476 "objc-parse.y"
-{
+    {
                   objc_ivar_chain
 		    = continue_class (objc_implementation_context);
-		;
-    break;}
-case 441:
+		}
+    break;
+
+  case 442:
+/* Line 1792 of yacc.c  */
 #line 2482 "objc-parse.y"
-{
+    {
 		  objc_implementation_context
-		    = start_class (CLASS_IMPLEMENTATION_TYPE, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE);
+		    = start_class (CLASS_IMPLEMENTATION_TYPE, (yyvsp[(2) - (4)].ttype), (yyvsp[(4) - (4)].ttype), NULL_TREE);
                   objc_ivar_chain
 		    = continue_class (objc_implementation_context);
-		;
-    break;}
-case 442:
+		}
+    break;
+
+  case 443:
+/* Line 1792 of yacc.c  */
 #line 2490 "objc-parse.y"
-{
+    {
 		  objc_interface_context
-		    = start_class (CATEGORY_INTERFACE_TYPE, yyvsp[-4].ttype, yyvsp[-2].ttype, yyvsp[0].ttype);
+		    = start_class (CATEGORY_INTERFACE_TYPE, (yyvsp[(2) - (6)].ttype), (yyvsp[(4) - (6)].ttype), (yyvsp[(6) - (6)].ttype));
                   continue_class (objc_interface_context);
-		;
-    break;}
-case 443:
+		}
+    break;
+
+  case 444:
+/* Line 1792 of yacc.c  */
 #line 2497 "objc-parse.y"
-{
+    {
 		  finish_class (objc_interface_context);
 		  objc_interface_context = NULL_TREE;
-		;
-    break;}
-case 444:
+		}
+    break;
+
+  case 445:
+/* Line 1792 of yacc.c  */
 #line 2503 "objc-parse.y"
-{
+    {
 		  objc_implementation_context
-		    = start_class (CATEGORY_IMPLEMENTATION_TYPE, yyvsp[-3].ttype, yyvsp[-1].ttype, NULL_TREE);
+		    = start_class (CATEGORY_IMPLEMENTATION_TYPE, (yyvsp[(2) - (5)].ttype), (yyvsp[(4) - (5)].ttype), NULL_TREE);
                   objc_ivar_chain
 		    = continue_class (objc_implementation_context);
-		;
-    break;}
-case 445:
+		}
+    break;
+
+  case 446:
+/* Line 1792 of yacc.c  */
 #line 2513 "objc-parse.y"
-{
+    {
 		  remember_protocol_qualifiers ();
 		  objc_interface_context
-		    = start_protocol(PROTOCOL_INTERFACE_TYPE, yyvsp[-1].ttype, yyvsp[0].ttype);
-		;
-    break;}
-case 446:
+		    = start_protocol(PROTOCOL_INTERFACE_TYPE, (yyvsp[(2) - (3)].ttype), (yyvsp[(3) - (3)].ttype));
+		}
+    break;
+
+  case 447:
+/* Line 1792 of yacc.c  */
 #line 2519 "objc-parse.y"
-{
+    {
 		  forget_protocol_qualifiers();
 		  finish_protocol(objc_interface_context);
 		  objc_interface_context = NULL_TREE;
-		;
-    break;}
-case 447:
+		}
+    break;
+
+  case 448:
+/* Line 1792 of yacc.c  */
 #line 2528 "objc-parse.y"
-{
-		  yyval.ttype = NULL_TREE;
-		;
-    break;}
-case 449:
+    {
+		  (yyval.ttype) = NULL_TREE;
+		}
+    break;
+
+  case 450:
+/* Line 1792 of yacc.c  */
 #line 2536 "objc-parse.y"
-{
-		  if (yyvsp[-2].code == LT_EXPR && yyvsp[0].code == GT_EXPR)
-		    yyval.ttype = yyvsp[-1].ttype;
+    {
+		  if ((yyvsp[(1) - (3)].code) == LT_EXPR && (yyvsp[(3) - (3)].code) == GT_EXPR)
+		    (yyval.ttype) = (yyvsp[(2) - (3)].ttype);
 		  else
 		    YYERROR1;
-		;
-    break;}
-case 452:
+		}
+    break;
+
+  case 453:
+/* Line 1792 of yacc.c  */
 #line 2550 "objc-parse.y"
-{ objc_public_flag = 2; ;
-    break;}
-case 453:
+    { objc_public_flag = 2; }
+    break;
+
+  case 454:
+/* Line 1792 of yacc.c  */
 #line 2551 "objc-parse.y"
-{ objc_public_flag = 0; ;
-    break;}
-case 454:
+    { objc_public_flag = 0; }
+    break;
+
+  case 455:
+/* Line 1792 of yacc.c  */
 #line 2552 "objc-parse.y"
-{ objc_public_flag = 1; ;
-    break;}
-case 455:
+    { objc_public_flag = 1; }
+    break;
+
+  case 456:
+/* Line 1792 of yacc.c  */
 #line 2557 "objc-parse.y"
-{
-                  yyval.ttype = NULL_TREE;
-                ;
-    break;}
-case 457:
+    {
+                  (yyval.ttype) = NULL_TREE;
+                }
+    break;
+
+  case 458:
+/* Line 1792 of yacc.c  */
 #line 2562 "objc-parse.y"
-{
+    {
                   if (pedantic)
 		    pedwarn ("extra semicolon in struct or union specified");
-                ;
-    break;}
-case 458:
+                }
+    break;
+
+  case 459:
+/* Line 1792 of yacc.c  */
 #line 2580 "objc-parse.y"
-{ yyval.ttype = yyvsp[0].ttype;
+    { (yyval.ttype) = (yyvsp[(3) - (3)].ttype);
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-1].itype); ;
-    break;}
-case 459:
+		  resume_momentary ((yyvsp[(2) - (3)].itype)); }
+    break;
+
+  case 460:
+/* Line 1792 of yacc.c  */
 #line 2586 "objc-parse.y"
-{ yyval.ttype = yyvsp[0].ttype;
+    { (yyval.ttype) = (yyvsp[(3) - (3)].ttype);
 		  current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-1].itype); ;
-    break;}
-case 460:
+		  resume_momentary ((yyvsp[(2) - (3)].itype)); }
+    break;
+
+  case 461:
+/* Line 1792 of yacc.c  */
 #line 2592 "objc-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 461:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 462:
+/* Line 1792 of yacc.c  */
 #line 2597 "objc-parse.y"
-{ yyval.ttype = NULL_TREE; ;
-    break;}
-case 464:
+    { (yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 465:
+/* Line 1792 of yacc.c  */
 #line 2604 "objc-parse.y"
-{
-		  yyval.ttype = add_instance_variable (objc_ivar_context,
+    {
+		  (yyval.ttype) = add_instance_variable (objc_ivar_context,
 					      objc_public_flag,
-					      yyvsp[0].ttype, current_declspecs,
+					      (yyvsp[(1) - (1)].ttype), current_declspecs,
 					      NULL_TREE);
-                ;
-    break;}
-case 465:
+                }
+    break;
+
+  case 466:
+/* Line 1792 of yacc.c  */
 #line 2611 "objc-parse.y"
-{
-		  yyval.ttype = add_instance_variable (objc_ivar_context,
+    {
+		  (yyval.ttype) = add_instance_variable (objc_ivar_context,
 					      objc_public_flag,
-					      yyvsp[-2].ttype, current_declspecs, yyvsp[0].ttype);
-                ;
-    break;}
-case 466:
+					      (yyvsp[(1) - (3)].ttype), current_declspecs, (yyvsp[(3) - (3)].ttype));
+                }
+    break;
+
+  case 467:
+/* Line 1792 of yacc.c  */
 #line 2617 "objc-parse.y"
-{
-		  yyval.ttype = add_instance_variable (objc_ivar_context,
+    {
+		  (yyval.ttype) = add_instance_variable (objc_ivar_context,
 					      objc_public_flag,
 					      NULL_TREE,
-					      current_declspecs, yyvsp[0].ttype);
-                ;
-    break;}
-case 467:
+					      current_declspecs, (yyvsp[(2) - (2)].ttype));
+                }
+    break;
+
+  case 468:
+/* Line 1792 of yacc.c  */
 #line 2627 "objc-parse.y"
-{
+    {
 		  remember_protocol_qualifiers ();
 		  if (objc_implementation_context)
 		    objc_inherit_code = CLASS_METHOD_DECL;
                   else
 		    fatal ("method definition not in class context");
-		;
-    break;}
-case 468:
+		}
+    break;
+
+  case 469:
+/* Line 1792 of yacc.c  */
 #line 2635 "objc-parse.y"
-{
+    {
 		  forget_protocol_qualifiers ();
-		  add_class_method (objc_implementation_context, yyvsp[0].ttype);
-		  start_method_def (yyvsp[0].ttype);
-		  objc_method_context = yyvsp[0].ttype;
-		;
-    break;}
-case 469:
+		  add_class_method (objc_implementation_context, (yyvsp[(3) - (3)].ttype));
+		  start_method_def ((yyvsp[(3) - (3)].ttype));
+		  objc_method_context = (yyvsp[(3) - (3)].ttype);
+		}
+    break;
+
+  case 470:
+/* Line 1792 of yacc.c  */
 #line 2642 "objc-parse.y"
-{
+    {
 		  continue_method_def ();
-		;
-    break;}
-case 470:
+		}
+    break;
+
+  case 471:
+/* Line 1792 of yacc.c  */
 #line 2646 "objc-parse.y"
-{
+    {
 		  finish_method_def ();
 		  objc_method_context = NULL_TREE;
-		;
-    break;}
-case 471:
+		}
+    break;
+
+  case 472:
+/* Line 1792 of yacc.c  */
 #line 2652 "objc-parse.y"
-{
+    {
 		  remember_protocol_qualifiers ();
 		  if (objc_implementation_context)
 		    objc_inherit_code = INSTANCE_METHOD_DECL;
                   else
 		    fatal ("method definition not in class context");
-		;
-    break;}
-case 472:
+		}
+    break;
+
+  case 473:
+/* Line 1792 of yacc.c  */
 #line 2660 "objc-parse.y"
-{
+    {
 		  forget_protocol_qualifiers ();
-		  add_instance_method (objc_implementation_context, yyvsp[0].ttype);
-		  start_method_def (yyvsp[0].ttype);
-		  objc_method_context = yyvsp[0].ttype;
-		;
-    break;}
-case 473:
+		  add_instance_method (objc_implementation_context, (yyvsp[(3) - (3)].ttype));
+		  start_method_def ((yyvsp[(3) - (3)].ttype));
+		  objc_method_context = (yyvsp[(3) - (3)].ttype);
+		}
+    break;
+
+  case 474:
+/* Line 1792 of yacc.c  */
 #line 2667 "objc-parse.y"
-{
+    {
 		  continue_method_def ();
-		;
-    break;}
-case 474:
+		}
+    break;
+
+  case 475:
+/* Line 1792 of yacc.c  */
 #line 2671 "objc-parse.y"
-{
+    {
 		  finish_method_def ();
 		  objc_method_context = NULL_TREE;
-		;
-    break;}
-case 476:
+		}
+    break;
+
+  case 477:
+/* Line 1792 of yacc.c  */
 #line 2683 "objc-parse.y"
-{yyval.ttype = NULL_TREE; ;
-    break;}
-case 481:
+    {(yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 482:
+/* Line 1792 of yacc.c  */
 #line 2690 "objc-parse.y"
-{yyval.ttype = NULL_TREE; ;
-    break;}
-case 485:
+    {(yyval.ttype) = NULL_TREE; }
+    break;
+
+  case 486:
+/* Line 1792 of yacc.c  */
 #line 2700 "objc-parse.y"
-{
+    {
 		  /* Remember protocol qualifiers in prototypes.  */
 		  remember_protocol_qualifiers ();
 		  objc_inherit_code = CLASS_METHOD_DECL;
-		;
-    break;}
-case 486:
+		}
+    break;
+
+  case 487:
+/* Line 1792 of yacc.c  */
 #line 2706 "objc-parse.y"
-{
+    {
 		  /* Forget protocol qualifiers here.  */
 		  forget_protocol_qualifiers ();
-		  add_class_method (objc_interface_context, yyvsp[0].ttype);
-		;
-    break;}
-case 488:
+		  add_class_method (objc_interface_context, (yyvsp[(3) - (3)].ttype));
+		}
+    break;
+
+  case 489:
+/* Line 1792 of yacc.c  */
 #line 2714 "objc-parse.y"
-{
+    {
 		  /* Remember protocol qualifiers in prototypes.  */
 		  remember_protocol_qualifiers ();
 		  objc_inherit_code = INSTANCE_METHOD_DECL;
-		;
-    break;}
-case 489:
+		}
+    break;
+
+  case 490:
+/* Line 1792 of yacc.c  */
 #line 2720 "objc-parse.y"
-{
+    {
 		  /* Forget protocol qualifiers here.  */
 		  forget_protocol_qualifiers ();
-		  add_instance_method (objc_interface_context, yyvsp[0].ttype);
-		;
-    break;}
-case 491:
+		  add_instance_method (objc_interface_context, (yyvsp[(3) - (3)].ttype));
+		}
+    break;
+
+  case 492:
+/* Line 1792 of yacc.c  */
 #line 2730 "objc-parse.y"
-{
-		  yyval.ttype = build_method_decl (objc_inherit_code, yyvsp[-2].ttype, yyvsp[0].ttype, NULL_TREE);
-		;
-    break;}
-case 492:
+    {
+		  (yyval.ttype) = build_method_decl (objc_inherit_code, (yyvsp[(2) - (4)].ttype), (yyvsp[(4) - (4)].ttype), NULL_TREE);
+		}
+    break;
+
+  case 493:
+/* Line 1792 of yacc.c  */
 #line 2735 "objc-parse.y"
-{
-		  yyval.ttype = build_method_decl (objc_inherit_code, NULL_TREE, yyvsp[0].ttype, NULL_TREE);
-		;
-    break;}
-case 493:
+    {
+		  (yyval.ttype) = build_method_decl (objc_inherit_code, NULL_TREE, (yyvsp[(1) - (1)].ttype), NULL_TREE);
+		}
+    break;
+
+  case 494:
+/* Line 1792 of yacc.c  */
 #line 2740 "objc-parse.y"
-{
-		  yyval.ttype = build_method_decl (objc_inherit_code, yyvsp[-3].ttype, yyvsp[-1].ttype, yyvsp[0].ttype);
-		;
-    break;}
-case 494:
+    {
+		  (yyval.ttype) = build_method_decl (objc_inherit_code, (yyvsp[(2) - (5)].ttype), (yyvsp[(4) - (5)].ttype), (yyvsp[(5) - (5)].ttype));
+		}
+    break;
+
+  case 495:
+/* Line 1792 of yacc.c  */
 #line 2745 "objc-parse.y"
-{
-		  yyval.ttype = build_method_decl (objc_inherit_code, NULL_TREE, yyvsp[-1].ttype, yyvsp[0].ttype);
-		;
-    break;}
-case 503:
+    {
+		  (yyval.ttype) = build_method_decl (objc_inherit_code, NULL_TREE, (yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype));
+		}
+    break;
+
+  case 504:
+/* Line 1792 of yacc.c  */
 #line 2775 "objc-parse.y"
-{ current_declspecs = TREE_VALUE (declspec_stack);
+    { current_declspecs = TREE_VALUE (declspec_stack);
 		  prefix_attributes = TREE_PURPOSE (declspec_stack);
 		  declspec_stack = TREE_CHAIN (declspec_stack);
-		  resume_momentary (yyvsp[-2].itype); ;
-    break;}
-case 504:
+		  resume_momentary ((yyvsp[(2) - (4)].itype)); }
+    break;
+
+  case 505:
+/* Line 1792 of yacc.c  */
 #line 2780 "objc-parse.y"
-{ shadow_tag (yyvsp[-1].ttype); ;
-    break;}
-case 505:
+    { shadow_tag ((yyvsp[(1) - (2)].ttype)); }
+    break;
+
+  case 506:
+/* Line 1792 of yacc.c  */
 #line 2782 "objc-parse.y"
-{ pedwarn ("empty declaration"); ;
-    break;}
-case 506:
+    { pedwarn ("empty declaration"); }
+    break;
+
+  case 507:
+/* Line 1792 of yacc.c  */
 #line 2787 "objc-parse.y"
-{ push_parm_decl (yyvsp[0].ttype); ;
-    break;}
-case 507:
+    { push_parm_decl ((yyvsp[(1) - (1)].ttype)); }
+    break;
+
+  case 508:
+/* Line 1792 of yacc.c  */
 #line 2789 "objc-parse.y"
-{ push_parm_decl (yyvsp[0].ttype); ;
-    break;}
-case 508:
+    { push_parm_decl ((yyvsp[(3) - (3)].ttype)); }
+    break;
+
+  case 509:
+/* Line 1792 of yacc.c  */
 #line 2797 "objc-parse.y"
-{ yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
-							 yyvsp[-1].ttype),
+    { (yyval.ttype) = build_tree_list (build_tree_list (current_declspecs,
+							 (yyvsp[(1) - (2)].ttype)),
 					build_tree_list (prefix_attributes,
-							 yyvsp[0].ttype)); ;
-    break;}
-case 509:
+							 (yyvsp[(2) - (2)].ttype))); }
+    break;
+
+  case 510:
+/* Line 1792 of yacc.c  */
 #line 2802 "objc-parse.y"
-{ yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
-							 yyvsp[-1].ttype),
+    { (yyval.ttype) = build_tree_list (build_tree_list (current_declspecs,
+							 (yyvsp[(1) - (2)].ttype)),
 					build_tree_list (prefix_attributes,
-							 yyvsp[0].ttype)); ;
-    break;}
-case 510:
+							 (yyvsp[(2) - (2)].ttype))); }
+    break;
+
+  case 511:
+/* Line 1792 of yacc.c  */
 #line 2807 "objc-parse.y"
-{ yyval.ttype = build_tree_list (build_tree_list (current_declspecs,
-							 yyvsp[-1].ttype),
+    { (yyval.ttype) = build_tree_list (build_tree_list (current_declspecs,
+							 (yyvsp[(1) - (2)].ttype)),
 					build_tree_list (prefix_attributes,
-							 yyvsp[0].ttype)); ;
-    break;}
-case 511:
+							 (yyvsp[(2) - (2)].ttype))); }
+    break;
+
+  case 512:
+/* Line 1792 of yacc.c  */
 #line 2815 "objc-parse.y"
-{
-	    	  yyval.ttype = NULL_TREE;
-		;
-    break;}
-case 512:
+    {
+	    	  (yyval.ttype) = NULL_TREE;
+		}
+    break;
+
+  case 513:
+/* Line 1792 of yacc.c  */
 #line 2819 "objc-parse.y"
-{
+    {
 		  /* oh what a kludge! */
-		  yyval.ttype = (tree)1;
-		;
-    break;}
-case 513:
+		  (yyval.ttype) = (tree)1;
+		}
+    break;
+
+  case 514:
+/* Line 1792 of yacc.c  */
 #line 2824 "objc-parse.y"
-{
+    {
 		  pushlevel (0);
-		;
-    break;}
-case 514:
+		}
+    break;
+
+  case 515:
+/* Line 1792 of yacc.c  */
 #line 2828 "objc-parse.y"
-{
+    {
 	  	  /* returns a tree list node generated by get_parm_info */
-		  yyval.ttype = yyvsp[0].ttype;
+		  (yyval.ttype) = (yyvsp[(3) - (3)].ttype);
 		  poplevel (0, 0, 0);
-		;
-    break;}
-case 517:
+		}
+    break;
+
+  case 518:
+/* Line 1792 of yacc.c  */
 #line 2843 "objc-parse.y"
-{
-		  yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype);
-		;
-    break;}
-case 522:
+    {
+		  (yyval.ttype) = chainon ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype));
+		}
+    break;
+
+  case 523:
+/* Line 1792 of yacc.c  */
 #line 2856 "objc-parse.y"
-{ yyval.ttype = get_identifier (token_buffer); ;
-    break;}
-case 523:
+    { (yyval.ttype) = get_identifier (token_buffer); }
+    break;
+
+  case 524:
+/* Line 1792 of yacc.c  */
 #line 2857 "objc-parse.y"
-{ yyval.ttype = get_identifier (token_buffer); ;
-    break;}
-case 524:
+    { (yyval.ttype) = get_identifier (token_buffer); }
+    break;
+
+  case 525:
+/* Line 1792 of yacc.c  */
 #line 2858 "objc-parse.y"
-{ yyval.ttype = get_identifier (token_buffer); ;
-    break;}
-case 525:
+    { (yyval.ttype) = get_identifier (token_buffer); }
+    break;
+
+  case 526:
+/* Line 1792 of yacc.c  */
 #line 2859 "objc-parse.y"
-{ yyval.ttype = get_identifier (token_buffer); ;
-    break;}
-case 526:
+    { (yyval.ttype) = get_identifier (token_buffer); }
+    break;
+
+  case 527:
+/* Line 1792 of yacc.c  */
 #line 2860 "objc-parse.y"
-{ yyval.ttype = get_identifier (token_buffer); ;
-    break;}
-case 527:
+    { (yyval.ttype) = get_identifier (token_buffer); }
+    break;
+
+  case 528:
+/* Line 1792 of yacc.c  */
 #line 2861 "objc-parse.y"
-{ yyval.ttype = get_identifier (token_buffer); ;
-    break;}
-case 528:
+    { (yyval.ttype) = get_identifier (token_buffer); }
+    break;
+
+  case 529:
+/* Line 1792 of yacc.c  */
 #line 2862 "objc-parse.y"
-{ yyval.ttype = get_identifier (token_buffer); ;
-    break;}
-case 529:
+    { (yyval.ttype) = get_identifier (token_buffer); }
+    break;
+
+  case 530:
+/* Line 1792 of yacc.c  */
 #line 2863 "objc-parse.y"
-{ yyval.ttype = get_identifier (token_buffer); ;
-    break;}
-case 530:
+    { (yyval.ttype) = get_identifier (token_buffer); }
+    break;
+
+  case 531:
+/* Line 1792 of yacc.c  */
 #line 2864 "objc-parse.y"
-{ yyval.ttype = get_identifier (token_buffer); ;
-    break;}
-case 531:
+    { (yyval.ttype) = get_identifier (token_buffer); }
+    break;
+
+  case 532:
+/* Line 1792 of yacc.c  */
 #line 2865 "objc-parse.y"
-{ yyval.ttype = get_identifier (token_buffer); ;
-    break;}
-case 532:
+    { (yyval.ttype) = get_identifier (token_buffer); }
+    break;
+
+  case 533:
+/* Line 1792 of yacc.c  */
 #line 2866 "objc-parse.y"
-{ yyval.ttype = get_identifier (token_buffer); ;
-    break;}
-case 533:
+    { (yyval.ttype) = get_identifier (token_buffer); }
+    break;
+
+  case 534:
+/* Line 1792 of yacc.c  */
 #line 2867 "objc-parse.y"
-{ yyval.ttype = get_identifier (token_buffer); ;
-    break;}
-case 534:
+    { (yyval.ttype) = get_identifier (token_buffer); }
+    break;
+
+  case 535:
+/* Line 1792 of yacc.c  */
 #line 2868 "objc-parse.y"
-{ yyval.ttype = get_identifier (token_buffer); ;
-    break;}
-case 535:
+    { (yyval.ttype) = get_identifier (token_buffer); }
+    break;
+
+  case 536:
+/* Line 1792 of yacc.c  */
 #line 2869 "objc-parse.y"
-{ yyval.ttype = get_identifier (token_buffer); ;
-    break;}
-case 536:
+    { (yyval.ttype) = get_identifier (token_buffer); }
+    break;
+
+  case 537:
+/* Line 1792 of yacc.c  */
 #line 2870 "objc-parse.y"
-{ yyval.ttype = get_identifier (token_buffer); ;
-    break;}
-case 537:
+    { (yyval.ttype) = get_identifier (token_buffer); }
+    break;
+
+  case 538:
+/* Line 1792 of yacc.c  */
 #line 2871 "objc-parse.y"
-{ yyval.ttype = get_identifier (token_buffer); ;
-    break;}
-case 538:
+    { (yyval.ttype) = get_identifier (token_buffer); }
+    break;
+
+  case 539:
+/* Line 1792 of yacc.c  */
 #line 2872 "objc-parse.y"
-{ yyval.ttype = get_identifier (token_buffer); ;
-    break;}
-case 539:
+    { (yyval.ttype) = get_identifier (token_buffer); }
+    break;
+
+  case 540:
+/* Line 1792 of yacc.c  */
 #line 2873 "objc-parse.y"
-{ yyval.ttype = get_identifier (token_buffer); ;
-    break;}
-case 540:
+    { (yyval.ttype) = get_identifier (token_buffer); }
+    break;
+
+  case 541:
+/* Line 1792 of yacc.c  */
 #line 2874 "objc-parse.y"
-{ yyval.ttype = get_identifier (token_buffer); ;
-    break;}
-case 543:
+    { (yyval.ttype) = get_identifier (token_buffer); }
+    break;
+
+  case 544:
+/* Line 1792 of yacc.c  */
 #line 2880 "objc-parse.y"
-{
-		  yyval.ttype = build_keyword_decl (yyvsp[-5].ttype, yyvsp[-2].ttype, yyvsp[0].ttype);
-		;
-    break;}
-case 544:
+    {
+		  (yyval.ttype) = build_keyword_decl ((yyvsp[(1) - (6)].ttype), (yyvsp[(4) - (6)].ttype), (yyvsp[(6) - (6)].ttype));
+		}
+    break;
+
+  case 545:
+/* Line 1792 of yacc.c  */
 #line 2885 "objc-parse.y"
-{
-		  yyval.ttype = build_keyword_decl (yyvsp[-2].ttype, NULL_TREE, yyvsp[0].ttype);
-		;
-    break;}
-case 545:
+    {
+		  (yyval.ttype) = build_keyword_decl ((yyvsp[(1) - (3)].ttype), NULL_TREE, (yyvsp[(3) - (3)].ttype));
+		}
+    break;
+
+  case 546:
+/* Line 1792 of yacc.c  */
 #line 2890 "objc-parse.y"
-{
-		  yyval.ttype = build_keyword_decl (NULL_TREE, yyvsp[-2].ttype, yyvsp[0].ttype);
-		;
-    break;}
-case 546:
+    {
+		  (yyval.ttype) = build_keyword_decl (NULL_TREE, (yyvsp[(3) - (5)].ttype), (yyvsp[(5) - (5)].ttype));
+		}
+    break;
+
+  case 547:
+/* Line 1792 of yacc.c  */
 #line 2895 "objc-parse.y"
-{
-		  yyval.ttype = build_keyword_decl (NULL_TREE, NULL_TREE, yyvsp[0].ttype);
-		;
-    break;}
-case 550:
+    {
+		  (yyval.ttype) = build_keyword_decl (NULL_TREE, NULL_TREE, (yyvsp[(2) - (2)].ttype));
+		}
+    break;
+
+  case 551:
+/* Line 1792 of yacc.c  */
 #line 2908 "objc-parse.y"
-{
-		  yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype);
-		;
-    break;}
-case 551:
+    {
+		  (yyval.ttype) = chainon ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype));
+		}
+    break;
+
+  case 552:
+/* Line 1792 of yacc.c  */
 #line 2916 "objc-parse.y"
-{
-		  if (TREE_CHAIN (yyvsp[0].ttype) == NULL_TREE)
+    {
+		  if (TREE_CHAIN ((yyvsp[(1) - (1)].ttype)) == NULL_TREE)
 		    /* just return the expr., remove a level of indirection */
-		    yyval.ttype = TREE_VALUE (yyvsp[0].ttype);
+		    (yyval.ttype) = TREE_VALUE ((yyvsp[(1) - (1)].ttype));
                   else
 		    /* we have a comma expr., we will collapse later */
-		    yyval.ttype = yyvsp[0].ttype;
-		;
-    break;}
-case 552:
+		    (yyval.ttype) = (yyvsp[(1) - (1)].ttype);
+		}
+    break;
+
+  case 553:
+/* Line 1792 of yacc.c  */
 #line 2928 "objc-parse.y"
-{
-		  yyval.ttype = build_tree_list (yyvsp[-2].ttype, yyvsp[0].ttype);
-		;
-    break;}
-case 553:
+    {
+		  (yyval.ttype) = build_tree_list ((yyvsp[(1) - (3)].ttype), (yyvsp[(3) - (3)].ttype));
+		}
+    break;
+
+  case 554:
+/* Line 1792 of yacc.c  */
 #line 2932 "objc-parse.y"
-{
-		  yyval.ttype = build_tree_list (NULL_TREE, yyvsp[0].ttype);
-		;
-    break;}
-case 555:
+    {
+		  (yyval.ttype) = build_tree_list (NULL_TREE, (yyvsp[(2) - (2)].ttype));
+		}
+    break;
+
+  case 556:
+/* Line 1792 of yacc.c  */
 #line 2940 "objc-parse.y"
-{
-		  yyval.ttype = get_class_reference (yyvsp[0].ttype);
-		;
-    break;}
-case 556:
+    {
+		  (yyval.ttype) = get_class_reference ((yyvsp[(1) - (1)].ttype));
+		}
+    break;
+
+  case 557:
+/* Line 1792 of yacc.c  */
 #line 2947 "objc-parse.y"
-{ objc_receiver_context = 1; ;
-    break;}
-case 557:
+    { objc_receiver_context = 1; }
+    break;
+
+  case 558:
+/* Line 1792 of yacc.c  */
 #line 2949 "objc-parse.y"
-{ objc_receiver_context = 0; ;
-    break;}
-case 558:
+    { objc_receiver_context = 0; }
+    break;
+
+  case 559:
+/* Line 1792 of yacc.c  */
 #line 2951 "objc-parse.y"
-{
-		  yyval.ttype = build_tree_list (yyvsp[-3].ttype, yyvsp[-1].ttype);
-		;
-    break;}
-case 562:
+    {
+		  (yyval.ttype) = build_tree_list ((yyvsp[(3) - (6)].ttype), (yyvsp[(5) - (6)].ttype));
+		}
+    break;
+
+  case 563:
+/* Line 1792 of yacc.c  */
 #line 2964 "objc-parse.y"
-{
-		  yyval.ttype = chainon (yyvsp[-1].ttype, yyvsp[0].ttype);
-		;
-    break;}
-case 563:
+    {
+		  (yyval.ttype) = chainon ((yyvsp[(1) - (2)].ttype), (yyvsp[(2) - (2)].ttype));
+		}
+    break;
+
+  case 564:
+/* Line 1792 of yacc.c  */
 #line 2971 "objc-parse.y"
-{
-		  yyval.ttype = build_tree_list (yyvsp[-1].ttype, NULL_TREE);
-		;
-    break;}
-case 564:
+    {
+		  (yyval.ttype) = build_tree_list ((yyvsp[(1) - (2)].ttype), NULL_TREE);
+		}
+    break;
+
+  case 565:
+/* Line 1792 of yacc.c  */
 #line 2975 "objc-parse.y"
-{
-		  yyval.ttype = build_tree_list (NULL_TREE, NULL_TREE);
-		;
-    break;}
-case 565:
+    {
+		  (yyval.ttype) = build_tree_list (NULL_TREE, NULL_TREE);
+		}
+    break;
+
+  case 566:
+/* Line 1792 of yacc.c  */
 #line 2982 "objc-parse.y"
-{
-		  yyval.ttype = yyvsp[-1].ttype;
-		;
-    break;}
-case 566:
+    {
+		  (yyval.ttype) = (yyvsp[(3) - (4)].ttype);
+		}
+    break;
+
+  case 567:
+/* Line 1792 of yacc.c  */
 #line 2989 "objc-parse.y"
-{
-		  yyval.ttype = yyvsp[-1].ttype;
-		;
-    break;}
-case 567:
-#line 2998 "objc-parse.y"
-{
-		  yyval.ttype = groktypename (yyvsp[-1].ttype);
-		;
-    break;}
-}
-   /* the action file gets copied in in place of this dollarsign */
-#line 498 "/usr/lib/bison.simple"
-
-  yyvsp -= yylen;
-  yyssp -= yylen;
-#ifdef YYLSP_NEEDED
-  yylsp -= yylen;
-#endif
+    {
+		  (yyval.ttype) = (yyvsp[(3) - (4)].ttype);
+		}
+    break;
 
-#if YYDEBUG != 0
-  if (yydebug)
+  case 568:
+/* Line 1792 of yacc.c  */
+#line 2998 "objc-parse.y"
     {
-      short *ssp1 = yyss - 1;
-      fprintf (stderr, "state stack now");
-      while (ssp1 != yyssp)
-	fprintf (stderr, " %d", *++ssp1);
-      fprintf (stderr, "\n");
-    }
-#endif
+		  (yyval.ttype) = groktypename ((yyvsp[(3) - (4)].ttype));
+		}
+    break;
 
-  *++yyvsp = yyval;
 
-#ifdef YYLSP_NEEDED
-  yylsp++;
-  if (yylen == 0)
-    {
-      yylsp->first_line = yylloc.first_line;
-      yylsp->first_column = yylloc.first_column;
-      yylsp->last_line = (yylsp-1)->last_line;
-      yylsp->last_column = (yylsp-1)->last_column;
-      yylsp->text = 0;
-    }
-  else
-    {
-      yylsp->last_line = (yylsp+yylen-1)->last_line;
-      yylsp->last_column = (yylsp+yylen-1)->last_column;
+/* Line 1792 of yacc.c  */
+#line 6679 "objc-parse.c"
+      default: break;
     }
-#endif
+  /* User semantic actions sometimes alter yychar, and that requires
+     that yytoken be updated with the new translation.  We take the
+     approach of translating immediately before every use of yytoken.
+     One alternative is translating here after every semantic action,
+     but that translation would be missed if the semantic action invokes
+     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
+     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
+     incorrect destructor might then be invoked immediately.  In the
+     case of YYERROR or YYBACKUP, subsequent parser actions might lead
+     to an incorrect destructor call or verbose syntax error message
+     before the lookahead is translated.  */
+  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
+
+  YYPOPSTACK (yylen);
+  yylen = 0;
+  YY_STACK_PRINT (yyss, yyssp);
+
+  *++yyvsp = yyval;
 
-  /* Now "shift" the result of the reduction.
-     Determine what state that goes to,
-     based on the state we popped back to
-     and the rule number reduced by.  */
+  /* Now `shift' the result of the reduction.  Determine what state
+     that goes to, based on the state we popped back to and the rule
+     number reduced by.  */
 
   yyn = yyr1[yyn];
 
-  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
-  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
+  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
+  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
     yystate = yytable[yystate];
   else
-    yystate = yydefgoto[yyn - YYNTBASE];
+    yystate = yydefgoto[yyn - YYNTOKENS];
 
   goto yynewstate;
 
-yyerrlab:   /* here on detecting error */
 
-  if (! yyerrstatus)
-    /* If not already recovering from an error, report this error.  */
+/*------------------------------------.
+| yyerrlab -- here on detecting error |
+`------------------------------------*/
+yyerrlab:
+  /* Make sure we have latest lookahead translation.  See comments at
+     user semantic actions for why this is necessary.  */
+  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);
+
+  /* If not already recovering from an error, report this error.  */
+  if (!yyerrstatus)
     {
       ++yynerrs;
+#if ! YYERROR_VERBOSE
+      yyerror (YY_("syntax error"));
+#else
+# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
+                                        yyssp, yytoken)
+      {
+        char const *yymsgp = YY_("syntax error");
+        int yysyntax_error_status;
+        yysyntax_error_status = YYSYNTAX_ERROR;
+        if (yysyntax_error_status == 0)
+          yymsgp = yymsg;
+        else if (yysyntax_error_status == 1)
+          {
+            if (yymsg != yymsgbuf)
+              YYSTACK_FREE (yymsg);
+            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
+            if (!yymsg)
+              {
+                yymsg = yymsgbuf;
+                yymsg_alloc = sizeof yymsgbuf;
+                yysyntax_error_status = 2;
+              }
+            else
+              {
+                yysyntax_error_status = YYSYNTAX_ERROR;
+                yymsgp = yymsg;
+              }
+          }
+        yyerror (yymsgp);
+        if (yysyntax_error_status == 2)
+          goto yyexhaustedlab;
+      }
+# undef YYSYNTAX_ERROR
+#endif
+    }
 
-#ifdef YYERROR_VERBOSE
-      yyn = yypact[yystate];
 
-      if (yyn > YYFLAG && yyn < YYLAST)
+
+  if (yyerrstatus == 3)
+    {
+      /* If just tried and failed to reuse lookahead token after an
+	 error, discard it.  */
+
+      if (yychar <= YYEOF)
 	{
-	  int size = 0;
-	  char *msg;
-	  int x, count;
-
-	  count = 0;
-	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
-	  for (x = (yyn < 0 ? -yyn : 0);
-	       x < (sizeof(yytname) / sizeof(char *)); x++)
-	    if (yycheck[x + yyn] == x)
-	      size += strlen(yytname[x]) + 15, count++;
-	  msg = (char *) malloc(size + 15);
-	  if (msg != 0)
-	    {
-	      strcpy(msg, "parse error");
-
-	      if (count < 5)
-		{
-		  count = 0;
-		  for (x = (yyn < 0 ? -yyn : 0);
-		       x < (sizeof(yytname) / sizeof(char *)); x++)
-		    if (yycheck[x + yyn] == x)
-		      {
-			strcat(msg, count == 0 ? ", expecting `" : " or `");
-			strcat(msg, yytname[x]);
-			strcat(msg, "'");
-			count++;
-		      }
-		}
-	      yyerror(msg);
-	      free(msg);
-	    }
-	  else
-	    yyerror ("parse error; also virtual memory exceeded");
+	  /* Return failure if at end of input.  */
+	  if (yychar == YYEOF)
+	    YYABORT;
 	}
       else
-#endif /* YYERROR_VERBOSE */
-	yyerror("parse error");
+	{
+	  yydestruct ("Error: discarding",
+		      yytoken, &yylval);
+	  yychar = YYEMPTY;
+	}
     }
 
+  /* Else will try to reuse lookahead token after shifting the error
+     token.  */
   goto yyerrlab1;
-yyerrlab1:   /* here on error raised explicitly by an action */
 
-  if (yyerrstatus == 3)
+
+/*---------------------------------------------------.
+| yyerrorlab -- error raised explicitly by YYERROR.  |
+`---------------------------------------------------*/
+yyerrorlab:
+
+  /* Pacify compilers like GCC when the user code never invokes
+     YYERROR and the label yyerrorlab therefore never appears in user
+     code.  */
+  if (/*CONSTCOND*/ 0)
+     goto yyerrorlab;
+
+  /* Do not reclaim the symbols of the rule which action triggered
+     this YYERROR.  */
+  YYPOPSTACK (yylen);
+  yylen = 0;
+  YY_STACK_PRINT (yyss, yyssp);
+  yystate = *yyssp;
+  goto yyerrlab1;
+
+
+/*-------------------------------------------------------------.
+| yyerrlab1 -- common code for both syntax error and YYERROR.  |
+`-------------------------------------------------------------*/
+yyerrlab1:
+  yyerrstatus = 3;	/* Each real token shifted decrements this.  */
+
+  for (;;)
     {
-      /* if just tried and failed to reuse lookahead token after an error, discard it.  */
+      yyn = yypact[yystate];
+      if (!yypact_value_is_default (yyn))
+	{
+	  yyn += YYTERROR;
+	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
+	    {
+	      yyn = yytable[yyn];
+	      if (0 < yyn)
+		break;
+	    }
+	}
 
-      /* return failure if at end of input */
-      if (yychar == YYEOF)
+      /* Pop the current state because it cannot handle the error token.  */
+      if (yyssp == yyss)
 	YYABORT;
 
-#if YYDEBUG != 0
-      if (yydebug)
-	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
-#endif
 
-      yychar = YYEMPTY;
+      yydestruct ("Error: popping",
+		  yystos[yystate], yyvsp);
+      YYPOPSTACK (1);
+      yystate = *yyssp;
+      YY_STACK_PRINT (yyss, yyssp);
     }
 
-  /* Else will try to reuse lookahead token
-     after shifting the error token.  */
-
-  yyerrstatus = 3;		/* Each real token shifted decrements this */
+  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
+  *++yyvsp = yylval;
+  YY_IGNORE_MAYBE_UNINITIALIZED_END
 
-  goto yyerrhandle;
 
-yyerrdefault:  /* current state does not do anything special for the error token. */
+  /* Shift the error token.  */
+  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);
 
-#if 0
-  /* This is wrong; only states that explicitly want error tokens
-     should shift them.  */
-  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
-  if (yyn) goto yydefault;
-#endif
+  yystate = yyn;
+  goto yynewstate;
 
-yyerrpop:   /* pop the current state because it cannot handle the error token */
 
-  if (yyssp == yyss) YYABORT;
-  yyvsp--;
-  yystate = *--yyssp;
-#ifdef YYLSP_NEEDED
-  yylsp--;
+/*-------------------------------------.
+| yyacceptlab -- YYACCEPT comes here.  |
+`-------------------------------------*/
+yyacceptlab:
+  yyresult = 0;
+  goto yyreturn;
+
+/*-----------------------------------.
+| yyabortlab -- YYABORT comes here.  |
+`-----------------------------------*/
+yyabortlab:
+  yyresult = 1;
+  goto yyreturn;
+
+#if !defined yyoverflow || YYERROR_VERBOSE
+/*-------------------------------------------------.
+| yyexhaustedlab -- memory exhaustion comes here.  |
+`-------------------------------------------------*/
+yyexhaustedlab:
+  yyerror (YY_("memory exhausted"));
+  yyresult = 2;
+  /* Fall through.  */
 #endif
 
-#if YYDEBUG != 0
-  if (yydebug)
+yyreturn:
+  if (yychar != YYEMPTY)
     {
-      short *ssp1 = yyss - 1;
-      fprintf (stderr, "Error: state stack now");
-      while (ssp1 != yyssp)
-	fprintf (stderr, " %d", *++ssp1);
-      fprintf (stderr, "\n");
+      /* Make sure we have latest lookahead translation.  See comments at
+         user semantic actions for why this is necessary.  */
+      yytoken = YYTRANSLATE (yychar);
+      yydestruct ("Cleanup: discarding lookahead",
+                  yytoken, &yylval);
     }
-#endif
-
-yyerrhandle:
-
-  yyn = yypact[yystate];
-  if (yyn == YYFLAG)
-    goto yyerrdefault;
-
-  yyn += YYTERROR;
-  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
-    goto yyerrdefault;
-
-  yyn = yytable[yyn];
-  if (yyn < 0)
+  /* Do not reclaim the symbols of the rule which action triggered
+     this YYABORT or YYACCEPT.  */
+  YYPOPSTACK (yylen);
+  YY_STACK_PRINT (yyss, yyssp);
+  while (yyssp != yyss)
     {
-      if (yyn == YYFLAG)
-	goto yyerrpop;
-      yyn = -yyn;
-      goto yyreduce;
+      yydestruct ("Cleanup: popping",
+		  yystos[*yyssp], yyvsp);
+      YYPOPSTACK (1);
     }
-  else if (yyn == 0)
-    goto yyerrpop;
-
-  if (yyn == YYFINAL)
-    YYACCEPT;
-
-#if YYDEBUG != 0
-  if (yydebug)
-    fprintf(stderr, "Shifting error token, ");
+#ifndef yyoverflow
+  if (yyss != yyssa)
+    YYSTACK_FREE (yyss);
 #endif
-
-  *++yyvsp = yylval;
-#ifdef YYLSP_NEEDED
-  *++yylsp = yylloc;
+#if YYERROR_VERBOSE
+  if (yymsg != yymsgbuf)
+    YYSTACK_FREE (yymsg);
 #endif
-
-  yystate = yyn;
-  goto yynewstate;
+  /* Make sure YYID is used.  */
+  return YYID (yyresult);
 }
+
+
+/* Line 2055 of yacc.c  */
 #line 3003 "objc-parse.y"
 
diff --git a/gcc/objc/objc-parse.y b/gcc/objc/objc-parse.y
index 1ad13219c4d..643dd579146 100644
--- a/gcc/objc/objc-parse.y
+++ b/gcc/objc/objc-parse.y
@@ -28,7 +28,7 @@ Boston, MA 02111-1307, USA.  */
 /* To whomever it may concern: I have heard that such a thing was once
    written by AT&T, but I have never seen it.  */
 
-%expect 66
+/* was %expect 66; newer bison expect 72 */
 
 %{
 #include "config.h"
@@ -100,7 +100,7 @@ char *language_string = "GNU Obj-C";
 /* the reserved words */
 /* SCO include files test "ASM", so use something else. */
 %token SIZEOF ENUM STRUCT UNION IF ELSE WHILE DO FOR SWITCH CASE DEFAULT
-%token BREAK CONTINUE RETURN GOTO ASM_KEYWORD TYPEOF ALIGNOF
+%token BREAK CONTINUE RETURN_KEYWORD GOTO ASM_KEYWORD TYPEOF ALIGNOF
 %token ATTRIBUTE EXTENSION LABEL
 %token REALPART IMAGPART
 
@@ -1414,7 +1414,7 @@ enum_head:
 
 structsp:
 	  struct_head identifier '{'
-		{ $$ = start_struct (RECORD_TYPE, $2);
+		{ $<ttype>$ = start_struct (RECORD_TYPE, $2);
 		  /* Start scope of tag before parsing components.  */
 		}
 	  component_decl_list '}' maybe_attribute 
@@ -1426,7 +1426,7 @@ structsp:
 	| struct_head identifier
 		{ $$ = xref_tag (RECORD_TYPE, $2); }
 	| union_head identifier '{'
-		{ $$ = start_struct (UNION_TYPE, $2); }
+		{ $<ttype>$ = start_struct (UNION_TYPE, $2); }
 	  component_decl_list '}' maybe_attribute
 		{ $$ = finish_struct ($<ttype>4, $5, chainon ($1, $7)); }
 	| union_head '{' component_decl_list '}' maybe_attribute
@@ -1437,13 +1437,13 @@ structsp:
 		{ $$ = xref_tag (UNION_TYPE, $2); }
 	| enum_head identifier '{'
 		{ $<itype>3 = suspend_momentary ();
-		  $$ = start_enum ($2); }
+		  $<ttype>$ = start_enum ($2); }
 	  enumlist maybecomma_warn '}' maybe_attribute
 		{ $$= finish_enum ($<ttype>4, nreverse ($5), chainon ($1, $8));
 		  resume_momentary ($<itype>3); }
 	| enum_head '{'
 		{ $<itype>2 = suspend_momentary ();
-		  $$ = start_enum (NULL_TREE); }
+		  $<ttype>$ = start_enum (NULL_TREE); }
 	  enumlist maybecomma_warn '}' maybe_attribute
 		{ $$= finish_enum ($<ttype>3, nreverse ($4), chainon ($1, $7));
 		  resume_momentary ($<itype>2); }
@@ -1941,11 +1941,11 @@ stmt:
 		  emit_line_note ($<filename>-1, $<lineno>0);
 		  if (! expand_continue_loop (NULL_PTR))
 		    error ("continue statement not within a loop"); }
-	| RETURN ';'
+	| RETURN_KEYWORD ';'
 		{ stmt_count++;
 		  emit_line_note ($<filename>-1, $<lineno>0);
 		  c_expand_return (NULL_TREE); }
-	| RETURN expr ';'
+	| RETURN_KEYWORD expr ';'
 		{ stmt_count++;
 		  emit_line_note ($<filename>-1, $<lineno>0);
 		  c_expand_return ($2); }
@@ -2866,7 +2866,7 @@ reservedwords:
 	| DEFAULT { $$ = get_identifier (token_buffer); }
 	| BREAK { $$ = get_identifier (token_buffer); }
 	| CONTINUE { $$ = get_identifier (token_buffer); }
-	| RETURN  { $$ = get_identifier (token_buffer); }
+	| RETURN_KEYWORD  { $$ = get_identifier (token_buffer); }
 	| GOTO { $$ = get_identifier (token_buffer); }
 	| ASM_KEYWORD { $$ = get_identifier (token_buffer); }
         | SIZEOF { $$ = get_identifier (token_buffer); }
diff --git a/gcc/objc/objc.gperf b/gcc/objc/objc.gperf
index 407459f1589..e56bdbef2d5 100644
--- a/gcc/objc/objc.gperf
+++ b/gcc/objc/objc.gperf
@@ -48,7 +48,7 @@ inline, SCSPEC, RID_INLINE
 int, TYPESPEC, RID_INT
 long, TYPESPEC, RID_LONG
 register, SCSPEC, RID_REGISTER
-return, RETURN, NORID
+return, RETURN_KEYWORD, NORID
 short, TYPESPEC, RID_SHORT
 signed, TYPESPEC, RID_SIGNED
 sizeof, SIZEOF, NORID
-- 
2.24.0

