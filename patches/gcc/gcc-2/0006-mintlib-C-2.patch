From 6d4aff9451c11a7ba1ef345ec0c326eb095e3d4c Mon Sep 17 00:00:00 2001
From: Thorsten Otto <admin@tho-otto.de>
Date: Mon, 7 Sep 2020 09:28:58 +0200
Subject: [PATCH 06/14] mintlib C++ 2

---
 libio/fstream.h     |  87 +++++++++++++++++++++++++
 libio/isgetsb.cc    |  59 +++++++++++++++++
 libio/isscan.cc     |  45 +++++++++++++
 libio/parsestream.h | 155 ++++++++++++++++++++++++++++++++++++++++++++
 libio/stdstreams.cc | 152 +++++++++++++++++++++++++++++++++++++++++++
 libio/stream.h      |  57 ++++++++++++++++
 libio/strstream.h   | 110 +++++++++++++++++++++++++++++++
 7 files changed, 665 insertions(+)

diff --git a/libio/fstream.h b/libio/fstream.h
index 1dc4ca1d418..b5f6598538f 100644
--- a/libio/fstream.h
+++ b/libio/fstream.h
@@ -1,5 +1,92 @@
+/* This is part of libio/iostream, providing -*- C++ -*- input/output.
 Copyright (C) 1993, 2000 Free Software Foundation
+
+This file is part of the GNU IO Library.  This library is free
+software; you can redistribute it and/or modify it under the
+terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+This library is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this library; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+As a special exception, if you link this library with files
+compiled with a GNU compiler to produce an executable, this does not cause
+the resulting executable to be covered by the GNU General Public License.
+This exception does not however invalidate any other reasons why
+the executable file might be covered by the GNU General Public License. */
+
+#ifndef _FSTREAM_H
+#define _FSTREAM_H
+#ifdef __GNUG__
+#pragma interface
+#endif
+#include <iostream.h>
+
+extern "C++" {
+class fstreambase : virtual public ios {
+#ifdef _IO_NEW_STREAMS
+    mutable filebuf __my_fb; // mutable so rdbuf() can be const
+#endif
+    void __fb_init ();
+  public:
+    fstreambase();
+    fstreambase(int fd);
+    fstreambase(int fd, char *p, int l); /* Deprecated */
+    fstreambase(const char *name, int mode, int prot=0664);
+    void close();
+#ifdef _IO_NEW_STREAMS
+    filebuf* rdbuf() const { return &__my_fb; }
+#else
+    filebuf* rdbuf() const { return (filebuf*) ios::rdbuf(); }
+#endif
+    void open(const char *name, int mode, int prot=0664);
+    int is_open() const { return rdbuf()->is_open(); }
+    void setbuf(char *ptr, int len) { rdbuf()->setbuf(ptr, len); }
+    void attach(int fd);
+#ifdef _STREAM_COMPAT
+    int filedesc() { return rdbuf()->fd(); }
+    fstreambase& raw() { rdbuf()->setbuf(NULL, 0); return *this; }
+#endif
+};
+
+class ifstream : public fstreambase, public istream {
+  public:
+    ifstream() : fstreambase() { }
+    ifstream(int fd) : fstreambase(fd) { }
+    ifstream(int fd, char *p, int l) : fstreambase(fd, p, l) { } /*Deprecated*/
+    ifstream(const char *name, int mode=ios::in, int prot=0664)
 	: fstreambase(name, mode | ios::in, prot) { }
+    void open(const char *name, int mode=ios::in, int prot=0664)
 	{ fstreambase::open(name, mode | ios::in, prot); }
+};
+
+class ofstream : public fstreambase, public ostream {
+  public:
+    ofstream() : fstreambase() { }
+    ofstream(int fd) : fstreambase(fd) { }
+    ofstream(int fd, char *p, int l) : fstreambase(fd, p, l) { } /*Deprecated*/
+    ofstream(const char *name, int mode=ios::out, int prot=0664)
 	: fstreambase(name, mode | ios::out, prot) { }
+    void open(const char *name, int mode=ios::out, int prot=0664)
 	{ fstreambase::open(name, mode | ios::out, prot); }
+};
+
+class fstream : public fstreambase, public iostream {
+  public:
+    fstream() : fstreambase() { }
+    fstream(int fd) : fstreambase(fd) { }
+    fstream(const char *name, int mode, int prot=0664)
+	: fstreambase(name, mode, prot) { }
+    fstream(int fd, char *p, int l) : fstreambase(fd, p, l) { } /*Deprecated*/
+    void open(const char *name, int mode, int prot=0664)
+	{ fstreambase::open(name, mode, prot); }
+};
+} // extern "C++"
+#endif /*!_FSTREAM_H*/
diff --git a/libio/isgetsb.cc b/libio/isgetsb.cc
index 4b7bc9f8d3e..655c972589a 100644
--- a/libio/isgetsb.cc
+++ b/libio/isgetsb.cc
@@ -1,4 +1,63 @@
+/* This is part of libio/iostream, providing -*- C++ -*- input/output.
+Copyright (C) 1993 Free Software Foundation
+
+This file is part of the GNU IO Library.  This library is free
+software; you can redistribute it and/or modify it under the
+terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+This library is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this library; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+As a special exception, if you link this library with files
+compiled with a GNU compiler to produce an executable, this does not cause
+the resulting executable to be covered by the GNU General Public License.
+This exception does not however invalidate any other reasons why
+the executable file might be covered by the GNU General Public License. */
+
+#include "libioP.h"
+#include "iostream.h"
+#include <string.h>
+
+istream& istream::get(streambuf& sb, char delim /* = '\n' */)
+{
+  _gcount = 0;
+  if (ipfx1())
+    {
       _IO_cleanup_region_start ((void (*) __P ((void *))) _IO_funlockfile,
 				_strbuf);
+      register streambuf* isb = rdbuf();
+      for (;;)
+	{
+	  streamsize len = isb->_IO_read_end - isb->_IO_read_ptr;
+	  if (len <= 0)
+	    if (__underflow(isb) == EOF)
+	      break;
+	    else
+	      len = isb->_IO_read_end - isb->_IO_read_ptr;
+	  char *delimp = (char*)memchr((void*)isb->_IO_read_ptr, delim, len);
+	  if (delimp != NULL)
+	    len = delimp - isb->_IO_read_ptr;
+	  int written = sb.sputn(isb->_IO_read_ptr, len);
+	  isb->_IO_read_ptr += written;
+	  _gcount += written;
+	  if (written != len)
+	    {
+	      set(ios::failbit);
+	      break;
+	    }
+	  if (delimp != NULL)
+	    break;
+	}
       isfx();
       _IO_cleanup_region_end (0);
+    }
+  return *this;
+}
diff --git a/libio/isscan.cc b/libio/isscan.cc
index 88db94e3157..977559c2cba 100644
--- a/libio/isscan.cc
+++ b/libio/isscan.cc
@@ -1,10 +1,55 @@
+/* 
+Copyright (C) 1993 Free Software Foundation
+
+This file is part of the GNU IO Library.  This library is free
+software; you can redistribute it and/or modify it under the
+terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+This library is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this library; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+As a special exception, if you link this library with files
+compiled with a GNU compiler to produce an executable, this does not cause
+the resulting executable to be covered by the GNU General Public License.
+This exception does not however invalidate any other reasons why
+the executable file might be covered by the GNU General Public License. */
+
+#include "libioP.h"
+#include <iostream.h>
+#include <stdarg.h>
+
+istream& istream::scan(const char *format ...)
+{
+    if (ipfx0()) {
 	_IO_cleanup_region_start ((void (*) __P ((void *))) _IO_funlockfile,
 				  _strbuf);
+	va_list ap;
+	va_start(ap, format);
+	_strbuf->vscan(format, ap, this);
+	va_end(ap);
 	isfx();
 	_IO_cleanup_region_end (0);
+    }
+    return *this;
+}
+
+istream& istream::vscan(const char *format, _IO_va_list args)
+{
+    if (ipfx0())
       {
 	_IO_cleanup_region_start ((void (*) __P ((void *))) _IO_funlockfile,
 				  _strbuf);
+	_strbuf->vscan(format, args, this);
 	isfx();
 	_IO_cleanup_region_end (0);
       }
+    return *this;
+}
diff --git a/libio/parsestream.h b/libio/parsestream.h
index acb37bd0146..97655bcbf69 100644
--- a/libio/parsestream.h
+++ b/libio/parsestream.h
@@ -1 +1,156 @@
+/* This is part of libio/iostream, providing -*- C++ -*- input/output.
+Copyright (C) 1993 Free Software Foundation
+
+This file is part of the GNU IO Library.  This library is free
+software; you can redistribute it and/or modify it under the
+terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+This library is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this library; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+As a special exception, if you link this library with files
+compiled with a GNU compiler to produce an executable, this does not cause
+the resulting executable to be covered by the GNU General Public License.
+This exception does not however invalidate any other reasons why
+the executable file might be covered by the GNU General Public License.
+
+Written by Per Bothner (bothner@cygnus.com). */
+
+#ifndef PARSESTREAM_H
+#define PARSESTREAM_H
+#ifdef __GNUG__
+#pragma interface
+#endif
+#include "streambuf.h"
+
+extern "C++" {
+// A parsebuf is a streambuf optimized for scanning text files.
+// It keeps track of line and column numbers.
+// It is guaranteed to remember the entire current line,
+// as well the '\n'-s on either side of it (if they exist).
+// You can arbitrarily seek (or unget) within this extended line.
+// Other backward seeks are not supported.
+// Normal read semantics are supported (and hence istream operators like >>).
+
+class parsebuf : public streambuf {
+  protected:
     _IO_off_t pos_at_line_start;
+    long _line_length;
+    unsigned long __line_number;
+    char *buf_start;
+    char *buf_end;
+
+  public:
+    parsebuf *chain;
+
+    // Return column number (raw - don't handle tabs etc).
+    // Retult can be -1, meaning: at '\n' before current line.
+    virtual int tell_in_line();
+
+    // seek to (raw) column I in current line.
+    // Result is new (raw) column position - differs from I if unable to seek.
+    // Seek to -1 tries to seek to before previous LF.
+    virtual int seek_in_line(int i);
+
+    // Note: there is no "current line" initially, until something is read.
+
+    // Current line number, starting with 0.
+    // If tell_in_line()==-1, then line number of next line.
+    int line_number() { return __line_number; }
+
+    // Length of current line, not counting either '\n'.
+    int line_length() { return _line_length; }
+    // Current line - not a copy, so file ops may trash it. 
+    virtual char* current_line();
+    virtual streampos seekoff(streamoff, _seek_dir, int mode=ios::in|ios::out);
+    virtual streambuf* setbuf(char* p, int len);
+  protected:
+    parsebuf() { chain= NULL;
+	__line_number = 0; pos_at_line_start = 0; _line_length = -1; }
+    virtual int pbackfail(int c);
+};
+
+// A string_parsebuf is a parsebuf whose source is a fixed string.
+
+class string_parsebuf : public parsebuf {
+  public:
+    int do_delete;
+    string_parsebuf(char *str, int len, int delete_at_close=0);
+    virtual int underflow();
+    virtual char* current_line();
+    virtual int seek_in_line(int i);
+    virtual int tell_in_line();
+    char *left() const { return base(); }
+    char *right() const { return ebuf(); }
+//    streampos seekoff(streamoff, _seek_dir, int);
+};
+
+// A func_parsebuf calls a given function to get new input.
+// Each call returns an entire NUL-terminated line (without the '\n').
+// That line has been allocated with malloc(), not new.
+// The interface is tailored to the GNU readline library.
+// Example:
+// char* DoReadLine(void* arg)
+// {
+//   char *line = readline((char*)arg); /* 'arg' is used as prompt. */
+//   if line == NULL) { putc('\n', stderr); return NULL; }
+//   if (line[0] != '\0') add_history(line);
+//    return line;
+// }
+// char PromptBuffer[100] = "> ";
+// func_parsebuf my_stream(DoReadLine, PromptBuffer);
+
+typedef char *(*CharReader)(void *arg);
+class istream;
+
+class func_parsebuf : public parsebuf {
+  public:
+    void *arg;
+    CharReader read_func;
+    int backed_up_to_newline;
+    func_parsebuf(CharReader func, void *argm = NULL);
+    int underflow();
+    virtual int tell_in_line();
+    virtual int seek_in_line(int i);
+    virtual char* current_line();
+};
+
+// A general_parsebuf is a parsebuf which gets its input from some
+// other streambuf. It explicitly buffers up an entire line.
+
+class general_parsebuf : public parsebuf {
+  public:
+    streambuf *sbuf;
+    int delete_buf; // Delete sbuf when destroying this.
+    general_parsebuf(streambuf *buf, int delete_arg_buf = 0);
+    int underflow();
+    virtual int tell_in_line();
+    virtual int seek_in_line(int i);
+    ~general_parsebuf();
+    virtual char* current_line();
+};
+
+#if 0
+class parsestream : public istream {
+    streammarker marks[2];
+    short _first; // of the two marks; either 0 or 1
+    int _lineno;
+    int first() { return _first; }
+    int second() { return 1-_first; }
+    int line_length() { marks[second].delta(marks[first]); }
+    int line_length() { marks[second].delta(marks[first]); }
+    int seek_in_line(int i);
+    int tell_in_line();
+    int line_number();
+};
+#endif
+} // extern "C++"
+#endif /*!defined(PARSESTREAM_H)*/
diff --git a/libio/stdstreams.cc b/libio/stdstreams.cc
index 0d322ef67f6..7a74eaaa443 100644
--- a/libio/stdstreams.cc
+++ b/libio/stdstreams.cc
@@ -1 +1,153 @@
+/* This is part of libio/iostream, providing -*- C++ -*- input/output.
+Copyright (C) 1993 Free Software Foundation
+
+This file is part of the GNU IO Library.  This library is free
+software; you can redistribute it and/or modify it under the
+terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+This library is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this library; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+As a special exception, if you link this library with files
+compiled with a GNU compiler to produce an executable, this does not cause
+the resulting executable to be covered by the GNU General Public License.
+This exception does not however invalidate any other reasons why
+the executable file might be covered by the GNU General Public License. */
+
+/* Written by Per Bothner (bothner@cygnus.com). */
+
+#include "libioP.h"
+#include "streambuf.h"
+#include <stdio.h>
+
+// The ANSI draft requires that operations on cin/cout/cerr can be
+// mixed with operations on stdin/stdout/stderr on a character by
+// character basis.  This normally requires that the streambuf's
+// used by cin/cout/cerr be stdiostreams.  However, if the stdio
+// implementation is the one that is built using this library,
+// then we don't need to, since in that case stdin/stdout/stderr
+// are identical to _IO_stdin/_IO_stdout/_IO_stderr.
+
 #include <libio.h>
+
+#ifdef _STDIO_USES_IOSTREAM
+#define CIN_SBUF _IO_stdin_
+#define COUT_SBUF _IO_stdout_
+#define CERR_SBUF _IO_stderr_
+static int use_stdiobuf = 0;
+#else
+#define CIN_SBUF _IO_stdin_buf
+#define COUT_SBUF _IO_stdout_buf
+#define CERR_SBUF _IO_stderr_buf
+static int use_stdiobuf = 1;
+#endif
+
+#define cin CIN
+#define cout COUT
+#define cerr CERR
+#define clog CLOG
+#include "iostream.h"
+#undef cin
+#undef cout
+#undef cerr
+#undef clog
+
+#ifdef __GNUG__
+#define PAD 0 /* g++ allows 0-length arrays. */
+#else
+#define PAD 1
+#endif
+struct _fake_istream {
+    struct myfields {
+#ifdef __GNUC__
+	_ios_fields *vb; /* pointer to virtual base class ios */
+	_IO_ssize_t _gcount;
+#else
+	/* This is supposedly correct for cfront. */
+	_IO_ssize_t _gcount;
+	void *vptr;
+	_ios_fields *vb; /* pointer to virtual base class ios */
+#endif
+    } mine;
+    _ios_fields base;
+    char filler[sizeof(struct istream)-sizeof(struct _ios_fields)+PAD];
+};
+struct _fake_ostream {
+    struct myfields {
+#ifndef __GNUC__
+	void *vptr;
+#endif
+	_ios_fields *vb; /* pointer to virtual base class ios */
+    } mine;
+    _ios_fields base;
+    char filler[sizeof(struct ostream)-sizeof(struct _ios_fields)+PAD];
+};
+
+
+#ifdef _IO_NEW_STREAMS
+#define STD_STR(SBUF, TIE, EXTRA_FLAGS) \
+ (streambuf*)&SBUF, TIE, 0, ios::skipws|ios::dec|EXTRA_FLAGS, ' ',0,0,6
+#else
+#define STD_STR(SBUF, TIE, EXTRA_FLAGS) \
+ (streambuf*)&SBUF, TIE, 0, ios::dont_close|ios::dec|ios::skipws|EXTRA_FLAGS, ' ',0,0,6
+#endif
+
+#ifdef __GNUC__
+#define OSTREAM_DEF(NAME, SBUF, TIE, EXTRA_FLAGS, ASM) \
+  _fake_ostream NAME ASM = { {&NAME.base}, {STD_STR(SBUF, TIE, EXTRA_FLAGS) }};
+#define ISTREAM_DEF(NAME, SBUF, TIE, EXTRA_FLAGS) \
+  _fake_istream NAME = { {&NAME.base}, {STD_STR(SBUF, TIE, EXTRA_FLAGS) }};
+#else
+#define OSTREAM_DEF(NAME, SBUF, TIE, EXTRA_FLAGS) \
+  _fake_ostream NAME = { {0, &NAME.base}, {STD_STR(SBUF, TIE, EXTRA_FLAGS) }};
+#define ISTREAM_DEF(NAME, SBUF, TIE, EXTRA_FLAGS) \
+  _fake_istream NAME = {{0, 0, &NAME.base}, {STD_STR(SBUF, TIE, EXTRA_FLAGS)}};
+#endif
+
+OSTREAM_DEF(cout, COUT_SBUF, NULL, 0, )
+OSTREAM_DEF(cerr, CERR_SBUF,(ostream*)&cout, ios::unitbuf, )
+ISTREAM_DEF(cin, CIN_SBUF,  (ostream*)&cout, 0)
+
+/* Only for (partial) compatibility with AT&T's library. */
+#if _G_CLOG_CONFLICT
+OSTREAM_DEF(clog, CERR_SBUF, (ostream*)&cout, 0, __asm__ ("__IO_clog"))
+#else
+OSTREAM_DEF(clog, CERR_SBUF, (ostream*)&cout, 0, )
+#endif
+
+// Switches between using _IO_std{in,out,err} and __std{in,out,err}_buf
+// for standard streams.  This does not normally need to be called
+// explicitly, but is provided for AT&T compatibility.
+
+int ios::sync_with_stdio(int new_state)
+{
+#ifdef _STDIO_USES_IOSTREAM
+    // It is always synced.
+    return 0;
+#else
+    if (new_state == use_stdiobuf) // The usual case now.
+	return use_stdiobuf;
+    if (new_state) {
+	cin.base._strbuf = (streambuf*)&_IO_stdin_buf;
+	cout.base._strbuf = (streambuf*)&_IO_stdout_buf;
+	cerr.base._strbuf = (streambuf*)&_IO_stderr_buf;
+	clog.base._strbuf = (streambuf*)&_IO_stderr_buf;
+    } else {
+	cin.base._strbuf = (streambuf*)_IO_stdin;
+	cout.base._strbuf = (streambuf*)_IO_stdout;
+	cerr.base._strbuf = (streambuf*)_IO_stderr;
+	clog.base._strbuf = (streambuf*)_IO_stderr;
+    }
+    int old_state = use_stdiobuf;
+    use_stdiobuf = new_state;
+    return old_state;
+#endif
+}
diff --git a/libio/stream.h b/libio/stream.h
index dc6a2bb0a5b..90f8c1f2781 100644
--- a/libio/stream.h
+++ b/libio/stream.h
@@ -1,2 +1,59 @@
+/* 
 Copyright (C) 1993, 1999 Free Software Foundation
+
+This file is part of the GNU IO Library.  This library is free
+software; you can redistribute it and/or modify it under the
+terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+This library is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this library; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+As a special exception, if you link this library with files
+compiled with a GNU compiler to produce an executable, this does not cause
+the resulting executable to be covered by the GNU General Public License.
+This exception does not however invalidate any other reasons why
+the executable file might be covered by the GNU General Public License. */
+
+#ifndef _COMPAT_STREAM_H
+#define _COMPAT_STREAM_H
+
+// Compatibility with old library.
+// DO NOT USE THESE FUNCTIONS IN NEW CODE!
+// They are obsolete, non-standard, and non-reentrant.
+
+#define _STREAM_COMPAT
+#include <iostream.h>
+
+extern "C++" {
+extern char* form(const char*, ...);
+
+extern char* dec(long, int=0);
+extern char* dec(int, int=0);
+extern char* dec(unsigned long, int=0);
+extern char* dec(unsigned int, int=0);
+
+extern char* hex(long, int=0);
+extern char* hex(int, int=0);
+extern char* hex(unsigned long, int=0);
+extern char* hex(unsigned int, int=0);
+
+extern char* oct(long, int=0);
+extern char* oct(int, int=0);
+extern char* oct(unsigned long, int=0);
+extern char* oct(unsigned int, int=0);
+
+char*        chr(char ch, int width = 0);
+char*        str(const char* s, int width = 0);
+
 inline istream& WS(istream& __str) { return ws(__str); }
+} // extern "C++"
+
+#endif /* !_COMPAT_STREAM_H */
diff --git a/libio/strstream.h b/libio/strstream.h
index e35eb53fc90..967e5b0b76a 100644
--- a/libio/strstream.h
+++ b/libio/strstream.h
@@ -1,3 +1,113 @@
+/* This is part of libio/iostream, providing -*- C++ -*- input/output.
 Copyright (C) 1993, 1999 Free Software Foundation
+
+This file is part of the GNU IO Library.  This library is free
+software; you can redistribute it and/or modify it under the
+terms of the GNU General Public License as published by the
+Free Software Foundation; either version 2, or (at your option)
+any later version.
+
+This library is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with this library; see the file COPYING.  If not, write to the Free
+Software Foundation, 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+As a special exception, if you link this library with files
+compiled with a GNU compiler to produce an executable, this does not cause
+the resulting executable to be covered by the GNU General Public License.
+This exception does not however invalidate any other reasons why
+the executable file might be covered by the GNU General Public License. */
+
+/* Written by Per Bothner (bothner@cygnus.com). */
+
+#ifndef __STRSTREAM_H
+#define __STRSTREAM_H
+#ifdef __GNUG__
+#pragma interface
+#endif
+#include <iostream.h>
+#include <strfile.h>
+
+extern "C++" {
+class strstreambuf : public streambuf
+{
+  struct _IO_str_fields _s;
+  friend class istrstream;
+
+    void init_dynamic(_IO_alloc_type alloc, _IO_free_type free,
+		      int initial_size = 0);
+    void init_static(char *ptr, int size, char *pstart);
+    void init_readonly(const char *ptr, int size);
+  protected:
+    virtual int overflow(int = EOF);
+    virtual int underflow();
+    virtual int pbackfail(int c);
+  public:
+    virtual ~strstreambuf();
+    strstreambuf() { init_dynamic(0, 0); }
+    strstreambuf(int initial_size) { init_dynamic(0, 0, initial_size); }
     strstreambuf(void *(*__alloc)(_IO_size_t), void (*__free)(void*))
 	{ init_dynamic(__alloc, __free); }
+    strstreambuf(char *ptr, int size, char *pstart = NULL)
+	{ init_static(ptr, size, pstart); }
+    strstreambuf(unsigned char *ptr, int size, unsigned char *pstart = NULL)
+	{ init_static((char*)ptr, size, (char*)pstart); }
+    strstreambuf(const char *ptr, int size)
+	{ init_readonly(ptr, size); }
+    strstreambuf(const unsigned char *ptr, int size)
+	{ init_readonly((const char*)ptr, size); }
+    strstreambuf(signed char *ptr, int size, signed char *pstart = NULL)
+	{ init_static((char*)ptr, size, (char*)pstart); }
+    strstreambuf(const signed char *ptr, int size)
+	{ init_readonly((const char*)ptr, size); }
+    // Note: frozen() is always true if !_IO_STR_DYNAMIC(this).
+    int frozen() { return _flags & _IO_USER_BUF ? 1 : 0; }
+    void freeze(int n=1)
+	{ if (_IO_STR_DYNAMIC(this))
+	    { if (n) _flags |= _IO_USER_BUF; else _flags &= ~_IO_USER_BUF; } }
+    _IO_ssize_t pcount();
+    char *str();
+    virtual streampos seekoff(streamoff, _seek_dir, int mode=ios::in|ios::out);
+};
+
+class strstreambase : virtual public ios {
+  protected:
+    strstreambuf __my_sb;
+  public:
+    strstreambuf* rdbuf() { return &__my_sb; }
+  protected:
+    strstreambase() { init (&__my_sb); }
+    strstreambase(char *cp, int n, int mode=ios::out);
+};
+
+class istrstream : public strstreambase, public istream {
+  public:
+    istrstream(const char*, int=0);
+};
+
+class ostrstream : public strstreambase, public ostream {
+  public:
+    ostrstream() { }
+    ostrstream(char *cp, int n, int mode=ios::out) :strstreambase(cp,n,mode){}
+    _IO_ssize_t pcount() { return ((strstreambuf*)_strbuf)->pcount(); }
+    char *str() { return ((strstreambuf*)_strbuf)->str(); }
+    void freeze(int n = 1) { ((strstreambuf*)_strbuf)->freeze(n); }
+    int frozen() { return ((strstreambuf*)_strbuf)->frozen(); }
+};
+
+class strstream : public strstreambase, public iostream {
+  public:
+  strstream() { }
+    strstream(char *cp, int n, int mode=ios::out) :strstreambase(cp,n,mode){}
+    _IO_ssize_t pcount() { return ((strstreambuf*)_strbuf)->pcount(); }
+    char *str() { return ((strstreambuf*)_strbuf)->str(); }
+    void freeze(int n = 1) { ((strstreambuf*)_strbuf)->freeze(n); }
+    int frozen() { return ((strstreambuf*)_strbuf)->frozen(); }
+};
+} // extern "C++"
+
+#endif /*!__STRSTREAM_H*/
-- 
2.24.0

