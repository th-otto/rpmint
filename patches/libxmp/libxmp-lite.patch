diff -rup libxmp-lite-4.6.0.orig/include/libxmp-lite/xmp.h libxmp-lite-4.6.0/include/libxmp-lite/xmp.h
--- libxmp-lite-4.6.0.orig/include/libxmp-lite/xmp.h	2023-06-15 22:11:10.000000000 +0200
+++ libxmp-lite-4.6.0/include/libxmp-lite/xmp.h	2023-12-22 12:04:49.553213609 +0100
@@ -66,6 +66,7 @@ extern "C" {
 #define XMP_FORMAT_8BIT		(1 << 0) /* Mix to 8-bit instead of 16 */
 #define XMP_FORMAT_UNSIGNED	(1 << 1) /* Mix to unsigned samples */
 #define XMP_FORMAT_MONO		(1 << 2) /* Mix to mono instead of stereo */
+#define XMP_FORMAT_BYTESWAP	(1 << 3) /* Mix to byte-swapped samples (only applicable for 16-bit mixing) */
 
 /* player parameters */
 #define XMP_PLAYER_AMP		0	/* Amplification factor */
diff -rup libxmp-lite-4.6.0.orig/src/mixer.c libxmp-lite-4.6.0/src/mixer.c
--- libxmp-lite-4.6.0.orig/src/mixer.c	2023-06-15 22:11:10.000000000 +0200
+++ libxmp-lite-4.6.0/src/mixer.c	2023-12-22 12:07:04.203037478 +0100
@@ -177,17 +177,17 @@ static void downmix_int_8bit(char *dest,
 	int smp;
 	int shift = DOWNMIX_SHIFT + 8 - amp;
 
-	for (; num--; src++, dest++) {
-		smp = *src >> shift;
+	while (num--) {
+		smp = *src++ >> shift;
 		if (smp > LIM8_HI) {
-			*dest = LIM8_HI;
+			smp = LIM8_HI;
 		} else if (smp < LIM8_LO) {
-			*dest = LIM8_LO;
-		} else {
-			*dest = smp;
+			smp = LIM8_LO;
 		}
 
-		if (offs) *dest += offs;
+		if (offs) smp += offs;
+
+		*dest++ = smp;
 	}
 }
 
@@ -198,17 +198,37 @@ static void downmix_int_16bit(int16 *des
 	int smp;
 	int shift = DOWNMIX_SHIFT - amp;
 
-	for (; num--; src++, dest++) {
-		smp = *src >> shift;
+	while (num--) {
+		smp = *src++ >> shift;
 		if (smp > LIM16_HI) {
-			*dest = LIM16_HI;
+			smp = LIM16_HI;
 		} else if (smp < LIM16_LO) {
-			*dest = LIM16_LO;
-		} else {
-			*dest = smp;
+			smp = LIM16_LO;
 		}
 
-		if (offs) *dest += offs;
+		if (offs) smp += offs;
+
+		*dest++ = smp;
+	}
+}
+
+/* Downmix 32bit samples to 16bit, signed or unsigned, mono or stereo output */
+static void downmix_int_16bit_swapped(int16 *dest, int32 *src, int num, int amp, int offs)
+{
+	int smp;
+	int shift = DOWNMIX_SHIFT - amp;
+
+	while (num--) {
+		smp = *src++ >> shift;
+		if (smp > LIM16_HI) {
+			smp = LIM16_HI;
+		} else if (smp < LIM16_LO) {
+			smp = LIM16_LO;
+		}
+
+		if (offs) smp += offs;
+
+		*dest++ = __builtin_bswap16(smp);
 	}
 }
 
@@ -754,10 +774,13 @@ void libxmp_mixer_softmixer(struct conte
 
 	if (s->format & XMP_FORMAT_8BIT) {
 		downmix_int_8bit(s->buffer, s->buf32, size, s->amplify,
-				s->format & XMP_FORMAT_UNSIGNED ? 0x80 : 0);
+				(s->format & XMP_FORMAT_UNSIGNED) ? 0x80 : 0);
+	} else if (s->format & XMP_FORMAT_BYTESWAP) {
+		downmix_int_16bit_swapped((int16 *)s->buffer, s->buf32, size, s->amplify,
+				(s->format & XMP_FORMAT_UNSIGNED) ? 0x8000 : 0);
 	} else {
 		downmix_int_16bit((int16 *)s->buffer, s->buf32, size, s->amplify,
-				s->format & XMP_FORMAT_UNSIGNED ? 0x8000 : 0);
+				(s->format & XMP_FORMAT_UNSIGNED) ? 0x8000 : 0);
 	}
 
 	s->dtright = s->dtleft = 0;
