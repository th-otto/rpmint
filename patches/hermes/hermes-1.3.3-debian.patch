diff -rup Hermes-1.3.3.orig/src/FactConv.c Hermes-1.3.3/src/FactConv.c
--- Hermes-1.3.3.orig/src/FactConv.c	2000-12-06 05:55:28.000000000 +0100
+++ Hermes-1.3.3/src/FactConv.c	2023-03-03 15:32:04.456935073 +0100
@@ -47,99 +47,99 @@ HermesFactoryStruct Factory_Converters[]
 #pragma error
 
   /* ------ From 32 RGB 888 - MMX PENTIUM II ---- */
-  {32,0,0xff0000,0xff00,0xff,0,24,0,0xff0000,0xff00,0xff,0,ConvertMMX,0,
-   ConvertMMXpII32_24RGB888,0,0,0,PROC_MMX_PENTIUM},
+  {32,0,0xff0000,0xff00,0xff,0,24,0,0xff0000,0xff00,0xff,0,_ConvertMMX,0,
+   _ConvertMMXpII32_24RGB888,0,0,0,PROC_MMX_PENTIUM},
 
-  {32,0,0xff0000,0xff00,0xff,0,16,0,0xf800,0x7e0,0x1f,0,ConvertMMX,0,
-   ConvertMMXpII32_16RGB565,0,0,0,PROC_MMX_PENTIUM},
+  {32,0,0xff0000,0xff00,0xff,0,16,0,0xf800,0x7e0,0x1f,0,_ConvertMMX,0,
+   _ConvertMMXpII32_16RGB565,0,0,0,PROC_MMX_PENTIUM},
 
-  {32,0,0xff0000,0xff00,0xff,0,16,0,0x1f,0x7e0,0xf800,0,ConvertMMX,0,
-   ConvertMMXpII32_16BGR565,0,0,0,PROC_MMX_PENTIUM},
+  {32,0,0xff0000,0xff00,0xff,0,16,0,0x1f,0x7e0,0xf800,0,_ConvertMMX,0,
+   _ConvertMMXpII32_16BGR565,0,0,0,PROC_MMX_PENTIUM},
 
-  {32,0,0xff0000,0xff00,0xff,0,16,0,0x7c00,0x3e0,0x1f,0,ConvertMMX,0,
-   ConvertMMXpII32_16RGB555,0,0,0,PROC_MMX_PENTIUM},
+  {32,0,0xff0000,0xff00,0xff,0,16,0,0x7c00,0x3e0,0x1f,0,_ConvertMMX,0,
+   _ConvertMMXpII32_16RGB555,0,0,0,PROC_MMX_PENTIUM},
 
-  {32,0,0xff0000,0xff00,0xff,0,16,0,0x1f,0x3e0,0x7c00,0,ConvertMMX,0,
-   ConvertMMXpII32_16BGR555,0,0,0,PROC_MMX_PENTIUM},
+  {32,0,0xff0000,0xff00,0xff,0,16,0,0x1f,0x3e0,0x7c00,0,_ConvertMMX,0,
+   _ConvertMMXpII32_16BGR555,0,0,0,PROC_MMX_PENTIUM},
 
   /* ------ From 32 RGB 888 - MMX PENTIUM ------- */
 
-  {32,0,0xff0000,0xff00,0xff,0,16,0,0x7c00,0x3e0,0x1f,0,ConvertMMX,0,
-   ConvertMMXp32_16RGB555,0,0,0,PROC_MMX_PENTIUM},
+  {32,0,0xff0000,0xff00,0xff,0,16,0,0x7c00,0x3e0,0x1f,0,_ConvertMMX,0,
+   _ConvertMMXp32_16RGB555,0,0,0,PROC_MMX_PENTIUM},
   
 
   /* ------ From 32 RGB 888 - X86 PENTIUM ------- */
 
-  {32,0,0xff0000,0xff00,0xff,0,32,0,0xff,0xff00,0xff0000,0,ConvertX86,0,
-   ConvertX86p32_32BGR888,0,0,0,PROC_X86_PENTIUM},
+  {32,0,0xff0000,0xff00,0xff,0,32,0,0xff,0xff00,0xff0000,0,_ConvertX86,0,
+   _ConvertX86p32_32BGR888,0,0,0,PROC_X86_PENTIUM},
 
   {32,0,0xff0000,0xff00,0xff,0,32,0,0xff000000,0xff0000,0xff00,0xff,
-   ConvertX86,0,
-   ConvertX86p32_32RGBA888,0,0,0,PROC_X86_PENTIUM},
+   _ConvertX86,0,
+   _ConvertX86p32_32RGBA888,0,0,0,PROC_X86_PENTIUM},
 
   {32,0,0xff0000,0xff00,0xff,0,32,0,0xff00,0xff0000,0xff000000,0xff,
-   ConvertX86,0,
-   ConvertX86p32_32BGRA888,0,0,0,PROC_X86_PENTIUM},
+   _ConvertX86,0,
+   _ConvertX86p32_32BGRA888,0,0,0,PROC_X86_PENTIUM},
 
-  {32,0,0xff0000,0xff00,0xff,0,24,0,0xff0000,0xff00,0xff,0,ConvertX86,0,
-   ConvertX86p32_24RGB888,0,0,0,PROC_X86_PENTIUM},
+  {32,0,0xff0000,0xff00,0xff,0,24,0,0xff0000,0xff00,0xff,0,_ConvertX86,0,
+   _ConvertX86p32_24RGB888,0,0,0,PROC_X86_PENTIUM},
 
-  {32,0,0xff0000,0xff00,0xff,0,24,0,0xff,0xff00,0xff0000,0,ConvertX86,0,
-   ConvertX86p32_24BGR888,0,0,0,PROC_X86_PENTIUM},
+  {32,0,0xff0000,0xff00,0xff,0,24,0,0xff,0xff00,0xff0000,0,_ConvertX86,0,
+   _ConvertX86p32_24BGR888,0,0,0,PROC_X86_PENTIUM},
   
   {32,0,0xff0000,0xff00,0xff,0,16,0,0xf800,0x7e0,0x1f,0,
-   ConvertX86,ConvertX86Stretch,
-   ConvertX86p32_16RGB565,ConvertX86p32_16RGB565_S,
+   _ConvertX86,_ConvertX86Stretch,
+   _ConvertX86p32_16RGB565,_ConvertX86p32_16RGB565_S,
    0,0,PROC_X86_PENTIUM},
   
-  {32,0,0xff0000,0xff00,0xff,0,16,0,0x1f,0x7e0,0xf800,0,ConvertX86,0,
-   ConvertX86p32_16BGR565,0,0,0,PROC_X86_PENTIUM},
+  {32,0,0xff0000,0xff00,0xff,0,16,0,0x1f,0x7e0,0xf800,0,_ConvertX86,0,
+   _ConvertX86p32_16BGR565,0,0,0,PROC_X86_PENTIUM},
 
-  {32,0,0xff0000,0xff00,0xff,0,16,0,0x7c00,0x3e0,0x1f,0,ConvertX86,0,
-   ConvertX86p32_16RGB555,0,0,0,PROC_X86_PENTIUM},
+  {32,0,0xff0000,0xff00,0xff,0,16,0,0x7c00,0x3e0,0x1f,0,_ConvertX86,0,
+   _ConvertX86p32_16RGB555,0,0,0,PROC_X86_PENTIUM},
 
-  {32,0,0xff0000,0xff00,0xff,0,16,0,0x1f,0x3e0,0x7c00,0,ConvertX86,0,
-   ConvertX86p32_16BGR555,0,0,0,PROC_X86_PENTIUM},
+  {32,0,0xff0000,0xff00,0xff,0,16,0,0x1f,0x3e0,0x7c00,0,_ConvertX86,0,
+   _ConvertX86p32_16BGR555,0,0,0,PROC_X86_PENTIUM},
 
-  {32,0,0xff0000,0xff00,0xff,0,8,0,0xe0,0x1c,0x3,0,ConvertX86,0,
-   ConvertX86p32_8RGB332,0,0,0,PROC_X86_PENTIUM},
+  {32,0,0xff0000,0xff00,0xff,0,8,0,0xe0,0x1c,0x3,0,_ConvertX86,0,
+   _ConvertX86p32_8RGB332,0,0,0,PROC_X86_PENTIUM},
 
 
 
   /* ------ From 16 RGB 565 - X86 PENTIUM ------- */
 
-  {16,0,0xf800,0x7e0,0x1f,0,32,0,0xff0000,0xff00,0xff,0,ConvertX86,0,
-   ConvertX86p16_32RGB888,0,0,0,PROC_X86_PENTIUM},
+  {16,0,0xf800,0x7e0,0x1f,0,32,0,0xff0000,0xff00,0xff,0,_ConvertX86,0,
+   _ConvertX86p16_32RGB888,0,0,0,PROC_X86_PENTIUM},
 
-  {16,0,0xf800,0x7e0,0x1f,0,32,0,0xff,0xff00,0xff0000,0,ConvertX86,0,
-   ConvertX86p16_32BGR888,0,0,0,PROC_X86_PENTIUM},
+  {16,0,0xf800,0x7e0,0x1f,0,32,0,0xff,0xff00,0xff0000,0,_ConvertX86,0,
+   _ConvertX86p16_32BGR888,0,0,0,PROC_X86_PENTIUM},
 
-  {16,0,0xf800,0x7e0,0x1f,0,32,0,0xff000000,0xff0000,0xff00,0xff,ConvertX86,0,
-   ConvertX86p16_32RGBA888,0,0,0,PROC_X86_PENTIUM},
+  {16,0,0xf800,0x7e0,0x1f,0,32,0,0xff000000,0xff0000,0xff00,0xff,_ConvertX86,0,
+   _ConvertX86p16_32RGBA888,0,0,0,PROC_X86_PENTIUM},
 
-  {16,0,0xf800,0x7e0,0x1f,0,32,0,0xff00,0xff0000,0xff000000,0xff,ConvertX86,0,
-   ConvertX86p16_32BGRA888,0,0,0,PROC_X86_PENTIUM},
+  {16,0,0xf800,0x7e0,0x1f,0,32,0,0xff00,0xff0000,0xff000000,0xff,_ConvertX86,0,
+   _ConvertX86p16_32BGRA888,0,0,0,PROC_X86_PENTIUM},
 
-  {16,0,0xf800,0x7e0,0x1f,0,24,0,0xff0000,0xff00,0xff,0,ConvertX86,0,
-   ConvertX86p16_24RGB888,0,0,0,PROC_X86_PENTIUM},
+  {16,0,0xf800,0x7e0,0x1f,0,24,0,0xff0000,0xff00,0xff,0,_ConvertX86,0,
+   _ConvertX86p16_24RGB888,0,0,0,PROC_X86_PENTIUM},
 
-  {16,0,0xf800,0x7e0,0x1f,0,24,0,0xff,0xff00,0xff0000,0,ConvertX86,0,
-   ConvertX86p16_24BGR888,0,0,0,PROC_X86_PENTIUM},
+  {16,0,0xf800,0x7e0,0x1f,0,24,0,0xff,0xff00,0xff0000,0,_ConvertX86,0,
+   _ConvertX86p16_24BGR888,0,0,0,PROC_X86_PENTIUM},
 
-  {16,0,0xf800,0x7e0,0x1f,0,16,0,0x1f,0x7e0,0xf800,0,ConvertX86,0,
-   ConvertX86p16_16BGR565,0,0,0,PROC_X86_PENTIUM},
+  {16,0,0xf800,0x7e0,0x1f,0,16,0,0x1f,0x7e0,0xf800,0,_ConvertX86,0,
+   _ConvertX86p16_16BGR565,0,0,0,PROC_X86_PENTIUM},
 
-  {16,0,0xf800,0x7e0,0x1f,0,16,0,0x7c00,0x3e0,0x1f,0,ConvertX86,0,
-   ConvertX86p16_16RGB555,0,0,0,PROC_X86_PENTIUM},
+  {16,0,0xf800,0x7e0,0x1f,0,16,0,0x7c00,0x3e0,0x1f,0,_ConvertX86,0,
+   _ConvertX86p16_16RGB555,0,0,0,PROC_X86_PENTIUM},
 
-  {16,0,0xf800,0x7e0,0x1f,0,16,0,0x1f,0x3e0,0x7c00,0,ConvertX86,0,
-   ConvertX86p16_16BGR555,0,0,0,PROC_X86_PENTIUM},
+  {16,0,0xf800,0x7e0,0x1f,0,16,0,0x1f,0x3e0,0x7c00,0,_ConvertX86,0,
+   _ConvertX86p16_16BGR555,0,0,0,PROC_X86_PENTIUM},
 
-  {16,0,0xf800,0x7e0,0x1f,0,8,0,0xe0,0x1c,0x3,0,ConvertX86,0,
-   ConvertX86p16_8RGB332,0,0,0,PROC_X86_PENTIUM},
+  {16,0,0xf800,0x7e0,0x1f,0,8,0,0xe0,0x1c,0x3,0,_ConvertX86,0,
+   _ConvertX86p16_8RGB332,0,0,0,PROC_X86_PENTIUM},
 
-  {8,1,0,0,0,0,16,0,0,0,0,0,ConvertX86,0,
-   ConvertX86pI8_16,0,0,0,PROC_X86_PENTIUM},
+  {8,1,0,0,0,0,16,0,0,0,0,0,_ConvertX86,0,
+   _ConvertX86pI8_16,0,0,0,PROC_X86_PENTIUM},
      
 
 #endif
diff -rup Hermes-1.3.3.orig/src/Factory.c Hermes-1.3.3/src/Factory.c
--- Hermes-1.3.3.orig/src/Factory.c	2000-12-06 05:55:28.000000000 +0100
+++ Hermes-1.3.3/src/Factory.c	2023-03-03 15:32:04.456935073 +0100
@@ -39,7 +39,7 @@ void Hermes_Factory_Init()
 #ifdef X86_ASSEMBLER
   processor|=PROC_X86_PENTIUM;      /* There are no others at the moment */
 
-  res=Hermes_X86_CPU();
+  res=_Hermes_X86_CPU();
 
   DEBUG_PRINT("CPUID: %x\n",res)
   
@@ -70,20 +70,20 @@ HermesClearer *Hermes_Factory_getClearer
 
   if (processor & PROC_MMX_PENTIUM) {
     switch(bits) {
-      case 32: tmp->func=ClearMMX_32; return tmp;
+      case 32: tmp->func=_ClearMMX_32; return tmp;
       case 24: break;
-      case 16: tmp->func=ClearMMX_16; return tmp;
-       case 8: tmp->func=ClearMMX_8; return tmp;
+      case 16: tmp->func=_ClearMMX_16; return tmp;
+       case 8: tmp->func=_ClearMMX_8; return tmp;
     }
 
   }
 
   if (processor & PROC_X86_PENTIUM) {
     switch(bits) {
-      case 32: tmp->func=ClearX86_32; return tmp;
+      case 32: tmp->func=_ClearX86_32; return tmp;
       case 24: break;
-      case 16: tmp->func=ClearX86_16; return tmp;
-       case 8: tmp->func=ClearX86_8; return tmp;
+      case 16: tmp->func=_ClearX86_16; return tmp;
+       case 8: tmp->func=_ClearX86_8; return tmp;
     }
   }
 
@@ -251,13 +251,13 @@ HermesConverter *Hermes_Factory_getEqual
     int asm_found=0;
     
     switch (bits) {
-      case 32: { tmp->normal=CopyX86p_4byte; asm_found=1; } break;
+      case 32: { tmp->normal=_CopyX86p_4byte; asm_found=1; } break;
       case 24: break;
-      case 16: { tmp->normal=CopyX86p_2byte; asm_found=1; } break;
-       case 8: { tmp->normal=CopyX86p_1byte; asm_found=1; } break;
+      case 16: { tmp->normal=_CopyX86p_2byte; asm_found=1; } break;
+       case 8: { tmp->normal=_CopyX86p_1byte; asm_found=1; } break;
     }
 
-    if (asm_found&1) { tmp->loopnormal=ConvertX86; found=1; }
+    if (asm_found&1) { tmp->loopnormal=_ConvertX86; found=1; }
   }
 
 #endif /* X86_ASSEMBLER */
diff -rup Hermes-1.3.3.orig/src/HeadMMX.h Hermes-1.3.3/src/HeadMMX.h
--- Hermes-1.3.3.orig/src/HeadMMX.h	2000-12-06 05:55:28.000000000 +0100
+++ Hermes-1.3.3/src/HeadMMX.h	2023-03-03 15:32:04.456935073 +0100
@@ -27,21 +27,21 @@
 extern "C" {
 #endif
 
-void STACKCALL ConvertMMX(HermesConverterInterface *);
+void STACKCALL _ConvertMMX(HermesConverterInterface *);
 
-void STACKCALL ClearMMX_32(HermesClearInterface *);
-void STACKCALL ClearMMX_24(HermesClearInterface *);
-void STACKCALL ClearMMX_16(HermesClearInterface *);
-void STACKCALL ClearMMX_8(HermesClearInterface *);
-
-void ConvertMMXpII32_24RGB888();
-void ConvertMMXpII32_16RGB565();
-void ConvertMMXpII32_16BGR565();
-void ConvertMMXpII32_16RGB555();
-void ConvertMMXpII32_16BGR565();
-void ConvertMMXpII32_16BGR555();
+void STACKCALL _ClearMMX_32(HermesClearInterface *);
+void STACKCALL _ClearMMX_24(HermesClearInterface *);
+void STACKCALL _ClearMMX_16(HermesClearInterface *);
+void STACKCALL _ClearMMX_8(HermesClearInterface *);
+
+void _ConvertMMXpII32_24RGB888();
+void _ConvertMMXpII32_16RGB565();
+void _ConvertMMXpII32_16BGR565();
+void _ConvertMMXpII32_16RGB555();
+void _ConvertMMXpII32_16BGR565();
+void _ConvertMMXpII32_16BGR555();
 
-void ConvertMMXp32_16RGB555();
+void _ConvertMMXp32_16RGB555();
 
 #ifdef __cplusplus
 }
@@ -51,6 +51,7 @@ void ConvertMMXp32_16RGB555();
 
 /* Fix the underscore business with ELF compilers */
 
+#if 0
 #if defined(__ELF__) && defined(__GNUC__)
   #ifdef __cplusplus 
   extern "C" {   
@@ -75,6 +76,7 @@ void ConvertMMXp32_16RGB555();
   #endif
 
 #endif /* ELF and GNUC */
+#endif
 
 
 
diff -rup Hermes-1.3.3.orig/src/HeadX86.h Hermes-1.3.3/src/HeadX86.h
--- Hermes-1.3.3.orig/src/HeadX86.h	2000-12-06 05:55:28.000000000 +0100
+++ Hermes-1.3.3/src/HeadX86.h	2023-03-03 15:32:04.456935073 +0100
@@ -27,52 +27,52 @@ extern "C" {
 #endif
 
 
-void STACKCALL ConvertX86(HermesConverterInterface *);
-void STACKCALL ConvertX86Stretch(HermesConverterInterface *);
-void STACKCALL ClearX86_32(HermesClearInterface *);
-void STACKCALL ClearX86_24(HermesClearInterface *);
-void STACKCALL ClearX86_16(HermesClearInterface *);
-void STACKCALL ClearX86_8(HermesClearInterface *);
-
-int STACKCALL Hermes_X86_CPU();
-
-void ConvertX86p32_32BGR888();
-void ConvertX86p32_32RGBA888();
-void ConvertX86p32_32BGRA888();
-void ConvertX86p32_24RGB888();
-void ConvertX86p32_24BGR888();
-void ConvertX86p32_16RGB565();
-void ConvertX86p32_16BGR565();
-void ConvertX86p32_16RGB555();
-void ConvertX86p32_16BGR555();
-void ConvertX86p32_8RGB332();
-
-void ConvertX86p32_16RGB565_S();
-
-void ConvertX86p16_32RGB888();
-void ConvertX86p16_32BGR888();
-void ConvertX86p16_32RGBA888();
-void ConvertX86p16_32BGRA888();
-void ConvertX86p16_24RGB888();
-void ConvertX86p16_24BGR888();
-void ConvertX86p16_16BGR565();
-void ConvertX86p16_16RGB555();
-void ConvertX86p16_16BGR555();
-void ConvertX86p16_8RGB332();
-
-void CopyX86p_4byte();
-void CopyX86p_3byte();
-void CopyX86p_2byte();
-void CopyX86p_1byte();
-
-void ConvertX86pI8_32();
-void ConvertX86pI8_24();
-void ConvertX86pI8_16();
-
-extern int32 ConvertX86p16_32RGB888_LUT_X86[512];
-extern int32 ConvertX86p16_32BGR888_LUT_X86[512];
-extern int32 ConvertX86p16_32RGBA888_LUT_X86[512];
-extern int32 ConvertX86p16_32BGRA888_LUT_X86[512];
+void STACKCALL _ConvertX86(HermesConverterInterface *);
+void STACKCALL _ConvertX86Stretch(HermesConverterInterface *);
+void STACKCALL _ClearX86_32(HermesClearInterface *);
+void STACKCALL _ClearX86_24(HermesClearInterface *);
+void STACKCALL _ClearX86_16(HermesClearInterface *);
+void STACKCALL _ClearX86_8(HermesClearInterface *);
+
+int STACKCALL _Hermes_X86_CPU();
+
+void _ConvertX86p32_32BGR888();
+void _ConvertX86p32_32RGBA888();
+void _ConvertX86p32_32BGRA888();
+void _ConvertX86p32_24RGB888();
+void _ConvertX86p32_24BGR888();
+void _ConvertX86p32_16RGB565();
+void _ConvertX86p32_16BGR565();
+void _ConvertX86p32_16RGB555();
+void _ConvertX86p32_16BGR555();
+void _ConvertX86p32_8RGB332();
+
+void _ConvertX86p32_16RGB565_S();
+
+void _ConvertX86p16_32RGB888();
+void _ConvertX86p16_32BGR888();
+void _ConvertX86p16_32RGBA888();
+void _ConvertX86p16_32BGRA888();
+void _ConvertX86p16_24RGB888();
+void _ConvertX86p16_24BGR888();
+void _ConvertX86p16_16BGR565();
+void _ConvertX86p16_16RGB555();
+void _ConvertX86p16_16BGR555();
+void _ConvertX86p16_8RGB332();
+
+void _CopyX86p_4byte();
+void _CopyX86p_3byte();
+void _CopyX86p_2byte();
+void _CopyX86p_1byte();
+
+void _ConvertX86pI8_32();
+void _ConvertX86pI8_24();
+void _ConvertX86pI8_16();
+
+extern int32 _ConvertX86p16_32RGB888_LUT_X86[512];
+extern int32 _ConvertX86p16_32BGR888_LUT_X86[512];
+extern int32 _ConvertX86p16_32RGBA888_LUT_X86[512];
+extern int32 _ConvertX86p16_32BGRA888_LUT_X86[512];
   
 #ifdef __cplusplus
 }
@@ -83,6 +83,7 @@ extern int32 ConvertX86p16_32BGRA888_LUT
 
 /* Now fix up the ELF underscore problem */
 
+#if 0
 #if defined(__ELF__) && defined(__GNUC__)
   #ifdef __cplusplus
   extern "C" {
@@ -142,6 +143,7 @@ extern int32 ConvertX86p16_32BGRA888_LUT
   #endif
 
 #endif /* ELF & GNU */
+#endif
 
 
 
diff -rup Hermes-1.3.3.orig/src/c_16.c Hermes-1.3.3/src/c_16.c
--- Hermes-1.3.3.orig/src/c_16.c	1999-12-05 01:09:02.000000000 +0100
+++ Hermes-1.3.3/src/c_16.c	2023-03-03 15:32:04.452935079 +0100
@@ -151,7 +151,7 @@ void ConvertC_16rgb565_16bgr565(char8 *s
   int32 s_pixel;
 
   /* If we are not aligned to a dword, try and convert a single pixel */
-  if(((int)dest&0x3)!=0)
+  if(((unsigned long)dest&0x3)!=0)
   { s_pixel=(int32)READ16(source);
 
     /* Swap around R and B, leave G unchanged */
@@ -194,7 +194,7 @@ void ConvertC_16rgb565_16rgb555(char8 *s
   int32 s_pixel;
 
   /* If we are not aligned to a dword, try and convert a single pixel */
-  if(((int)dest&0x3)!=0)
+  if(((unsigned long)dest&0x3)!=0)
   { s_pixel=(int32)READ16(source);
 
     /* Leave blue untouched, mask red and shift by one, mask green and shift
@@ -240,7 +240,7 @@ void ConvertC_16rgb565_16bgr555(char8 *s
   int32 s_pixel;
 
   /* If we are not aligned to a dword, try and convert a single pixel */
-  if(((int)dest&0x3)!=0)
+  if(((unsigned long)dest&0x3)!=0)
   { s_pixel=(int32)READ16(source);
 
     /* Shift red right by 11, mask green and shift right one, shift blue
@@ -285,7 +285,7 @@ void ConvertC_16rgb565_8rgb332(char8 *so
   unsigned int i;
 
   /* Align to dword first */
-  while(((int)dest&0x3)!=0)
+  while(((unsigned long)dest&0x3)!=0)
   { s_block=(int32)READ16(source);
   
     s_block=((s_block&0xe000)>>8)|((s_block&0x0700)>>6)|
@@ -440,7 +440,7 @@ void ConvertC_16rgb565_16bgr565_S(char8
   int32 p;
 
   /* If we are not aligned to a dword, try and convert a single pixel */
-  if(((int)dest&0x3)!=0) {
+  if(((unsigned long)dest&0x3)!=0) {
 
     /* Swap r and b, leave g untouched */
   *((short16*)dest)=(short16)(*((short16*)source+(x>>16))>>11)|
@@ -487,7 +487,7 @@ void ConvertC_16rgb565_16rgb555_S(char8
   int32 p;
 
   /* If we are not aligned to a dword, try and convert a single pixel */
-  if(((int)dest&0x3)!=0) {
+  if(((unsigned long)dest&0x3)!=0) {
   *((short16*)dest)=(short16)((*((short16*)source+(x>>16))&0xf800)>>1)|
                              ((*((short16*)source+(x>>16))&0x7c0)>>1)|
                              (*((short16*)source+(x>>16))&0x1f);
@@ -531,7 +531,7 @@ void ConvertC_16rgb565_16bgr555_S(char8
   int32 p;
 
   /* If we are not aligned to a dword, try and convert a single pixel */
-  if(((int)dest&0x3)!=0) {
+  if(((unsigned long)dest&0x3)!=0) {
 
   *((short16*)dest)=(short16)((*((short16*)source+(x>>16))&0xf800)>>11)|
                              ((*((short16*)source+(x>>16))&0x7c0)>>1)|
@@ -577,7 +577,7 @@ void ConvertC_16rgb565_8rgb332_S(char8 *
 
   /* Write single pixels until the destination address is aligned mod 4 */
 
-  while (((int)dest&0x3)!=0) {
+  while (((unsigned long)dest&0x3)!=0) {
     *dest=((*((short16*)source+(x>>16))>>8)&0xe0)|
           ((*((short16*)source+(x>>16))>>6)&0x1c)|
           ((*((short16*)source+(x>>16))>>3)&0x3);
diff -rup Hermes-1.3.3.orig/src/c_32.c Hermes-1.3.3/src/c_32.c
--- Hermes-1.3.3.orig/src/c_32.c	2000-03-08 20:26:24.000000000 +0100
+++ Hermes-1.3.3/src/c_32.c	2023-03-03 15:32:04.452935079 +0100
@@ -92,7 +92,7 @@ void ConvertC_32rgb888_24rgb888(char8 *s
 
   /* Align mod 4 (quite important in this case.. ) */
 
-  while (((int)dest&0x3)!=0) 
+  while (((unsigned long)dest&0x3)!=0) 
   { s_pixel=READ32(source);
 
     *(dest+R_24)=*(s_point+R_32);
@@ -197,7 +197,7 @@ void ConvertC_32rgb888_16rgb565(char8 *s
 
   /* If the current pixel isn't dword aligned, try write one pixel first */
   
-  if((int)dest_32&0x3)
+  if((unsigned long)dest_32&0x3)
   { s_pixel=((*source_32>>8)&0xf800)|
             ((*source_32>>5)&0x7e0)|
             ((*source_32>>3)&0x1f);
@@ -255,7 +255,7 @@ void ConvertC_32rgb888_16bgr565(char8 *s
 
   /* If the current pixel isn't dword aligned, try write one pixel first */
 
-  if(((int)dest&0x3)!=0)
+  if(((unsigned long)dest&0x3)!=0)
   { s_pixel=READ32(source);
  
     r=(s_pixel>>19)&0x1f;
@@ -315,7 +315,7 @@ void ConvertC_32rgb888_16rgb555(char8 *s
   short16 d_pixel;
   unsigned int i;
 
-  if(((int)dest&0x3)!=0)
+  if(((unsigned long)dest&0x3)!=0)
   { s_pixel=READ32(source);
  
     r=(s_pixel>>9)&0x7c00;
@@ -372,7 +372,7 @@ void ConvertC_32rgb888_16bgr555(char8 *s
   unsigned int i;
 
 
-  if(((int)dest&0x3)!=0)
+  if(((unsigned long)dest&0x3)!=0)
   { s_pixel=READ32(source);
  
     r=(s_pixel>>19)&0x1f;
@@ -428,7 +428,7 @@ void ConvertC_32rgb888_8rgb332(char8 *so
 
   /* Process single pixels until we are dword aligned */
 
-  while(((int)dest&0x3)!=0)
+  while(((unsigned long)dest&0x3)!=0)
   { s_pixel=READ32(source);
 
     d_pixel=(char8)(((s_pixel>>16)&0xe0)|
@@ -557,7 +557,7 @@ void ConvertC_32rgb888_16rgb565_S(char8
   int32 p; 
 
   /* Align mod 4 */
-  if ((int)dest&3) {
+  if ((unsigned long)dest&3) {
     *((short16*)dest)=(short16)(((*((int32*)source+(x>>16))>>8)&0xf800)|
 				((*((int32*)source+(x>>16))>>5)&0x7e0)|
 				((*((int32*)source+(x>>16))>>3)&0x1f));
@@ -602,7 +602,7 @@ void ConvertC_32rgb888_16bgr565_S(char8
   int32 p; 
 
   /* Align mod 4 */
-  if ((int)dest&3) {
+  if ((unsigned long)dest&3) {
     *((short16*)dest)=(short16)(((*((int32*)source+(x>>16))>>19)&0x1f)|
 				((*((int32*)source+(x>>16))>>5)&0x7e0)|
 				((*((int32*)source+(x>>16))<<8)&0xf800));
@@ -722,7 +722,7 @@ void ConvertC_32rgb888_8rgb332_S(char8 *
 
   /* Write single pixels until the destination address is aligned mod 4 */
 
-  while (((int)dest&0x3)!=0) {
+  while (((unsigned long)dest&0x3)!=0) {
     *dest=(char8)(((*((int32*)source+(x>>16))>>16)&0xe0)|
 		  ((*((int32*)source+(x>>16))>>11)&0x1c)|
 		  ((*((int32*)source+(x>>16))>>6)&0x3));
diff -rup Hermes-1.3.3.orig/src/c_clr.c Hermes-1.3.3/src/c_clr.c
--- Hermes-1.3.3.orig/src/c_clr.c	1999-12-05 01:09:05.000000000 +0100
+++ Hermes-1.3.3/src/c_clr.c	2023-03-03 15:32:04.452935079 +0100
@@ -69,7 +69,7 @@ void ClearC_16(HermesClearInterface *ifa
   { count=iface->width;
   
     /* Align destination */
-    if((int)dest&0x3)
+    if((unsigned long)dest&0x3)
     { *((short16 *)dest)=(short16)iface->value;
       dest+=2;
       count--;
@@ -105,7 +105,7 @@ void ClearC_8(HermesClearInterface *ifac
   do
   { count=iface->width;
    
-    while(((int)dest&0x3))         /* Align to dword boundary */
+    while(((unsigned long)dest&0x3))         /* Align to dword boundary */
     { *dest++=(char8)value;
       count--;
       if(!count) goto yloop;	   /* GOTO's are nice ;) */
diff -rup Hermes-1.3.3.orig/src/c_cpy.c Hermes-1.3.3/src/c_cpy.c
--- Hermes-1.3.3.orig/src/c_cpy.c	1999-12-05 01:09:06.000000000 +0100
+++ Hermes-1.3.3/src/c_cpy.c	2023-03-03 15:32:04.452935079 +0100
@@ -76,7 +76,7 @@ void CopyC_2byte_S(char8 *source,char8 *
 { unsigned int x=0, c;
 
   /* Alignment mod 4 */
-  if ((int)dest&3) {
+  if ((unsigned long)dest&3) {
     *((short16*)dest)=*((short16*)source+(x>>16)); x+=inc_source; 
     dest+=2;
     count--;
@@ -103,7 +103,7 @@ void CopyC_1byte_S(char8 *source,char8 *
 { unsigned int x=0, c;
 
   /* Alignment mod 4 */
-  while ((int)dest&3) {
+  while ((unsigned long)dest&3) {
     *dest=*(source+(x>>16));
     x+=inc_source;
     dest++; count--;
diff -rup Hermes-1.3.3.orig/src/c_genrc_ao_blit.c Hermes-1.3.3/src/c_genrc_ao_blit.c
--- Hermes-1.3.3.orig/src/c_genrc_ao_blit.c	2023-03-03 15:31:26.724986694 +0100
+++ Hermes-1.3.3/src/c_genrc_ao_blit.c	2023-03-03 15:32:04.456935073 +0100
@@ -104,7 +104,7 @@ void ConvertC_Generic32_A_Generic24_O_Bl
 { unsigned int s_pixel, d_pixel, r, g, b, a;
   int sr, sg, sb, dr, dg, db, da;
   float sa;
-  char8 *d_ptr=(char8 *)((int)&s_pixel);
+  char8 *d_ptr=(char8 *)(&s_pixel);
   unsigned int count;
   char8 *source=iface->s_pixels,*dest=iface->d_pixels;    
   DEBUG_PRINT("ConvertC_Generic32_A_Generic24_O_Blit called\n","");
diff -rup Hermes-1.3.3.orig/src/c_i8.c Hermes-1.3.3/src/c_i8.c
--- Hermes-1.3.3.orig/src/c_i8.c	1999-12-05 01:09:08.000000000 +0100
+++ Hermes-1.3.3/src/c_i8.c	2023-03-03 15:32:04.452935079 +0100
@@ -123,7 +123,7 @@ void ConvertC_index8_16(HermesConverterI
 
     count=iface->s_width;
 
-    if(((int)dest&0x3)!=0)
+    if(((unsigned long)dest&0x3)!=0)
     { WRITE16(dest++,(short16)iface->lookup[*source++]);
       dest++;
       count--;
diff -rup Hermes-1.3.3.orig/src/c_muhmu.c Hermes-1.3.3/src/c_muhmu.c
--- Hermes-1.3.3.orig/src/c_muhmu.c	1999-12-05 01:09:10.000000000 +0100
+++ Hermes-1.3.3/src/c_muhmu.c	2023-03-03 15:32:04.452935079 +0100
@@ -145,7 +145,7 @@ void ConvertC_muhmu32_16rgb565(char8 *so
   
   /* If the current pixel isn't dword aligned, try write one pixel first */
 
-  if(((int)dest&0x3)!=0)
+  if(((unsigned long)dest&0x3)!=0)
   { s_pixel=READ32(source);
   
     r=(s_pixel>>12)&0xf800;
@@ -207,7 +207,7 @@ void ConvertC_muhmu32_16bgr565(char8 *so
 
   /* If the current pixel isn't dword aligned, try write one pixel first */
 
-  if(((int)dest&0x3)!=0)
+  if(((unsigned long)dest&0x3)!=0)
   { s_pixel=READ32(source);
  
     r=(s_pixel>>23)&0x1f;
@@ -269,7 +269,7 @@ void ConvertC_muhmu32_16rgb555(char8 *so
   unsigned int i;
 
 
-  if(((int)dest&0x3)!=0)
+  if(((unsigned long)dest&0x3)!=0)
   { s_pixel=READ32(source);
  
     r=(s_pixel>>13)&0x7c00;
@@ -326,7 +326,7 @@ void ConvertC_muhmu32_16bgr555(char8 *so
   unsigned int i;
 
 
-  if(((int)dest&0x3)!=0)
+  if(((unsigned long)dest&0x3)!=0)
   { s_pixel=READ32(source);
  
     r=(s_pixel>>23)&0x1f;
@@ -383,7 +383,7 @@ void ConvertC_muhmu32_8rgb332(char8 *sou
 
   /* Process single pixels until we are dword aligned */
 
-  while(((int)dest&0x3)!=0)
+  while(((unsigned long)dest&0x3)!=0)
   { s_pixel=READ32(source);
 
     d_pixel=(char8)(((s_pixel>>20)&0xe0)|
@@ -599,7 +599,7 @@ void ConvertC_muhmu32_8rgb332_S(char8 *s
 
   /* Write single pixels until the destination address is aligned mod 4 */
 
-  while (((int)dest&0x3)!=0) {
+  while (((unsigned long)dest&0x3)!=0) {
     *dest=(char8)(((*((int32*)source+(x>>16))>>20)&0xe0)|
                   ((*((int32*)source+(x>>16))>>13)&0x1c)|
                   ((*((int32*)source+(x>>16))>>6)&0x3));
