diff -rupN Python-3.6.4.orig/Include/object.h Python-3.6.4/Include/object.h
--- Python-3.6.4.orig/Include/object.h	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Include/object.h	2018-03-25 01:13:09.888364584 +0100
@@ -786,7 +786,7 @@ PyAPI_FUNC(void) _Py_Dealloc(PyObject *)
 
 #define Py_DECREF(op)                                   \
     do {                                                \
-        PyObject *_py_decref_tmp = (PyObject *)(op);    \
+        PyObject *volatile _py_decref_tmp = (PyObject *)(op);    \
         if (_Py_DEC_REFTOTAL  _Py_REF_DEBUG_COMMA       \
         --(_py_decref_tmp)->ob_refcnt != 0)             \
             _Py_CHECK_REFCNT(_py_decref_tmp)            \
diff -rupN Python-3.6.4.orig/Include/pyfpe.h Python-3.6.4/Include/pyfpe.h
--- Python-3.6.4.orig/Include/pyfpe.h	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Include/pyfpe.h	2018-03-25 00:02:24.032910778 +0100
@@ -131,7 +131,7 @@ extern "C" {
 #include <math.h>
 extern jmp_buf PyFPE_jbuf;
 extern int PyFPE_counter;
-extern double PyFPE_dummy(void *);
+extern double PyFPE_dummy(volatile void *);
 
 #define PyFPE_START_PROTECT(err_string, leave_stmt) \
 if (!PyFPE_counter++ && setjmp(PyFPE_jbuf)) { \
diff -rupN Python-3.6.4.orig/Include/pymath.h Python-3.6.4/Include/pymath.h
--- Python-3.6.4.orig/Include/pymath.h	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Include/pymath.h	2018-03-25 00:08:50.704902364 +0100
@@ -14,15 +14,15 @@ functions and constants
  *
  *Note: PC/pyconfig.h defines copysign as _copysign
  */
-#ifndef HAVE_COPYSIGN
+#if !HAVE_DECL_COPYSIGN
 extern double copysign(double, double);
 #endif
 
-#ifndef HAVE_ROUND
+#if !HAVE_DECL_ROUND
 extern double round(double);
 #endif
 
-#ifndef HAVE_HYPOT
+#if !HAVE_DECL_HYPOT
 extern double hypot(double, double);
 #endif
 
diff -rupN Python-3.6.4.orig/Include/pymem.h Python-3.6.4/Include/pymem.h
--- Python-3.6.4.orig/Include/pymem.h	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Include/pymem.h	2018-03-25 00:02:24.032910778 +0100
@@ -135,11 +135,9 @@ PyAPI_FUNC(char *) _PyMem_Strdup(const c
  */
 
 #define PyMem_New(type, n) \
-  ( ((size_t)(n) > PY_SSIZE_T_MAX / sizeof(type)) ? NULL :	\
-	( (type *) PyMem_Malloc((n) * sizeof(type)) ) )
+	( (type *) PyMem_Malloc((n) * sizeof(type)) )
 #define PyMem_NEW(type, n) \
-  ( ((size_t)(n) > PY_SSIZE_T_MAX / sizeof(type)) ? NULL :	\
-	( (type *) PyMem_MALLOC((n) * sizeof(type)) ) )
+	( (type *) PyMem_MALLOC((n) * sizeof(type)) )
 
 /*
  * The value of (p) is always clobbered by this macro regardless of success.
@@ -148,11 +146,9 @@ PyAPI_FUNC(char *) _PyMem_Strdup(const c
  * caller's memory error handler to not lose track of it.
  */
 #define PyMem_Resize(p, type, n) \
-  ( (p) = ((size_t)(n) > PY_SSIZE_T_MAX / sizeof(type)) ? NULL :	\
-	(type *) PyMem_Realloc((p), (n) * sizeof(type)) )
+  ( (p) = (type *) PyMem_Realloc((p), (n) * sizeof(type)) )
 #define PyMem_RESIZE(p, type, n) \
-  ( (p) = ((size_t)(n) > PY_SSIZE_T_MAX / sizeof(type)) ? NULL :	\
-	(type *) PyMem_REALLOC((p), (n) * sizeof(type)) )
+  ( (p) = (type *) PyMem_REALLOC((p), (n) * sizeof(type)) )
 
 /* PyMem{Del,DEL} are left over from ancient days, and shouldn't be used
  * anymore.  They're just confusing aliases for PyMem_{Free,FREE} now.
diff -rupN Python-3.6.4.orig/Include/pyport.h Python-3.6.4/Include/pyport.h
--- Python-3.6.4.orig/Include/pyport.h	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Include/pyport.h	2018-03-25 00:02:24.032910778 +0100
@@ -81,7 +81,14 @@ typedef intptr_t        Py_intptr_t;
  * unsigned integral type).  See PEP 353 for details.
  */
 #ifdef HAVE_SSIZE_T
+#ifdef __MINT__
+/* declared as int32_t in <sys/types.h>,
+   which is the same size but does
+   not match the "z" format specifier */
+typedef long int        Py_ssize_t;
+#else
 typedef ssize_t         Py_ssize_t;
+#endif
 #elif SIZEOF_VOID_P == SIZEOF_SIZE_T
 typedef Py_intptr_t     Py_ssize_t;
 #else
diff -rupN Python-3.6.4.orig/Lib/compileall.py Python-3.6.4/Lib/compileall.py
--- Python-3.6.4.orig/Lib/compileall.py	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Lib/compileall.py	2018-03-25 00:02:24.032910778 +0100
@@ -28,12 +28,12 @@ def _walk_dir(dir, ddir=None, maxlevels=
     if quiet < 2 and isinstance(dir, os.PathLike):
         dir = os.fspath(dir)
     if not quiet:
-        print('Listing {!r}...'.format(dir))
+        sys.stderr.write('Listing {!r}...\n'.format(dir))
     try:
         names = os.listdir(dir)
     except OSError:
         if quiet < 2:
-            print("Can't list {!r}".format(dir))
+            sys.stderr.write("Can't list {!r}\n".format(dir))
         names = []
     names.sort()
     for name in names:
@@ -152,23 +152,23 @@ def compile_file(fullname, ddir=None, fo
                 if quiet >= 2:
                     return success
                 elif quiet:
-                    print('*** Error compiling {!r}...'.format(fullname))
+                    sys.stderr.write('*** Error compiling {!r}...\n'.format(fullname))
                 else:
-                    print('*** ', end='')
+                    sys.stderr.write('*** ')
                 # escape non-printable characters in msg
-                msg = err.msg.encode(sys.stdout.encoding,
+                msg = err.msg.encode(sys.stderr.encoding,
                                      errors='backslashreplace')
-                msg = msg.decode(sys.stdout.encoding)
-                print(msg)
+                msg = msg.decode(sys.stderr.encoding)
+                sys.stderr.write('{!r}...\n'.format(msg))
             except (SyntaxError, UnicodeError, OSError) as e:
                 success = False
                 if quiet >= 2:
                     return success
                 elif quiet:
-                    print('*** Error compiling {!r}...'.format(fullname))
+                    sys.stderr.write('*** Error compiling {!r}...\n'.format(fullname))
                 else:
-                    print('*** ', end='')
-                print(e.__class__.__name__ + ':', e)
+                    sys.stderr.write('*** ')
+                sys.stderr.write('{!r}\n'.format(e.__class__.__name__ + ':', e))
             else:
                 if ok == 0:
                     success = False
@@ -191,7 +191,7 @@ def compile_path(skip_curdir=1, maxlevel
     for dir in sys.path:
         if (not dir or dir == os.curdir) and skip_curdir:
             if quiet < 2:
-                print('Skipping current directory')
+                sys.stderr.write('Skipping current directory\n')
         else:
             success = success and compile_dir(dir, maxlevels, None,
                                               force, quiet=quiet,
@@ -260,7 +260,7 @@ def main():
                     compile_dests.append(line.strip())
         except OSError:
             if args.quiet < 2:
-                print("Error reading file list {}".format(args.flist))
+                sys.stderr.write("Error reading file list {}\n".format(args.flist))
             return False
 
     if args.workers is not None:
@@ -285,7 +285,7 @@ def main():
                                 quiet=args.quiet)
     except KeyboardInterrupt:
         if args.quiet < 2:
-            print("\n[interrupted]")
+            sys.stderr.write("\n[interrupted]\n")
         return False
     return True
 
diff -rupN Python-3.6.4.orig/Lib/plat-mint/regen Python-3.6.4/Lib/plat-mint/regen
--- Python-3.6.4.orig/Lib/plat-mint/regen	1970-01-01 01:00:00.000000000 +0100
+++ Python-3.6.4/Lib/plat-mint/regen	2018-03-25 00:02:24.032910778 +0100
@@ -0,0 +1,3 @@
+#! /bin/sh
+set -v
+eval $PYTHON_FOR_BUILD ../../Tools/scripts/h2py.py -i "'(u_long)'" ${SYSROOT}/usr/include/netinet/in.h
diff -rupN Python-3.6.4.orig/Modules/_ctypes/_ctypes.c Python-3.6.4/Modules/_ctypes/_ctypes.c
--- Python-3.6.4.orig/Modules/_ctypes/_ctypes.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Modules/_ctypes/_ctypes.c	2018-03-25 01:53:11.840312316 +0100
@@ -672,6 +672,7 @@ CDataType_in_dll(PyObject *type, PyObjec
         return NULL;
     }
 #else
+	(void)handle;
     address = (void *)ctypes_dlsym(handle, name);
     if (!address) {
 #ifdef __CYGWIN__
@@ -3388,6 +3389,7 @@ PyCFuncPtr_FromDll(PyTypeObject *type, P
         return NULL;
     }
 #else
+	(void)handle;
     address = (PPROC)ctypes_dlsym(handle, name);
     if (!address) {
 #ifdef __CYGWIN__
diff -rupN Python-3.6.4.orig/Modules/_ctypes/callproc.c Python-3.6.4/Modules/_ctypes/callproc.c
--- Python-3.6.4.orig/Modules/_ctypes/callproc.c	2018-03-24 23:10:10.028057154 +0100
+++ Python-3.6.4/Modules/_ctypes/callproc.c	2018-03-25 01:53:57.008311333 +0100
@@ -1347,6 +1347,7 @@ static PyObject *py_dl_open(PyObject *se
     }
     handle = ctypes_dlopen(name_str, mode);
     Py_XDECREF(name2);
+	(void)name_str;
     if (!handle) {
         char *errmsg = ctypes_dlerror();
         if (!errmsg)
@@ -1364,7 +1365,7 @@ static PyObject *py_dl_close(PyObject *s
 
     if (!PyArg_ParseTuple(args, "O&:dlclose", &_parse_voidp, &handle))
         return NULL;
-    if (dlclose(handle)) {
+    if (ctypes_dlclose(handle)) {
         PyErr_SetString(PyExc_OSError,
                                ctypes_dlerror());
         return NULL;
diff -rupN Python-3.6.4.orig/Modules/_ctypes/ctypes.h Python-3.6.4/Modules/_ctypes/ctypes.h
--- Python-3.6.4.orig/Modules/_ctypes/ctypes.h	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Modules/_ctypes/ctypes.h	2018-03-25 00:02:24.036910778 +0100
@@ -3,6 +3,8 @@
 #endif
 
 #ifndef MS_WIN32
+#undef max
+#undef min
 #define max(a, b) ((a) > (b) ? (a) : (b))
 #define min(a, b) ((a) < (b) ? (a) : (b))
 
diff -rupN Python-3.6.4.orig/Modules/_ctypes/ctypes_dlfcn.h Python-3.6.4/Modules/_ctypes/ctypes_dlfcn.h
--- Python-3.6.4.orig/Modules/_ctypes/ctypes_dlfcn.h	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Modules/_ctypes/ctypes_dlfcn.h	2018-03-25 00:02:24.036910778 +0100
@@ -7,15 +7,26 @@ extern "C" {
 
 #ifndef MS_WIN32
 
+#ifdef HAVE_DLFCN_H
 #include <dlfcn.h>
+#endif
 
 #ifndef CTYPES_DARWIN_DLFCN
 
+#ifdef __MINT__
+#define ctypes_dlsym(handle, name) 0
+#define ctypes_dlerror() "not supported"
+#define ctypes_dlopen(name, mode) 0
+#define ctypes_dlclose(handle) -1
+#define ctypes_dladdr(handle, info) 0
+#define RTLD_NOW 0
+#else
 #define ctypes_dlsym dlsym
 #define ctypes_dlerror dlerror
 #define ctypes_dlopen dlopen
 #define ctypes_dlclose dlclose
 #define ctypes_dladdr dladdr
+#endif
 
 #endif /* !CTYPES_DARWIN_DLFCN */
 
diff -rupN Python-3.6.4.orig/Modules/_ctypes/libffi/src/m68k/ffi.c Python-3.6.4/Modules/_ctypes/libffi/src/m68k/ffi.c
--- Python-3.6.4.orig/Modules/_ctypes/libffi/src/m68k/ffi.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Modules/_ctypes/libffi/src/m68k/ffi.c	2018-03-25 00:02:24.036910778 +0100
@@ -23,7 +23,7 @@ void rtems_cache_flush_multiple_data_lin
 
 void ffi_call_SYSV (extended_cif *,
 		    unsigned, unsigned,
-		    void *, void (*fn) ());
+		    void *, void (*fn) (void));
 void *ffi_prep_args (void *stack, extended_cif *ecif);
 void ffi_closure_SYSV (ffi_closure *);
 void ffi_closure_struct_SYSV (ffi_closure *);
@@ -219,7 +219,7 @@ ffi_prep_cif_machdep (ffi_cif *cif)
 }
 
 void
-ffi_call (ffi_cif *cif, void (*fn) (), void *rvalue, void **avalue)
+ffi_call (ffi_cif *cif, void (*fn) (void), void *rvalue, void **avalue)
 {
   extended_cif ecif;
 
diff -rupN Python-3.6.4.orig/Modules/_decimal/libmpdec/mpdecimal.c Python-3.6.4/Modules/_decimal/libmpdec/mpdecimal.c
--- Python-3.6.4.orig/Modules/_decimal/libmpdec/mpdecimal.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Modules/_decimal/libmpdec/mpdecimal.c	2018-03-25 01:49:51.864316668 +0100
@@ -1408,8 +1408,10 @@ _c32_qget_u64(int use_sign, const mpd_t
     switch (tmp.len) {
     case 3:
         ret += (uint64_t)tmp_data[2] * 1000000000000000000ULL;
+        /* fall through */
     case 2:
         ret += (uint64_t)tmp_data[1] * 1000000000ULL;
+        /* fall through */
     case 1:
         ret += tmp_data[0];
         break;
diff -rupN Python-3.6.4.orig/Modules/expat/xmlparse.c Python-3.6.4/Modules/expat/xmlparse.c
--- Python-3.6.4.orig/Modules/expat/xmlparse.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Modules/expat/xmlparse.c	2018-03-25 00:02:24.036910778 +0100
@@ -30,6 +30,12 @@
    USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
 
+#ifdef _WIN32
+#include "winconfig.h"
+#elif defined(HAVE_EXPAT_CONFIG_H)
+#include <expat_config.h>
+#endif /* ndef _WIN32 */
+
 #if !defined(_GNU_SOURCE)
 # define _GNU_SOURCE 1                  /* syscall prototype */
 #endif
@@ -53,12 +59,6 @@
 
 #define XML_BUILDING_EXPAT 1
 
-#ifdef _WIN32
-#include "winconfig.h"
-#elif defined(HAVE_EXPAT_CONFIG_H)
-#include <expat_config.h>
-#endif /* ndef _WIN32 */
-
 #include "ascii.h"
 #include "expat.h"
 #include "siphash.h"
diff -rupN Python-3.6.4.orig/Modules/expat/xmltok.c Python-3.6.4/Modules/expat/xmltok.c
--- Python-3.6.4.orig/Modules/expat/xmltok.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Modules/expat/xmltok.c	2018-03-25 00:02:24.036910778 +0100
@@ -30,10 +30,6 @@
    USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
 
-#include <stddef.h>
-#include <stdbool.h>
-#include <string.h>  // memcpy
-
 #ifdef _WIN32
 #include "winconfig.h"
 #else
@@ -42,6 +38,11 @@
 #endif
 #endif /* ndef _WIN32 */
 
+#include <stddef.h>
+#include <stdbool.h>
+#include <string.h>  // memcpy
+
+
 #include "expat_external.h"
 #include "internal.h"
 #include "xmltok.h"
diff -rupN Python-3.6.4.orig/Modules/faulthandler.c Python-3.6.4/Modules/faulthandler.c
--- Python-3.6.4.orig/Modules/faulthandler.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Modules/faulthandler.c	2018-03-25 01:40:09.328329344 +0100
@@ -458,7 +458,10 @@ faulthandler_enable(void)
         sigemptyset(&action.sa_mask);
         /* Do not prevent the signal from being received from within
            its own signal handler */
-        action.sa_flags = SA_NODEFER;
+        action.sa_flags = 0;
+#ifdef SA_NODEFER
+        action.sa_flags |= SA_NODEFER;
+#endif
 #ifdef HAVE_SIGALTSTACK
         if (stack.ss_sp != NULL) {
             /* Call the signal handler on an alternate signal stack
@@ -738,11 +741,16 @@ faulthandler_register(int signum, int ch
     /* if the signal is received while the kernel is executing a system
        call, try to restart the system call instead of interrupting it and
        return EINTR. */
-    action.sa_flags = SA_RESTART;
+    action.sa_flags = 0;
+#ifdef SA_RESTART
+    action.sa_flags |= SA_RESTART;
+#endif
     if (chain) {
         /* do not prevent the signal from being received from within its
            own signal handler */
-        action.sa_flags = SA_NODEFER;
+#ifdef SA_NODEFER
+        action.sa_flags |= SA_NODEFER;
+#endif
     }
 #ifdef HAVE_SIGALTSTACK
     if (stack.ss_sp != NULL) {
diff -rupN Python-3.6.4.orig/Modules/fcntlmodule.c Python-3.6.4/Modules/fcntlmodule.c
--- Python-3.6.4.orig/Modules/fcntlmodule.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Modules/fcntlmodule.c	2018-03-25 01:48:49.208318031 +0100
@@ -199,11 +199,19 @@ fcntl_ioctl_impl(PyObject *module, int f
             }
             if (buf == arg) {
                 Py_BEGIN_ALLOW_THREADS /* think array.resize() */
+#if defined(__VMS) || defined(__MINT__)
+                ret = ioctl(fd, code, (void *)arg);
+#else
                 ret = ioctl(fd, code, arg);
+#endif
                 Py_END_ALLOW_THREADS
             }
             else {
+#if defined(__VMS) || defined(__MINT__)
+                ret = ioctl(fd, code, (void *)arg);
+#else
                 ret = ioctl(fd, code, arg);
+#endif
             }
             if (mutate_arg && (len <= IOCTL_BUFSZ)) {
                 memcpy(str, buf, len);
@@ -255,7 +263,11 @@ fcntl_ioctl_impl(PyObject *module, int f
         // Fall-through to outside the 'if' statement.
     }
     Py_BEGIN_ALLOW_THREADS
+#ifdef __MINT__
+    ret = ioctl(fd, code, (void *)arg);
+#else
     ret = ioctl(fd, code, arg);
+#endif
     Py_END_ALLOW_THREADS
     if (ret < 0) {
         PyErr_SetFromErrno(PyExc_IOError);
diff -rupN Python-3.6.4.orig/Modules/mathmodule.c Python-3.6.4/Modules/mathmodule.c
--- Python-3.6.4.orig/Modules/mathmodule.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Modules/mathmodule.c	2018-03-25 01:48:15.560318764 +0100
@@ -1058,8 +1058,8 @@ FUNC1(tanh, tanh, 0,
 
 /* Extend the partials array p[] by doubling its size. */
 static int                          /* non-zero on error */
-_fsum_realloc(double **p_ptr, Py_ssize_t  n,
-             double  *ps,    Py_ssize_t *m_ptr)
+_fsum_realloc(double *volatile *p_ptr, Py_ssize_t  n,
+             double  *ps,    Py_ssize_t volatile *m_ptr)
 {
     void *v = NULL;
     Py_ssize_t m = *m_ptr;
@@ -1117,10 +1117,15 @@ _fsum_realloc(double **p_ptr, Py_ssize_t
 static PyObject*
 math_fsum(PyObject *self, PyObject *seq)
 {
-    PyObject *item, *iter, *sum = NULL;
-    Py_ssize_t i, j, n = 0, m = NUM_PARTIALS;
-    double x, y, t, ps[NUM_PARTIALS], *p = ps;
-    double xsave, special_sum = 0.0, inf_sum = 0.0;
+    PyObject *item, *volatile iter, *volatile sum = NULL;
+    Py_ssize_t i, j;
+    Py_ssize_t volatile n = 0;
+    Py_ssize_t volatile m = NUM_PARTIALS;
+    double x, y, t, ps[NUM_PARTIALS];
+    double *volatile p = ps;
+    double xsave;
+    double volatile special_sum = 0.0;
+    double volatile inf_sum = 0.0;
     volatile double hi, yr, lo;
 
     iter = PyObject_GetIter(seq);
diff -rupN Python-3.6.4.orig/Modules/mmapmodule.c Python-3.6.4/Modules/mmapmodule.c
--- Python-3.6.4.orig/Modules/mmapmodule.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Modules/mmapmodule.c	2018-03-25 00:02:24.036910778 +0100
@@ -51,7 +51,14 @@ my_getallocationgranularity (void)
 #endif
 
 #ifdef UNIX
+#ifdef HAVE_SYS_MMAN_H
 #include <sys/mman.h>
+#else
+#define MAP_SHARED  0
+#define MAP_PRIVATE 1
+#define PROT_WRITE 2
+#define PROT_READ  1
+#endif
 #include <sys/stat.h>
 
 #if defined(HAVE_SYSCONF) && defined(_SC_PAGESIZE)
@@ -132,7 +139,9 @@ mmap_object_dealloc(mmap_object *m_obj)
     if (m_obj->fd >= 0)
         (void) close(m_obj->fd);
     if (m_obj->data!=NULL) {
+#if defined(HAVE_SYS_MMAP_H)
         munmap(m_obj->data, m_obj->size);
+#endif
     }
 #endif /* UNIX */
 
@@ -176,7 +185,9 @@ mmap_close_method(mmap_object *self, PyO
         (void) close(self->fd);
     self->fd = -1;
     if (self->data != NULL) {
+#if defined(HAVE_SYS_MMAP_H)
         munmap(self->data, self->size);
+#endif
         self->data = NULL;
     }
 #endif
@@ -602,10 +613,12 @@ mmap_flush_method(mmap_object *self, PyO
 #elif defined(UNIX)
     /* XXX semantics of return value? */
     /* XXX flags for msync? */
+#if defined(HAVE_SYS_MMAP_H)
     if (-1 == msync(self->data + offset, size, MS_SYNC)) {
         PyErr_SetFromErrno(PyExc_OSError);
         return NULL;
     }
+#endif
     return PyLong_FromLong(0);
 #else
     PyErr_SetString(PyExc_ValueError, "flush not supported on this system");
@@ -1082,7 +1095,9 @@ new_mmap_object(PyTypeObject *type, PyOb
     Py_ssize_t map_size;
     off_t offset = 0;
     int fd, flags = MAP_SHARED, prot = PROT_WRITE | PROT_READ;
+#ifdef HAVE_SYS_MMAP_H
     int devzero = -1;
+#endif
     int access = (int)ACCESS_DEFAULT;
     static char *keywords[] = {"fileno", "length",
                                "flags", "prot",
@@ -1176,6 +1191,7 @@ new_mmap_object(PyTypeObject *type, PyOb
     m_obj->weakreflist = NULL;
     m_obj->exports = 0;
     m_obj->offset = offset;
+#if defined(HAVE_SYS_MMAP_H)
     if (fd == -1) {
         m_obj->fd = -1;
         /* Assume the caller wants to map anonymous memory.
@@ -1209,6 +1225,10 @@ new_mmap_object(PyTypeObject *type, PyOb
     if (devzero != -1) {
         close(devzero);
     }
+#else
+    m_obj->data = (char *)-1;
+    errno = ENOSYS;
+#endif
 
     if (m_obj->data == (char *)-1) {
         m_obj->data = NULL;
diff -rupN Python-3.6.4.orig/Modules/posixmodule.c Python-3.6.4/Modules/posixmodule.c
--- Python-3.6.4.orig/Modules/posixmodule.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Modules/posixmodule.c	2018-03-25 01:28:23.576344702 +0100
@@ -5580,8 +5580,10 @@ static PyObject *
 os_sched_yield_impl(PyObject *module)
 /*[clinic end generated code: output=902323500f222cac input=e54d6f98189391d4]*/
 {
+#ifdef HAVE_SCHED_YIELD
     if (sched_yield())
         return posix_error();
+#endif
     Py_RETURN_NONE;
 }
 
@@ -6858,6 +6860,11 @@ Returns either waitid_result or None if
 no children in a waitable state.
 [clinic start generated code]*/
 
+#ifdef __MINT__
+#undef FSTAT /* defined in fcntl.h */
+#define FSTAT fstat
+#endif
+
 static PyObject *
 os_waitid_impl(PyObject *module, idtype_t idtype, id_t id, int options)
 /*[clinic end generated code: output=5d2e1c0bde61f4d8 input=d8e7f76e052b7920]*/
@@ -9189,7 +9196,7 @@ os_WSTOPSIG_impl(PyObject *module, int s
 #endif /* HAVE_SYS_WAIT_H */
 
 
-#if defined(HAVE_FSTATVFS) && defined(HAVE_SYS_STATVFS_H)
+#if (defined(HAVE_STATVFS) || defined(HAVE_FSTATVFS)) && defined(HAVE_SYS_STATVFS_H)
 #ifdef _SCO_DS
 /* SCO OpenServer 5.0 and later requires _SVID3 before it reveals the
    needed definitions in sys/statvfs.h */
@@ -9239,8 +9246,10 @@ _pystatvfs_fromstructstatvfs(struct stat
 
     return v;
 }
+#endif
 
 
+#if defined(HAVE_FSTATVFS) && defined(HAVE_SYS_STATVFS_H)
 /*[clinic input]
 os.fstatvfs
     fd: int
@@ -9274,7 +9283,6 @@ os_fstatvfs_impl(PyObject *module, int f
 
 
 #if defined(HAVE_STATVFS) && defined(HAVE_SYS_STATVFS_H)
-#include <sys/statvfs.h>
 /*[clinic input]
 os.statvfs
 
diff -rupN Python-3.6.4.orig/Modules/signalmodule.c Python-3.6.4/Modules/signalmodule.c
--- Python-3.6.4.orig/Modules/signalmodule.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Modules/signalmodule.c	2018-03-25 01:34:42.248336462 +0100
@@ -925,9 +925,13 @@ signal_sigwait(PyObject *module, PyObjec
     if (iterable_to_sigset(sigset, &set))
         return NULL;
 
+#ifdef HAVE_SIGWAIT
     Py_BEGIN_ALLOW_THREADS
     err = sigwait(&set, &signum);
     Py_END_ALLOW_THREADS
+#else
+	err = ENOSYS;
+#endif
     if (err) {
         errno = err;
         return PyErr_SetFromErrno(PyExc_OSError);
diff -rupN Python-3.6.4.orig/Objects/codeobject.c Python-3.6.4/Objects/codeobject.c
--- Python-3.6.4.orig/Objects/codeobject.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Objects/codeobject.c	2018-03-25 00:20:55.240886598 +0100
@@ -1,6 +1,6 @@
+#include "Python.h"
 #include <stdbool.h>
 
-#include "Python.h"
 #include "code.h"
 #include "structmember.h"
 
diff -rupN Python-3.6.4.orig/Objects/exceptions.c Python-3.6.4/Objects/exceptions.c
--- Python-3.6.4.orig/Objects/exceptions.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Objects/exceptions.c	2018-03-25 00:02:24.036910778 +0100
@@ -1922,11 +1922,11 @@ UnicodeEncodeError_str(PyObject *self)
         Py_UCS4 badchar = PyUnicode_ReadChar(uself->object, uself->start);
         const char *fmt;
         if (badchar <= 0xff)
-            fmt = "'%U' codec can't encode character '\\x%02x' in position %zd: %U";
+            fmt = "'%U' codec can't encode character '\\x%02x' in position %" PY_FORMAT_SIZE_T "d: %U";
         else if (badchar <= 0xffff)
-            fmt = "'%U' codec can't encode character '\\u%04x' in position %zd: %U";
+            fmt = "'%U' codec can't encode character '\\u%04x' in position %" PY_FORMAT_SIZE_T "d: %U";
         else
-            fmt = "'%U' codec can't encode character '\\U%08x' in position %zd: %U";
+            fmt = "'%U' codec can't encode character '\\U%08x' in position %" PY_FORMAT_SIZE_T "d: %U";
         result = PyUnicode_FromFormat(
             fmt,
             encoding_str,
@@ -1936,7 +1936,7 @@ UnicodeEncodeError_str(PyObject *self)
     }
     else {
         result = PyUnicode_FromFormat(
-            "'%U' codec can't encode characters in position %zd-%zd: %U",
+            "'%U' codec can't encode characters in position %" PY_FORMAT_SIZE_T "d-%" PY_FORMAT_SIZE_T "d: %U",
             encoding_str,
             uself->start,
             uself->end-1,
@@ -2046,7 +2046,7 @@ UnicodeDecodeError_str(PyObject *self)
     if (uself->start < PyBytes_GET_SIZE(uself->object) && uself->end == uself->start+1) {
         int byte = (int)(PyBytes_AS_STRING(((PyUnicodeErrorObject *)self)->object)[uself->start]&0xff);
         result = PyUnicode_FromFormat(
-            "'%U' codec can't decode byte 0x%02x in position %zd: %U",
+            "'%U' codec can't decode byte 0x%02x in position %" PY_FORMAT_SIZE_T "d: %U",
             encoding_str,
             byte,
             uself->start,
@@ -2054,7 +2054,7 @@ UnicodeDecodeError_str(PyObject *self)
     }
     else {
         result = PyUnicode_FromFormat(
-            "'%U' codec can't decode bytes in position %zd-%zd: %U",
+            "'%U' codec can't decode bytes in position %" PY_FORMAT_SIZE_T "d-%" PY_FORMAT_SIZE_T "d: %U",
             encoding_str,
             uself->start,
             uself->end-1,
@@ -2142,11 +2142,11 @@ UnicodeTranslateError_str(PyObject *self
         Py_UCS4 badchar = PyUnicode_ReadChar(uself->object, uself->start);
         const char *fmt;
         if (badchar <= 0xff)
-            fmt = "can't translate character '\\x%02x' in position %zd: %U";
+            fmt = "can't translate character '\\x%02x' in position %" PY_FORMAT_SIZE_T "d: %U";
         else if (badchar <= 0xffff)
-            fmt = "can't translate character '\\u%04x' in position %zd: %U";
+            fmt = "can't translate character '\\u%04x' in position %" PY_FORMAT_SIZE_T "d: %U";
         else
-            fmt = "can't translate character '\\U%08x' in position %zd: %U";
+            fmt = "can't translate character '\\U%08x' in position %" PY_FORMAT_SIZE_T "d: %U";
         result = PyUnicode_FromFormat(
             fmt,
             (int)badchar,
@@ -2155,7 +2155,7 @@ UnicodeTranslateError_str(PyObject *self
         );
     } else {
         result = PyUnicode_FromFormat(
-            "can't translate characters in position %zd-%zd: %U",
+            "can't translate characters in position %" PY_FORMAT_SIZE_T "d-%" PY_FORMAT_SIZE_T "d: %U",
             uself->start,
             uself->end-1,
             reason_str
diff -rupN Python-3.6.4.orig/Objects/floatobject.c Python-3.6.4/Objects/floatobject.c
--- Python-3.6.4.orig/Objects/floatobject.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Objects/floatobject.c	2018-03-25 01:11:41.208366514 +0100
@@ -341,9 +341,9 @@ float_repr(PyFloatObject *v)
  */
 
 static PyObject*
-float_richcompare(PyObject *v, PyObject *w, int op)
+float_richcompare(PyObject *v, PyObject *w, volatile int op)
 {
-    double i, j;
+    volatile double i, j;
     int r = 0;
 
     assert(PyFloat_Check(v));
@@ -1477,10 +1477,10 @@ float_as_integer_ratio(PyObject *v, PyOb
     int exponent;
     int i;
 
-    PyObject *py_exponent = NULL;
-    PyObject *numerator = NULL;
-    PyObject *denominator = NULL;
-    PyObject *result_pair = NULL;
+    PyObject *volatile py_exponent = NULL;
+    PyObject *volatile numerator = NULL;
+    PyObject *volatile denominator = NULL;
+    PyObject *volatile result_pair = NULL;
     PyNumberMethods *long_methods = PyLong_Type.tp_as_number;
 
     CONVERT_TO_DOUBLE(v, self);
diff -rupN Python-3.6.4.orig/Programs/_testembed.c Python-3.6.4/Programs/_testembed.c
--- Python-3.6.4.orig/Programs/_testembed.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Programs/_testembed.c	2018-03-25 01:57:48.736306291 +0100
@@ -149,6 +149,7 @@ static int test_pre_initialization_api(v
     return 0;
 }
 
+#ifdef WITH_THREAD
 static void bpo20891_thread(void *lockp)
 {
     PyThread_type_lock lock = *((PyThread_type_lock*)lockp);
@@ -165,12 +166,14 @@ static void bpo20891_thread(void *lockp)
 
     PyThread_exit_thread();
 }
+#endif
 
 static int test_bpo20891(void)
 {
     /* bpo-20891: Calling PyGILState_Ensure in a non-Python thread before
        calling PyEval_InitThreads() must not crash. PyGILState_Ensure() must
        call PyEval_InitThreads() for us in this case. */
+#ifdef WITH_THREAD
     PyThread_type_lock lock = PyThread_allocate_lock();
     if (!lock) {
         fprintf(stderr, "PyThread_allocate_lock failed!");
@@ -192,6 +195,7 @@ static int test_bpo20891(void)
     Py_END_ALLOW_THREADS
 
     PyThread_free_lock(lock);
+#endif
 
     return 0;
 }
diff -rupN Python-3.6.4.orig/Python/bltinmodule.c Python-3.6.4/Python/bltinmodule.c
--- Python-3.6.4.orig/Python/bltinmodule.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Python/bltinmodule.c	2018-03-25 01:14:11.968363234 +0100
@@ -2224,7 +2224,7 @@ reject non-numeric types.
 [clinic start generated code]*/
 
 static PyObject *
-builtin_sum_impl(PyObject *module, PyObject *iterable, PyObject *start)
+builtin_sum_impl(PyObject *module, PyObject *iterable, PyObject *volatile start)
 /*[clinic end generated code: output=df758cec7d1d302f input=3b5b7a9d7611c73a]*/
 {
     PyObject *result = start;
@@ -2331,7 +2331,7 @@ builtin_sum_impl(PyObject *module, PyObj
                 continue;
             }
             if (PyLong_CheckExact(item)) {
-                long value;
+                long volatile value;
                 int overflow;
                 value = PyLong_AsLongAndOverflow(item, &overflow);
                 if (!overflow) {
diff -rupN Python-3.6.4.orig/Python/compile.c Python-3.6.4/Python/compile.c
--- Python-3.6.4.orig/Python/compile.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Python/compile.c	2018-03-25 01:14:40.040362623 +0100
@@ -5170,7 +5170,6 @@ compute_code_flags(struct compiler *c)
 {
     PySTEntryObject *ste = c->u->u_ste;
     int flags = 0;
-    Py_ssize_t n;
     if (ste->ste_type == FunctionBlock) {
         flags |= CO_NEWLOCALS | CO_OPTIMIZED;
         if (ste->ste_nested)
diff -rupN Python-3.6.4.orig/Python/import.c Python-3.6.4/Python/import.c
--- Python-3.6.4.orig/Python/import.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Python/import.c	2018-03-25 01:15:16.376361832 +0100
@@ -1786,8 +1786,10 @@ _imp_extension_suffixes_impl(PyObject *m
 /*[clinic end generated code: output=0bf346e25a8f0cd3 input=ecdeeecfcb6f839e]*/
 {
     PyObject *list;
+#ifdef HAVE_DYNAMIC_LOADING
     const char *suffix;
     unsigned int index = 0;
+#endif
 
     list = PyList_New(0);
     if (list == NULL)
diff -rupN Python-3.6.4.orig/Python/pyfpe.c Python-3.6.4/Python/pyfpe.c
--- Python-3.6.4.orig/Python/pyfpe.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Python/pyfpe.c	2018-03-25 00:02:24.036910778 +0100
@@ -17,7 +17,7 @@ int PyFPE_counter = 0;
    warning when compiling an empty file. */
 
 double
-PyFPE_dummy(void *dummy)
+PyFPE_dummy(volatile void *dummy)
 {
 	return 1.0;
 }
diff -rupN Python-3.6.4.orig/Python/pyhash.c Python-3.6.4/Python/pyhash.c
--- Python-3.6.4.orig/Python/pyhash.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Python/pyhash.c	2018-03-25 01:15:44.664361216 +0100
@@ -272,7 +272,7 @@ fnv(const void *src, Py_ssize_t len)
         x = (_PyHASH_MULTIPLIER * x) ^ (Py_uhash_t) *p++;
     x ^= (Py_uhash_t) len;
     x ^= (Py_uhash_t) _Py_HashSecret.fnv.suffix;
-    if (x == -1) {
+    if (x == (Py_uhash_t)-1) {
         x = -2;
     }
     return x;
diff -rupN Python-3.6.4.orig/Python/pylifecycle.c Python-3.6.4/Python/pylifecycle.c
--- Python-3.6.4.orig/Python/pylifecycle.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Python/pylifecycle.c	2018-03-25 01:16:24.712360345 +0100
@@ -239,8 +239,7 @@
 #elif defined(__ANDROID__)
     return get_codec_name("UTF-8");
 #else
-    PyErr_SetNone(PyExc_NotImplementedError);
-    return NULL;
+    return get_codec_name("UTF-8");
 #endif
 }
 
diff -rupN Python-3.6.4.orig/Python/pytime.c Python-3.6.4/Python/pytime.c
--- Python-3.6.4.orig/Python/pytime.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Python/pytime.c	2018-03-25 01:22:03.944352963 +0100
@@ -727,7 +727,7 @@ pymonotonic(_PyTime_t *tp, _Py_clock_inf
         info->adjustable = 0;
     }
 
-#else
+#elif defined(HAVE_CLOCK_GETTIME)
     struct timespec ts;
 #ifdef CLOCK_HIGHRES
     const clockid_t clk_id = CLOCK_HIGHRES;
@@ -760,6 +760,26 @@ pymonotonic(_PyTime_t *tp, _Py_clock_inf
     }
     if (_PyTime_FromTimespec(tp, &ts, raise) < 0)
         return -1;
+#else
+	/*
+	 * must do something here, or the time()
+	 * module fails to initialize
+	 */
+	struct timeval tv;
+	if (gettimeofday(&tv, NULL) < 0)
+	{
+        if (raise)
+            PyErr_SetFromErrno(PyExc_OSError);
+        return -1;
+	}
+    if (_PyTime_FromTimeval(tp, &tv, raise) < 0)
+        return -1;
+    if (info) {
+        info->implementation = "gettimeofday()";
+        info->resolution = 1e-6;
+        info->monotonic = 0;
+        info->adjustable = 0;
+    }
 #endif
     return 0;
 }
diff -rupN Python-3.6.4.orig/configure.ac Python-3.6.4/configure.ac
--- Python-3.6.4.orig/configure.ac	2018-03-24 23:10:10.008057154 +0100
+++ Python-3.6.4/configure.ac	2018-03-25 01:25:37.184348323 +0100
@@ -376,6 +376,9 @@ then
 	*-*-linux*)
 		ac_sys_system=Linux
 		;;
+	*-*-mint*)
+		ac_sys_system=MiNT
+		;;
 	*-*-cygwin*)
 		ac_sys_system=Cygwin
 		;;
@@ -405,6 +408,7 @@ then
 	cygwin*) MACHDEP="cygwin";;
 	darwin*) MACHDEP="darwin";;
 	irix646) MACHDEP="irix6";;
+	mint*) MACHDEP="mint";;
 	'')	MACHDEP="unknown";;
     esac
 fi
@@ -424,6 +428,8 @@ if test "$cross_compiling" = yes; then
 	*-*-cygwin*)
 		_host_cpu=
 		;;
+	*-*-mint*)
+		;;
 	*)
 		# for now, limit cross builds to known configurations
 		MACHDEP="unknown"
@@ -802,7 +808,7 @@ cat >> conftest.c <<EOF
         hppa-linux-gnu
 # elif defined(__ia64__)
         ia64-linux-gnu
-# elif defined(__m68k__) && !defined(__mcoldfire__)
+# elif defined(__m68k__)
         m68k-linux-gnu
 # elif defined(__mips_hard_float) && defined(_MIPSEL)
 #  if _MIPS_SIM == _ABIO32
@@ -861,6 +867,8 @@ cat >> conftest.c <<EOF
         i386-gnu
 #elif defined(__APPLE__)
         darwin
+#elif defined(__MINT__) && defined(__m68k__)
+        /* m68k-atari-mint */
 #else
 # error unknown platform triplet
 #endif
@@ -1187,6 +1195,10 @@ else # shared is disabled
           BLDLIBRARY='$(LIBRARY)'
           LDLIBRARY='libpython$(LDVERSION).dll.a'
           ;;
+    MiNT*)
+          BLDLIBRARY='$(LIBRARY)'
+          LDLIBRARY='$(LIBRARY)'
+          ;;
   esac
 fi
 
@@ -2064,7 +2076,7 @@ poll.h sys/devpoll.h sys/epoll.h sys/pol
 sys/audioio.h sys/xattr.h sys/bsdtty.h sys/event.h sys/file.h sys/ioctl.h \
 sys/kern_control.h sys/loadavg.h sys/lock.h sys/mkdev.h sys/modem.h \
 sys/param.h sys/random.h sys/select.h sys/sendfile.h sys/socket.h sys/statvfs.h \
-sys/stat.h sys/syscall.h sys/sys_domain.h sys/termio.h sys/time.h \
+sys/stat.h sys/syscall.h sys/sys_domain.h sys/termio.h sys/time.h sys/mman.h \
 sys/times.h sys/types.h sys/uio.h sys/un.h sys/utsname.h sys/wait.h pty.h \
 libutil.h sys/resource.h netpacket/packet.h sysexits.h bluetooth.h \
 linux/tipc.h linux/random.h spawn.h util.h alloca.h endian.h \
@@ -2557,6 +2569,16 @@ then
 	CYGWIN*)
 		LDSHARED="gcc -shared -Wl,--enable-auto-image-base"
 		LDCXXSHARED="g++ -shared -Wl,--enable-auto-image-base";;
+ 	MiNT*)
+		if test "$host_os" = mintelf; then
+			LDSHARED='$(CC) -r -Wl,--oformat,elf32-m68k'
+			LDCXXSHARED='$(CXX) -r -Wl,--oformat,elf32-m68k'
+			LDLAST=Python/pymath.o
+		else
+			LDSHARED='$(CC) -r'
+			LDCXXSHARED='$(CXX) -r'
+		fi
+		;;
 	*)	LDSHARED="ld";;
 	esac
 fi
@@ -3762,6 +3784,8 @@ AC_CHECK_FUNCS(clock_settime, [], [
     ])
 ])
 
+AC_CHECK_FUNCS(sched_yield)
+
 AC_MSG_CHECKING(for major, minor, and makedev)
 AC_LINK_IFELSE([AC_LANG_PROGRAM([[
 #if defined(MAJOR_IN_MKDEV)
@@ -4405,7 +4429,7 @@ LIBS="$LIBS $LIBM"
 
 AC_CHECK_FUNCS([acosh asinh atanh copysign erf erfc expm1 finite gamma])
 AC_CHECK_FUNCS([hypot lgamma log1p log2 round tgamma])
-AC_CHECK_DECLS([isinf, isnan, isfinite], [], [], [[#include <math.h>]])
+AC_CHECK_DECLS([isinf, isnan, isfinite, round, hypot, copysign], [], [], [[#include <math.h>]])
 
 # On FreeBSD 6.2, it appears that tanh(-0.) returns 0. instead of
 # -0. on some architectures.
diff -rupN Python-3.6.4.orig/setup.py Python-3.6.4/setup.py
--- Python-3.6.4.orig/setup.py	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/setup.py	2018-03-25 00:02:24.036910778 +0100
@@ -1670,8 +1670,8 @@ class PyBuildExt(build_ext):
         # Call the method for detecting whether _tkinter can be compiled
         self.detect_tkinter(inc_dirs, lib_dirs)
 
-        if '_tkinter' not in [e.name for e in self.extensions]:
-            missing.append('_tkinter')
+##      if '_tkinter' not in [e.name for e in self.extensions]:
+##          missing.append('_tkinter')
 
 ##         # Uncomment these lines if you want to play with xxmodule.c
 ##         ext = Extension('xx', ['xxmodule.c'])
diff -rupN Python-3.6.4.orig/Modules/socketmodule.c Python-3.6.4/Modules/socketmodule.c
--- Python-3.6.4.orig/Modules/socketmodule.c	2017-12-19 05:53:56.000000000 +0100
+++ Python-3.6.4/Modules/socketmodule.c	2018-03-25 01:49:19.656317369 +0100
@@ -3365,7 +3365,7 @@ sock_recvmsg_guts(PySocketSockObject *s,
                   PyObject *(*makeval)(ssize_t, void *), void *makeval_data)
 {
     sock_addr_t addrbuf;
-    socklen_t addrbuflen;
+    socklen_t addrbuflen = 0;
     struct msghdr msg = {0};
     PyObject *cmsg_list = NULL, *retval = NULL;
     void *controlbuf = NULL;
