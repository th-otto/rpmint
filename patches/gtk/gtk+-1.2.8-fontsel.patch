--- a/gtk/gtkfontsel.c	2000-05-19 06:49:51.000000000 +0200
+++ b/gtk/gtkfontsel.c	1999-08-30 19:18:27.000000000 +0200
@@ -1747,7 +1747,6 @@
 {
   GdkFont *font;
   gchar *fontname, *label_text;
-  XFontStruct *xfs;
   
   if (fontsel->font)
     gdk_font_unref (fontsel->font);
@@ -1764,17 +1763,7 @@
       g_message("Loading: %s\n", fontname);
 #endif
       font = gdk_font_load (fontname);
-      xfs = font ? GDK_FONT_XFONT (font) : NULL;
-      if (xfs && (xfs->min_byte1 != 0 || xfs->max_byte1 != 0))
-	{
-	  gchar *tmp_name;
-	  
-	  gdk_font_unref (font);
-	  tmp_name = g_strconcat (fontname, ",*", NULL);
-	  font = gdk_fontset_load (tmp_name);
-	  g_free (tmp_name);
-	}
-      g_free (fontname);
+      g_free(fontname);
       
       if (font)
 	{
@@ -1914,42 +1903,30 @@
   
   if (fontsel->font)
     {
-      font_atom = gdk_atom_intern ("FONT", FALSE);
-
-      if (fontsel->font->type == GDK_FONT_FONTSET)
-	{
-	  XFontStruct **font_structs;
-	  gint num_fonts;
-	  gchar **font_names;
-	  
-	  num_fonts = XFontsOfFontSet (GDK_FONT_XFONT(fontsel->font),
-				       &font_structs, &font_names);
-	  status = XGetFontProperty(font_structs[0], font_atom, &atom);
-	}
-      else
+      font_atom = XInternAtom(GDK_DISPLAY(), "FONT", True);
+      if (font_atom != None)
 	{
 	  status = XGetFontProperty(GDK_FONT_XFONT(fontsel->font), font_atom,
 				    &atom);
-	}
-
-      if (status == True)
-	{
-	  name = gdk_atom_name (atom);
-	  gtk_entry_set_text(GTK_ENTRY(fontsel->actual_font_name), name);
-	  
-	  for (i = 0; i < GTK_XLFD_NUM_FIELDS; i++)
+	  if (status == True)
 	    {
-	      field = gtk_font_selection_get_xlfd_field (name, i,
-							 field_buffer);
-	      if (i == XLFD_SLANT)
-		field = gtk_font_selection_expand_slant_code(field);
-	      else if (i == XLFD_SPACING)
-		field = gtk_font_selection_expand_spacing_code(field);
-	      gtk_clist_set_text(GTK_CLIST(fontsel->info_clist), i, 2,
-				 field ? field : "");
+	      name = XGetAtomName(GDK_DISPLAY(), atom);
+	      gtk_entry_set_text(GTK_ENTRY(fontsel->actual_font_name), name);
+	      
+	      for (i = 0; i < GTK_XLFD_NUM_FIELDS; i++)
+		{
+		  field = gtk_font_selection_get_xlfd_field (name, i,
+							     field_buffer);
+		  if (i == XLFD_SLANT)
+		    field = gtk_font_selection_expand_slant_code(field);
+		  else if (i == XLFD_SPACING)
+		    field = gtk_font_selection_expand_spacing_code(field);
+		  gtk_clist_set_text(GTK_CLIST(fontsel->info_clist), i, 2,
+				     field ? field : "");
+		}
+	      shown_actual_fields = TRUE;
+	      XFree(name);
 	    }
-	  shown_actual_fields = TRUE;
-	  g_free (name);
 	}
     }
   if (!shown_actual_fields)
@@ -3118,13 +3095,11 @@
   font = &fontsel_info->font_info[fontsel->font_index];
   family_str = font->family;
   foundry_str = fontsel_info->properties[FOUNDRY][font->foundry];
-  /* some fonts have a (nil) foundry */
-  if (strcmp (foundry_str, "(nil)") == 0)
-    foundry_str = "";
-    
+  
   for (prop = 0; prop < GTK_NUM_STYLE_PROPERTIES; prop++)
     {
-      property_str[prop] = fontsel_info->properties[prop][fontsel->property_values[prop]];
+      property_str[prop]
+	= fontsel_info->properties[prop][fontsel->property_values[prop]];
       if (strcmp (property_str[prop], "(nil)") == 0)
 	property_str[prop] = "";
     }
