From 24268f34f262b48825e951903dc07604ac2de521 Mon Sep 17 00:00:00 2001
From: Thorsten Otto <admin@tho-otto.de>
Date: Sun, 30 Aug 2020 17:45:22 +0200
Subject: [PATCH] A few more MiNT patches for 4.15.1

---
 lib/rpmvs.c        |  2 ++
 rpmio/rpmlua.c     |  6 ++++++
 rpmio/rpmstrpool.c | 12 ++++++++++++
 3 files changed, 20 insertions(+)

diff --git a/lib/rpmvs.c b/lib/rpmvs.c
index 0d475af86..1408508d1 100644
--- a/lib/rpmvs.c
+++ b/lib/rpmvs.c
@@ -1,6 +1,8 @@
 #include "system.h"
 
+#ifdef HAVE_PTHREAD_H
 #include <pthread.h>
+#endif
 #include <rpm/rpmkeyring.h>
 #include <rpm/rpmmacro.h>
 #include <rpm/rpmlog.h>
diff --git a/rpmio/rpmlua.c b/rpmio/rpmlua.c
index 18e25fd74..f64d69d46 100644
--- a/rpmio/rpmlua.c
+++ b/rpmio/rpmlua.c
@@ -13,7 +13,9 @@
 
 #include <unistd.h>
 #include <assert.h>
+#ifndef __MINT__
 #include <spawn.h>
+#endif
 #include <sys/types.h>
 #include <sys/wait.h>
 #include <stdarg.h>
@@ -997,6 +999,7 @@ static int rpm_print (lua_State *L)
     return 0;
 }
 
+#ifndef __MINT__
 static int rpm_execute(lua_State *L)
 {
     const char *file = luaL_checkstring(L, 1);
@@ -1021,6 +1024,7 @@ static int rpm_execute(lua_State *L)
     else
 	return pushresult(L, status, NULL);
 }
+#endif
 
 static const luaL_Reg rpmlib[] = {
     {"b64encode", rpm_b64encode},
@@ -1034,7 +1038,9 @@ static const luaL_Reg rpmlib[] = {
     {"call", rpm_call},
     {"interactive", rpm_interactive},
     {"next_file", rpm_next_file},
+#ifndef __MINT__
     {"execute", rpm_execute},
+#endif
     {"redirect2null", rpm_redirect2null},
     {NULL, NULL}
 };
diff --git a/rpmio/rpmstrpool.c b/rpmio/rpmstrpool.c
index 776ca6dea..3d9443b97 100644
--- a/rpmio/rpmstrpool.c
+++ b/rpmio/rpmstrpool.c
@@ -1,7 +1,9 @@
 #include "system.h"
 #include <stdio.h>
 #include <stdlib.h>
+#ifdef HAVE_PTHREAD_H
 #include <pthread.h>
+#endif
 #include <rpm/rpmstring.h>
 #include <rpm/rpmstrpool.h>
 #include "debug.h"
@@ -41,22 +43,28 @@ struct rpmstrPool_s {
     poolHash hash;		/* string -> sid hash table */
     int frozen;			/* are new id additions allowed? */
     int nrefs;			/* refcount */
+#ifdef HAVE_PTHREAD_H
     pthread_rwlock_t lock;
+#endif
 };
 
 static inline const char *id2str(rpmstrPool pool, rpmsid sid);
 
 static inline void poolLock(rpmstrPool pool, int write)
 {
+#ifdef HAVE_PTHREAD_H
     if (write)
 	pthread_rwlock_wrlock(&pool->lock);
     else
 	pthread_rwlock_rdlock(&pool->lock);
+#endif
 }
 
 static inline void poolUnlock(rpmstrPool pool)
 {
+#ifdef HAVE_PTHREAD_H
     pthread_rwlock_unlock(&pool->lock);
+#endif
 }
 
 /* calculate hash and string length on at once */
@@ -257,7 +265,9 @@ rpmstrPool rpmstrPoolCreate(void)
 
     rpmstrPoolRehash(pool);
     pool->nrefs = 1;
+#ifdef HAVE_PTHREAD_H
     pthread_rwlock_init(&pool->lock, NULL);
+#endif
     return pool;
 }
 
@@ -278,7 +288,9 @@ rpmstrPool rpmstrPoolFree(rpmstrPool pool)
 	    }
 	    free(pool->chunks);
 	    poolUnlock(pool);
+#ifdef HAVE_PTHREAD_H
 	    pthread_rwlock_destroy(&pool->lock);
+#endif
 	    free(pool);
 	}
     }
-- 
2.24.0

