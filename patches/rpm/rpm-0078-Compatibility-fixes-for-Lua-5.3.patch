From 3e2d71958ccda742674f840ed65f1a595c1e844c Mon Sep 17 00:00:00 2001
From: Thorsten Otto <admin@tho-otto.de>
Date: Sun, 30 Aug 2020 02:22:19 +0200
Subject: [PATCH 78/78] Compatibility fixes for Lua 5.3

---
 luaext/lposix.c  |  4 +++
 luaext/lrexlib.c | 10 ++++++
 rpmio/rpmlua.c   | 83 +++++++++++++++++++++++++++++++-----------------
 3 files changed, 68 insertions(+), 29 deletions(-)

diff --git a/luaext/lposix.c b/luaext/lposix.c
index b69e7c6d0..325032256 100644
--- a/luaext/lposix.c
+++ b/luaext/lposix.c
@@ -929,7 +929,11 @@ static const luaL_Reg R[] =
 
 LUALIB_API int luaopen_posix (lua_State *L)
 {
+#if (LUA_VERSION_NUM <= 501) || defined(LUA_COMPAT_MODULE)
+	luaL_openlib(L, MYNAME, R, 0);
+#else
 	luaL_newlib(L, R);
+#endif
 	lua_pushliteral(L,"version");		/** version */
 	lua_pushliteral(L,MYVERSION);
 	lua_settable(L,-3);
diff --git a/luaext/lrexlib.c b/luaext/lrexlib.c
index 09c5a6454..d32d7718e 100644
--- a/luaext/lrexlib.c
+++ b/luaext/lrexlib.c
@@ -327,14 +327,24 @@ LUALIB_API int luaopen_rex(lua_State *L)
 {
 #ifdef WITH_POSIX
   createmeta(L, "regex_t");
+#if (LUA_VERSION_NUM <= 501) || defined(LUA_COMPAT_MODULE)
+  luaL_openlib(L, NULL, rexmeta, 0);
+#else
   luaL_setfuncs(L, rexmeta, 0);
+#endif
   lua_pop(L, 1);
 #endif
 #ifdef WITH_PCRE
   createmeta(L, "pcre");
+#if (LUA_VERSION_NUM <= 501) || defined(LUA_COMPAT_MODULE)
+  luaL_openlib(L, NULL, pcremeta, 0);
+#else
   luaL_setfuncs(L, pcremeta, 0);
+#endif
   lua_pop(L, 1);
 #endif
+#if !((LUA_VERSION_NUM <= 501) || defined(LUA_COMPAT_MODULE))
   luaL_newlib(L, rexlib);
+#endif
   return 1;
 }
diff --git a/rpmio/rpmlua.c b/rpmio/rpmlua.c
index c698ff098..18e25fd74 100644
--- a/rpmio/rpmlua.c
+++ b/rpmio/rpmlua.c
@@ -32,6 +32,10 @@
 
 #include "debug.h"
 
+#ifndef lua_pushglobaltable
+#define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
+#endif
+
 int _rpmlua_have_forked = 0;
 
 typedef struct rpmluapb_s * rpmluapb;
@@ -79,8 +83,6 @@ static void *nextFileFuncParam = NULL;
 
 static int luaopen_rpm(lua_State *L);
 static int rpm_print(lua_State *L);
-static int rpm_exit(lua_State *L);
-static int rpm_redirect2null(lua_State *L);
 
 static int pusherror(lua_State *L, int code, const char *info)
 {
@@ -109,6 +111,34 @@ rpmlua rpmluaGetGlobalState(void)
     return lua;
 }
 
+static int rpm_redirect2null(lua_State *L)
+{
+    int target_fd, fd, r, e;
+
+    if (!_rpmlua_have_forked)
+	return luaL_error(L, "redirect2null not permitted in this context");
+
+    target_fd = luaL_checkinteger(L, 1);
+
+    r = fd = open("/dev/null", O_WRONLY);
+    if (fd >= 0 && fd != target_fd) {
+	r = dup2(fd, target_fd);
+	e = errno;
+	(void) close(fd);
+	errno = e;
+    }
+    return pushresult(L, r, NULL);
+}
+
+#if (LUA_VERSION_NUM >= 503)
+static int rpm_exit(lua_State *L)
+{
+    if (!_rpmlua_have_forked)
+	return luaL_error(L, "exit not permitted in this context");
+
+    exit(luaL_optinteger(L, 1, EXIT_SUCCESS));
+}
+
 static const luaL_Reg os_overrides[] =
 {
     {"exit",    rpm_exit},
@@ -120,6 +150,7 @@ static const luaL_Reg posix_overrides[] =
     {"redirect2null",	rpm_redirect2null},
     {NULL,      NULL}
 };
+#endif
 
 rpmlua rpmluaNew()
 {
@@ -144,15 +175,24 @@ rpmlua rpmluaNew()
     lua->L = L;
 
     for (lib = extlibs; lib->name; lib++) {
+#if LUA_VERSION_NUM >= 503
 	luaL_requiref(L, lib->name, lib->func, 1);
+#else
+	lua_pushcfunction(L, lib->func);
+	lua_pushstring(L, lib->name);
+	lua_call(L, 1, 0);
+	lua_settop(L, 0);
+#endif
     }
     lua_pushcfunction(L, rpm_print);
     lua_setglobal(L, "print");
 
+#if (LUA_VERSION_NUM >= 503)
     lua_getglobal(L, "os");
     luaL_setfuncs(L, os_overrides, 0);
     lua_getglobal(L, "posix");
     luaL_setfuncs(L, posix_overrides, 0);
+#endif
 
     lua_getglobal(L, "package");
     lua_pushfstring(L, "%s/%s", rpmConfigDir(), "/lua/?.lua");
@@ -182,10 +222,14 @@ rpmlua rpmluaFree(rpmlua lua)
 void rpmluaRegister(rpmlua lua, const void *regfuncs, const char *lib)
 {
     const luaL_Reg *funcs = regfuncs;
+#if (LUA_VERSION_NUM <= 501) || defined(LUA_COMPAT_MODULE)
+    luaL_openlib(lua->L, lib, funcs, 0);
+#else
     lua_getfield(lua->L, LUA_REGISTRYINDEX, LUA_LOADED_TABLE);
     lua_getfield(lua->L, -1, lib);
     luaL_setfuncs(lua->L, funcs, 0);
     lua_pop(lua->L, 2);
+#endif
 }
 
 void rpmluaSetData(rpmlua _lua, const char *key, const void *data)
@@ -281,7 +325,11 @@ void rpmluaSetVar(rpmlua _lua, rpmluav var)
     if (var->listmode && lua->pushsize > 0) {
 	if (var->keyType != RPMLUAV_NUMBER || var->key.num == (double)0) {
 	    var->keyType = RPMLUAV_NUMBER;
+#if LUA_VERSION_NUM >= 503
 	    var->key.num = (double)lua_rawlen(L, -1);
+#else
+	    var->key.num = (double)luaL_getn(L, -1);
+#endif
 	}
 	var->key.num++;
     }
@@ -949,33 +997,6 @@ static int rpm_print (lua_State *L)
     return 0;
 }
 
-static int rpm_redirect2null(lua_State *L)
-{
-    int target_fd, fd, r, e;
-
-    if (!_rpmlua_have_forked)
-	return luaL_error(L, "redirect2null not permitted in this context");
-
-    target_fd = luaL_checkinteger(L, 1);
-
-    r = fd = open("/dev/null", O_WRONLY);
-    if (fd >= 0 && fd != target_fd) {
-	r = dup2(fd, target_fd);
-	e = errno;
-	(void) close(fd);
-	errno = e;
-    }
-    return pushresult(L, r, NULL);
-}
-
-static int rpm_exit(lua_State *L)
-{
-    if (!_rpmlua_have_forked)
-	return luaL_error(L, "exit not permitted in this context");
-
-    exit(luaL_optinteger(L, 1, EXIT_SUCCESS));
-}
-
 static int rpm_execute(lua_State *L)
 {
     const char *file = luaL_checkstring(L, 1);
@@ -1020,6 +1041,10 @@ static const luaL_Reg rpmlib[] = {
 
 static int luaopen_rpm(lua_State *L)
 {
+#if (LUA_VERSION_NUM <= 501) || defined(LUA_COMPAT_MODULE)
+    luaL_openlib(L, "rpm", rpmlib, 0);
+#else
     luaL_newlib(L, rpmlib);
+#endif
     return 1;
 }
-- 
2.24.0

