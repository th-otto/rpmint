From f6c63143b231228a5719ea63d7bddb6ae3885e97 Mon Sep 17 00:00:00 2001
From: Thorsten Otto <admin@tho-otto.de>
Date: Sat, 29 Aug 2020 09:24:04 +0200
Subject: [PATCH 76/78] Port some older rpm tools

---
 .gitignore     |   4 +
 Makefile.am    |  10 +++
 rpmarchive.c   |  43 ++++++++++
 rpmdump.c      | 223 +++++++++++++++++++++++++++++++++++++++++++++++++
 rpmheader.c    |  49 +++++++++++
 rpmlead.c      |  99 ++++++++++++++++++++++
 rpmsignature.c |  42 ++++++++++
 7 files changed, 470 insertions(+)
 create mode 100644 rpmarchive.c
 create mode 100644 rpmdump.c
 create mode 100644 rpmheader.c
 create mode 100644 rpmlead.c
 create mode 100644 rpmsignature.c

diff --git a/Makefile.am b/Makefile.am
index 895ecc81d..b7f18d331 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -110,6 +110,8 @@ bin_PROGRAMS =		rpm rpm2cpio rpmbuild rpmdb rpmkeys rpmsign rpmspec
 if WITH_ARCHIVE
 bin_PROGRAMS += 	rpm2archive 
 endif
+bin_PROGRAMS += 	rpmlead rpmdump rpmheader
+#bin_PROGRAMS += 	rpmsignature rpmarchive
 
 rpmlibexec_PROGRAMS =
 rpmconfig_SCRIPTS =	mkinstalldirs \
@@ -165,6 +167,14 @@ rpm2archive_SOURCES =	rpm2archive.c debug.h system.h
 rpm2archive_LDADD =	lib/librpm.la rpmio/librpmio.la
 rpm2archive_LDADD +=	@WITH_POPT_LIB@ @WITH_ARCHIVE_LIB@
 
+rpmlead_SOURCES =	rpmlead.c
+rpmlead_LDADD =         lib/librpm.la rpmio/librpmio.la
+
+rpmdump_SOURCES =	rpmdump.c
+rpmdump_LDADD =         lib/librpm.la rpmio/librpmio.la
+
+rpmheader_SOURCES =	rpmheader.c
+rpmheader_LDADD =       lib/librpm.la rpmio/librpmio.la
 
 if LIBELF
 if LIBDW
diff --git a/rpmarchive.c b/rpmarchive.c
new file mode 100644
index 000000000..08f91fbb5
--- /dev/null
+++ b/rpmarchive.c
@@ -0,0 +1,43 @@
+/* rpmarchive: spit out the main archive portion of a package */
+
+#include "system.h"
+
+#include "rpmlead.h"
+#include "signature.h"
+#include "header.h"
+
+int main(int argc, char **argv)
+{
+	FD_t fdi,
+	 fdo;
+	char buffer[1024];
+	struct rpmlead lead;
+	Header hd;
+	int ct;
+
+	setprogname(argv[0]);				/* Retrofit glibc __progname */
+	if (argc == 1)
+	{
+		fdi = Fopen("-", "r.ufdio");
+	} else
+	{
+		fdi = Fopen(argv[1], "r.ufdio");
+	}
+	if (fdi == NULL || Ferror(fdi))
+	{
+		perror("input");
+		exit(EXIT_FAILURE);
+	}
+
+	readLead(fdi, &lead);
+	rpmReadSignature(fdi, NULL, lead.signature_type);
+	hd = headerRead(fdi, (lead.major >= 3) ? HEADER_MAGIC_YES : HEADER_MAGIC_NO);
+
+	fdo = Fopen("-", "w.ufdio");
+	while ((ct = Fread(buffer, sizeof(buffer), 1, fdi)))
+	{
+		Fwrite(buffer, ct, 1, fdo);
+	}
+
+	return 0;
+}
diff --git a/rpmdump.c b/rpmdump.c
new file mode 100644
index 000000000..1550442ca
--- /dev/null
+++ b/rpmdump.c
@@ -0,0 +1,223 @@
+#include "system.h"
+
+#include <rpmlib.h>
+#include <errno.h>
+#include <stdint.h>
+#include <ctype.h>
+#include "header.h"
+#include "header_internal.h"
+
+#define HEADER_DUMP_INLINE   1
+
+typedef struct indexEntry_s * indexEntry;
+struct indexEntry_s {
+    struct entryInfo_s info;	/*!< Description of tag data. */
+    rpm_data_t data; 		/*!< Location of tag data. */
+    int length;			/*!< No. bytes of data. */
+    int rdlen;			/*!< No. bytes of data in region. */
+};
+
+typedef rpmFlags headerFlags;
+
+struct headerToken_s {
+    void * blob;		/*!< Header region blob. */
+    indexEntry index;		/*!< Array of tags. */
+    int indexUsed;		/*!< Current size of tag array. */
+    int indexAlloced;		/*!< Allocated size of tag array. */
+    unsigned int instance;	/*!< Rpmdb instance (offset) */
+    headerFlags flags;
+    int sorted;			/*!< Current sort method */
+    int nrefs;			/*!< Reference count. */
+};
+
+typedef const struct headerTagTableEntry_s * headerTagTableEntry;
+struct headerTagTableEntry_s {
+    const char * name;		/*!< Tag name. */
+    const char * shortname;	/*!< "Human readable" short name. */
+    rpmTagVal val;		/*!< Tag numeric value. */
+    rpmTagType type;		/*!< Tag type. */
+    rpmTagReturnType retype;	/*!< Tag return type. */
+    int extension;		/*!< Extension or "real" tag */
+};
+#include "lib/tagtbl.C"
+
+
+static void headerDump(Header h, FILE *f, int flags, const struct headerTagTableEntry_s *tags)
+{
+	int i;
+	indexEntry p;
+	const struct headerTagTableEntry_s *tage;
+	const char *tag;
+	char *type;
+
+	/* First write out the length of the index (count of index entries) */
+	fprintf(f, "Entry count: %d\n", h->indexUsed);
+
+	/* Now write the index */
+	p = h->index;
+	fprintf(f, "\n             CT  TAG                      TYPE               OFFSET     COUNT\n");
+	             /* "Entry      : %.3d %-14s %-18s 0x%.8x %.8d\n", */
+	for (i = 0; i < h->indexUsed; i++)
+	{
+		switch (p->info.type)
+		{
+		case RPM_NULL_TYPE:
+			type = "NULL_TYPE";
+			break;
+		case RPM_CHAR_TYPE:
+			type = "CHAR_TYPE";
+			break;
+		case RPM_BIN_TYPE:
+			type = "BIN_TYPE";
+			break;
+		case RPM_INT8_TYPE:
+			type = "INT8_TYPE";
+			break;
+		case RPM_INT16_TYPE:
+			type = "INT16_TYPE";
+			break;
+		case RPM_INT32_TYPE:
+			type = "INT32_TYPE";
+			break;
+		case RPM_INT64_TYPE:
+			type = "INT64_TYPE";
+			break;
+		case RPM_STRING_TYPE:
+			type = "STRING_TYPE";
+			break;
+		case RPM_STRING_ARRAY_TYPE:
+			type = "STRING_ARRAY_TYPE";
+			break;
+		case RPM_I18NSTRING_TYPE:
+			type = "I18N_STRING_TYPE";
+			break;
+		default:
+			type = "(unknown)";
+			break;
+		}
+
+		tage = tags;
+		while (tage->name && tage->val != p->info.tag)
+			tage++;
+
+		if (!tage->name)
+			tag = "(unknown)";
+		else
+			tag = tage->name;
+
+		fprintf(f, "Entry      : %.3d %-24s %-18s 0x%.8x %.8d\n", i,
+				tag, type, p->info.offset, p->info.count);
+
+		if (flags & HEADER_DUMP_INLINE)
+		{
+			char *dp = p->data;
+			int c = p->info.count;
+			int ct = 0;
+
+			/* Print the data inline */
+			switch (p->info.type)
+			{
+			case RPM_INT32_TYPE:
+				while (c--)
+				{
+					fprintf(f, "       Data: %.3d 0x%08x (%d)\n", ct++,
+							(unsigned) *((uint32_t *) dp), (int) *((uint32_t *) dp));
+					dp += sizeof(uint32_t);
+				}
+				break;
+
+			case RPM_INT16_TYPE:
+				while (c--)
+				{
+					fprintf(f, "       Data: %.3d 0x%04x (%d)\n", ct++,
+							(unsigned) (*((uint16_t *) dp) & 0xffff), (int) *((uint16_t *) dp));
+					dp += sizeof(uint16_t);
+				}
+				break;
+			case RPM_INT8_TYPE:
+				while (c--)
+				{
+					fprintf(f, "       Data: %.3d 0x%02x (%d)\n", ct++,
+							(unsigned) (*((uint8_t *) dp) & 0xff), (int) *((uint8_t *) dp));
+					dp += sizeof(uint8_t);
+				}
+				break;
+			case RPM_BIN_TYPE:
+				while (c > 0)
+				{
+					fprintf(f, "       Data: %.3d ", ct);
+					while (c--)
+					{
+						fprintf(f, "%02x ", (unsigned) (*(unsigned char *) dp & 0xff));
+						ct++;
+						dp += sizeof(unsigned char);
+						if (!(ct % 8))
+						{
+							break;
+						}
+					}
+					fprintf(f, "\n");
+				}
+				break;
+			case RPM_CHAR_TYPE:
+				while (c--)
+				{
+					char ch = (char) *((char *) dp);
+
+					fprintf(f, "       Data: %.3d 0x%2x %c (%d)\n", ct++,
+							(unsigned) (ch & 0xff), (isprint(ch) ? ch : ' '), (int) *((char *) dp));
+					dp += sizeof(char);
+				}
+				break;
+			case RPM_STRING_TYPE:
+			case RPM_STRING_ARRAY_TYPE:
+			case RPM_I18NSTRING_TYPE:
+				while (c--)
+				{
+					fprintf(f, "       Data: %.3d %s\n", ct++, (char *) dp);
+					dp = strchr(dp, 0);
+					dp++;
+				}
+				break;
+			default:
+				fprintf(stderr, _("Data type %d not supported\n"), (int) p->info.type);
+				exit(EXIT_FAILURE);
+				break;
+			}
+		}
+		p++;
+	}
+}
+
+int main(int argc, char **argv)
+{
+	Header h;
+	FD_t fdi;
+
+	if (argc == 1)
+	{
+		fdi = Fopen("-", "r.ufdio");
+	} else
+	{
+		fdi = Fopen(argv[1], "r.ufdio");
+	}
+
+	if (fdi == NULL || Ferror(fdi))
+	{
+		fprintf(stderr, _("cannot open %s: %s\n"), argv[1], strerror(errno));
+		exit(EXIT_FAILURE);
+	}
+
+	h = headerRead(fdi, HEADER_MAGIC_YES);
+	if (!h)
+	{
+		fprintf(stderr, _("headerRead error: %s\n"), strerror(errno));
+		exit(EXIT_FAILURE);
+	}
+	Fclose(fdi);
+
+	headerDump(h, stdout, HEADER_DUMP_INLINE, rpmTagTable);
+	headerFree(h);
+
+	return 0;
+}
diff --git a/rpmheader.c b/rpmheader.c
new file mode 100644
index 000000000..e07b278ab
--- /dev/null
+++ b/rpmheader.c
@@ -0,0 +1,49 @@
+/* rpmheader: spit out the header portion of a package */
+
+#include "system.h"
+#include <errno.h>
+#include <netinet/in.h>
+
+#include <rpmlib.h>
+#include "rpmlead.h"
+#include "signature.h"
+#include "header.h"
+
+int main(int argc, char **argv)
+{
+	FD_t fdi, fdo;
+	Header hd;
+	char *emsg;
+	int rc;
+    Header sigh = NULL;
+
+	if (argc == 1)
+	{
+		fdi = Fopen("-", "r.ufdio");
+	} else
+	{
+		fdi = Fopen(argv[1], "r.ufdio");
+	}
+
+	if (fdi == NULL || Ferror(fdi))
+	{
+		perror("input");
+		return EXIT_FAILURE;
+	}
+
+	if ((rc = rpmLeadRead(fdi, &emsg)) != RPMRC_OK)
+	{
+		fprintf(stderr, "%s\n", emsg);
+		return EXIT_FAILURE;
+	}
+	if ((rc = rpmReadSignature(fdi, &sigh, &emsg)) != RPMRC_OK)
+	{
+		fprintf(stderr, "%s\n", emsg);
+		return EXIT_FAILURE;
+	}
+	hd = headerRead(fdi, HEADER_MAGIC_YES);
+	fdo = Fopen("-", "w.ufdio");
+	rc = headerWrite(fdo, hd, HEADER_MAGIC_YES);
+
+	return rc;
+}
diff --git a/rpmlead.c b/rpmlead.c
new file mode 100644
index 000000000..28371d694
--- /dev/null
+++ b/rpmlead.c
@@ -0,0 +1,99 @@
+/* rpmlead: spit out the lead portion of a package */
+
+#include "system.h"
+#include <string.h>
+#include <errno.h>
+#include <netinet/in.h>
+
+#include "rpmio.h"
+#include "rpmlead.h"
+#include "lib/header_internal.h"	/* Freadall() */
+
+struct rpmlead_s {
+    unsigned char magic[4];
+    unsigned char major;
+    unsigned char minor;
+    short type;
+    short archnum;
+    char name[66];
+    short osnum;
+    short signature_type;       /*!< Signature header type (RPMSIG_HEADERSIG) */
+    char reserved[16];      /*!< Pad to 96 bytes -- 8 byte aligned! */
+};
+
+static unsigned char const lead_magic[] = {
+    RPMLEAD_MAGIC0, RPMLEAD_MAGIC1, RPMLEAD_MAGIC2, RPMLEAD_MAGIC3
+};
+#define RPMSIGTYPE_HEADERSIG 5
+
+static void leadCheck(struct rpmlead_s *lead)
+{
+    if (memcmp(lead->magic, lead_magic, sizeof(lead_magic)))
+    {
+		fprintf(stderr, _("not an rpm package"));
+		exit(EXIT_FAILURE);
+    }
+    if (lead->signature_type != htons(RPMSIGTYPE_HEADERSIG))
+    {
+		fprintf(stderr, _("illegal signature type"));
+		exit(EXIT_FAILURE);
+    }
+    if (lead->major < 3 || lead->major > 4)
+    {
+		fprintf(stderr, _("unsupported RPM package version"));
+		exit(EXIT_FAILURE);
+    }
+}
+
+static void readLead(FD_t fd, struct rpmlead_s *l)
+{
+    memset(l, 0, sizeof(*l));
+    if (Fread(l, 1, sizeof(*l), fd) != sizeof(*l))
+    {
+		if (Ferror(fd))
+		{
+		    fprintf(stderr, _("read failed: %s (%d)\n"), Fstrerror(fd), errno);
+			exit(EXIT_FAILURE);
+		} else
+		{
+		    fprintf(stderr, _("not an rpm package\n"));
+			exit(EXIT_FAILURE);
+		}
+    } else
+    {
+		leadCheck(l);
+    }
+}
+
+static void writeLead(FD_t fd, struct rpmlead_s *l)
+{
+	if (Fwrite(l, 1, sizeof(*l), fd) == sizeof(*l))
+	{
+    }
+}
+
+
+int main(int argc, char **argv)
+{
+	FD_t fdi, fdo;
+	struct rpmlead_s lead;
+
+	if (argc == 1)
+	{
+		fdi = Fopen("-", "r.ufdio");
+	} else
+	{
+		fdi = Fopen(argv[1], "r.ufdio");
+	}
+	if (fdi == NULL || Ferror(fdi))
+	{
+		perror(argv[1]);
+		return EXIT_FAILURE;
+	}
+
+	readLead(fdi, &lead);
+	fdo = Fopen("-", "w.ufdio");
+	writeLead(fdo, &lead);
+
+	return EXIT_SUCCESS;
+}
diff --git a/rpmsignature.c b/rpmsignature.c
new file mode 100644
index 000000000..d50979c19
--- /dev/null
+++ b/rpmsignature.c
@@ -0,0 +1,42 @@
+/* rpmsignature: spit out the signature portion of a package */
+
+#include "system.h"
+
+#include "rpmlead.h"
+#include "signature.h"
+
+int main(int argc, char **argv)
+{
+	FD_t fdi,
+	 fdo;
+	struct rpmlead lead;
+	Header sig;
+
+	setprogname(argv[0]);				/* Retrofit glibc __progname */
+	if (argc == 1)
+	{
+		fdi = Fopen("-", "r.ufdio");
+	} else
+	{
+		fdi = Fopen(argv[1], "r.ufdio");
+	}
+	if (Ferror(fdi))
+	{
+		perror("input");
+		exit(1);
+	}
+
+	readLead(fdi, &lead);
+	rpmReadSignature(fdi, &sig, lead.signature_type);
+	switch (lead.signature_type)
+	{
+	case RPMSIG_NONE:
+		fprintf(stderr, _("No signature available.\n"));
+		break;
+	default:
+		fdo = Fopen("-", "w.ufdio");
+		rpmWriteSignature(fdo, sig);
+	}
+
+	return 0;
+}
-- 
2.24.0

