From 24ac6b8cb5adf90829f39ccb489d19264893e684 Mon Sep 17 00:00:00 2001
From: Thorsten Otto <admin@tho-otto.de>
Date: Thu, 15 Mar 2018 05:03:22 +0100
Subject: [PATCH 11/63] Suspend exclusive database lock when scriptlets get
 called, allowing read access in scriptlets. Only needed for DB_PRIVATE (aka
 global) locking.

---
 lib/backend/db3.c | 40 ++++++++++++++++++++++++++++++++++++++++
 lib/backend/dbi.h |  4 +++-
 lib/rpmdb.c       |  6 ++++++
 lib/rpmdb.h       |  4 +++-
 lib/transaction.c |  3 +++
 5 files changed, 55 insertions(+), 2 deletions(-)

diff --git a/lib/backend/db3.c b/lib/backend/db3.c
index 93bc27801..f96d62c5c 100644
--- a/lib/backend/db3.c
+++ b/lib/backend/db3.c
@@ -552,6 +552,46 @@ static void db3_dbSetFSync(rpmdb rdb, int enable)
 
 static int db3_Ctrl(rpmdb rdb, dbCtrlOp ctrl)
 {
+    struct flock l;
+    int tries;
+    int fdno = -1;
+    dbiIndex dbi;
+    DB * db;
+
+    switch (ctrl) {
+    case DB_CTRL_SUSPEND_DBLOCK:
+    case DB_CTRL_RESUME_DBLOCK:
+	dbi = rdb->db_pkgs;	/* packages db only */
+	if (!dbi)
+	    return 1;
+	if (!dbi->cfg.dbi_lockdbfd || (dbi->dbi_flags & DBI_VERIFYONLY) != 0)
+	    return 0;
+	if (!(dbi->dbi_rpmdb->db_mode & (O_RDWR|O_WRONLY)))
+	    return 0;
+	if (_lockdbfd == 0)
+	    return 0;
+        db = dbi->dbi_db;
+	if (!(db->fd(db, &fdno) == 0 && fdno >= 0))
+	    return 1;
+	for (tries = 0; tries < 2; tries++) {
+	    memset(&l, 0, sizeof(l));
+	    l.l_whence = 0;
+	    l.l_start = 0;
+	    l.l_len = 0;
+	    l.l_type = ctrl == DB_CTRL_SUSPEND_DBLOCK ? F_RDLCK : F_WRLCK;
+	    if (!fcntl(fdno, tries ? F_SETLKW : F_SETLK, (void *)&l))
+		return 0;
+	    if (ctrl == DB_CTRL_SUSPEND_DBLOCK) {
+		rpmlog(RPMLOG_WARNING, _("could not suspend database lock\n"));
+		return 1;
+	    }
+	    if (tries == 0)
+		rpmlog(RPMLOG_WARNING, _("waiting to reestablish exclusive database lock\n"));
+	}
+	return 1;
+    default:
+        break;
+    }
     return 0;
 }
 
diff --git a/lib/backend/dbi.h b/lib/backend/dbi.h
index 1f6d179b4..b39745774 100644
--- a/lib/backend/dbi.h
+++ b/lib/backend/dbi.h
@@ -17,7 +17,9 @@ typedef enum dbCtrlOp_e {
     DB_CTRL_UNLOCK_RO		= 2,
     DB_CTRL_LOCK_RW		= 3,
     DB_CTRL_UNLOCK_RW		= 4,
-    DB_CTRL_INDEXSYNC		= 5
+    DB_CTRL_INDEXSYNC		= 5,
+    DB_CTRL_SUSPEND_DBLOCK      = 100,
+    DB_CTRL_RESUME_DBLOCK       = 101
 } dbCtrlOp;
 
 typedef struct dbiIndex_s * dbiIndex;
diff --git a/lib/rpmdb.c b/lib/rpmdb.c
index 88399c9fb..25ade7304 100644
--- a/lib/rpmdb.c
+++ b/lib/rpmdb.c
@@ -2639,6 +2639,12 @@ int rpmdbCtrl(rpmdb db, rpmdbCtrlOp ctrl)
     case RPMDB_CTRL_INDEXSYNC:
 	dbctrl = DB_CTRL_INDEXSYNC;
 	break;
+    case RPMDB_CTRL_SUSPEND_DBLOCK:
+	dbctrl = DB_CTRL_SUSPEND_DBLOCK;
+	break;
+    case RPMDB_CTRL_RESUME_DBLOCK:
+	dbctrl = DB_CTRL_RESUME_DBLOCK;
+	break;
     }
     return dbctrl ? dbCtrl(db, dbctrl) : 1;
 }
diff --git a/lib/rpmdb.h b/lib/rpmdb.h
index 78765bb15..fde5e0957 100644
--- a/lib/rpmdb.h
+++ b/lib/rpmdb.h
@@ -35,7 +35,9 @@ typedef enum rpmdbCtrlOp_e {
     RPMDB_CTRL_UNLOCK_RO       = 2,
     RPMDB_CTRL_LOCK_RW         = 3,
     RPMDB_CTRL_UNLOCK_RW       = 4,
-    RPMDB_CTRL_INDEXSYNC       = 5
+    RPMDB_CTRL_INDEXSYNC       = 5,
+    RPMDB_CTRL_SUSPEND_DBLOCK  = 100,
+    RPMDB_CTRL_RESUME_DBLOCK   = 101
 } rpmdbCtrlOp;
 
 /** \ingroup rpmdb
diff --git a/lib/transaction.c b/lib/transaction.c
index c69a8b3c1..c4bb272ab 100644
--- a/lib/transaction.c
+++ b/lib/transaction.c
@@ -1459,6 +1459,7 @@ rpmRC runScript(rpmts ts, rpmte te, Header h, ARGV_const_t prefixes,
 		     stag != RPMTAG_PREUN &&
 		     stag != RPMTAG_PRETRANS &&
 		     stag != RPMTAG_VERIFYSCRIPT);
+    rpmdb rdb = rpmtsGetRdb(ts);
 
     /* Fake up a transaction element for triggers from rpmdb */
     if (te == NULL) {
@@ -1470,10 +1471,12 @@ rpmRC runScript(rpmts ts, rpmte te, Header h, ARGV_const_t prefixes,
     if (sfd == NULL)
 	sfd = rpmtsScriptFd(ts);
 
+    rpmdbCtrl(rdb, RPMDB_CTRL_SUSPEND_DBLOCK);
     rpmswEnter(rpmtsOp(ts, RPMTS_OP_SCRIPTLETS), 0);
     rc = rpmScriptRun(script, arg1, arg2, sfd,
 		      prefixes, warn_only, rpmtsPlugins(ts));
     rpmswExit(rpmtsOp(ts, RPMTS_OP_SCRIPTLETS), 0);
+    rpmdbCtrl(rdb, RPMDB_CTRL_RESUME_DBLOCK);
 
     /* Map warn-only errors to "notfound" for script stop callback */
     stoprc = (rc != RPMRC_OK && warn_only) ? RPMRC_NOTFOUND : rc;
-- 
2.16.2

