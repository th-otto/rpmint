From d9942fa84fb20ebe8d00501f245e75d3a70a5c8a Mon Sep 17 00:00:00 2001
From: Thorsten Otto <admin@tho-otto.de>
Date: Thu, 15 Mar 2018 17:44:32 +0100
Subject: [PATCH 79/81] MiNT: attribute((visibility)) is not available

---
 configure.ac    |  4 ++++
 rpmio/rpmsq.c   | 26 ++++++++++++++++++++++++--
 rpmio/rpmsq.h   |  3 +++
 rpmio/rpmutil.h |  2 +-
 4 files changed, 32 insertions(+), 3 deletions(-)

diff --git a/configure.ac b/configure.ac
index e97ebce7a..6f2249d9e 100644
--- a/configure.ac
+++ b/configure.ac
@@ -463,6 +463,10 @@ AC_CHECK_HEADER([popt.h], [
 AC_SUBST(WITH_POPT_INCLUDE)
 AC_SUBST(WITH_POPT_LIB)
 
+#=================
+# Check for siginfo_t.
+AC_CHECK_TYPES(siginfo_t, [], [], [#include <signal.h>])
+
 #=================
 # Check for libarchive library.
 AC_ARG_WITH([archive], [AS_HELP_STRING([--with-archive], [build rpm2archive - requires libarchive])],
diff --git a/rpmio/rpmsq.c b/rpmio/rpmsq.c
index b08f294ab..03d55d7a2 100644
--- a/rpmio/rpmsq.c
+++ b/rpmio/rpmsq.c
@@ -32,13 +32,18 @@ static void rpmsqIgn(int signum, siginfo_t *info, void *context)
 
 static void rpmsqTerm(int signum, siginfo_t *info, void *context)
 {
-    if (info->si_pid == 0) {
+#ifdef HAVE_SIGINFO_T
+	int pid = info->si_pid;
+#else
+	int pid = 0;
+#endif
+    if (pid == 0) {
 	rpmlog(RPMLOG_DEBUG,
 		"exiting on signal %d (killed by death, eh?)\n", signum);
     } else {
 	int lvl = (signum == SIGPIPE) ? RPMLOG_DEBUG : RPMLOG_WARNING;
 	rpmlog(lvl,
-		_("exiting on signal %d from pid %d\n"), signum, info->si_pid);
+		_("exiting on signal %d from pid %d\n"), signum, pid);
     }
     /* exit 128 + signum for compatibility with bash(1) */
     exit(128 + signum);
@@ -48,7 +53,9 @@ static struct rpmsig_s {
     int signum;
     rpmsqAction_t defhandler;
     rpmsqAction_t handler;
+#ifdef HAVE_SIGINFO_T
     siginfo_t siginfo;
+#endif
     struct sigaction oact;
 } rpmsigTbl[] = {
     { SIGINT,	rpmsqTerm,	NULL },
@@ -84,7 +91,9 @@ static void rpmsqHandler(int signum, siginfo_t * info, void * context)
 	    rpmsig sig = NULL;
 	    if (rpmsigGet(signum, &sig)) {
 		(void) sigaddset(&rpmsqCaught, signum);
+#ifdef HAVE_SIGINFO_T
 		memcpy(&sig->siginfo, info, sizeof(*info));
+#endif
 	    }
 	}
     }
@@ -118,7 +127,9 @@ int rpmsqActivate(int state)
 	struct sigaction sa;
 	for (rpmsig tbl = rpmsigTbl; tbl->signum >= 0; tbl++) {
 	    sigdelset(&rpmsqCaught, tbl->signum);
+#ifdef HAVE_SIGINFO_T
 	    memset(&tbl->siginfo, 0, sizeof(tbl->siginfo));
+#endif
 
 	    /* XXX Don't set a signal handler if already SIG_IGN */
 	    sigaction(tbl->signum, NULL, &tbl->oact);
@@ -126,8 +137,13 @@ int rpmsqActivate(int state)
 		continue;
 
 	    sigemptyset (&sa.sa_mask);
+#ifdef SA_SIGINFO
 	    sa.sa_flags = SA_SIGINFO;
 	    sa.sa_sigaction = rpmsqHandler;
+#else
+	    sa.sa_flags = 0;
+	    sa.sa_handler = (sighandler_t) rpmsqHandler;
+#endif
 	    if (sigaction(tbl->signum, &sa, &tbl->oact) == 0)
 		sigaddset(&rpmsqActive, tbl->signum);
 	}
@@ -138,7 +154,9 @@ int rpmsqActivate(int state)
 	    if (sigaction(tbl->signum, &tbl->oact, NULL) == 0) {
 		sigdelset(&rpmsqActive, tbl->signum);
 		sigdelset(&rpmsqCaught, tbl->signum);
+#ifdef HAVE_SIGINFO_T
 		memset(&tbl->siginfo, 0, sizeof(tbl->siginfo));
+#endif
 	    }
 	}
     }
@@ -164,8 +182,12 @@ int rpmsqPoll(void)
 							     tbl->defhandler;
 	    /* delete signal before running handler to prevent recursing */
 	    sigdelset(&rpmsqCaught, tbl->signum);
+#ifdef HAVE_SIGINFO_T
 	    handler(tbl->signum, &tbl->siginfo, NULL);
 	    memset(&tbl->siginfo, 0, sizeof(tbl->siginfo));
+#else
+	    handler(tbl->signum, NULL, NULL);
+#endif
 	    n++;
 	}
     }
diff --git a/rpmio/rpmsq.h b/rpmio/rpmsq.h
index 23206457c..7404c9767 100644
--- a/rpmio/rpmsq.h
+++ b/rpmio/rpmsq.h
@@ -19,6 +19,9 @@ extern "C" {
  * @param info		(siginfo_t) signal info
  * @param context	signal context
  */
+#ifndef HAVE_SIGINFO_T
+typedef struct _siginfo_t siginfo_t;
+#endif
 typedef void (*rpmsqAction_t) (int signum, siginfo_t * info, void * context);
 
 /** \ingroup rpmsq
diff --git a/rpmio/rpmutil.h b/rpmio/rpmutil.h
index 9e8a25d0f..7c00fc3b5 100644
--- a/rpmio/rpmutil.h
+++ b/rpmio/rpmutil.h
@@ -97,7 +97,7 @@
 #define RPM_GNUC_WARN_UNUSED_RESULT
 #endif /* __GNUC__ */
 
-#if    __GNUC__ >= 4 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 3)
+#if    (__GNUC__ >= 4 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 3)) && !defined(__MINT__)
 #  define RPM_GNUC_INTERNAL __attribute__((visibility("hidden")))
 #else
 #  define RPM_GNUC_INTERNAL
-- 
2.16.2

