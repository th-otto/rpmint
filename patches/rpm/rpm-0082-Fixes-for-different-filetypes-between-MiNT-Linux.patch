From 478e9bbb64e5e147f6babb356fcb15f63d878d2e Mon Sep 17 00:00:00 2001
From: Thorsten Otto <admin@tho-otto.de>
Date: Wed, 2 Sep 2020 16:35:27 +0200
Subject: [PATCH] Fixes for different filetypes between MiNT/Linux

---
 build/files.c  |  2 +-
 lib/cpio.c     | 18 ++++++++++-
 lib/fsm.c      | 20 ++++++------
 lib/manifest.c | 48 +++++++++++++++++-----------
 lib/manifest.h |  2 +-
 lib/query.c    |  8 ++---
 lib/rpmfi.c    | 85 ++++++++++++++++++++++++++++++++++++++------------
 lib/rpmfiles.h |  8 +++--
 rpm2archive.c  |  4 +--
 9 files changed, 135 insertions(+), 60 deletions(-)

diff --git a/build/files.c b/build/files.c
index 6dfd801c8..37fb31fd3 100644
--- a/build/files.c
+++ b/build/files.c
@@ -1157,7 +1157,7 @@ static void genCpioListAndHeader(FileList fl, Package pkg, int isSrc)
 	    headerPutUint32(h, RPMTAG_FILEMTIMES, &rtime, 1);
 	}
 
-	{   rpm_mode_t rmode = (rpm_mode_t) flp->fl_mode;
+	{   rpm_mode_t rmode = rpmfilesUnixToRpmMode(flp->fl_mode);
 	    headerPutUint16(h, RPMTAG_FILEMODES, &rmode, 1);
 	}
 
diff --git a/lib/cpio.c b/lib/cpio.c
index 57c959258..46a72d88b 100644
--- a/lib/cpio.c
+++ b/lib/cpio.c
@@ -216,6 +216,7 @@ int rpmcpioHeaderWrite(rpmcpio_t cpio, char * path, struct stat * st)
     size_t len, written;
     dev_t dev;
     int rc = 0;
+	mode_t mode;
 
     if ((cpio->mode & O_ACCMODE) != O_WRONLY) {
         return RPMERR_WRITE_FAILED;
@@ -234,8 +235,23 @@ int rpmcpioHeaderWrite(rpmcpio_t cpio, char * path, struct stat * st)
         return rc;
     }
 
+	/*
+	 * cpio always uses POSIX filetypes,
+	 * regardless of host
+	 */
+	mode = st->st_mode & ~S_IFMT;
+	switch (st->st_mode & S_IFMT)
+	{
+		case S_IFDIR: mode |= 0040000; break;
+		case S_IFCHR: mode |= 0020000; break;
+		case S_IFBLK: mode |= 0060000; break;
+		case S_IFREG: mode |= 0100000; break;
+		case S_IFIFO: mode |= 0010000; break;
+		case S_IFLNK: mode |= 0120000; break;
+		case S_IFSOCK: mode |= 0140000; break;
+	}
     SET_NUM_FIELD(hdr->inode, st->st_ino, field);
-    SET_NUM_FIELD(hdr->mode, st->st_mode, field);
+    SET_NUM_FIELD(hdr->mode, mode, field);
     SET_NUM_FIELD(hdr->uid, st->st_uid, field);
     SET_NUM_FIELD(hdr->gid, st->st_gid, field);
     SET_NUM_FIELD(hdr->nlink, st->st_nlink, field);
diff --git a/lib/fsm.c b/lib/fsm.c
index 432bcbd90..ed536eca2 100644
--- a/lib/fsm.c
+++ b/lib/fsm.c
@@ -115,7 +115,7 @@ static DNLI_t dnlInitIterator(rpmfiles fi, rpmfs fs, int reverse)
 	    int dil;
 	    size_t dnlen, bnlen;
 
-	    if (!S_ISDIR(rpmfilesFMode(fi, i)))
+	    if (rpmfiWhatis(rpmfilesFMode(fi, i)) != XDIR)
 		continue;
 
 	    dil = rpmfilesDI(fi, i);
@@ -662,13 +662,13 @@ static int fsmVerify(const char *path, rpmfi fi)
     int rc;
     int saveerrno = errno;
     struct stat dsb;
-    mode_t mode = rpmfiFMode(fi);
+    rpm_mode_t mode = rpmfiFMode(fi);
 
     rc = fsmStat(path, 1, &dsb);
     if (rc)
 	return rc;
 
-    if (S_ISREG(mode)) {
+    if (rpmfiWhatis(mode) == REG) {
 	/* HP-UX (and other os'es) don't permit unlink on busy files. */
 	char *rmpath = rstrscat(NULL, path, "-RPMDELETE", NULL);
 	rc = fsmRename(path, rmpath);
@@ -679,7 +679,7 @@ static int fsmVerify(const char *path, rpmfi fi)
 	    rc = RPMERR_UNLINK_FAILED;
 	free(rmpath);
         return (rc ? rc : RPMERR_ENOENT);	/* XXX HACK */
-    } else if (S_ISDIR(mode)) {
+    } else if (rpmfiWhatis(mode) == XDIR) {
         if (S_ISDIR(dsb.st_mode)) return 0;
         if (S_ISLNK(dsb.st_mode)) {
 	    uid_t luid = dsb.st_uid;
@@ -691,7 +691,7 @@ static int fsmVerify(const char *path, rpmfi fi)
             if (S_ISDIR(dsb.st_mode) && (luid == 0 || luid == dsb.st_uid))
 		    return 0;
         }
-    } else if (S_ISLNK(mode)) {
+    } else if (rpmfiWhatis(mode) == LINK) {
         if (S_ISLNK(dsb.st_mode)) {
             char buf[8 * BUFSIZ];
             size_t len;
@@ -700,12 +700,12 @@ static int fsmVerify(const char *path, rpmfi fi)
             if (rc) return rc;
             if (rstreq(rpmfiFLink(fi), buf)) return 0;
         }
-    } else if (S_ISFIFO(mode)) {
+    } else if (rpmfiWhatis(mode) == PIPE) {
         if (S_ISFIFO(dsb.st_mode)) return 0;
-    } else if (S_ISCHR(mode) || S_ISBLK(mode)) {
+    } else if (rpmfiWhatis(mode) == CDEV || rpmfiWhatis(mode) == BDEV) {
         if ((S_ISCHR(dsb.st_mode) || S_ISBLK(dsb.st_mode)) &&
             (dsb.st_rdev == rpmfiFRdev(fi))) return 0;
-    } else if (S_ISSOCK(mode)) {
+    } else if (rpmfiWhatis(mode) == SOCK) {
         if (S_ISSOCK(dsb.st_mode)) return 0;
     }
     /* XXX shouldn't do this with commit/undo. */
@@ -787,7 +787,7 @@ static int fsmCommit(char **path, rpmfi fi, rpmFileAction action, const char *su
     int rc = 0;
 
     /* XXX Special case /dev/log, which shouldn't be packaged anyways */
-    if (!(S_ISSOCK(rpmfiFMode(fi)) && IS_DEV_LOG(*path))) {
+    if (!(rpmfiWhatis(rpmfiFMode(fi)) == SOCK && IS_DEV_LOG(*path))) {
 	const char *nsuffix = (action == FA_ALTNAME) ? SUFFIX_RPMNEW : NULL;
 	char *dest = *path;
 	/* Construct final destination path (nsuffix is usually NULL) */
@@ -899,7 +899,7 @@ int rpmPackageFilesInstall(rpmts ts, rpmte te, rpmfiles files,
 	action = rpmfsGetAction(fs, rpmfiFX(fi));
 	skip = XFA_SKIPPING(action);
 	if (action != FA_TOUCH) {
-	    suffix = S_ISDIR(rpmfiFMode(fi)) ? NULL : tid;
+	    suffix = rpmfiWhatis(rpmfiFMode(fi)) == XDIR ? NULL : tid;
 	} else {
 	    suffix = NULL;
 	}
diff --git a/lib/manifest.c b/lib/manifest.c
index eba108885..a77b72ff0 100644
--- a/lib/manifest.c
+++ b/lib/manifest.c
@@ -9,31 +9,43 @@
 #include <rpm/argv.h>
 
 #include "lib/manifest.h"
+#include "lib/rpmfiles.h"
+#include "lib/rpmfi.h"
 
 #include "debug.h"
 
 
-char * rpmPermsString(int mode)
+char * rpmPermsString(rpm_mode_t mode)
 {
     char *perms = xstrdup("----------");
    
-    if (S_ISREG(mode)) 
-	perms[0] = '-';
-    else if (S_ISDIR(mode)) 
-	perms[0] = 'd';
-    else if (S_ISLNK(mode))
-	perms[0] = 'l';
-    else if (S_ISFIFO(mode)) 
-	perms[0] = 'p';
-    else if (S_ISSOCK(mode)) 
-	perms[0] = 's';
-    else if (S_ISCHR(mode))
-	perms[0] = 'c';
-    else if (S_ISBLK(mode))
-	perms[0] = 'b';
-    else
-	perms[0] = '?';
-
+    switch (rpmfiWhatis(mode))
+    {
+    case REG:
+		perms[0] = '-';
+		break;
+    case XDIR:
+		perms[0] = 'd';
+		break;
+	case LINK:
+		perms[0] = 'l';
+		break;
+    case PIPE:
+		perms[0] = 'p';
+		break;
+    case SOCK:
+		perms[0] = 's';
+		break;
+	case CDEV:
+		perms[0] = 'c';
+		break;
+    case BDEV:
+		perms[0] = 'b';
+		break;
+    default:
+		perms[0] = '?';
+		break;
+	}
     if (mode & S_IRUSR) perms[1] = 'r';
     if (mode & S_IWUSR) perms[2] = 'w';
     if (mode & S_IXUSR) perms[3] = 'x';
diff --git a/lib/manifest.h b/lib/manifest.h
index 227ca0089..d55ef8ee4 100644
--- a/lib/manifest.h
+++ b/lib/manifest.h
@@ -15,7 +15,7 @@ extern "C" {
  * @param mode		file mode
  * @return		(malloc'd) formatted mode string
  */
-char * rpmPermsString(int mode)	
+char * rpmPermsString(rpm_mode_t mode)	
 ;
 
 /**
diff --git a/lib/query.c b/lib/query.c
index 99dad9c5f..a9e81056e 100644
--- a/lib/query.c
+++ b/lib/query.c
@@ -27,7 +27,7 @@
 /**
  */
 static void printFileInfo(const char * name,
-			  rpm_loff_t size, unsigned short mode,
+			  rpm_loff_t size, rpm_mode_t mode,
 			  unsigned int mtime,
 			  unsigned short rdev, unsigned int nlink,
 			  const char * owner, const char * group,
@@ -49,13 +49,13 @@ static void printFileInfo(const char * name,
 
     /* this knows too much about dev_t */
 
-    if (S_ISLNK(mode)) {
+    if (rpmfiWhatis(mode) == LINK) {
 	rasprintf(&link, "%s -> %s", name, linkto);
-    } else if (S_ISCHR(mode)) {
+    } else if (rpmfiWhatis(mode) == CDEV) {
 	perms[0] = 'c';
 	snprintf(sizefield, sizeof(sizefield), "%3u, %3u", ((unsigned)(rdev >> 8) & 0xff),
 			((unsigned)rdev & 0xff));
-    } else if (S_ISBLK(mode)) {
+    } else if (rpmfiWhatis(mode) == BDEV) {
 	perms[0] = 'b';
 	snprintf(sizefield, sizeof(sizefield), "%3u, %3u", ((unsigned)(rdev >> 8) & 0xff),
 			((unsigned)rdev & 0xff));
diff --git a/lib/rpmfi.c b/lib/rpmfi.c
index a503ad976..1b82fa013 100644
--- a/lib/rpmfi.c
+++ b/lib/rpmfi.c
@@ -525,6 +525,48 @@ rpm_mode_t rpmfilesFMode(rpmfiles fi, int ix)
     return fmode;
 }
 
+rpm_mode_t rpmfilesRpmToUnixMode(rpm_mode_t mode)
+{
+    switch (rpmfiWhatis(mode))
+    {
+    	case PIPE: mode = (mode & ~S_IFMT) | S_IFIFO; break;
+    	case CDEV: mode = (mode & ~S_IFMT) | S_IFCHR; break;
+    	case XDIR: mode = (mode & ~S_IFMT) | S_IFDIR; break;
+    	case BDEV: mode = (mode & ~S_IFMT) | S_IFBLK; break;
+    	case REG: mode = (mode & ~S_IFMT) | S_IFREG; break;
+    	case LINK: mode = (mode & ~S_IFMT) | S_IFLNK; break;
+    	case SOCK: mode = (mode & ~S_IFMT) | S_IFSOCK; break;
+    }
+    return mode;
+}
+
+rpm_mode_t rpmfilesUnixToRpmMode(mode_t mode)
+{
+	if (S_ISDIR(mode))
+	{
+		mode = (mode & ~S_IFMT) | (XDIR << 12);
+	} else if (S_ISCHR(mode))
+	{
+		mode = (mode & ~S_IFMT) | (CDEV << 12);
+	} else if (S_ISBLK(mode))
+	{
+		mode = (mode & ~S_IFMT) | (BDEV << 12);
+	} else if (S_ISLNK(mode))
+	{
+		mode = (mode & ~S_IFMT) | (LINK << 12);
+	} else if (S_ISSOCK(mode))
+	{
+		mode = (mode & ~S_IFMT) | (SOCK << 12);
+	} else if (S_ISFIFO(mode))
+	{
+		mode = (mode & ~S_IFMT) | (PIPE << 12);
+	} else
+	{
+		mode = (mode & ~S_IFMT) | (REG << 12);
+	}
+	return mode;
+}
+
 rpmfileState rpmfilesFState(rpmfiles fi, int ix)
 {
     rpmfileState fstate = RPMFILE_STATE_MISSING;
@@ -786,7 +828,7 @@ int rpmfilesStat(rpmfiles fi, int ix, int flags, struct stat *sb)
 	sb->st_nlink = rpmfilesFLinks(fi, ix, NULL);
 	sb->st_ino = rpmfilesFInode(fi, ix);
 	sb->st_rdev = rpmfilesFRdev(fi, ix);
-	sb->st_mode = rpmfilesFMode(fi, ix);
+	sb->st_mode = rpmfilesRpmToUnixMode(rpmfilesFMode(fi, ix));
 	sb->st_mtime = rpmfilesFMtime(fi, ix);
 
 	/* Only regular files and symlinks have a size */
@@ -898,19 +940,22 @@ rpmfi rpmfiInitD(rpmfi fi, int dx)
 
 rpmFileTypes rpmfiWhatis(rpm_mode_t mode)
 {
-    if (S_ISDIR(mode))	return XDIR;
-    if (S_ISCHR(mode))	return CDEV;
-    if (S_ISBLK(mode))	return BDEV;
-    if (S_ISLNK(mode))	return LINK;
-    if (S_ISSOCK(mode))	return SOCK;
-    if (S_ISFIFO(mode))	return PIPE;
-    return REG;
+	switch (mode & 0170000) /* S_IFMT */
+	{
+		case XDIR << 12: return XDIR;
+		case CDEV << 12: return CDEV;
+		case BDEV << 12: return BDEV;
+		case LINK << 12: return LINK;
+		case SOCK << 12: return SOCK;
+		case PIPE << 12: return PIPE;
+	}
+	return REG;
 }
 
 int rpmfilesCompare(rpmfiles afi, int aix, rpmfiles bfi, int bix)
 {
-    mode_t amode = rpmfilesFMode(afi, aix);
-    mode_t bmode = rpmfilesFMode(bfi, bix);
+    rpm_mode_t amode = rpmfilesFMode(afi, aix);
+    rpm_mode_t bmode = rpmfilesFMode(bfi, bix);
     rpmFileTypes awhat = rpmfiWhatis(amode);
 
     if ((rpmfilesFFlags(afi, aix) & RPMFILE_GHOST) ||
@@ -972,7 +1017,7 @@ int rpmfileContentsEqual(rpmfiles ofi, int oix, rpmfiles nfi, int nix)
 	goto exit;
     }
 
-    diskWhat = rpmfiWhatis((rpm_mode_t)sb.st_mode);
+    diskWhat = rpmfiWhatis(rpmfilesUnixToRpmMode(sb.st_mode));
     newWhat = rpmfiWhatis(rpmfilesFMode(nfi, nix));
     oldWhat = rpmfiWhatis(rpmfilesFMode(ofi, oix));
     if ((diskWhat != newWhat) || (diskWhat != oldWhat)) {
@@ -1059,7 +1104,7 @@ rpmFileAction rpmfilesDecideFate(rpmfiles ofi, int oix,
 	}
     }
 
-    diskWhat = rpmfiWhatis((rpm_mode_t)sb.st_mode);
+    diskWhat = rpmfiWhatis(rpmfilesUnixToRpmMode(sb.st_mode));
     dbWhat = rpmfiWhatis(rpmfilesFMode(ofi, oix));
     newWhat = rpmfiWhatis(rpmfilesFMode(nfi, nix));
 
@@ -1199,7 +1244,7 @@ int rpmfilesConfigConflict(rpmfiles fi, int ix)
     }
 
     /* Files of different types obviously are not identical */
-    diskWhat = rpmfiWhatis((rpm_mode_t)sb.st_mode);
+    diskWhat = rpmfiWhatis(rpmfilesUnixToRpmMode(sb.st_mode));
     if (diskWhat != newWhat) {
 	rc = 1;
 	goto exit;
@@ -1442,7 +1487,7 @@ static void rpmfilesBuildNLink(rpmfiles fi, Header h)
 
     files = fileidHashCreate(totalfc, fidHashFunc, fidCmp, NULL, NULL);
     for (int i=0; i < totalfc; i++) {
-	if (!S_ISREG(rpmfilesFMode(fi, i)) ||
+	if (rpmfiWhatis(rpmfilesFMode(fi, i)) != REG ||
 		(rpmfilesFFlags(fi, i) & RPMFILE_GHOST) ||
 		fi->finodes[i] <= 0) {
 	    continue;
@@ -1459,7 +1504,7 @@ static void rpmfilesBuildNLink(rpmfiles fi, Header h)
 	for (int i=0; i < totalfc; i++) {
 	    int fcnt;
 	    int * data;
-	    if (!S_ISREG(rpmfilesFMode(fi, i)) ||
+	    if (rpmfiWhatis(rpmfilesFMode(fi, i)) != REG ||
 		    (rpmfilesFFlags(fi, i) & RPMFILE_GHOST)) {
 		continue;
 	    }
@@ -2058,14 +2103,14 @@ static int iterWriteArchiveNext(rpmfi fi)
     /* loop over the files we can handle ourself */
     do {
 	fx = iterWriteArchiveNextFile(fi);
-	if (S_ISLNK(rpmfiFMode(fi))) {
+	if (rpmfiWhatis(rpmfiFMode(fi)) == LINK) {
 	    /* write symlink target */
 	    const char *lnk = rpmfiFLink(fi);
 	    size_t len = strlen(lnk);
 	    if (rpmfiArchiveWrite(fi, lnk, len) != len) {
 		return RPMERR_WRITE_FAILED;
 	    }
-	} else if (S_ISREG(rpmfiFMode(fi)) && rpmfiFSize(fi)) {
+	} else if (rpmfiWhatis(rpmfiFMode(fi)) == REG && rpmfiFSize(fi)) {
 	    /* this file actually needs some content */
 	    return fx;
 	}
@@ -2160,12 +2205,12 @@ static int iterReadArchiveNext(rpmfi fi)
 	if (rpmfilesFFlags(fi->files, fx) & RPMFILE_GHOST)
 	    return RPMERR_ITER_SKIP;
 
-	if (S_ISREG(mode)) {
+	if (rpmfiWhatis(mode) == REG) {
 	    const int * links;
 	    uint32_t numlinks = rpmfilesFLinks(fi->files, fx, &links);
 	    if (!(numlinks > 1 && links[numlinks-1] != fx))
 		fsize = rpmfilesFSize(fi->files, fx);
-	} else if (S_ISLNK(mode)) {
+	} else if (rpmfiWhatis(mode) == LINK) {
 	    /* Skip over symlink target data in payload */
 	    rpm_loff_t lsize = rpmfilesFSize(fi->files, fx);
 	    char *buf = xmalloc(lsize + 1);
@@ -2243,7 +2288,7 @@ static int iterReadArchiveNextContentFirst(rpmfi fi)
 int rpmfiArchiveHasContent(rpmfi fi)
 {
     int res = 0;
-    if (fi && S_ISREG(rpmfiFMode(fi))) {
+    if (fi && rpmfiWhatis(rpmfiFMode(fi)) == REG) {
 	const int * links;
 	int nlink = rpmfiFLinks(fi, &links);
 	if (nlink > 1) {
diff --git a/lib/rpmfiles.h b/lib/rpmfiles.h
index 797b77bc8..294506033 100644
--- a/lib/rpmfiles.h
+++ b/lib/rpmfiles.h
@@ -20,13 +20,13 @@
  * but are identical to the linux stat(2) file types.
  */
 typedef enum rpmFileTypes_e {
-    PIPE	=  1,	/*!< pipe/fifo */
+    PIPE	=  1,	/*!< pipe/fifo */ /* MiNT: 10 */
     CDEV	=  2,	/*!< character device */
     XDIR	=  4,	/*!< directory */
     BDEV	=  6,	/*!< block device */
     REG		=  8,	/*!< regular file */
-    LINK	= 10,	/*!< hard link */
-    SOCK	= 12	/*!< socket */
+    LINK	= 10,	/*!< symlink */ /* MiNT: 14 */
+    SOCK	= 12	/*!< socket */ /* MiNT: 1 */
 } rpmFileTypes;
 
 /**
@@ -453,6 +453,8 @@ rpmfileAttrs rpmfilesFFlags(rpmfiles fi, int ix);
  * @return		file mode, 0 on invalid
  */
 rpm_mode_t rpmfilesFMode(rpmfiles fi, int ix);
+rpm_mode_t rpmfilesRpmToUnixMode(rpm_mode_t mode);
+rpm_mode_t rpmfilesUnixToRpmMode(mode_t mode);
 
 /** \ingroup rpmfiles
  * Return file (binary) digest of file info set.
diff --git a/rpm2archive.c b/rpm2archive.c
index 8f97e7020..03528f740 100644
--- a/rpm2archive.c
+++ b/rpm2archive.c
@@ -38,7 +38,7 @@ static void fill_archive_entry(struct archive * a, struct archive_entry * entry,
     archive_entry_set_rdev(entry, rpmfiFRdev(fi));
     archive_entry_set_mtime(entry, rpmfiFMtime(fi), 0);
 
-    if (S_ISLNK(mode))
+    if (rpmfiWhatis(mode) == LINK)
 	archive_entry_set_symlink(entry, rpmfiFLink(fi));
 }
 
@@ -163,7 +163,7 @@ static int process_package(rpmts ts, char * filename)
 
 	archive_write_header(a, entry);
 
-	if (S_ISREG(mode) && (nlink == 1 || rpmfiArchiveHasContent(fi))) {
+	if (rpmfiWhat(mode) == REG && (nlink == 1 || rpmfiArchiveHasContent(fi))) {
 	    write_file_content(a, buf, fi);
 	}
     }
-- 
2.24.0

