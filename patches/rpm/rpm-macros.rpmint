#
# RPM macros for RPMint filesystem layout.
#

%_rpmint_vendor           RPMint
%_rpmint_target_platform  m68k-atari-mint
%_rpmint_target_prefix    /usr
%_rpmint_target           m68k-atari-mint
%_rpmint_installdir       %{_prefix}/%{_rpmint_target}
%_rpmint_cross_pkgconfigdir %{_rpmint_installdir}/lib/pkgconfig
%_rpmint_sysroot          %{_rpmint_installdir}/sys-root
%_rpmint_prefix           %{_rpmint_sysroot}%{_rpmint_target_prefix}
%_rpmint_libdir           %{_rpmint_prefix}/lib
%_rpmint_libexecdir       %{_rpmint_prefix}/lib
%_rpmint_bindir           %{_rpmint_prefix}/bin
%_rpmint_includedir       %{_rpmint_prefix}/include
%_rpmint_sysconfdir       %{_rpmint_sysroot}/etc
%_rpmint_datadir          %{_rpmint_prefix}/share
%_rpmint_docdir           %{_rpmint_datadir}/doc
%_rpmint_mandir           %{_rpmint_datadir}/man
%_rpmint_infodir          %{_rpmint_datadir}/info
%_rpmint_localstatedir    /var

%_rpmint_target_ar        %{_rpmint_target}-ar
%_rpmint_target_ranlib    %{_rpmint_target}-ranlib
%_rpmint_target_strip     %{_rpmint_target}-strip

%_rpmint_buildtype %{expand:%%{!?%{buildtype}:cross}}

%_smp_mflags -j%{getncpus}

# redefine __spec_install_pre
# it usually does a rm -rf buildroot,
# but that is also done in the %build step,
# and we install libraries to buildroot already while building
#
%rpmint_header \
%define _build_pkgcheck  %{_topdir}/rpmmintsign \
%define _build_pkgcheck_srpm  %{_topdir}/rpmmintsign \
%define _os mint \
 \
Vendor:         RPMint \
%define __spec_install_pre %{___build_pre}; %{__mkdir_p} "%{buildroot}"\
%nil

%_isysroot %{expr:"%{buildtype}" == "cross" ? "%{_rpmint_sysroot}" : ""}

%rpmint_build_arch \
%if "%{buildtype}" == "cross" \
BuildArch:      noarch \
%else \
%define _target_platform %{_rpmint_target_platform} \
%if "%{buildtype}" == "v4e" \
%global _arch m5475 \
%else \
%if "%{buildtype}" == "020" \
%global _arch m68020 \
%else \
%global _arch m68k \
%endif \
%endif \
%endif \
%nil

%rpmint_cflags() \
TARGET=%{_rpmint_target} \
ar="%{_rpmint_target_ar}" \
ranlib="%{_rpmint_target_ranlib}" \
strip="%{_rpmint_target_strip}" \
LN_S="ln -s" \
COMMON_CFLAGS="-O2 -fomit-frame-pointer $LTO_CFLAGS ${CFLAGS_AMIGAOS}" \
ALL_CPUS="020 v4e 000" \
CPU_CFLAGS_000=-m68000    ; CPU_LIBDIR_000=           ; CPU_LIBEXECDIR_000=/m68000 \
CPU_CFLAGS_020=-m68020-60 ; CPU_LIBDIR_020=/m68020-60 ; CPU_LIBEXECDIR_020=/m68020-60 \
CPU_CFLAGS_v4e=-mcpu=5475 ; CPU_LIBDIR_v4e=/m5475     ; CPU_LIBEXECDIR_v4e=/m5475 \
export PKG_CONFIG_LIBDIR="%{_rpmint_cross_pkgconfigdir}" \
export PKG_CONFIG_PATH="$PKG_CONFIG_LIBDIR" \
%nil

%rpmint_essential() \
%if "%{_rpmint_buildtype}" == "cross" \
BuildRequires:  cross-mint-essential \
%else \
BuildRequires:  mint-devel-essential \
%endif

# compare two versions, returns -1, 0, 1, ~~~
%rpm_vercmp() %{lua:print(rpm.expand('%1') == '~~~' and '~~~' or rpm.vercmp(rpm.expand('%1'), rpm.expand('%2')))}

%rpmint_move_pkgconfig_libs_private() \
	# If a *.pc has a Libs.private entry, \
	# move the flags to the Libs entry, since we only \
	# link against static libraries. \
	# Most autoconf tests only use the entry from \
	# pkg-config --libs, and would fail otherwise \
	_file="%1" \
	# If a *.pc has a Libs.private entry, \
	_libs=" "`sed -n 's,Libs: *\\\(.*\\\)$,\\\1,p' "$_file"`" " \
	_libs_priv=" "`sed -n 's,Libs\\\.private: *\\\(.*\\\)$,\\\1,p' "$_file"`" " \
	_modified=false; \
	for _lib in $_libs_priv; do \
		case $_libs in \
		*" "$_lib" "*) ;; \
		*) _libs="$_libs$_lib "; _modified=true ;; \
		esac \
	done \
	if $_modified; then \
		sed -e 's,Libs: .*$,'"Libs: $_libs"',' "$_file" > "$_file.tmp" \
		mv "$_file.tmp" "$_file" \
	fi \
%nil

%rpmint_remove_pkg_configs() \
	pushd "%{buildroot}" \
 \
	# \
	# remove pkgconfig dirs in architecture dependent subdirs \
	# we only need the one in the toplevel directory \
	# \
	case %{_rpmint_target} in \
	m68k-amigaos*) \
		# with mcrt=nix*, the config files end up in a subdirectory; move them up \
		if test -d %{buildroot}%{_rpmint_prefix}/libnix/lib/pkgconfig; then \
			rm -rf %{buildroot}%{_rpmint_prefix}/libnix/lib/*/pkgconfig \
			mkdir -p %{buildroot}%{_rpmint_libdir} \
			mv %{buildroot}%{_rpmint_prefix}/libnix/lib/pkgconfig %{buildroot}%{_rpmint_libdir} \
		fi \
		;; \
	*) \
		rm -rf %{buildroot}%{_rpmint_libdir}/*/pkgconfig \
		;; \
	esac \
 \
	popd \
%nil

%rpmint_copy_pkg_configs() \
	_pattern="%1" \
	if test "%1" = "%%1"; then _pattern="*.pc"; fi \
	 \
	pushd "%{buildroot}" \
 \
	if test -d %{buildroot}%{_rpmint_libdir}/pkgconfig; then \
	mkdir -p %{buildroot}%{_rpmint_cross_pkgconfigdir} \
	 \
	# \
	# replace absolute pathnames by their symbolic equivalents \
	# and remove unneeded -I and -L switches, \
	# since those directories are always on the \
	# default search path. \
	# remove -L${sharedlibdir}, because \
	# sharedlibdir is the bin directory, but the import libraries \
	# are in the lib directory \
	# \
	for i in %{buildroot}%{_rpmint_libdir}/pkgconfig/$_pattern; do \
		test -e "$i" || continue \
		true && { \
			# from the *.pc files generated for the target, \
			# generate *.pc files that are suitable for the cross-compiler \
			base=${i##*/} \
			dst=%{buildroot}%{_rpmint_cross_pkgconfigdir}/$base \
			if test ! -f $dst -o $i -nt $dst; then \
				cp -a $i $dst \
				test -h "$i" && continue \
				%rpmint_move_pkgconfig_libs_private $dst \
				sed -i 's,",,g \
						 s,prefix[ ]*=[ ]*'${configured_prefix}',prefix='%{_rpmint_prefix}', \
			             /^prefix[ ]*=/{p;d} \
			             s,=[ ]*'%{prefix}',=${prefix}, \
			             s,-L'%{_rpmint_target_prefix}/lib',-L${libdir},g \
			             s,-L${sharedlibdir} ,,g \
			             s,-L${exec_prefix}/lib,-L${libdir},g \
			             s,-L${libdir} ,,g \
			             s,-L${libdir}$,, \
			             s,-L'%{_rpmint_target_prefix}/bin'[ ]*,,g \
			             s,-I/usr/include,-I${includedir},g \
			             s,-I'%{_rpmint_includedir}',-I${includedir},g' $dst \
				includedir=`sed -n 's/^[ ]*includedir[ ]*=[ ]*\\\([^ ]*\\\)/\\\1/p' $dst` \
				if test "$includedir" = '/usr/include' -o "$includedir" = '${prefix}/include' -o "$includedir" = '${prefix}/sys-include'; then \
					sed -i 's,-I${prefix}/include,-I${includedir},g \
                                             s,-I${includedir} ,,g \
					     s,-I${includedir}$,,' $dst \
				fi \
			fi \
		} \
		true && { \
			sed -e 's,",,g \
					 s,prefix[ ]*=[ ]*'${configured_prefix}',prefix='%{_rpmint_target_prefix}', \
			         /^prefix[ ]*=/{p;d} \
			         s,[ ]*=[ ]*'%{prefix}',=${prefix}, \
			         s,-L'%{_rpmint_target_prefix}/lib',-L${libdir},g \
		             s,-L${sharedlibdir} ,,g \
		             s,-L${exec_prefix}/lib,-L${libdir},g \
			     s,-L${libdir} ,,g \
			     s,-L${libdir}$,, \
		             s,-L'%{_rpmint_target_prefix}/bin'[ ]*,,g \
 		             s,-I/usr/include,-I${includedir},g \
		             s,-I'%{_rpmint_includedir}',-I${includedir},g' $i > $i.tmp \
			includedir=`sed -n 's/^[ ]*includedir[ ]*=[ ]*\\\([^ ]*\\\)/\\\1/p' $i.tmp` \
			if test "$includedir" = '/usr/include' -o "$includedir" = '${prefix}/include' -o "$includedir" = '${prefix}/sys-include'; then \
				sed -i 's,-I${prefix}/include,-I${includedir},g \
                                     s,-I${includedir} ,,g \
				     s,-I${includedir}$,,' $i.tmp \
			fi \
			%rpmint_move_pkgconfig_libs_private $i.tmp \
			diff -q $i $i.tmp >/dev/null && rm -f $i.tmp || { \
				echo "fixed $i" \
				mv $i.tmp $i \
			} \
		} \
	done \
	fi \
	popd \
%nil

%rpmint_gzip_docs() \
	for dir in %{_rpmint_sysroot}%{_rpmint_target_prefix} %{_rpmint_target_prefix}; do \
		if test -d "%{buildroot}${dir}"; then \
			pushd "%{buildroot}${dir}" \
			rm -f share/info/dir \
			if test -d share/man; then \
				find share/man -type f | while read f; do \
					case $f in \
					*.gz) ;; \
					*) \
						if test -h $f; then \
							t=$(readlink $f) \
							case $t in \
							*.gz) ;; \
							*) \
								rm -f $f $f.gz \
								$LN_S $t.gz $f.gz \
								;; \
							esac \
						else \
							rm -f ${f}.gz; gzip -9 $f \
						fi \
						;; \
					esac \
				done \
			fi \
			if test -d share/info; then \
				find share/info -type f | while read f; do \
					case $f in \
					*.gz) ;; \
					*) rm -f ${f}.gz; gzip -9 $f ;; \
					esac \
				done \
			fi \
			popd \
		fi \
	done \
%nil

%rpmint_strip_archives() \
	find %{buildroot} \\\( -type f -o -xtype l \\\) -name "*.la" -delete -printf "rm %%p\\\n" \
	if test -z "$NO_STRIP"; then \
		test "$LTO_CFLAGS" != "" || find %{buildroot} -name "*.a" ! -type l -exec "%{_rpmint_target_strip}" -S -x '{}' \\\; \
	fi \
	if test -z "$NO_RANLIB"; then \
		find %{buildroot} -name "*.a" ! -type l -exec "%{_rpmint_target_ranlib}" '{}' \\\; \
	fi \
%nil

%rpmint_make_bin_archive() \
	pushd "%{buildroot}%{_rpmint_sysroot}" \
	for i in `find . \\\( -path "*/bin/*" -o -path "*/sbin/*" -o -path "*/libexec/*" \\\)`; do \
		if test -z "$NO_STRIP"; then \
			if test ! -d "$i" -a ! -h "$i"; then \
				# don't fail on scripts \
				"%{_rpmint_target_strip}" "$i" || : \
			fi \
		fi \
		dir="${i%/*}" \
		file="${i##*/}" \
		mkdir -p "%{buildroot}/$dir" \
		cp -a "$i" "%{buildroot}/$dir" \
	done \
	for i in `find . -maxdepth 1 -type d`; do \
		test "$i" = "." && continue \
		cp -ar "$i" "%{buildroot}" \
	done \
 \
	popd \
%nil

%rpmint_install_info() \
%if "%{buildtype}" == "cross" \
%install_info --info-dir=%{_rpmint_infodir} %{_rpmint_infodir}/%{1}.info%{ext_info} \
%else \
%install_info --info-dir=%{_rpmint_target_prefix}/share/info %{_rpmint_target_prefix}/share/info/%{1}.info%{ext_info} \
%endif \
%nil

%rpmint_uninstall_info() \
%if "%{buildtype}" == "cross" \
%install_info_delete --info-dir=%{_rpmint_infodir} %{_rpmint__infodir}/%{1}.info%{ext_info} \
%else \
%install_info_delete --info-dir=%{_rpmint_target_prefix} %{_rpmint_target_prefix}/share/info//%{1}.info%{ext_info} \
%endif \
%nil

%rpmint_append_gnulib_cache() \
cat <<EOF >>config.cache\
ac_cv_func_malloc_0_nonnull=yes\
ac_cv_func_realloc_0_nonnull=yes\
ac_cv_func_chown_works=yes\
ac_cv_func_getgroups=yes\
ac_cv_func_getgroups_works=yes\
am_cv_func_working_getline=yes\
ac_cv_func_working_mktime=yes\
ac_cv_func_gettimeofday=yes\
gl_cv_func_chown_slash_works=yes\
gl_cv_func_chown_ctime_works=yes\
gl_cv_func_fflush_stdin=yes\
gl_cv_func_fcntl_f_dupfd_works=yes\
gl_cv_func_getcwd_abort_bug=no\
gl_cv_func_getcwd_path_max=yes\
gl_cv_func_getcwd_null=yes\
gl_cv_func_getdtablesize_works=yes\
gl_cv_func_getgroups=yes\
gl_cv_func_getgroups_works=yes\
gl_cv_func_getopt_gnu=yes\
gl_cv_func_getopt_posix=yes\
gl_cv_func_working_getdelim=yes\
gl_cv_func_malloc_0_nonnull=1\
gl_cv_func_mbrlen_empty_input=yes\
gl_cv_func_memchr_works=yes\
gl_cv_func_working_mktime=yes\
gl_cv_func_perror_works=yes\
gl_cv_func_printf_sizes_c99=yes\
gl_cv_func_printf_infinite=yes\
gl_cv_func_printf_infinite_long_double=no\
gl_cv_func_printf_directive_a=no\
gl_cv_func_printf_directive_f=no\
gl_cv_func_printf_directive_n=yes\
gl_cv_func_printf_directive_ls=no\
gl_cv_func_printf_positions=yes\
gl_cv_func_printf_flag_grouping=yes\
gl_cv_func_printf_flag_zero=yes\
gl_cv_func_printf_enomem=yes\
gl_cv_func_realpath_works=yes\
gl_cv_func_rmdir_works=yes\
gl_cv_func_snprintf_truncation_c99=yes\
gl_cv_func_snprintf_retval_c99=yes\
gl_cv_func_snprintf_directive_n=yes\
gl_cv_func_symlink_works=yes\
gl_cv_func_vsnprintf_zerosize_c99=yes\
gl_cv_func_signbit=yes\
gl_cv_func_signbit_gcc=yes\
gl_cv_func_stpncpy=yes\
gl_cv_func_working_strerror=yes\
gl_cv_func_strerror_0_works=yes\
gl_cv_func_memchr_works=yes\
gl_cv_func_strstr_works_always=yes\
gl_cv_func_strstr_linear=yes\
gl_cv_func_strtod_works=yes\
gl_cv_func_fcntl_f_dupfd_works=no\
gl_cv_func_fdopendir_works=yes\
gl_cv_func_gettimeofday_clobber=no\
gl_cv_func_ungetc_works=yes\
gl_cv_func_link_follows_symlink=no\
gl_cv_func_lstat_dereferences_slashed_symlink=yes\
gl_cv_func_mkdir_trailing_dot_works=yes\
gl_cv_func_mkdir_trailing_slash_works=yes\
gl_cv_func_readlink_works=yes\
gl_cv_func_setenv_works=yes\
gl_cv_func_sleep_works=yes\
gl_cv_func_snprintf_usable=yes\
gl_cv_func_stat_file_slash=yes\
gl_cv_func_unsetenv_works=yes\
gl_cv_func_vsnprintf_usable=yes\
gl_cv_func_working_utimes=yes\
gl_cv_struct_dirent_d_ino=yes\
gl_cv_func_wcwidth_works=yes\
EOF\
%nil

%rpmint_patch() \
%{__patch} -p1 --fuzz=%{_default_patch_fuzz} %{_default_patch_flags} -i %{dirname:%1}/patches/%{pkgname}/%{basename:%1} \
%nil

