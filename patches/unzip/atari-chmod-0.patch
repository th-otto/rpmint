--- a/list.c.orig	2018-05-18 17:10:32.348409804 +0200
+++ b/list.c	2018-05-18 17:26:09.368389414 +0200
@@ -52,16 +52,16 @@
 #endif
 
    static ZCONST char Far HeadersL[]  =
-     " Length   Method    Size  Cmpr    Date    Time   CRC-32   Name";
+     " Length   Method    Size  Cmpr    Date    Time  Mode     CRC-32   Name";
    static ZCONST char Far HeadersL1[] =
-     "--------  ------  ------- ---- ---------- ----- --------  ----";
+     "--------  ------  ------- ---- ---------- ----- ------- --------  ----";
    static ZCONST char Far *Headers[][2] =
      { {HeadersS, HeadersS1}, {HeadersL, HeadersL1} };
 
    static ZCONST char Far CaseConversion[] =
      "%s (\"^\" ==> case\n%s   conversion)\n";
    static ZCONST char Far LongHdrStats[] =
-     "%s  %-7s%s %4s %02u%c%02u%c%02u %02u:%02u %08lx %c";
+     "%s  %-7s%s %4s %02u%c%02u%c%02u %02u:%02u %04lo    %08lx %c";
    static ZCONST char Far LongFileTrailer[] =
      "--------          -------  ---                       \
      -------\n%s         %s %4s                            %lu file%s\n";
@@ -396,7 +396,7 @@ int list_files(__G)    /* return PK-type
                 Info(slide, 0, ((char *)slide, LoadFarString(LongHdrStats),
                   FmZofft(G.crec.ucsize, "8", "u"), methbuf,
                   FmZofft(csiz, "8", "u"), cfactorstr,
-                  mo, dt_sepchar, dy, dt_sepchar, yr, hh, mm,
+                  mo, dt_sepchar, dy, dt_sepchar, yr, hh, mm, G.pInfo->file_attr,
                   G.crec.crc32, (G.pInfo->lcflag? '^':' ')));
             else
 #ifdef OS2_EAS
--- a/unix/unix.c.orig	2018-05-18 17:21:13.220395859 +0200
+++ b/unix/unix.c	2018-05-18 17:28:33.592386276 +0200
@@ -336,6 +336,8 @@ static unsigned filtattr(__G__ perms)
     if (!uO.K_flag)
         perms &= ~(S_ISUID | S_ISGID | S_ISVTX);
 
+    if (perms == 0)
+        perms = 0644;
     return (0xffff & perms);
 } /* end function filtattr() */
 
@@ -642,7 +642,7 @@ int mapname(__G__ renamed)
             }
 #ifndef NO_CHMOD
             /* Filter out security-relevant attributes bits. */
-            G.pInfo->file_attr = filtattr(__G__ G.pInfo->file_attr);
+            G.pInfo->file_attr = filtattr(__G__ G.pInfo->file_attr) | 0755;
             /* When extracting non-UNIX directories or when extracting
              * without UID/GID restoration or SGID preservation, any
              * SGID flag inherited from the parent directory should be
@@ -659,7 +659,7 @@ int mapname(__G__ renamed)
             }
 
             /* set approx. dir perms (make sure can still read/write in dir) */
-            if (chmod(G.filename, G.pInfo->file_attr | 0700))
+            if (chmod(G.filename, G.pInfo->file_attr))
                 perror("chmod (directory attributes) error");
 #endif
             /* set dir time (note trailing '/') */
--- a/atari/atari.c.orig	2008-08-20 03:11:42.000000000 +0200
+++ b/atari/atari.c	2018-05-18 17:35:19.780377437 +0200
@@ -165,6 +165,32 @@ char *do_wild(__G__ wildspec)
 
 
 
+/************************/
+/*  Function filtattr() */
+/************************/
+/* This is used to clear or keep the SUID and SGID bits on file permissions.
+ * It's possible that a file in an archive could have one of these bits set
+ * and, unknown to the person unzipping, could allow others to execute the
+ * file as the user or group.  The new option -K bypasses this check.
+ */
+
+static unsigned filtattr(__G__ perms)
+    __GDEF
+    unsigned perms;
+{
+    /* keep setuid/setgid/tacky perms? */
+    if (!uO.K_flag)
+        perms &= ~(S_ISUID | S_ISGID | S_ISVTX);
+
+    if (perms == 0)
+        perms = 0644;
+    return (0xffff & perms);
+} /* end function filtattr() */
+
+
+
+
+
 /**********************/
 /* Function mapattr() */
 /**********************/
@@ -937,7 +963,7 @@ void close_outfile(__G)    /* GRR: chang
   ---------------------------------------------------------------------------*/
 
 #ifndef NO_CHMOD
-    if (chmod(G.filename, 0xffff & G.pInfo->file_attr))
+    if (chmod(G.filename, filtattr(G.pInfo->file_attr)))
         perror("chmod (file attributes) error");
 #endif
 
--- a/unix/unxcfg.h	2009-04-16 20:36:12.000000000 +0200
+++ b/unix/unxcfg.h	2020-02-29 19:23:38.006130801 +0100
@@ -120,9 +120,9 @@ typedef struct stat z_stat;
    struct tm *gmtime(), *localtime();
 #endif
 
-#if (defined(BSD4_4) || (defined(SYSV) && defined(MODERN)))
+#if (defined(BSD4_4) || (defined(SYSV) && defined(MODERN)) || defined(__atarist__))
 #  include <unistd.h>           /* this includes utime.h on SGIs */
-#  if (defined(BSD4_4) || defined(linux) || defined(__GLIBC__))
+#  if (defined(BSD4_4) || defined(linux) || defined(__GLIBC__) || defined(__atarist__))
 #    include <utime.h>
 #    define GOT_UTIMBUF
 #  endif
