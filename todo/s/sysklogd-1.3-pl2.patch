diff -u --new-file --recursive v1.3-1/sysklogd-1.3/MANIFEST sysklogd-1.3/MANIFEST
--- v1.3-1/sysklogd-1.3/MANIFEST	Sun Mar 31 11:19:05 1996
+++ sysklogd-1.3/MANIFEST	Thu May  2 15:21:49 1996
@@ -17,6 +17,9 @@
 ksym.c:		Source module for the kernel log daemon which implements
 		kernel numeric address to symbol translations.
 
+ksym_mod.c:	Source module which contains functions which allow ksym.c
+		to resolve symbols found in loadable kernel modules.	
+
 syslogd.c:	Source code for the system log daemon.
 
 syslog.c:	A slightly modified version of the syslog.c file found in
@@ -46,3 +49,10 @@
 
 kernel.patch:	A source code patch which modifies the linux kernel to
 		delimit addresses for symbolic translation by klogd.
+
+oops.c:		C source for a loadable kernel module which can be used
+		to generate a kernel protection fault.  This is used to
+		test the address resolution capabilities of klogd.
+
+oops_test.c:	A small driver program used in conjunction with the oops
+		module to generate a kernel protection fault.
diff -u --new-file --recursive v1.3-1/sysklogd-1.3/Makefile sysklogd-1.3/Makefile
--- v1.3-1/sysklogd-1.3/Makefile	Sun Mar 31 11:19:05 1996
+++ sysklogd-1.3/Makefile	Thu May  2 15:19:07 1996
@@ -52,15 +52,18 @@
 .c.o:
 	${CC} ${CFLAGS} -c $*.c
 
-all:	syslogd	klogd syslog_tst
+all: syslogd klogd
+
+test: syslog_tst ksym oops_test
 
 install: install_man install_exec
 
 syslogd: syslogd.o pidfile.o
 	${CC} ${LDFLAGS} -o syslogd syslogd.o pidfile.o ${LIBS}
 
-klogd:	klogd.o syslog.o pidfile.o ksym.o
-	${CC} ${LDFLAGS} -o klogd klogd.o syslog.o pidfile.o ksym.o ${LIBS}
+klogd:	klogd.o syslog.o pidfile.o ksym.o ksym_mod.o
+	${CC} ${LDFLAGS} -o klogd klogd.o syslog.o pidfile.o ksym.o \
+		ksym_mod.o ${LIBS}
 
 syslog_tst: syslog_tst.o
 	${CC} ${LDFLAGS} -o syslog_tst syslog_tst.o
@@ -77,14 +80,29 @@
 ksym.o: ksym.c klogd.h
 	${CC} ${CFLAGS} ${KLOGD_FLAGS} -c ksym.c
 
+ksym_mod.o: ksym_mod.c klogd.h
+	${CC} ${CFLAGS} ${KLOGD_FLAGS} -c ksym_mod.c
+
 syslog_tst.o: syslog_tst.c
 	${CC} ${CFLAGS} -c syslog_tst.c
 
+oops_test: oops.o
+	${CC} ${CFLAGS} -o oops_test oops_test.c
+
+oops.o: oops.c
+	${CC} ${CFLAGS} -D__KERNEL__ -DMODULE -c oops.c
+
+ksym: ksym_test.o ksym_mod.o
+	${CC} ${LDFLAGS} -o ksym ksym_test.o ksym_mod.o
+
+ksym_test.o: ksym.c
+	${CC} ${CFLAGS} -DTEST -o ksym_test.o -c ksym.c
+
 clean:
 	rm -f *.o *.log *~ *.orig
 
 clobber: clean
-	rm -f syslogd klogd syslog_tst TAGS
+	rm -f syslogd klogd ksym syslog_tst oops_test TAGS
 
 install_exec: syslogd klogd
 	${INSTALL} -m 500 -s syslogd ${BINDIR}/syslogd
diff -u --new-file --recursive v1.3-1/sysklogd-1.3/klogd.c sysklogd-1.3/klogd.c
--- v1.3-1/sysklogd-1.3/klogd.c	Sun Mar 31 11:19:05 1996
+++ sysklogd-1.3/klogd.c	Wed Apr 17 13:42:58 1996
@@ -380,7 +380,7 @@
 	{
 		fputs("Logging line:\n", stderr);
 		fprintf(stderr, "\tLine: %s\n", fmt);
-		fprintf(stderr, "\tPriority: %c\n", *(fmt+1));
+		fprintf(stderr, "\tPriority: %d\n", priority);
 	}
 
 	/* Handle output to a file. */
diff -u --new-file --recursive v1.3-1/sysklogd-1.3/klogd.h sysklogd-1.3/klogd.h
--- v1.3-1/sysklogd-1.3/klogd.h	Sun Mar 31 11:19:05 1996
+++ sysklogd-1.3/klogd.h	Sun Mar 31 14:24:42 1996
@@ -13,5 +13,6 @@
 
 /* Function prototypes. */
 extern int InitKsyms(char *);
+extern int InitMsyms(void);
 extern char * ExpandKadds(char *, char *);
 extern void Syslog(int priority, char *fmt, ...);
diff -u --new-file --recursive v1.3-1/sysklogd-1.3/ksym.c sysklogd-1.3/ksym.c
--- v1.3-1/sysklogd-1.3/ksym.c	Sun Mar 31 11:19:05 1996
+++ sysklogd-1.3/ksym.c	Wed May  1 16:24:54 1996
@@ -1,6 +1,7 @@
 /*
     ksym.c - functions for kernel address->symbol translation
-    Copyright (c) 1995  Dr. G.W. Wettstein <greg@wind.rmcc.com>
+    Copyright (c) 1995, 1996  Dr. G.W. Wettstein <greg@wind.rmcc.com>
+    Copyright (c) 1996 Enjellic Systems Development
 
     This file is part of the sysklogd package, a kernel and system log daemon.
 
@@ -69,27 +70,20 @@
 #include <malloc.h>
 #include <sys/utsname.h>
 #include "klogd.h"
+#include "ksyms.h"
 
 #define VERBOSE_DEBUGGING 0
 
 
-/* Variables, structures and type definitions static to this module. */
+/* Variables static to this module. */
 struct sym_table
 {
 	unsigned long value;
 	char *name;
 };
 
-struct symbol
-{
-	char *name;
-	int size;
-	int offset;
-};
-
-static struct sym_table *sym_array = (struct sym_table *) 0;
-
 static int num_syms = 0;
+static struct sym_table *sym_array = (struct sym_table *) 0;
 
 static char *system_maps[] =
 {
@@ -104,7 +98,7 @@
 
 
 #if defined(TEST)
-static int debugging = 1;
+int debugging;
 #else
 extern int debugging;
 #endif
@@ -192,7 +186,7 @@
 	 */
 	while ( !feof(sym_file) )
 	{
-		if ( fscanf(sym_file, "%8lx %c %s\n", &address, &type, sym)
+		if ( fscanf(sym_file, "%lx %c %s\n", &address, &type, sym)
 		    != 3 )
 		{
 			Syslog(LOG_ERR, "Error in symbol table input.");
@@ -303,7 +297,7 @@
 		version = 0;
 		while ( !feof(sym_file) && (version == 0) )
 		{
-			if ( fscanf(sym_file, "%8lx %c %s\n", &address, \
+			if ( fscanf(sym_file, "%lx %c %s\n", &address, \
 				    &type, sym) != 3 )
 			{
 				Syslog(LOG_ERR, "Error in symbol table input.");
@@ -527,7 +521,7 @@
  *		closely matching the address is returned.
  **************************************************************************/
 
-extern char * LookupSymbol(value, sym)
+static char * LookupSymbol(value, sym)
 
 	unsigned long value;
 
@@ -556,6 +550,9 @@
 		last = sym_array[lp].name;
 	}
 
+	if ( (last = LookupModuleSymbol(value, sym)) != (char *) 0 )
+		return(last);
+
 	return((char *) 0);
 }
 
@@ -594,8 +591,29 @@
 	auto int value;
 
 	auto struct symbol sym;
+
+
+	/*
+	 * This is as handy a place to put this as anyplace.
+	 *
+	 * Since the insertion of kernel modules can occur in a somewhat
+	 * dynamic fashion we need some mechanism to insure that the
+	 * kernel symbol tables get read just prior to when they are
+	 * needed.
+	 *
+	 * To accomplish this we look for the Oops string and use its
+	 * presence as a signal to load the module symbols.
+	 *
+	 * This is not the best solution of course, especially if the
+	 * kernel is rapidly going out to lunch.  What really needs to
+	 * be done is to somehow generate a callback from the
+	 * kernel whenever a module is loaded or unloaded.  I am
+	 * open for patches.
+	 */
+	if ( (strstr(line, "Oops:") != (char *) 0) && !InitMsyms() )
+		Syslog(LOG_WARNING, "Cannot load kernel module symbols.\n");
 	
-	
+
 	/*
 	 * Early return if there do not appear to be any kernel
 	 * messages in this line.
@@ -670,21 +688,17 @@
 
 extern int main(int argc, char *argv[])
 {
-	auto long int value;
 	auto char line[1024], eline[2048];
+
+	debugging = 1;
 	
 	
-#if 0
-	value = atol(argv[1]);
-	fprintf(stdout, "Value of %ld: %s\n", value, LookupSymbol(value));
-#endif
-
 	if ( !InitKsyms((char *) 0) )
 	{
 		fputs("ksym: Error loading system map.\n", stderr);
 		return(1);
 	}
-	
+
 	while ( !feof(stdin) )
 	{
 		gets(line);
diff -u --new-file --recursive v1.3-1/sysklogd-1.3/ksym_mod.c sysklogd-1.3/ksym_mod.c
--- v1.3-1/sysklogd-1.3/ksym_mod.c	Wed Dec 31 18:00:00 1969
+++ sysklogd-1.3/ksym_mod.c	Wed May  1 16:15:25 1996
@@ -0,0 +1,587 @@
+/*
+    ksym_mod.c - functions for building symbol lookup tables for klogd
+    Copyright (c) 1995, 1996  Dr. G.W. Wettstein <greg@wind.rmcc.com>
+    Copyright (c) 1996 Enjellic Systems Development
+
+    This file is part of the sysklogd package, a kernel and system log daemon.
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program; if not, write to the Free Software
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+*/
+
+/*
+ * This file implements functions which are useful for building
+ * a symbol lookup table based on the in kernel symbol table
+ * maintained by the Linux kernel.
+ *
+ * Proper logging of kernel panics generated by loadable modules
+ * tends to be difficult.  Since the modules are loaded dynamically
+ * their addresses are not known at kernel load time.  A general
+ * protection fault (Oops) cannot be properly deciphered with 
+ * classic methods using the static symbol map produced at link time.
+ *
+ * One solution to this problem is to have klogd attempt to translate
+ * addresses from module when the fault occurs.  By referencing the
+ * the kernel symbol table proper resolution of these symbols is made
+ * possible.
+ *
+ * At least that is the plan.
+ */
+
+
+/* Includes. */
+#include <stdlib.h>
+#include <malloc.h>
+#include <unistd.h>
+#include <signal.h>
+#include <errno.h>
+#include <sys/fcntl.h>
+#include <sys/stat.h>
+#include <linux/time.h>
+#include <linux/module.h>
+#include <stdarg.h>
+#include <paths.h>
+
+#include "klogd.h"
+#include "ksyms.h"
+
+
+/*
+ * The following bit uses some kernel/library magic to product what
+ * looks like a function call to user level code.  This function is
+ * actually a system call in disguise.  The purpose of the getsyms
+ * call is to return a current copy of the in-kernel symbol table.
+ */
+#define __LIBRARY__
+#include <linux/unistd.h>
+# define __NR_getsyms __NR_get_kernel_syms
+_syscall1(int, getsyms, struct kernel_sym *, syms);
+#undef __LIBRARY__
+extern int getsyms(struct kernel_sym *);
+
+
+/* Variables static to this module. */
+struct sym_table
+{
+	unsigned long value;
+	char *name;
+};
+
+struct Module
+{
+	struct sym_table *sym_array;
+	int num_syms;
+
+	char *name;
+	struct module module;
+};
+
+static int num_modules;
+struct Module *sym_array_modules = (struct Module *) 0;
+
+static int have_modules = 0;
+
+#if defined(TEST)
+static int debugging = 1;
+#else
+extern int debugging;
+#endif
+
+
+/* Function prototypes. */
+static void FreeModules(void);
+static int AddSymbol(struct Module *mp, unsigned long, char *);
+static int AddModule(unsigned long, char *);
+static int symsort(const void *, const void *);
+
+
+/**************************************************************************
+ * Function:	InitMsyms
+ *
+ * Purpose:	This function is responsible for building a symbol
+ *		table which can be used to resolve addresses for
+ *		loadable modules.
+ *
+ * Arguements:	Void
+ *
+ * Return:	A boolean return value is assumed.
+ *
+ *		A false value indicates that something went wrong.
+ *
+ *		True if loading is successful.
+ **************************************************************************/
+
+extern int InitMsyms()
+
+{
+	auto int	rtn,
+			tmp;
+
+	auto struct kernel_sym	*ksym_table,
+				*p;
+
+
+	/* Init the symbol table if one exists. */
+	if ( num_modules > 0 )
+		FreeModules();
+
+
+	/*
+	 * The system call which returns the kernel symbol table has
+	 * essentialy two modes of operation.  Called with a null pointer
+	 * the system call returns the number of symbols defined in the
+	 * the table.
+	 *
+	 * The second mode of operation is to pass a valid pointer to
+	 * the call which will then load the current symbol table into
+	 * the memory provided.
+	 *
+	 * Returning the symbol table is essentially an all or nothing
+	 * proposition so we need to pre-allocate enough memory for the
+	 * complete table regardless of how many symbols we need.
+	 *
+	 * Bummer.
+	 */
+	rtn = getsyms((struct kernel_sym *) 0);
+	if ( debugging )
+		fprintf(stderr, "Loading kernel module symbols - "
+			"Size of table: %d\n", rtn);
+
+	ksym_table = (struct kernel_sym *) malloc(rtn * \
+						  sizeof(struct kernel_sym));
+	if ( ksym_table == (struct kernel_sym *) 0 )
+	{
+		Syslog(LOG_WARNING, " Failed memory allocation for kernel "
+		       "symbol table.\n");
+		return(0);
+	}
+	if ( (rtn = getsyms(ksym_table)) == 0 )
+		Syslog(LOG_WARNING, "Kernel symbol read returned 0\n");
+
+
+	/*
+	 * Build a symbol table compatible with the other one used by
+	 * klogd.
+	 */
+	tmp = rtn;
+	p = ksym_table;
+	while ( tmp-- )
+	{
+ 		if ( !AddModule(p->value, p->name) )
+		{
+			Syslog(LOG_WARNING, "Error adding kernel module table "
+				"entry.\n");
+			free(ksym_table);
+			return(0);
+		}
+		++p;
+	}
+
+	/* Sort the symbol tables in each module. */
+	for (tmp= 0; tmp < num_modules; ++tmp)
+	{
+		if ( sym_array_modules[tmp].num_syms < 2 )
+			continue;
+		qsort(sym_array_modules[tmp].sym_array, \
+		      sym_array_modules[tmp].num_syms, \
+		      sizeof(struct sym_table), symsort);
+	}
+
+	free(ksym_table);
+	return(1);
+}
+
+
+static int symsort(p1, p2)
+
+     const void *p1;
+
+     const void *p2;
+
+{
+	auto const struct sym_table	*sym1 = p1,
+					*sym2 = p2;
+
+	if ( sym1->value < sym2->value )
+		return(-1);
+	if ( sym1->value == sym2->value )
+		return(0);
+	return(1);
+}
+
+
+/**************************************************************************
+ * Function:	FreeModules
+ *
+ * Purpose:	This function is used to free all memory which has been
+ *		allocated for the modules and their symbols.
+ *
+ * Arguements:	None specified.
+ *
+ * Return:	void
+ **************************************************************************/
+
+static void FreeModules()
+
+{
+	auto int	nmods,
+			nsyms;
+
+	auto struct Module *mp;
+
+
+	for (nmods= 0; nmods <num_modules; ++nmods)
+	{
+		mp = &sym_array_modules[nmods];
+		if ( mp->num_syms == 0 )
+			continue;
+	       
+		for (nsyms= 0; nsyms < mp->num_syms; ++nsyms)
+			free(mp->sym_array[nsyms].name);
+		free(mp->sym_array);
+	}
+
+	free(sym_array_modules);
+	sym_array_modules = (struct Module *) 0;
+	have_modules = num_modules = 0;
+	return;
+}
+
+
+/**************************************************************************
+ * Function:	AddModule
+ *
+ * Purpose:	This function is responsible for adding a module to
+ *		the list of currently loaded modules.
+ *
+ * Arguements:	(unsigned long) address, (char *) symbol
+ *
+ *		address:->	The address of the module.
+ *
+ *		symbol:->	The name of the module.
+ *
+ * Return:	int
+ **************************************************************************/
+
+static int AddModule(address, symbol)
+
+     unsigned long address;
+
+     char *symbol;
+
+{
+	auto int memfd;
+
+	auto struct Module *mp;
+
+
+	/* Return if we have loaded the modules. */
+	if ( have_modules )
+		return(1);
+
+	/*
+	 * The following section of code is responsible for determining
+	 * whether or not we are done reading the list of modules.
+	 */
+	if ( symbol[0] == '#' )
+	{
+		if ( symbol[1] == '\0' )
+		{
+			/*
+			 * A symbol which consists of a # sign only
+			 * signifies a a resident kernel segment.  When we
+			 * hit one of these we are done reading the
+			 * module list.
+			 */
+			have_modules = 1;
+			return(1);
+		}
+
+		/* Allocate space for the module. */
+		sym_array_modules = (struct Module *) \
+			realloc(sym_array_modules, \
+				(num_modules+1) * sizeof(struct Module));
+		if ( sym_array_modules == (struct Module *) 0 )
+		{
+			Syslog(LOG_WARNING, "Cannot allocate Module array.\n");
+			return(0);
+		}
+		mp = &sym_array_modules[num_modules];
+
+		if ( (memfd = open("/dev/kmem", O_RDONLY)) < 0 )
+		{
+			Syslog(LOG_WARNING, "Error opening /dev/kmem\n");
+			return(1);
+		}
+		if ( lseek(memfd, address, SEEK_SET) < 0 )
+		{
+			Syslog(LOG_WARNING, "Error seeking in /dev/kmem\n");
+			return(0);
+		}
+		if ( read(memfd, \
+			  (char *)&sym_array_modules[num_modules].module,  \
+			  sizeof(struct module)) < 0 )
+		{
+			Syslog(LOG_WARNING, "Error reading module "
+			       "descriptor.\n");
+			return(0);
+		}
+		close(memfd);
+
+		/* Save the module name. */
+		mp->name = (char *) malloc(strlen(&symbol[1]) + 1);
+		if ( mp->name == (char *) 0 )
+			return(0);
+		strcpy(mp->name, &symbol[1]);
+
+		mp->num_syms = 0;
+		mp->sym_array = (struct sym_table *) 0;
+		++num_modules;
+		return(1);
+	}
+	else
+	{
+		mp = &sym_array_modules[num_modules - 1];
+		AddSymbol(mp, address, symbol);
+	}
+
+
+	return(1);
+}
+
+
+/**************************************************************************
+ * Function:	AddSymbol
+ *
+ * Purpose:	This function is responsible for adding a symbol name
+ *		and its address to the symbol table.
+ *
+ * Arguements:	(struct Module *) mp, (unsigned long) address, (char *) symbol
+ *
+ *		mp:->	A pointer to the module which the symbol is
+ *			to be added to.
+ *
+ *		address:->	The address of the symbol.
+ *
+ *		symbol:->	The name of the symbol.
+ *
+ * Return:	int
+ *
+ *		A boolean value is assumed.  True if the addition is
+ *		successful.  False if not.
+ **************************************************************************/
+
+static int AddSymbol(mp, address, symbol)
+
+	struct Module *mp;     
+
+	unsigned long address;
+	
+	char *symbol;
+	
+{
+	auto int tmp;
+
+
+	/* Allocate space for the symbol table entry. */
+	mp->sym_array = (struct sym_table *) realloc(mp->sym_array, \
+        	(mp->num_syms+1) * sizeof(struct sym_table));
+	if ( mp->sym_array == (struct sym_table *) 0 )
+		return(0);
+
+	/* Then the space for the symbol. */
+	tmp = strlen(symbol);
+	tmp += (strlen(mp->name) + 1);
+	mp->sym_array[mp->num_syms].name = (char *) malloc(tmp + 1);
+	if ( mp->sym_array[mp->num_syms].name == (char *) 0 )
+		return(0);
+	memset(mp->sym_array[mp->num_syms].name, '\0', tmp + 1);
+	
+	/* Stuff interesting information into the module. */
+	mp->sym_array[mp->num_syms].value = address;
+	strcpy(mp->sym_array[mp->num_syms].name, mp->name);
+	strcat(mp->sym_array[mp->num_syms].name, ":");
+	strcat(mp->sym_array[mp->num_syms].name, symbol);
+	++mp->num_syms;
+
+	return(1);
+}
+
+
+/**************************************************************************
+ * Function:	LookupModuleSymbol
+ *
+ * Purpose:	Find the symbol which is related to the given address from
+ *		a kernel module.
+ *
+ * Arguements:	(long int) value, (struct symbol *) sym
+ *
+ *		value:->	The address to be located.
+ * 
+ *		sym:->		A pointer to a structure which will be
+ *				loaded with the symbol's parameters.
+ *
+ * Return:	(char *)
+ *
+ *		If a match cannot be found a diagnostic string is printed.
+ *		If a match is found the pointer to the symbolic name most
+ *		closely matching the address is returned.
+ **************************************************************************/
+
+extern char * LookupModuleSymbol(value, sym)
+
+	unsigned long value;
+
+	struct symbol *sym;
+	
+{
+	auto int	nmod,
+			nsym;
+
+	auto struct sym_table *last;
+
+	auto struct Module *mp;
+
+
+	sym->size = 0;
+	sym->offset = 0;
+	if ( num_modules == 0 )
+		return((char *) 0);
+	
+	for(nmod= 0; nmod < num_modules; ++nmod)
+	{
+		mp = &sym_array_modules[nmod];
+
+		/*
+		 * Run through the list of symbols in this module and
+		 * see if the address can be resolved.
+		 */
+		for(nsym= 1, last = &mp->sym_array[0];
+		    nsym < mp->num_syms;
+		    ++nsym)
+		{
+			if ( mp->sym_array[nsym].value > value )
+			{		
+				sym->offset = value - last->value;
+				sym->size = mp->sym_array[nsym].value - \
+					last->value;
+				return(last->name);
+			}
+			last = &mp->sym_array[nsym];
+		}
+
+
+		/*
+		 * At this stage of the game we still cannot give up the
+		 * ghost.  There is the possibility that the address is
+		 * from a module which has no symbols registered with
+		 * the kernel.  The solution is to compare the address
+		 * against the starting address and extant of the module
+		 * If it is in this range we can at least return the
+		 * name of the module.
+		 */
+		if ( (void *) value >= mp->module.addr &&
+		     (void *) value <= (mp->module.addr + \
+					mp->module.size * 4096) )
+		{
+			/*
+			 * A special case needs to be checked for.  The above
+			 * conditional tells us that we are within the
+			 * extant of this module but symbol lookup has
+			 * failed.
+			 *
+			 * We need to check to see if any symbols have
+			 * been defined in this module.  If there have been
+			 * symbols defined the assumption must be made that
+			 * the faulting address lies somewhere beyond the
+			 * last symbol.  About the only thing we can do
+			 * at this point is use an offset from this
+			 * symbol.
+			 */
+			if ( mp->num_syms > 0 )
+			{
+				last = &mp->sym_array[mp->num_syms - 1];
+				sym->size = (int) mp->module.addr + \
+					(mp->module.size * 4096) - value;
+				sym->offset = value - last->value;
+				return(last->name);
+			}
+
+			/*
+			 * There were no symbols defined for this module.
+			 * Return the module name and the offset of the
+			 * faulting address in the module.
+			 */
+			sym->size = mp->module.size * 4096;
+			sym->offset = (void *) value - mp->module.addr;
+			return(mp->name);
+		}
+	}
+
+	/* It has been a hopeless exercise. */
+	return((char *) 0);
+}
+
+
+/*
+ * Setting the -DTEST define enables the following code fragment to
+ * be compiled.  This produces a small standalone program which will
+ * dump the current kernel symbol table.
+ */
+#if defined(TEST)
+
+#include <stdarg.h>
+
+
+extern int main(int, char **);
+
+
+int main(argc, argv)
+
+	int argc;
+
+	char *argv[];
+
+{
+	auto int lp, syms;
+
+
+	if ( !InitMsyms() )
+	{
+		fprintf(stderr, "Cannot load module symbols.\n");
+		return(1);
+	}
+
+	printf("Number of modules: %d\n\n", num_modules);
+
+	for(lp= 0; lp < num_modules; ++lp)
+	{
+		printf("Module #%d = %s, Number of symbols = %d\n", lp + 1, \
+		       sym_array_modules[lp].name, \
+		       sym_array_modules[lp].num_syms);
+
+		for (syms= 0; syms < sym_array_modules[lp].num_syms; ++syms)
+		{
+			printf("\tSymbol #%d\n", syms + 1);
+			printf("\tName: %s\n", \
+			       sym_array_modules[lp].sym_array[syms].name);
+			printf("\tAddress: %lx\n\n", \
+			       sym_array_modules[lp].sym_array[syms].value);
+		}
+	}
+
+	FreeModules();
+	return(0);
+}
+#endif
diff -u --new-file --recursive v1.3-1/sysklogd-1.3/ksyms.h sysklogd-1.3/ksyms.h
--- v1.3-1/sysklogd-1.3/ksyms.h	Wed Dec 31 18:00:00 1969
+++ sysklogd-1.3/ksyms.h	Sun Mar 31 16:44:26 1996
@@ -0,0 +1,36 @@
+/*
+    ksym.h - Definitions for symbol table utilities.
+    Copyright (c) 1995, 1996  Dr. G.W. Wettstein <greg@wind.rmcc.com>
+    Copyright (c) 1996 Enjellic Systems Development
+
+    This file is part of the sysklogd package, a kernel and system log daemon.
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program; if not, write to the Free Software
+    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+*/
+
+
+
+/* Variables, structures and type definitions static to this module. */
+
+struct symbol
+{
+	char *name;
+	int size;
+	int offset;
+};
+
+
+/* Function prototypes. */
+extern char * LookupModuleSymbol(unsigned long int, struct symbol *);
diff -u --new-file --recursive v1.3-1/sysklogd-1.3/oops.c sysklogd-1.3/oops.c
--- v1.3-1/sysklogd-1.3/oops.c	Wed Dec 31 18:00:00 1969
+++ sysklogd-1.3/oops.c	Thu May  2 15:25:49 1996
@@ -0,0 +1,118 @@
+/*
+ * Loadable driver which provides the ability to generate a kernel
+ * protection fault.  Mainly useful for testing the address translation
+ * capabilities of klogd.
+ *
+ * Fri Oct 27 14:34:27 CDT 1995:  Dr. Wettstein
+ *
+ *	Initial version.
+ */
+
+#define NEW_MODULES
+
+/* Kernel includes. */
+#include <linux/kernel.h>
+#include <linux/config.h>
+#include <linux/errno.h>
+#include <linux/fs.h>
+
+/* Standard module stuff. */
+#if defined(NEW_MODULES)
+#include <linux/module.h>
+#else
+#include <linux/module.h>
+#include <linux/version.h>
+char kernel_version[] = UTS_RELEASE;
+#endif
+
+
+static int major = 32;
+
+
+#ifdef MODULE
+static int oops_ioctl(struct inode *, struct file *, unsigned int cmd, unsigned long arg);
+static int oops_open(struct inode * node, struct file * file);
+static void oops(void);
+
+static struct symbol_table these_symbols = {
+#include <linux/symtab_begin.h>
+	X(oops_open),
+	X(oops_ioctl),
+	X(oops),
+#include <linux/symtab_end.h>
+};
+
+/* driver specific module definitions */
+static struct file_operations oops_fops1 = {
+	NULL,		/* hw_lseek */
+	NULL,		/* hw_read */
+	NULL,		/* write */
+	NULL,		/* hw_readdir */
+	NULL,		/* hw_select */
+	oops_ioctl,	/* hw_ioctl */
+	NULL,		/* mmap */
+	oops_open,	/* hw_open */
+	NULL,		/* hw_release */
+	NULL		/* fsync */
+};
+
+static int oops_open(struct inode * node, struct file * file)
+{
+	printk("Called oops_open.\n");
+	return(0);
+}
+
+
+static int oops_ioctl(struct inode * node, struct file * file, \
+		      unsigned int cmd, unsigned long arg)
+{
+	
+	printk("Called oops_ioctl.\n");
+	printk("Cmd: %d, Arg: %ld\n", cmd, arg);
+	if ( cmd == 1 )
+	{
+		oops();
+	}
+		
+	return(0);
+}
+
+static void oops()
+
+{
+	auto unsigned long *p = (unsigned long *) 828282828;
+	*p = 5;
+	return;
+}
+
+	
+int
+init_module(void)
+{
+	printk("oops: Module initilization.\n");
+	if (register_chrdev(major, "oops", &oops_fops1)) {
+		printk("register_chrdev failed.");
+		return -EIO;
+	}
+
+	printk("oops: Registering symbols.\n");
+  	register_symtab(&these_symbols);
+	
+	return 0;
+}
+
+
+void
+cleanup_module(void)
+{
+	/* driver specific cleanups, ususally "unregister_*()" */
+	printk("oops: Module unloadeding.\n");
+	if (unregister_chrdev(major, "oops") != 0)
+		printk("cleanup_module failed\n");
+	else
+		printk("cleanup_module succeeded\n");
+
+	return;
+
+}
+#endif /* MODULE */
diff -u --new-file --recursive v1.3-1/sysklogd-1.3/oops_test.c sysklogd-1.3/oops_test.c
--- v1.3-1/sysklogd-1.3/oops_test.c	Wed Dec 31 18:00:00 1969
+++ sysklogd-1.3/oops_test.c	Fri Apr 26 13:07:32 1996
@@ -0,0 +1,52 @@
+/*
+ * This is a small test program for generating a kernel protection fault
+ * using the oops loadable module.
+ *
+ * Fri Apr 26 12:52:43 CDT 1996:  Dr. Wettstein
+ *	Initial version.
+ */
+
+
+/* Includes. */
+#include <stdio.h>
+#include <unistd.h>
+#include <fcntl.h>
+#include <sys/ioctl.h>
+
+
+/* Function prototypes. */
+extern int main(int, char **);
+
+
+extern int main(argc, argv)
+
+     int argc;
+
+     char *argv[];
+
+{
+	auto int fd;
+
+	if ( argc != 2 )
+	{
+		fprintf(stderr, "No oops device specified.\n");
+		return(1);
+	}
+
+	if ( (fd = open(argv[1], O_RDONLY)) < 0 )
+	{
+		fprintf(stderr, "Cannot open device: %s.\n", argv[1]);
+		return(1);
+	}
+
+	if ( ioctl(fd, 1, 0) < 0 )
+	{
+		fprintf(stderr, "Failed on oops.\n");
+		return(1);
+	}
+
+	printf("OOoops\n");
+
+	close(fd);
+	return(0);
+}
diff -u --new-file --recursive v1.3-1/sysklogd-1.3/syslogd.c sysklogd-1.3/syslogd.c
--- v1.3-1/sysklogd-1.3/syslogd.c	Sun Mar 31 11:19:05 1996
+++ sysklogd-1.3/syslogd.c	Thu May  2 15:18:09 1996
@@ -269,6 +269,14 @@
  *	when syslogd starts up.
  *
  *	Minor code cleanups.
+ *
+ * Thu May  2 15:15:33 CDT 1996:  Dr. Wettstein
+ *	Fixed bug in init function which resulted in file descripters
+ *	being orphaned when syslogd process was re-initialized with SIGHUP
+ *	signal.  Thanks to Edvard Tuinder
+ *	(Edvard.Tuinder@praseodymium.cistron.nl) for putting me on the
+ *	trail of this bug.  I am amazed that we didn't catch this one
+ *	before now.
  */
 
 
@@ -1846,47 +1854,37 @@
 	register char *p;
 	char cline[BUFSIZ];
 
-	dprintf("Called init.\n");
 
 	/*
-	 *  Close all open log files.
+	 *  Close all open log files and free log descriptor array.
 	 */
+	dprintf("Called init.\n");
 	Initialized = 0;
 	if ( nlogs > -1 )
 	{
 		dprintf("Initializing log structures.\n");
+
+		for (lognum = 0; lognum <= nlogs; lognum++ ) {
+			f = &Files[lognum];
+
+			/* flush any pending output */
+			if (f->f_prevcount)
+				fprintlog(f, LocalHostName, 0, (char *)NULL);
+
+			switch (f->f_type) {
+				case F_FILE:
+				case F_TTY:
+				case F_CONSOLE:
+					(void) close(f->f_file);
+				break;
+			}
+		}
+
 		nlogs = -1;
 		free((void *) Files);
 		Files = (struct filed *) 0;
 	}
 	
-#ifdef SYSV
-	for (lognum = 0; lognum <= nlogs; lognum++ ) {
-		f = &Files[lognum];
-#else
-	for (f = Files; f != NULL; f = next) {
-#endif
-		/* flush any pending output */
-		if (f->f_prevcount)
-			fprintlog(f, LocalHostName, 0, (char *)NULL);
-
-		switch (f->f_type) {
-		  case F_FILE:
-		  case F_TTY:
-		  case F_CONSOLE:
-			(void) close(f->f_file);
-			break;
-		}
-#ifdef SYSV
-		f->f_type = F_UNUSED;	/* clear entry - ASP */
-	}
-#else
-		next = f->f_next;
-		free((char *) f);
-	}
-	Files = NULL;
-	nextp = &OBFiles;
-#endif
 
 	/* open the configuration file */
 	if ((cf = fopen(ConfFile, "r")) == NULL) {
diff -u --new-file --recursive v1.3-1/sysklogd-1.3/version.h sysklogd-1.3/version.h
--- v1.3-1/sysklogd-1.3/version.h	Sun Mar 31 11:19:05 1996
+++ sysklogd-1.3/version.h	Wed Apr 17 15:15:58 1996
@@ -1,2 +1,2 @@
 #define VERSION "1.3"
-#define PATCHLEVEL "1"
+#define PATCHLEVEL "2"
