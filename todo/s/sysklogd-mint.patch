--- sysklogd-1.3/syslogd.c.mint	Mon Apr  3 13:29:40 2000
+++ sysklogd-1.3/syslogd.c	Mon Apr  3 13:32:44 2000
@@ -277,6 +277,10 @@
  *	(Edvard.Tuinder@praseodymium.cistron.nl) for putting me on the
  *	trail of this bug.  I am amazed that we didn't catch this one
  *	before now.
+ *
+ * Tue Dec  7 23:59:00 CET 1999: Guido Flohr
+ *	Rehacked to work with MiNT.  The UNIX AF socket is replaced
+ *      with a pipe (and the soft link /dev/log will point to it).
  */
 
 
@@ -331,6 +335,19 @@
 #include <paths.h>
 #endif
 
+#if defined (__MINT__)
+# include <mintbind.h>
+
+/* The routine where we need this is time-critical.  We therefore
+   initialize the structure.  */
+struct flock mint_wrlock = {
+	F_WRLCK, 0, 0, 0, 0
+};
+struct flock mint_unlock = {
+	F_UNLCK, 0, 0, 0, 0
+};
+#endif
+
 #ifndef UTMP_FILE
 #ifdef UTMP_FILENAME
 #define UTMP_FILE UTMP_FILENAME
@@ -555,11 +572,13 @@
 int	NoHops = 1;		/* Can we bounce syslog messages through an
 				   intermediate host. */
 
+#ifndef __MINT__
 extern	int errno, sys_nerr;
 #if __GNU_LIBRARY__ - 0 < 6
 extern	char *sys_errlist[];
 extern	char *index();
 #endif
+#endif
 
 /* Function prototypes. */
 int main(int argc, char **argv);
@@ -784,6 +803,42 @@
 	}
 #endif
 
+#ifdef __MINT__
+	/* For MiNT we need a different strategy.  We really write into 
+	   /pipe/log and /dev/log is only a symlink to that location.  */
+	{
+		mint_wrlock.l_pid = mint_unlock.l_pid = getpid ();
+		
+		(void) unlink (LogName);
+		if (symlink ("/pipe/log", LogName) != 0) {
+			(void) sprintf (line, "cannot symlink %s to %s",
+			                "/pipe/log", LogName);
+			logerror (line);
+			Dprintf ("cannot symlink %s to %s (%d).\n", 
+			         "/pipe/log", LogName, errno);
+		}
+		funix = open ("/pipe/log", O_RDWR | O_CREAT | O_TRUNC, 0666);
+		if (funix < 0) {
+			(void) sprintf (line, "cannot create %s (%d)", 
+					"/pipe/log", errno);
+			logerror (line);
+			Dprintf ("cannot create %s (%d).\n", "/pipe/log", errno);
+#ifndef SYSV
+			die(0);
+#endif
+		}
+		if (chmod ("/pipe/log", 0666) != 0) {
+			(void) sprintf (line, "cannot chmod %s (%d)", 
+					"/pipe/log", errno);
+			logerror (line);
+			Dprintf ("cannot chmod %s (%d).\n", "/pipe/log", errno);
+#ifndef SYSV
+			die(0);
+#endif
+		}
+	}
+#endif
+
 #ifdef SYSLOG_INET
 	finet = socket(AF_INET, SOCK_DGRAM, 0);
 	if (finet >= 0) {
@@ -851,7 +906,7 @@
 	for (;;) {
 		int nfds;
 		errno = 0;
-#ifdef SYSLOG_UNIXAF
+#if defined (SYSLOG_UNIXAF) || defined (__MINT__)
 		/*
 		 * Add the Unix Domain Socket to the list of read
 		 * descriptors.
@@ -958,7 +1013,6 @@
 					"%d = %s.\n", errno, strerror(errno));
 			}
 		}
-
 #endif
 
 #ifdef SYSLOG_INET
@@ -991,6 +1045,69 @@
 			}
 		}
 #endif
+#ifdef __MINT__
+		if (FD_ISSET (funix, &readfds)) {
+			int len;
+			int i;
+			
+			ioctl (funix, FIONREAD, &len);
+			
+			/* Try to lock the file for writing so that very
+			 * fast writes will block the writing process
+			 * until we're ready.  */
+			(void) Fcntl (funix, &mint_wrlock, F_SETLK);
+			Dprintf ("Message (%d bytes) on syslog pipe.\n", len);
+			
+			if (len > MAXLINE)
+				len = MAXLINE;
+
+			memset (line, '\0', MAXLINE);
+			i = read (funix, line, len); 
+			Dprintf ("read %d bytes from syslog pipe: %s\n", i, line);
+			
+			if (i > 0) {
+				char* lf;
+				char* l = line;
+				
+				/* Split up messages.  */
+				while ((lf = strchr (l, '\n')) != NULL) {
+					int linelen = (int) (lf - l);
+					
+					*lf = '\0';
+
+					if(*l != '\n')
+						printline (LocalHostName, l);
+					l += linelen;
+					len -= linelen;
+					l = lf + 1;
+					if (len <= 0)
+						break;
+				}
+				if (len > 0 && *l != '\0')
+					printline (LocalHostName, l); 
+		  	} else if (i < 0) {
+		    		if (errno != EINTR) {
+		      			logerror ("read syslog pipe");
+				}
+		        } else {
+		    		Dprintf("syslog pipe (%d) closed.\n", funix);
+				if ( parts[funix] != (char *) 0 )
+				{
+					logerror("Printing partial message");
+					line[0] = '\0';
+					printchopped(LocalHostName, line, \
+						     strlen(parts[funix]) + 1, \
+						     funix);
+				}
+		    		close(funix);
+		    		FD_CLR(funix, &unixm);
+		    		FD_CLR(funix, &readfds);
+		  	}
+			/* Unlock the file for writing.  */
+			(void) Fcntl (funix, &mint_unlock, F_SETLK);
+		}
+#endif
+
 	}
 }
 
@@ -2351,3 +2468,4 @@
 	signal(SIGHUP, sighup_handler);
 	return;
 }
+
