diff -u -r Sharity-Light-1.2-orig/Makefile Sharity-Light-1.2/Makefile
--- Sharity-Light-1.2-orig/Makefile	Tue Nov 24 14:52:12 1998
+++ Sharity-Light-1.2/Makefile	Wed Feb 27 08:47:28 2002
@@ -12,11 +12,12 @@
 ##############################################################################
 
 # For NEXTSTEP/OPENSTEP:
-CFLAGS = -Wall -O2 -traditional-cpp -g
+CFLAGS = -Wall -O2 -g
 # put your architecture here:
-ARCH = -arch i386
+#ARCH = -arch i386
 THE_CC = cc
 RPC_WARNFLAGS = -Wno-unused -Wno-switch -Wno-uninitialized
+LIBS = -lsocket
 
 # For Linux: (use static linking because of libc5/libc6 troubles)
 #CFLAGS = -Wall -O2 -g
@@ -74,7 +75,7 @@
 	(cd nfs; $(MAKE) "CFLAGS=$(CFLAGS)" "CC=$(THE_CC)" "ARCH=$(ARCH)" "RPC_WARNFLAGS=$(RPC_WARNFLAGS)")
 
 $(NAME): $(OFILES) nfs_dir
-	$(CC) $(LDFLAGS) $(ARCH) -o $(NAME) $(OFILES) nfs/nfs.o $(LIBS)
+	$(CC) $(LDFLAGS) $(ARCH) -o $(NAME) $(OFILES) nfs/*.o $(LIBS)
 
 clean:
 	rm -f $(OFILES)
diff -u -r Sharity-Light-1.2-orig/nfs/Makefile Sharity-Light-1.2/nfs/Makefile
--- Sharity-Light-1.2-orig/nfs/Makefile	Wed Dec 31 01:29:08 1997
+++ Sharity-Light-1.2/nfs/Makefile	Wed Feb 27 08:47:28 2002
@@ -14,15 +14,12 @@
 XDRFILES	= nfs_prot.x
 OFILES		= nfs_prot_xdr.o mount.o nfs_funcs.o syscalls.o
 
-all: nfs.o
+all: $(OFILES)
 
 COMPILE = $(CC) $(ARCH) -c $(INCLUDES) $(CFLAGS)
 
 .c.o:
 	$(COMPILE) $<
-
-nfs.o: $(OFILES)
-	$(LD) $(ARCH) -r -o $@ $(OFILES)
 
 # the purpose of the sed "s/char data/long long data/" hack is to ensure
 # proper alignment. [Marc Boucher <marc@CAM.ORG>]
diff -u -r Sharity-Light-1.2-orig/unshlight.sh Sharity-Light-1.2/unshlight.sh
--- Sharity-Light-1.2-orig/unshlight.sh	Tue Jun 30 14:24:46 1998
+++ Sharity-Light-1.2/unshlight.sh	Wed Feb 27 08:47:28 2002
@@ -38,11 +38,7 @@
 		echo "$dir not found in $MTAB_FILE" 2>&1
 		retval=1
 	else
-		if $UMOUNT $1; then		# if there was an error in the unmount
-			$KILL -HUP $pid
-		else
-			retval=1
-		fi
+		$KILL -HUP $pid
 	fi
 }
 
--- Sharity-Light-1.2/rumba.c.orig	Wed Feb 27 09:07:22 2002
+++ Sharity-Light-1.2/rumba.c	Wed Feb 27 09:24:20 2002
@@ -48,6 +48,7 @@
 		syslog(level, "%s", buffer);
 	}else{
 		vfprintf(stderr, format, vlist);
+		fputc('\n', stderr);
 	}
 }
 
--- Sharity-Light-1.2/nfs/nfs_funcs.c.mint	Mon Nov 16 18:04:06 1998
+++ Sharity-Light-1.2/nfs/nfs_funcs.c	Wed Feb 27 09:26:04 2002
@@ -135,7 +135,6 @@
 		return NFSERR_NOENT;
 	case ENXIO:
 		return NFSERR_NXIO;
-	case ETXTBSY:
 	case EWOULDBLOCK:
 	case EACCES:
 		return NFSERR_ACCES;
--- Sharity-Light-1.2/nfs/syscalls.c.mint	Tue Jun 30 14:24:56 1998
+++ Sharity-Light-1.2/nfs/syscalls.c	Wed Feb 27 12:10:10 2002
@@ -537,3 +537,511 @@
 }
 #endif /* defined BSD4_4 */
 /* ------------------------------------------------------------------------- */
+#if defined __MINT__
+
+# include <ctype.h>
+# include <support.h>
+# include <sys/file.h>
+
+
+# define MOUNTED	"/etc/mtab"
+# define LOCKED		"\\etc\\mtab~"
+
+struct mntent
+{
+	char *mnt_fsname;	/* name of mounted file system */
+	char *mnt_dir;		/* file system path prefix */
+	char *mnt_type;		/* MNTTYPE_* */
+	char *mnt_opts;		/* MNTOPT_* */
+	int  mnt_freq;		/* dump frequenciy in days */
+	int  mnt_passno;	/* pass number on parallel fsck */
+};
+
+# define MAX_LINE_LEN 80
+static struct mntent the_mntent;
+static char the_mntbuf[MAX_LINE_LEN+2];
+
+static FILE *
+setmntent (char *name, char *type)
+{
+	FILE *fp;
+	int i;
+	
+	/* open the file */
+	fp = fopen (name, type);
+	if (!fp)
+		return NULL;
+	
+	/* set up some static buffers etc. */
+	the_mntent.mnt_fsname = NULL;
+	the_mntent.mnt_dir = NULL;
+	the_mntent.mnt_type = NULL;
+	the_mntent.mnt_opts = NULL;
+	the_mntent.mnt_freq = 0;
+	the_mntent.mnt_passno = 0;
+	
+	for (i = 0;  i < MAX_LINE_LEN+2;  i++)
+		the_mntbuf[i] = '\0';
+	
+	return fp;
+}
+
+static int
+endmntent (FILE *fp)
+{
+	fclose (fp);
+	return 1;   /* for compatibility */
+}
+
+static struct mntent *
+getmntent (FILE *fp)
+{
+	char *p;
+	
+read_again:
+	p = fgets (the_mntbuf, MAX_LINE_LEN, fp);
+	if (p == NULL)
+		return NULL;
+	
+	/* strip off tailing line separator */
+	p = the_mntbuf;
+	while (*p && (*p != '\r') && (*p != '\n'))
+		p++;
+	*p = '\0';
+	
+	/* check for comments */
+	if (the_mntbuf[0] == '#')   /* if that line is a comment, do it again */
+	{
+		goto read_again;
+	}
+	
+	/* now scan the line and set the mntent struct accordingly */
+	p = the_mntbuf;
+	while (*p && isspace(*p))   /* skip leading white spaces */
+		p++;
+	the_mntent.mnt_fsname = p;
+	while (*p && !isspace(*p))
+		p++;
+	if (*p)
+		*p++ = '\0';
+	
+	while (*p && isspace(*p))
+		p++;
+	the_mntent.mnt_dir = p;
+	while (*p && !isspace(*p))
+		p++;
+	if (*p)
+		*p++ = '\0';
+	
+	while (*p && isspace(*p))
+		p++;
+	the_mntent.mnt_type = p;
+	while (*p && !isspace(*p))
+		p++;
+	if (*p)
+		*p++ = '\0';
+	
+	while (*p && isspace(*p))
+		p++;
+	the_mntent.mnt_opts = p;
+	while (*p && !isspace(*p))
+		p++;
+	if (*p)
+		*p++ = '\0';
+	
+	while (*p && isspace(*p))
+		p++;
+	the_mntent.mnt_freq = (int)strtol(p, &p, 10);
+	if (*p)
+		p++;
+	
+	while (*p && isspace(*p))
+		p++;
+	the_mntent.mnt_passno = (int)strtol(p, &p, 10);
+	
+	return &the_mntent;
+}
+
+static int
+addmntent(FILE *fp, struct mntent *mnt)
+{
+	char line[MAX_LINE_LEN+3], numbuf[8];
+	char *p, *s;
+	long n, r;
+	
+	/* wait for a lock on that file */
+	do {
+		r = flock (fileno (fp), LOCK_EX|LOCK_NB);
+	}
+	while ((r < 0) && (errno == ELOCKED));
+	
+	if (r != 0)
+		return 1;
+	
+	fseek (fp, 0, SEEK_END);   /* go to end of file */
+	n = 0;
+	p = line;
+	if (mnt->mnt_fsname)
+	{
+		for (s = mnt->mnt_fsname; (n < MAX_LINE_LEN-1) && *s;  n++)
+			*p++ = *s++;
+		*p++ = ' ';
+		n++;
+	}
+	
+	if (mnt->mnt_dir)
+	{
+		for (s = mnt->mnt_dir; (n < MAX_LINE_LEN-1) && *s;  n++)
+			*p++ = *s++;
+		*p++ = ' ';
+		n++;
+	}
+	
+	if (mnt->mnt_type)
+	{
+		for (s = mnt->mnt_type; (n < MAX_LINE_LEN-1) && *s;  n++)
+			*p++ = *s++;
+		*p++ = ' ';
+		n++;
+	}
+	
+	if (mnt->mnt_opts)
+	{
+		for (s = mnt->mnt_opts; (n < MAX_LINE_LEN-1) && *s;  n++)
+			*p++ = *s++;
+		*p++ = ' ';
+		n++;
+	}
+	
+	s = _ltoa (mnt->mnt_freq, numbuf, 10);
+	for ( ; (n < MAX_LINE_LEN-1) && *s;  n++)
+		*p++ = *s++;
+	*p++ = ' ';
+	n++;
+	
+	s = _ltoa (mnt->mnt_passno, numbuf, 10);
+	for ( ; (n < MAX_LINE_LEN-1) && *s;  n++)
+		*p++ = *s++;
+	*p++ = '\r';
+	*p++ = '\n';
+	*p = '\0';
+	
+	r = fwrite (line, 1, n+2, fp);
+	
+	flock (fileno (fp), LOCK_UN);   /* unlock file */
+	
+	if (r == n+2)
+		return 0;
+	else
+		return 1;
+}
+
+
+#define UPDATE_MOUNT   0
+#define UPDATE_UNMOUNT 1
+
+static long
+update_mtab (int mode, char *filesys, char *dir, char *type, char *opt, int freq, int pass)
+{
+	FILE *fp;
+	
+	if (mode == UPDATE_MOUNT)
+	{
+		struct mntent mnt;
+		
+		fp = setmntent(MOUNTED, "a+");
+		if (!fp)
+		{
+			debprintf("could not update " MOUNTED);
+			return -1;
+		}
+		
+		mnt.mnt_fsname = filesys;
+		mnt.mnt_dir = dir;
+		mnt.mnt_type = type;
+		mnt.mnt_opts = opt;
+		mnt.mnt_freq = freq;
+		mnt.mnt_passno = pass;
+		
+		addmntent(fp, &mnt);
+		endmntent(fp);
+		
+		return 0;
+	}
+	else if (mode == UPDATE_UNMOUNT)
+	{
+		FILE *fl;
+		struct mntent *mnt;
+		
+		fp = setmntent(MOUNTED, "r");
+		if (!fp)
+		{
+			debprintf("could not update mount table " MOUNTED);
+			return -1;
+		}
+		
+		fl = setmntent(LOCKED, "a+");
+		if (!fl)
+		{
+			debprintf("could not update mount table " LOCKED);
+			return -1;
+		}
+		
+		while ((mnt = getmntent(fp)) != NULL)
+		{
+			if ( (strcmp(mnt->mnt_dir, dir) != 0) &&
+			     (strcmp(mnt->mnt_fsname, dir) != 0) )
+				addmntent(fl, mnt);
+		}
+		
+		endmntent(fp);
+		endmntent(fl);
+		
+		rename(LOCKED, MOUNTED);
+		
+		return 0;
+	}
+	
+	return -1;
+}
+
+
+#define MNTPATHLEN   1024
+#define MNTFHSIZE      32
+
+typedef struct fhandle
+{
+	char data[MNTFHSIZE];
+} fhandle;
+
+
+# include <netinet/in.h>
+# include <netdb.h>
+# include <rpc/clnt.h>
+# include <mintbind.h>
+
+static int readonly = 0;
+
+/* nfs specific option values */
+static long rsize = 0;
+static long wsize = 0;
+static long timeo = 0;
+static long retrans = 0;
+static long actimeo = 0;
+
+static int soft = 0;
+static int intr = 0;
+static int secure = 0;
+static int noac = 0;
+static int nosuid = 0;
+
+# define OPT_DEFAULT	0x0000
+
+# define OPT_RO		0x0001
+# define OPT_GRPID	0x0002
+
+# define OPT_SOFT	0x0010
+# define OPT_NOSUID	0x0020
+# define OPT_INTR	0x0040
+# define OPT_SECURE	0x0080
+# define OPT_NOAC	0x0100
+# define OPT_NOCTO	0x0200
+# define OPT_POSIX	0x0400
+
+# define NFS_MOUNT	(('N' << 8) | 1)
+# define NFS_UNMOUNT	(('N' << 8) | 2)
+
+# define NFS_MOUNT_VERS	1
+
+
+/* structure for getxattr */
+struct xattr
+{
+	ushort	mode;
+	long	index;
+	ushort	dev;
+	ushort	rdev;		/* "real" device */
+	ushort	nlink;
+	ushort	uid;
+	ushort	gid;
+	long	size;
+	long	blksize;
+	long	nblocks;
+	ushort	mtime, mdate;
+	ushort	atime, adate;
+	ushort	ctime, cdate;
+	short	attr;
+	short	reserved2;
+	long	reserved3[2];
+};
+
+struct nfs_mount_info
+{
+	long		version;
+	fhandle		handle;  /* initial file handle from the server's mountd */
+	struct xattr	mntattr; /* not used yet */
+	long		flags;
+	long		rsize;
+	long		wsize;
+
+	short		retrans;
+	long		timeo;
+	long		actimeo;
+	long		reserved[8];
+
+	struct sockaddr_in server;
+	char hostname[256];
+};
+
+
+static long
+do_nfs_mount (const void *rootFh, struct sockaddr_in *addr,
+	      const char *hostname, const char *localdir)
+{
+	struct nfs_mount_info info;
+	char mountname[MNTPATHLEN+1];
+	long r;
+	
+	
+	unx2dos(localdir, mountname);
+	
+	memset(&info, 0, sizeof(info));
+	
+	info.version = NFS_MOUNT_VERS;
+	
+	memcpy(info.handle.data, rootFh, 32);
+	
+	info.flags = OPT_DEFAULT;
+	
+	if (readonly)	info.flags |= OPT_RO;
+	if (nosuid)	info.flags |= OPT_NOSUID;
+	if (noac)	info.flags |= OPT_NOAC;
+	if (soft)	info.flags |= OPT_SOFT;
+	if (intr)	info.flags |= OPT_INTR;
+	if (secure)	info.flags |= OPT_SECURE;
+	
+	info.rsize = rsize;
+	info.wsize = wsize;
+	
+	info.retrans = retrans;
+	info.timeo = timeo * CLOCKS_PER_SEC/10;
+	info.actimeo = actimeo * CLOCKS_PER_SEC/10;
+	
+	info.server = *addr;
+	info.server.sin_family = AF_INET;
+		
+	strncpy(info.hostname, hostname, sizeof(info.hostname) - 1);
+	info.hostname[sizeof(info.hostname)-1] = '\0';
+	
+	r = Dcntl(NFS_MOUNT, mountname, &info);
+	if (r != 0)
+	{
+		debprintf("mount request to kernel failed (%li)", r);
+		
+		__set_errno(-r);
+		return -1;
+	}
+	
+	return 0;
+}
+
+long
+do_nfs_unmount (const char *local)
+{
+	char mountname[MNTPATHLEN+1];
+	long r;
+	
+	
+	unx2dos(local, mountname);
+	
+	/* do unmount on the local kernel */
+	r = Dcntl(NFS_UNMOUNT, mountname, 0);
+	if (r != 0)
+	{
+		debprintf("unmount request to kernel failed (%li)", r);
+		
+		__set_errno(-r);
+		return -1;
+	}
+	
+	return 0;
+}
+
+int
+syscall_mount(char *dir, void *root_fh, int sock_fd,
+	      struct sockaddr_in *socket, char *mntfrom)
+{
+	int r;
+	
+	rsize = 8192;
+	wsize = 8192;
+	timeo = NFS_TIMEOUT_SECONDS * 10;
+	retrans = 0;
+	
+	r = do_nfs_mount(root_fh, socket, "shlight", dir);
+	if (r != 0)
+		return -1;
+	
+	debprintf("mounted %s on %s, type %s", mntfrom, dir, "nfs");
+	
+	/* update the mount table file accordingly */
+	return update_mtab (UPDATE_MOUNT, mntfrom, dir, "nfs", NULL, 0, 0);
+}
+
+int syscall_unmount(char *dir)
+{
+	FILE *fp;
+	struct mntent *mnt;
+	int which;
+	
+	fp = setmntent(MOUNTED, "r");
+	if (!fp)
+	{
+		debprintf("cannot open mount table " MOUNTED);
+		return -1;
+	}
+	
+	which = 0;
+	while ((mnt = getmntent(fp)) != NULL)
+	{
+		if (!strcmp(mnt->mnt_dir, dir))
+		{
+			which = 2;
+			break;
+		}
+		if (!strcmp(mnt->mnt_fsname, dir))
+		{
+			which = 1;
+			break;
+		}
+	}
+	
+	endmntent(fp);
+	
+	if (mnt)
+	{
+		int r = do_nfs_unmount(mnt->mnt_dir);
+		if (r != 0)
+			return -1;
+		
+		debprintf("unmounted %s on %s, type %s", mnt->mnt_fsname, dir, "nfs");
+	}
+	
+	/* update the mount table file */
+	return update_mtab(UPDATE_UNMOUNT, NULL, dir, NULL, NULL, 0, 0);
+}
+
+int
+syscall_insert_mtab(char *mountpoint, char *fsname)
+{
+	return 0;
+}
+
+int
+syscall_delete_mtab(char *mountpoint)
+{
+	return 0;
+}
+
+#endif	/* defined __MINT__ */
+/* ------------------------------------------------------------------------- */
