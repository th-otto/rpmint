diff -u --new-file --recursive v1.3-2/sysklogd-1.3/ANNOUNCE ./sysklogd-1.3/ANNOUNCE
--- v1.3-2/sysklogd-1.3/ANNOUNCE	Tue Feb 27 16:19:26 1996
+++ ./sysklogd-1.3/ANNOUNCE	Thu Aug 29 08:44:55 1996
@@ -1,6 +1,6 @@
-On behalf of Martin Schulze, the beta-testers and other members of the
-Linux INTERNET community who have helped shape and debug this package
-I am pleased to announce version 1.3 of the sysklogd package.
+On behalf of the beta-testers and other members of the Linux INTERNET
+community who have helped shape and debug this package I am pleased to
+announce version 1.3-pl3 of the sysklogd package.
 
 This package implements two system log daemons. The syslogd daemon is
 an enhanced version of the standard Berkeley utility program. This
@@ -26,6 +26,9 @@
 	* klogd supports on-the-fly kernel address to symbol
 	translations. This requires that a valid kernel symbol map be
 	found at execution.
+
+	* klogd also supports debugging of protection faults which occur
+	in kernel loadable modules.
 
 	* syslogd has better handling of remote logging capabilities.
 
diff -u --new-file --recursive v1.3-2/sysklogd-1.3/MANIFEST ./sysklogd-1.3/MANIFEST
--- v1.3-2/sysklogd-1.3/MANIFEST	Fri Aug 30 11:19:11 1996
+++ ./sysklogd-1.3/MANIFEST	Thu Aug 29 10:02:33 1996
@@ -56,3 +56,7 @@
 
 oops_test.c:	A small driver program used in conjunction with the oops
 		module to generate a kernel protection fault.
+
+modules.patch:	A patch to the modules-2.0.0 package which provides for
+		automatic signalling of klogd whenever the kernel module
+		state changes.
diff -u --new-file --recursive v1.3-2/sysklogd-1.3/NEWS ./sysklogd-1.3/NEWS
--- v1.3-2/sysklogd-1.3/NEWS	Fri Aug 30 11:19:10 1996
+++ ./sysklogd-1.3/NEWS	Fri Aug 30 11:13:28 1996
@@ -1,3 +1,42 @@
+Version 1.3 Patch Level 3
+
+General. ------------------------------------------------------------------
+Update to documentation including klogd.8 manpage to reflect new features.
+
+Included patch for modules-2.0.0 package to provide support for signalling
+klogd of changes in kernel module status.
+
+klogd ---------------------------------------------------------------------
+Provided support for signalling klogd to reload static and kernel module
+symbol information via SIGUSR1 and SIGUSR2.
+
+Implemented -p switch to cause a reload of kernel module symbol information
+whenever a protection fault is detected.
+
+Informative message is printed whenever klogd state change occurs.
+
+Added -i and -I switches to signal the currently executing klogd daemon
+to reload symbold information.
+
+
+Version 1.3 Patch Level 2
+
+General. ------------------------------------------------------------------
+Added oops.c and oops_test.c.  Oops.c implements a kernel loadable module
+which will generate a general protection fault.  The oops_test.c program
+generates a test program for exercising the loadable module.
+
+syslogd ------------------------------------------------------------------
+Fixed bug resulting in file descriptors being orphaned when syslogd was
+initialized via signal handler.
+
+klogd ---------------------------------------------------------------------
+Bug fix to prevent errors when reading symbol tables with 64 bit addresses.
+
+Added support for debugging of protection faults occuring in kernel
+loadable modules.
+
+
 Version 1.3 Patch Level 1
 
 General. ------------------------------------------------------------------
@@ -9,7 +48,6 @@
 
 Spelling and grammar corrections in the man pages.
 
-
 syslogd ------------------------------------------------------------------
 Patch to fix parsing of hostnames in syslogd.c.
 
@@ -18,7 +56,6 @@
 
 Bounds error fixed when setting the file descriptors for UNIX domain
 sockets.
-
 
 klogd ---------------------------------------------------------------------
 Error checking and reporting enhanced.  I have a couple of reports
diff -u --new-file --recursive v1.3-2/sysklogd-1.3/Sysklogd-1.3.lsm ./sysklogd-1.3/Sysklogd-1.3.lsm
--- v1.3-2/sysklogd-1.3/Sysklogd-1.3.lsm	Tue Feb 27 16:22:57 1996
+++ ./sysklogd-1.3/Sysklogd-1.3.lsm	Fri Aug 30 10:52:39 1996
@@ -12,6 +12,8 @@
 		routes them to either output files or to syslogd.  This
 		version of klogd will optionally translate kernel addresses
 		to their symbolic equivalents if provided with a system map.
+		The klogd daemon also provides support for debugging of
+		protection faults which occur in kernel loadable modules.
 Keywords:       logging, remote, kernel, syslogd, proc, daemon, klogd
 Author:         greg@wind.rmcc.com (Dr. G.W. Wettstein)
 Maintained-by:  greg@wind.rmcc.com (Dr. G.W. Wettstein)
diff -u --new-file --recursive v1.3-2/sysklogd-1.3/klogd.8 ./sysklogd-1.3/klogd.8
--- v1.3-2/sysklogd-1.3/klogd.8	Fri Dec 15 15:06:26 1995
+++ ./sysklogd-1.3/klogd.8	Fri Aug 30 11:00:56 1996
@@ -2,6 +2,7 @@
 .\" May be distributed under the GNU General Public License
 .\" Sun Jul 30 01:35:55 MET: Martin Schulze: Updates
 .\" Sun Nov 19 23:22:21 MET: Martin Schulze: Updates
+.\" Mon Aug 19 09:42:08 CDT 1996: Dr. G.W. Wettstein: Updates
 .\"
 .TH KLOGD 8 "24 November 1995" "Version 1.3" "Linux System Administration"
 .SH NAME
@@ -16,8 +17,10 @@
 .RB [ " \-f "
 .I fname
 ]
+.RB [ " \-iI " ]
 .RB [ " \-n " ]
 .RB [ " \-o " ]
+.RB [ " \-p " ]
 .RB [ " \-s " ]
 .RB [ " \-k "
 .I fname
@@ -41,6 +44,12 @@
 .BI "\-f " file
 Log messages to the specified filename rather than to the syslog facility.
 .TP
+.BI "\-i \-I"
+Signal the currently executing klogd daemon.  Both of these switches control
+the loading/reloading of symbol information.  The \-i switch signals the
+daemon to reload the kernel module symbols.  The \-I switch signals for a
+reload of both the static kernel symbols and the kernel module symbols.
+.TP
 .B "\-n"
 Avoid auto-backgrounding. This is needed especially if the
 .B klogd
@@ -52,6 +61,12 @@
 all the messages that are found in the kernel message buffers.  After
 a single read and log cycle the daemon exits.
 .TP
+.B "-p"
+Enable paranoia.  This option controls when klogd loads kernel module symbol
+information.  Setting this switch causes klogd to load the kernel module
+symbol information whenever an Oops string is detected in the kernel message
+stream.
+.TP
 .B "-s"
 Force \fBklogd\fP to use the system call interface to the kernel message
 buffers.
@@ -72,15 +87,15 @@
 
 In Linux there are two potential sources of kernel log information: the 
 .I /proc
-filesystem and the syscall (sys_syslog) interface, although
+file system and the syscall (sys_syslog) interface, although
 ultimately they are one and the same.  Klogd is designed to choose
 whichever source of information is the most appropriate.  It does this
 by first checking for the presence of a mounted 
 .I /proc
-filesystem. If this is found the 
+file system. If this is found the 
 .I /proc/kmsg
 file is used as the source of kernel log
-information. If the proc filesystem is not mounted 
+information. If the proc file system is not mounted 
 .B klogd
 uses a
 system call to obtain kernel messages.  The command line switch
@@ -163,10 +178,43 @@
 .fi
 .PP
 .SH KERNEL ADDRESS RESOLUTION
+If the kernel detects an internal error condition a general protection
+fault will be triggered.  As part of the GPF handling procedure the
+kernel prints out a status report indicating the state of the
+processor at the time of the fault.  Included in this display are the
+contents of the microprocessor's registers, the contents of the kernel
+stack and a tracing of what functions were being executed at the time
+of the fault.
+
+This information is
+.B EXTREMELY IMPORTANT
+in determining what caused the internal error condition.  The
+difficulty comes when a kernel developer attempts to analyze this
+information.  The raw numeric information present in the protection
+fault printout is of very little use to the developers.  This is due
+to the fact that kernels are not identical and the addresses of
+variable locations or functions will not be the same in all kernels.
+In order to correctly diagnose the cause of failure a kernel developer
+needs to know what specific kernel functions or variable locations
+were involved in the error.
+
+As part of the kernel compilation process a listing is created which
+specified the address locations of important variables and function in
+the kernel being compiled.  This listing is saved in a file called
+System.map in the top of the kernel directory source tree.  Using this
+listing a kernel developer can determine exactly what the kernel was
+doing when the error condition occurred.
+
+The process of resolving the numeric addresses from the protection
+fault printout can be done manually or by using the
+.B ksymoops
+program which is included in the kernel sources.
+
+As a convenience
 .B klogd
 will attempt to resolve kernel numeric addresses to their symbolic
-forms if a kernel symbol table is available at execution time.
-A symbol table may be specified by using the \fB\-k\fR switch on the
+forms if a kernel symbol table is available at execution time.  A
+symbol table may be specified by using the \fB\-k\fR switch on the
 command line.  If a symbol file is not explicitly specified the
 following filenames will be tried:
 
@@ -192,19 +240,101 @@
 so that they will be recognized and translated by klogd.  Earlier
 kernels require a source code patch be applied to the kernel sources.
 This patch is supplied with the sysklogd sources.
+
+The process of analyzing kernel protections faults works very well
+with a static kernel.  Additional difficulties are encountered when
+attempting to diagnose errors which occur in loadable kernel modules.
+Loadable kernel modules are used to implement kernel functionality in
+a form which can be loaded or unloaded at will.  The use of loadable
+modules is useful from a debugging standpoint and can also be useful
+in decreasing the amount of memory required by a kernel.
+
+The difficulty with diagnosing errors in loadable modules is due to
+the dynamic nature of the kernel modules.  When a module is loaded the
+kernel will allocate memory to hold the module, when the module is
+unloaded this memory will be returned back to the kernel.  This
+dynamic memory allocation makes it impossible to produce a map file
+which details the addresses of the variable and functions in a kernel
+loadable module.  Without this location map it is not possible for a
+kernel developer to determine what went wrong if a protection fault
+involves a kernel module.
+
+.B klogd
+has support for dealing with the problem of diagnosing protection
+faults in kernel loadable modules.  At program start time or in
+response to a signal the daemon will interrogate the kernel for a
+listing of all modules loaded and the addresses in memory they are
+loaded at.  Individual modules can also register the locations of
+important functions when the module is loaded.  The addresses of these
+exported symbols are also determined during this interrogation
+process.
+
+When a protection fault occurs an attempt will be made to resolve
+kernel addresses from the static symbol table.  If this fails the
+symbols from the currently loaded modules are examined in an attempt
+to resolve the addresses.  At the very minimum this allows klogd to
+indicate which loadable module was responsible for generating the
+protection fault.  Additional information may be available if the
+module developer chose to export symbol information from the module.
+
+Proper and accurate resolution of addresses in kernel modules requires
+that
+.B klogd
+be informed whenever the kernel module status changes.  The
+.B \-i
+and
+.B \-I
+switches can be used to signal the currently executing daemon that
+symbol information be reloaded.  Of most importance to proper
+resolution of module symbols is the
+.B \-i
+switch.  Each time a kernel module is loaded or removed from the
+kernel the following command should be executed:
+
+.nf
+.I klogd \-i
+.fi
+
+The
+.B \-p
+switch can also be used to insure that module symbol information is up
+to date.  This switch instructs
+.B klogd
+to reload the module symbol information whenever a protection fault
+is detected.  Caution should be used before invoking the program in
+\'paranoid\' mode.  The stability of the kernel and the operating
+environment is always under question when a protection fault occurs.
+Since the klogd daemon must execute system calls in order to read the
+module symbol information there is the possibility that the system may
+be too unstable to capture useful information.  A much better policy
+is to insure that klogd is updated whenever a module is loaded or
+unloaded.  Having uptodate symbol information loaded increases the
+probability of properly resolving a protection fault if it should occur.
+
+Included in the sysklogd source distribution is a patch to the
+modules-2.0.0 package which allows the
+.B insmod,
+.B rmmod
+and
+.B modprobe
+utilities to automatically signal
+.B klogd
+whenever a module is inserted or removed from the kernel.  Using this
+patch will insure that the symbol information maintained in klogd is
+always consistent with the current kernel state.
 .PP
 .SH SIGNAL HANDLING
 The 
 .B klogd
-will respond to six signals:
-.BR SIGHUP ", " SIGINT ", " SIGKILL ", " SIGTERM ", " SIGTSTP " and " SIGCONT ". The"
+will respond to eight signals:
+.BR SIGHUP ", " SIGINT ", " SIGKILL ", " SIGTERM ", " SIGTSTP ", " SIGUSR1 ", "SIGUSR2 " and " SIGCONT ". The"
 .BR SIGINT ", " SIGKILL ", " SIGTERM " and " SIGHUP
 signals will cause the daemon to close its kernel log sources and
 terminate gracefully.
 
 The 
 .BR SIGTSTP " and " SIGCONT
-singals are used to start and stop kernel logging. Upon receipt of a 
+signals are used to start and stop kernel logging. Upon receipt of a 
 .B SIGTSTP
 signal the daemon will close its
 log sources and spin in an idle loop.  Subsequent receipt of a 
@@ -229,6 +359,26 @@
 .B LOG_INFO
 priority
 documenting the start/stop of logging.
+
+The 
+.BR SIGUSR1 " and " SIGUSR2
+signals are used to initiate loading/reloading of kernel symbol information.
+Receipt of the
+.B SIGUSR1
+signal will cause the kernel module symbols to be reloaded.  Signaling the
+daemon with
+.B SIGUSR2
+will cause both the static kernel symbols and the kernel module symbols to
+be reloaded.
+
+Provided that the System.map file is placed in an appropriate location the
+signal of generally greatest usefulness is the
+.B SIGUSR1
+signal.  This signal is designed to be used to signal the daemon when kernel
+modules are loaded/unloaded.  Sending this signal to the daemon after a
+kernel module state change will insure that proper resolution of symbols will
+occur if a protection fault occurs in the address space occupied by a kernel
+module.
 .LP
 .SH FILES
 .PD 0
@@ -241,7 +391,7 @@
 The file containing the process id of 
 .B klogd
 .TP
-.I /System.map, /usr/src/linux/System.map
+.I /boot/System.map, /System.map, /usr/src/linux/System.map
 Default locations for kernel system maps.
 .PD
 .SH BUGS
diff -u --new-file --recursive v1.3-2/sysklogd-1.3/klogd.c ./sysklogd-1.3/klogd.c
--- v1.3-2/sysklogd-1.3/klogd.c	Fri Aug 30 11:19:11 1996
+++ ./sysklogd-1.3/klogd.c	Wed Aug 21 09:15:17 1996
@@ -141,6 +141,18 @@
  *	termination cleanup sequence.  This minimizes the potential for
  *	conflicting pidfiles causing immediate termination at boot time.
  *	
+ * Wed Aug 21 09:13:03 CDT 1996:  Dr. Wettstein
+ *	Added ability to reload static symbols and kernel module symbols
+ *      under control of SIGUSR1 and SIGUSR2 signals.
+ *
+ *	Added -p switch to select 'paranoid' behavior with respect to the
+ *	loading of kernel module symbols.
+ *
+ *	Informative line now printed whenever a state change occurs due
+ *	to signal reception by the daemon.
+ *
+ *	Added the -i and -I command line switches to signal the currently
+ *	executing daemon.
  */
 
 
@@ -177,13 +189,15 @@
 		change_state = 0,
 		terminate = 0,
 		caught_TSTP = 0,
+		reload_symbols = 0,
 		console_log_level = 6;
 
 static int	use_syscall = 0,
 		one_shot = 0,
 		NoFork = 0;	/* don't fork - don't run in daemon mode */
 
-static char log_buffer[LOG_BUFFER_SIZE];
+static char	*symfile = (char *) 0,
+		log_buffer[LOG_BUFFER_SIZE];
 
 static FILE *output_file = (FILE *) 0;
 
@@ -198,7 +212,10 @@
 extern void restart(int sig);
 extern void stop_logging(int sig);
 extern void stop_daemon(int sig);
+extern void reload_daemon(int sig);
 static void Terminate(void);
+static void SignalDaemon(int);
+static void ReloadSymbols(void);
 static void ChangeLogging(void);
 static enum LOGSRC GetKernelLogSrc(void);
 static void LogLine(char *ptr, int len);
@@ -269,6 +286,27 @@
 }
 
 
+void reload_daemon(sig)
+
+     int sig;
+
+{
+	change_state = 1;
+	reload_symbols = 1;
+
+
+	if ( sig == SIGUSR2 )
+	{
+		++reload_symbols;
+		signal(SIGUSR2, reload_daemon);
+	}
+	else
+		signal(SIGUSR1, reload_daemon);
+		
+	return;
+}
+
+
 static void Terminate()
 
 {
@@ -282,7 +320,29 @@
 	exit(1);
 }
 
-	
+static void SignalDaemon(sig)
+
+     int sig;
+
+{
+	auto int pid = check_pid(PidFile);
+
+	kill(pid, sig);
+	return;
+}
+
+
+static void ReloadSymbols()
+
+{
+	if ( reload_symbols > 1 )
+		InitKsyms(symfile);
+	InitMsyms();
+	reload_symbols = change_state = 0;
+	return;
+}
+
+
 static void ChangeLogging(void)
 
 {
@@ -290,6 +350,17 @@
 	if ( terminate == 1 )
 		Terminate();
 
+	/* Indicate that something is happening. */
+	Syslog(LOG_INFO, "klogd %s-%s, ---------- state change ----------\n", \
+	       VERSION, PATCHLEVEL);
+
+	/* Reload symbols. */
+	if ( reload_symbols > 0 )
+	{
+		ReloadSymbols();
+		return;
+	}
+
 	/* Stop kernel logging. */
 	if ( caught_TSTP == 1 )
 	{
@@ -566,14 +637,14 @@
 	char *argv[];
 
 {
-	auto int ch, use_output = 0;
+	auto int	ch,
+			use_output = 0;
 
-	auto char	*symfile = (char *) 0,
-			*log_level = (char *) 0,
+	auto char	*log_level = (char *) 0,
 			*output = (char *) 0;
 
 	/* Parse the command-line. */
-	while ((ch = getopt(argc, argv, "c:df:k:nosv")) != EOF)
+	while ((ch = getopt(argc, argv, "c:df:iIk:nopsv")) != EOF)
 		switch((char)ch)
 		{
 		    case 'c':		/* Set console message level. */
@@ -586,6 +657,12 @@
 			output = optarg;
 			use_output++;
 			break;
+		    case 'i':		/* Reload module symbols. */
+			SignalDaemon(SIGUSR1);
+			return(0);
+		    case 'I':
+			SignalDaemon(SIGUSR2);
+			return(0);
 		    case 'k':		/* Kernel symbol file. */
 			symfile = optarg;
 			break;
@@ -595,6 +672,9 @@
 		    case 'o':		/* One-shot mode. */
 			one_shot = 1;
 			break;
+		    case 'p':
+			SetParanoiaLevel(1);	/* Load symbols on oops. */
+			break;	
 		    case 's':		/* Use syscall interface. */
 			use_syscall = 1;
 			break;
@@ -682,6 +762,8 @@
 	signal(SIGHUP, stop_daemon);
 	signal(SIGTSTP, stop_logging);
 	signal(SIGCONT, restart);
+	signal(SIGUSR1, reload_daemon);
+	signal(SIGUSR2, reload_daemon);
 
 
 	/* Open outputs. */
@@ -704,6 +786,7 @@
 	if ( one_shot )
 	{
 		InitKsyms(symfile);
+		InitMsyms();
 		if ( (logsrc = GetKernelLogSrc()) == kernel )
 			LogKernelLine();
 		else
@@ -717,6 +800,7 @@
 #endif
 	logsrc = GetKernelLogSrc();
 	InitKsyms(symfile);
+	InitMsyms();
 
         /* The main loop. */
 	while (1)
diff -u --new-file --recursive v1.3-2/sysklogd-1.3/klogd.h ./sysklogd-1.3/klogd.h
--- v1.3-2/sysklogd-1.3/klogd.h	Fri Aug 30 11:19:11 1996
+++ ./sysklogd-1.3/klogd.h	Tue Jul 30 10:57:17 1996
@@ -15,4 +15,5 @@
 extern int InitKsyms(char *);
 extern int InitMsyms(void);
 extern char * ExpandKadds(char *, char *);
+extern void SetParanoiaLevel(int);
 extern void Syslog(int priority, char *fmt, ...);
diff -u --new-file --recursive v1.3-2/sysklogd-1.3/ksym.c ./sysklogd-1.3/ksym.c
--- v1.3-2/sysklogd-1.3/ksym.c	Fri Aug 30 11:19:12 1996
+++ ./sysklogd-1.3/ksym.c	Wed Aug 21 09:19:14 1996
@@ -62,6 +62,16 @@
  *	Added patch from beta-testers to allow for reading of both
  *	ELF and a.out map files.
  *
+ * Wed Aug 21 09:15:49 CDT 1996:  Dr. Wettstein
+ *	Reloading of kernel module symbols is now turned on by the
+ *	SetParanoiaLevel function.  The default behavior is to NOT reload
+ *	the kernel module symbols when a protection fault is detected.
+ *
+ *	Added support for freeing of the current kernel module symbols.
+ *	This was necessary to support reloading of the kernel module symbols.
+ *
+ *	When a matching static symbol table is loaded the kernel version
+ *	number is printed.
  */
 
 
@@ -83,6 +93,8 @@
 };
 
 static int num_syms = 0;
+static int i_am_paranoid = 0;
+static char vstring[12];
 static struct sym_table *sym_array = (struct sym_table *) 0;
 
 static char *system_maps[] =
@@ -108,6 +120,7 @@
 static char * FindSymbolFile(void);
 static int AddSymbol(unsigned long, char*);
 static char * LookupSymbol(unsigned long, struct symbol *);
+static void FreeSymbols(void);
 static int CheckVersion(char *);
 
 
@@ -144,6 +157,11 @@
 	auto FILE *sym_file;
 
 
+	/* Check and make sure that we are starting with a clean slate. */
+	if ( num_syms > 0 )
+		FreeSymbols();
+
+
 	/*
 	 * Search for and open the file containing the kernel symbols.
 	 */
@@ -222,7 +240,7 @@
 		break;
 		
 	    case 1:
-		Syslog(LOG_INFO, "Symbols match kernel version.");
+		Syslog(LOG_INFO, "Symbols match kernel version %s.", vstring);
 		break;
 	}
 		
@@ -397,8 +415,6 @@
 	
 
 {
-	auto char vstring[6];
-
 	auto int	vnum,
 			major,
 			minor,
@@ -423,16 +439,15 @@
 	 * things out by decoding the version string into its component
 	 * parts.
 	 */
-	memset(vstring, '\0', sizeof(vstring));
-	strncpy(vstring, version + strlen(prefix), sizeof(vstring)-1);
-	vnum = atoi(vstring);
+	vnum = atoi(version + strlen(prefix));
 	major = vnum / 65536;
 	vnum -= (major * 65536);
 	minor = vnum / 256;
 	patch = vnum - (minor * 256);
 	if ( debugging )
 		fprintf(stderr, "Version string = %s, Major = %d, " \
-		       "Minor = %d, Patch = %d.\n", vstring, major, minor, \
+		       "Minor = %d, Patch = %d.\n", version +
+		       strlen(prefix), major, minor, \
 		       patch);
 	sprintf(vstring, "%d.%d.%d", major, minor, patch);
 
@@ -558,6 +573,37 @@
 
 
 /**************************************************************************
+ * Function:	FreeSymbols
+ *
+ * Purpose:	This function is responsible for freeing all memory which
+ *		has been allocated to hold the static symbol table.  It
+ *		also initializes the symbol count and in general prepares
+ *		for a re-read of a static symbol table.
+ *
+ * Arguements:  void
+ *
+ * Return:	void
+ **************************************************************************/
+
+static void FreeSymbols()
+
+{
+	auto int lp;
+
+	/* Free each piece of memory allocated for symbol names. */
+	for(lp= 0; lp < num_syms; ++lp)
+		free(sym_array[lp].name);
+
+	/* Whack the entire array and initialize everything. */
+	free(sym_array);
+	sym_array = (struct sym_table *) 0;
+	num_syms = 0;
+
+	return;
+}
+
+
+/**************************************************************************
  * Function:	LogExpanded
  *
  * Purpose:	This function is responsible for logging a kernel message
@@ -610,7 +656,8 @@
 	 * kernel whenever a module is loaded or unloaded.  I am
 	 * open for patches.
 	 */
-	if ( (strstr(line, "Oops:") != (char *) 0) && !InitMsyms() )
+	if ( i_am_paranoid &&
+	     (strstr(line, "Oops:") != (char *) 0) && !InitMsyms() )
 		Syslog(LOG_WARNING, "Cannot load kernel module symbols.\n");
 	
 
@@ -670,6 +717,30 @@
 	if ( debugging )
 		fprintf(stderr, "Expanded line: %s\n", el);
 	return(el);
+}
+
+
+/**************************************************************************
+ * Function:	SetParanoiaLevel
+ *
+ * Purpose:	This function is an interface function for setting the
+ *		mode of loadable module symbol lookups.  Probably overkill
+ *		but it does slay another global variable.
+ *
+ * Arguements:	(int) level
+ *
+ *		level:->	The amount of paranoia which is to be
+ *				present when resolving kernel exceptions.
+ * Return:	void
+ **************************************************************************/
+
+extern void SetParanoiaLevel(level)
+
+	int level;
+
+{
+	i_am_paranoid = level;
+	return;
 }
 
 
diff -u --new-file --recursive v1.3-2/sysklogd-1.3/ksym_mod.c ./sysklogd-1.3/ksym_mod.c
--- v1.3-2/sysklogd-1.3/ksym_mod.c	Fri Aug 30 11:19:12 1996
+++ ./sysklogd-1.3/ksym_mod.c	Fri Aug 23 11:45:27 1996
@@ -37,6 +37,15 @@
  * possible.
  *
  * At least that is the plan.
+ *
+ * Wed Aug 21 09:20:09 CDT 1996:  Dr. Wettstein
+ *	The situation where no module support has been compiled into a
+ *	kernel is now detected.  An informative message is output indicating
+ *	that the kernel has no loadable module support whenever kernel
+ *	module symbols are loaded.
+ *
+ *	An informative message is printed indicating the number of kernel
+ *	modules and the number of symbols loaded from these modules.
  */
 
 
@@ -65,7 +74,7 @@
  */
 #define __LIBRARY__
 #include <linux/unistd.h>
-# define __NR_getsyms __NR_get_kernel_syms
+#define __NR_getsyms __NR_get_kernel_syms
 _syscall1(int, getsyms, struct kernel_sym *, syms);
 #undef __LIBRARY__
 extern int getsyms(struct kernel_sym *);
@@ -87,7 +96,7 @@
 	struct module module;
 };
 
-static int num_modules;
+static int num_modules = 0;
 struct Module *sym_array_modules = (struct Module *) 0;
 
 static int have_modules = 0;
@@ -132,9 +141,8 @@
 				*p;
 
 
-	/* Init the symbol table if one exists. */
-	if ( num_modules > 0 )
-		FreeModules();
+	/* Initialize the kernel module symbol table. */
+	FreeModules();
 
 
 	/*
@@ -153,7 +161,16 @@
 	 *
 	 * Bummer.
 	 */
-	rtn = getsyms((struct kernel_sym *) 0);
+	if ( (rtn = getsyms((struct kernel_sym *) 0)) < 0 )
+	{
+		if ( errno == ENOSYS )
+			Syslog(LOG_INFO, "No module symbols loaded - "
+			       "kernel modules not enabled.\n");
+		else
+			Syslog(LOG_ERR, "Error loading kernel symbols " \
+			       "- %s\n", strerror(errno));
+		return(0);
+	}
 	if ( debugging )
 		fprintf(stderr, "Loading kernel module symbols - "
 			"Size of table: %d\n", rtn);
@@ -162,12 +179,16 @@
 						  sizeof(struct kernel_sym));
 	if ( ksym_table == (struct kernel_sym *) 0 )
 	{
-		Syslog(LOG_WARNING, " Failed memory allocation for kernel "
+		Syslog(LOG_WARNING, " Failed memory allocation for kernel " \
 		       "symbol table.\n");
 		return(0);
 	}
-	if ( (rtn = getsyms(ksym_table)) == 0 )
-		Syslog(LOG_WARNING, "Kernel symbol read returned 0\n");
+	if ( (rtn = getsyms(ksym_table)) < 0 )
+	{
+		Syslog(LOG_WARNING, "Error reading kernel symbols - %s\n", \
+		       strerror(errno));
+		return(0);
+	}
 
 
 	/*
@@ -189,8 +210,9 @@
 	}
 
 	/* Sort the symbol tables in each module. */
-	for (tmp= 0; tmp < num_modules; ++tmp)
+	for (rtn = tmp= 0; tmp < num_modules; ++tmp)
 	{
+		rtn += sym_array_modules[tmp].num_syms;
 		if ( sym_array_modules[tmp].num_syms < 2 )
 			continue;
 		qsort(sym_array_modules[tmp].sym_array, \
@@ -198,6 +220,12 @@
 		      sizeof(struct sym_table), symsort);
 	}
 
+	if ( rtn == 0 )
+		Syslog(LOG_INFO, "No module symbols loaded.");
+	else
+		Syslog(LOG_INFO, "Loaded %d %s from %d module%s", rtn, \
+		       (rtn == 1) ? "symbol" : "symbols", \
+		       num_modules, (num_modules == 1) ? "." : "s.");
 	free(ksym_table);
 	return(1);
 }
@@ -241,7 +269,13 @@
 	auto struct Module *mp;
 
 
-	for (nmods= 0; nmods <num_modules; ++nmods)
+	/* Check to see if the module symbol tables need to be cleared. */
+	have_modules = 0;
+	if ( num_modules == 0 )
+		return;
+
+
+	for (nmods= 0; nmods < num_modules; ++nmods)
 	{
 		mp = &sym_array_modules[nmods];
 		if ( mp->num_syms == 0 )
@@ -254,7 +288,7 @@
 
 	free(sym_array_modules);
 	sym_array_modules = (struct Module *) 0;
-	have_modules = num_modules = 0;
+	num_modules = 0;
 	return;
 }
 
@@ -296,6 +330,7 @@
 	 */
 	if ( symbol[0] == '#' )
 	{
+
 		if ( symbol[1] == '\0' )
 		{
 			/*
@@ -307,7 +342,6 @@
 			have_modules = 1;
 			return(1);
 		}
-
 		/* Allocate space for the module. */
 		sym_array_modules = (struct Module *) \
 			realloc(sym_array_modules, \
@@ -584,4 +618,19 @@
 	FreeModules();
 	return(0);
 }
+
+extern void Syslog(int priority, char *fmt, ...)
+
+{
+	va_list ap;
+
+	va_start(ap, fmt);
+	fprintf(stdout, "Pr: %d, ", priority);
+	vfprintf(stdout, fmt, ap);
+	va_end(ap);
+	fputc('\n', stdout);
+
+	return;
+}
+
 #endif
diff -u --new-file --recursive v1.3-2/sysklogd-1.3/modutils.patch ./sysklogd-1.3/modutils.patch
--- v1.3-2/sysklogd-1.3/modutils.patch	Wed Dec 31 18:00:00 1969
+++ ./sysklogd-1.3/modutils.patch	Thu Aug 29 10:00:32 1996
@@ -0,0 +1,65 @@
+diff -u --new-file --recursive base/modules-2.0.0/depmod/modprobe.c ./modules-2.0.0/depmod/modprobe.c
+--- base/modules-2.0.0/depmod/modprobe.c	Mon Jun 10 05:29:08 1996
++++ ./modules-2.0.0/depmod/modprobe.c	Thu Aug 29 09:58:01 1996
+@@ -233,6 +233,13 @@
+ 	verbose ("\r\t%s\n\t\t",cmd);
+ 	int ret = system(cmd);
+ #endif
++	if ( fork() == 0 )
++	{
++		/* Child process. */
++		if ( execlp("klogd", "klogd", "-i", (char *) 0)  < 0 )
++			fprintf(stderr, "Failure in signaling klogd.\n");
++		exit(0);
++	}
+ 	return ret;
+ }
+ /*
+diff -u --new-file --recursive base/modules-2.0.0/insmod/insmod.c ./modules-2.0.0/insmod/insmod.c
+--- base/modules-2.0.0/insmod/insmod.c	Mon Jun 10 06:42:25 1996
++++ ./modules-2.0.0/insmod/insmod.c	Thu Aug 29 09:56:53 1996
+@@ -253,6 +253,18 @@
+ 	++n_stringpatches;
+ }
+ 
++
++void signal_klogd() {
++	if ( fork() == 0 )
++	{
++		if ( execlp("klogd", "klogd", "-i", (char *) 0)  < 0 )
++			fprintf(stderr, "Failure in signaling klogd.\n");
++		exit(0);
++	}
++	return;
++}
++
++
+ int main(int argc, char **argv)
+ {
+ 	FILE *fp;
+@@ -983,6 +995,8 @@
+ 			symvalue(sp) + addr, symtype, symname(sp));
+ 	}
+ 
++	signal_klogd();
++
+ 	if (nksyms > 0)
+ 		free(ksymtab); /* it has done its job */
+ 
+@@ -1292,6 +1306,7 @@
+ 			--argc;
+ 			++argv;
+ 		}
++		signal_klogd();
+ 		return errors;
+ 	}
+ 	/* else recursive removal */
+@@ -1353,6 +1368,8 @@
+ 			break;
+ 		}
+ 	}
++
++	signal_klogd();
+ 
+ 	return errors;
+ }
diff -u --new-file --recursive v1.3-2/sysklogd-1.3/version.h ./sysklogd-1.3/version.h
--- v1.3-2/sysklogd-1.3/version.h	Fri Aug 30 11:19:13 1996
+++ ./sysklogd-1.3/version.h	Fri Jul 12 13:03:12 1996
@@ -1,2 +1,2 @@
 #define VERSION "1.3"
-#define PATCHLEVEL "2"
+#define PATCHLEVEL "3"
